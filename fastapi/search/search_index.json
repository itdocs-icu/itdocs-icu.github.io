{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FastAPI \u901f\u5ea6\u5feb\u3001\u4e0a\u624b\u5feb\u3001\u5f00\u53d1\u5feb\uff0c\u751f\u4ea7\u73af\u5883\u53ef\u7528 \u6587\u6863 \uff1a https://fastapi.tiangolo.com \u6e90\u7801 \uff1a https://github.com/tiangolo/fastapi FastAPI \u57fa\u4e8e Python 3.7+ \u53ca Python \u6807\u51c6\u7c7b\u578b\u63d0\u793a\uff0c\u662f\u5feb\u901f\u6784\u5efa\u9ad8\u6027\u80fd API \u7684\u73b0\u4ee3 Web \u6846\u67b6\u3002 \u6838\u5fc3\u7279\u6027\uff1a \u901f\u5ea6\u5feb \uff1a\u5f52\u529f\u4e8e Starlette \u548c Pydantic\uff0cFastAPI \u5177\u6709\u53ef\u4e0e NodeJS \u548c Go \u6bd4\u80a9\u7684\u6781\u9ad8\u6027\u80fd\uff0c\u662f \u6700\u5feb\u7684 Python \u7f51\u7edc\u6846\u67b6\u4e4b\u4e00 \u3002 \u5f00\u53d1\u5feb \uff1a\u5f00\u53d1\u901f\u5ea6\u63d0\u9ad8\u7ea6 200\uff05 \u81f3 300\uff05*\u3002 Bug \u5c11 \uff1a\u4eba\u4e3a\u9519\u8bef\u51cf\u5c11\u7ea6 40\uff05*\u3002 \u667a\u80fd \uff1a\u5f3a\u5927\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5904\u5904\u7686\u53ef \u81ea\u52a8\u8865\u5168 \uff0c\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4\u3002 \u7b80\u5355 \uff1a\u6613\u5b66\u3001\u6613\u7528\uff0c\u9605\u8bfb\u6587\u6863\u6240\u9700\u65f6\u95f4\u66f4\u77ed\u3002 \u7b80\u77ed \uff1a\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u53c2\u6570\u58f0\u660e\u5b9e\u73b0\u4e30\u5bcc\u529f\u80fd\uff0cBug \u66f4\u5c11\u3002 \u5065\u58ee \uff1a\u751f\u4ea7\u7ea7\u522b\u7684\u4ee3\u7801\uff0c\u8fd8\u6709\u81ea\u52a8\u4ea4\u4e92\u6587\u6863\u3002 \u6807\u51c6 \uff1a\u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e API \u5f00\u653e\u6807\u51c6\uff1a OpenAPI \uff08\u66fe\u7528\u540d\u4e3a Swagger\uff09\u548c JSON Schema \u3002 * \u6839\u636e\u5bf9\u67d0\u7ebf\u4e0a\u5e94\u7528\u5185\u90e8\u5f00\u53d1\u56e2\u961f\u7684\u6d4b\u8bd5\u4f30\u7b97\u5f97\u51fa\u3002 \u8d5e\u52a9\u5546 \u00b6 \u5176\u4ed6\u8d5e\u52a9\u5546 \u8bc4\u4ef7 \u00b6 \u300c [...] \u6700\u8fd1\u6211\u4e00\u76f4\u5728\u7528 FastAPI \u3002[...] \u5b9e\u9645\u4e0a\uff0c\u6211\u6253\u7b97\u7528 FastAPI \u5b9e\u73b0 \u5fae\u8f6f \u56e2\u961f\u7684\u6240\u6709 \u673a\u5668\u5b66\u4e60\u670d\u52a1 \u3002\u76ee\u524d\uff0c\u6211\u4eec\u6b63\u628a\u4e00\u4e9b\u670d\u52a1\u96c6\u6210\u81f3 Windows \u548c Office \u7b49\u6838\u5fc3\u4ea7\u54c1\u3002 \u300d Kabir Khan - \u5fae\u8f6f (ref) \u300c \u6211\u4eec\u7528 FastAPI \u521b\u5efa\u83b7\u53d6 \u9884\u6d4b\u7ed3\u679c \u7684 REST \u670d\u52a1\u3002[\u7528\u4e8e Ludwig] \u300d Piero Molino\uff0cYaroslav Dudin \u548c Sai Sumanth Miryala - Uber (ref) \u300c Netflix \u5f88\u8363\u5e78\u5730\u5ba3\u5e03\uff0c\u6b63\u5f0f\u5f00\u6e90 \u5371\u673a\u7ba1\u7406 \u7f16\u6392\u6846\u67b6\uff1a Dispatch \uff01[\u4f7f\u7528 FastAPI \u6784\u5efa] \u300d Kevin Glisson\uff0cMarc Vilanova\uff0cForest Monsen - Netflix (ref) \u300c FastAPI \u8ba9\u6211\u6b23\u559c\u82e5\u72c2\u3002\u5b83\u592a\u68d2\u4e86\uff01 \u300d Brian Okken - Python Bytes \u64ad\u5ba2\u4e3b\u6301\u4eba (ref) \u300c \u8001\u5b9e\u8bf4\uff0c\u60a8\u7684\u4f5c\u54c1\u770b\u8d77\u6765\u975e\u5e38\u53ef\u9760\u548c\u4f18\u7f8e\u3002\u8fd9\u5c31\u662f\u6211\u5fc3\u76ee\u4e2d\u7684 Hug - \u770b\u5230\u6709\u4eba\u5b9e\u73b0\u4e86\uff0c\u771f\u7684\u5f88\u9f13\u821e\u4eba\u5fc3\u3002 \u300d Timothy Crosley - Hug \u4f5c\u8005 (ref) \u300c \u5982\u679c\u60a8\u60f3\u5b66\u4e60\u5f00\u53d1 REST API \u7684 \u73b0\u4ee3 Web \u6846\u67b6 \uff0c\u770b\u4e0b FastAPI \u5427 [...] \u5b83\u6613\u5b66\u3001\u6613\u7528\u3001\u901f\u5ea6\u5feb [...] \u300d \u300c \u6211\u4eec\u5df2\u7ecf\u5c06 API \u670d\u52a1\u5207\u6362\u5230\u4e86 FastAPI [...] \u6211\u89c9\u5f97\u60a8\u4e5f\u4f1a\u559c\u6b22 [...] \u300d Ines Montani - Matthew Honnibal - Explosion AI \u521b\u59cb\u4eba - spaCy \u4f5c\u8005 (ref) - (ref) Typer \uff0c\u547d\u4ee4\u884c\u4e2d\u7684 FastAPI \u00b6 \u5982\u679c\u60a8\u5f00\u53d1\u7684\u4e0d\u662f Web API\uff0c\u800c\u662f\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u7684 \u547d\u4ee4\u884c \u5e94\u7528\uff0c\u4e0d\u59a8\u8bd5\u4e0b Typer \u3002 Typer \u662f FastAPI \u7684\u5c0f\u5144\u5f1f\uff0c\u7acb\u5fd7\u8981\u6210\u4e3a \u547d\u4ee4\u884c\u4e2d\u7684 FastAPI \u3002 \u2328\ufe0f \ud83d\ude80 \u4f9d\u8d56\u652f\u6301 \u00b6 Python 3.7+ FastAPI \u7ad9\u5728\u4ee5\u4e0b\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff1a Starlette \u8d1f\u8d23\u63d0\u4f9b\u7f51\u7edc\u529f\u80fd\u3002 Pydantic \u8d1f\u8d23\u63d0\u4f9b\u6570\u636e\u529f\u80fd\u3002 \u5b89\u88c5 \u00b6 $ pip install fastapi ---> 100% FastAPI \u8fd8\u9700\u8981 ASGI \u670d\u52a1\u5668\uff0c\u751f\u4ea7\u73af\u5883\u4e0b\u53ef\u4ee5\u4f7f\u7528 Uvicorn \u6216 Hypercorn \u3002 $ pip install uvicorn [ standard ] ---> 100% \u793a\u4f8b \u00b6 \u521b\u5efa\u5e94\u7528 \u00b6 \u521b\u5efa main.py \uff0c\u5199\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u6216\u8005\u4f7f\u7528 async def ... \u5982\u679c\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 async / await \uff0c\u8bf7\u4f7f\u7528 async def \uff1a from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u7b14\u8bb0 \uff1a \u5982\u679c\u4e0d\u6e05\u695a\u662f\u5426\u5e94\u8be5\u4f7f\u7528\u5f02\u6b65\uff0c\u8bf7\u53c2\u9605\u6587\u6863 \u7b49\u4e0d\u53ca\u4e86\uff1f \u4e2d \u5bf9 async \u548c await \u7684\u4ecb\u7ecd \u3002 \u8fd0\u884c \u00b6 \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. \u5173\u4e8e uvicorn main:app --reload \u547d\u4ee4...... uvicorn main:app \u547d\u4ee4\u542b\u4e49\u5982\u4e0b\uff1a main \uff1a main.py \uff08 Python \u6a21\u5757 \uff09\u3002 app \uff1a main.py \u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u4ee3\u7801\u66f4\u65b0\u540e\uff0c\u91cd\u542f\u670d\u52a1\u5668\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee http://127.0.0.1:8000/items/5?q=somequery \u3002 \u8fd4\u56de\u5982\u4e0b JSON \u54cd\u5e94\uff1a { \"item_id\" : 5 , \"q\" : \"somequery\" } \u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u521b\u5efa\u4e86\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\u7684 API\uff1a \u901a\u8fc7 \u8def\u5f84 / \u548c /items/{item_id} \u63a5\u6536 HTTP \u8bf7\u6c42\u3002 \u8fd9\u4e24\u4e2a \u8def\u5f84 \u90fd\u80fd\u63a5\u6536 GET \u64cd\u4f5c\uff08\u4e5f\u53eb\u4f5c HTTP \u65b9\u6cd5\uff09\u3002 /items/{item_id} \u8def\u5f84 \u5305\u542b\u7c7b\u578b\u4e3a int \u7684 \u8def\u5f84\u53c2\u6570 item_id \u3002 /items/{item_id} \u8def\u5f84 \u8fd8\u5305\u542b\u53ef\u9009\u7684\uff0c\u7c7b\u578b\u4e3a str \u7684 \u67e5\u8be2\u53c2\u6570 q \u3002 API \u4ea4\u4e92\u6587\u6863 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u67e5\u770b\u7531 Swagger UI \u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863\uff1a \u5907\u7528 API \u6587\u6863 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u67e5\u770b\u7531 ReDoc \u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863\uff1a \u66f4\u65b0\u793a\u4f8b \u00b6 \u4fee\u6539 main.py \uff0c\u4ece PUT \u8bf7\u6c42\u4e2d\u63a5\u6536\u8bf7\u6c42\u4f53\u3002 \u501f\u52a9 Pydantic \u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u58f0\u660e\u8bf7\u6c42\u4f53\u3002 from typing import Optional from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Optional [ bool ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } \uff08\u56e0\u4e3a\u4e4b\u524d\u4e3a uvicorn \u547d\u4ee4\u6dfb\u52a0\u4e86 --reload \u9009\u9879\uff09\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u91cd\u8f7d\u3002 \u66f4\u65b0 API \u6587\u6863 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u81ea\u52a8\u66f4\u65b0 API \u6587\u6863\uff0c\u5305\u62ec\u65b0\u7684\u8bf7\u6c42\u4f53\uff1a \u70b9\u51fb\u300c Try it out \u300d\u6309\u94ae\uff0c\u586b\u5199\u53c2\u6570\uff0c\u76f4\u63a5\u8c03\u7528 API\uff1a \u7136\u540e\uff0c\u70b9\u51fb\u300c Execute \u300d\u6309\u94ae\uff0c\u7528\u6237\u754c\u9762\u548c API \u901a\u4fe1\uff0c\u53d1\u9001\u53c2\u6570\uff0c\u83b7\u53d6\u7ed3\u679c\uff0c\u5e76\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\uff1a \u66f4\u65b0\u5907\u7528\u6587\u6863 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u5907\u9009\u6587\u6863\u4e5f\u4f1a\u663e\u793a\u65b0\u52a0\u5165\u7684\u8bf7\u6c42\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff1a \u5c0f\u7ed3 \u00b6 \u603b\u7684\u6765\u8bf4\uff0c\u548c\u58f0\u660e\u51fd\u6570\u7684\u53c2\u6570\u4e00\u6837\uff0c\u53ea\u9700\u58f0\u660e \u4e00\u6b21 \u53c2\u6570\u7c7b\u578b\u548c\u8bf7\u6c42\u4f53\u3002 \u5728\u6b64\uff0c\u4f7f\u7528\u4e86\u73b0\u4ee3 Python \u7684\u6807\u51c6\u7c7b\u578b\u8fdb\u884c\u58f0\u660e\u3002 \u5f00\u53d1\u8005\u4e0d\u7528\u5b66\u4e60\u65b0\u8bed\u6cd5\uff0c\u4e5f\u4e0d\u7528\u4e86\u89e3\u7279\u5b9a\u5e93\u7684\u65b9\u6cd5\u6216\u7c7b\u3002 \u53ea\u8981\u4f7f\u7528\u6807\u51c6\u7684 Python 3.7+ \u3002 \u4f8b\u5982\uff0c\u58f0\u660e int \uff1a item_id : int \u6216\u4f7f\u7528\u66f4\u590d\u6742\u7684 Item \u6a21\u578b\uff1a item : Item ......\u53ea\u9700\u4e00\u6b21\u58f0\u660e\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u4ee5\u4e0b\u597d\u5904\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\uff1a \u81ea\u52a8\u8865\u5168\u3002 \u7c7b\u578b\u68c0\u67e5\u3002 \u6570\u636e\u6821\u9a8c\uff1a \u6821\u9a8c\u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u751f\u6210\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u5bf9\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u4f9d\u7136\u6267\u884c\u6821\u9a8c\u3002 \u8f6c\u6362 \u8f93\u5165\u6570\u636e\uff1a\u8f6c\u6362\u4e3a Python \u6570\u636e\u4e0e\u7c7b\u578b\u3002\u53ef\u4ece\u4ee5\u4e0b\u5bf9\u8c61\u4e2d\u8bfb\u53d6\uff1a JSON \u8def\u5f84\u53c2\u6570 \u67e5\u8be2\u53c2\u6570 Cookie \u8bf7\u6c42\u5934 \u8868\u5355 \u6587\u4ef6 \u8f6c\u6362 \u8f93\u51fa\u6570\u636e\uff1a\u628a Python \u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u4f9b\u7f51\u7edc\u4f20\u8f93\u7684\uff08 JSON \uff09\u6570\u636e\uff1a Python \u57fa\u7840\u7c7b\u578b \uff08 str \u3001 int \u3001 float \u3001 bool \u3001 list \u7b49\uff09 datetime \u5bf9\u8c61 UUID \u5bf9\u8c61 \u6570\u636e\u5e93\u6a21\u578b ......\u53ca\u66f4\u591a\u5176\u4ed6\u7c7b\u578b \u81ea\u52a8\u751f\u6210 API \u4ea4\u4e92\u6587\u6863\uff0c\u5305\u62ec\u4e24\u79cd\u7528\u6237\u754c\u9762\uff1a Swagger UI ReDoc \u56de\u987e\u672c\u7ae0\u7684\u4ee3\u7801\u793a\u4f8b\uff0c FastAPI \u53ef\u4ee5\uff1a \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u7684\u8def\u5f84\u4e2d\u662f\u5426\u542b\u6709 item_id \uff1b \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u4e2d\u7684 item_id \u662f\u5426\u4e3a int \u7c7b\u578b \u5982\u679c\u4e0d\u662f int \u7c7b\u578b\uff0c\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u4fe1\u606f \u68c0\u67e5 GET \u8bf7\u6c42\u4e2d\u662f\u5426\u5305\u542b\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \uff08\u6bd4\u5982 http://127.0.0.1:8000/items/foo?q=somequery \uff09 q \u58f0\u660e\u4e3a = None \uff0c\u6240\u4ee5\u662f\u53ef\u9009\u7684 \u6ca1\u6709 None \uff0c q \u5c31\u662f\u5fc5\u9009\u7684\uff08\u5982 PUT \u4f8b\u5b50\u4e2d\u7684\u8bf7\u6c42\u4f53\uff09 \u5bf9\u4e8e\u8bbf\u95ee /items/{item_id} \u7684 PUT \u8bf7\u6c42\uff0c\u628a\u8bf7\u6c42\u4f53\u8bfb\u53d6\u4e3a JSON\uff0c\u5e76\u4e14\uff1a \u68c0\u67e5\u662f\u5426\u5305\u542b\u5fc5\u9009\u5c5e\u6027 name \uff0c\u5e76\u4e14\u503c\u7684\u7c7b\u578b\u4e3a str \u68c0\u67e5\u662f\u5426\u5305\u542b\u5fc5\u9009\u5c5e\u6027 price \uff0c\u5e76\u4e14\u503c\u7684\u7c7b\u578b\u4e3a float \u68c0\u67e5\u662f\u5426\u5305\u542b\u53ef\u9009\u5c5e\u6027 is_offer \uff0c \u5982\u679c\u5305\u542b\uff0c\u503c\u7684\u7c7b\u578b\u5e94\u4e3a bool \u4ee5\u4e0a\u8fc7\u7a0b\u4e5f\u9002\u7528\u4e8e\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61 \u81ea\u52a8\u8f6c\u6362 JSON \u901a\u8fc7 OpenAPI \u6587\u6863\u5b58\u6863\u6240\u6709\u5185\u5bb9\uff0c\u53ef\u88ab\u7528\u4e8e\uff1a API \u6587\u6863 \u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u7cfb\u7edf \u76f4\u63a5\u63d0\u4f9b\u4e24\u79cd API \u6587\u6863 \u867d\u7136\u672c\u7bc7\u7684\u4ecb\u7ecd\u6bd4\u8f83\u6d45\uff0c\u4f46\u6db5\u76d6\u4e86 FastAPI \u7684\u6240\u6709\u5de5\u4f5c\u539f\u7406\u3002 \u8bd5\u7740\u628a\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a return { \"item_name\" : item . name , \"item_id\" : item_id } ......\u4ece\uff1a ... \"item_name\" : item . name ... ......\u6539\u4e3a\uff1a ... \"item_price\" : item . price ... ......\u6ce8\u610f\uff0c\u7f16\u8f91\u5668\u53ef\u4ee5\u81ea\u52a8\u8865\u5168\u5c5e\u6027\uff0c\u8fd8\u80fd\u8bc6\u522b\u5c5e\u6027\u7684\u7c7b\u578b\uff1a \u7528\u6237\u6307\u5357 \u4e2d\u4ecb\u7ecd\u4e86\u5305\u542b\u66f4\u591a\u529f\u80fd\u7684\u5b8c\u6574\u793a\u4f8b\u3002 \u5267\u900f\u8b66\u544a \uff1a \u7528\u6237\u6307\u5357\u4e2d\u7684\u5185\u5bb9\u6709\uff1a \u58f0\u660e\u5404\u79cd\u6765\u6e90\u7684\u53c2\u6570\uff0c\u5982\uff1a \u8bf7\u6c42\u5934 \u3001 cookies \u3001 form \u8868\u5355 \u53ca \u4e0a\u4f20\u6587\u4ef6 \u8bbe\u7f6e \u6821\u9a8c\u7ea6\u675f \uff0c\u5982 maximum_length \u6216 regex \u5f3a\u5927\u3001\u4f46\u6613\u7528\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf \u5b89\u5168\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u652f\u6301 OAuth2 \u3001 JWT Token \u3001 HTTP \u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1 \u7b49\u65b9\u5f0f \uff08\u501f\u52a9 Pydantic\uff09\u4f7f\u7528\u66f4\u9ad8\u7ea7\uff0c\u4f46\u540c\u6837\u7b80\u5355\u7684\u6280\u672f\u58f0\u660e \u6df1\u5ea6\u5d4c\u5957 JSON \u6a21\u578b \uff08\u501f\u52a9 Starlette\uff09\u5b9e\u73b0\u4ee5\u4e0b\u66f4\u591a\u529f\u80fd\uff1a WebSockets GraphQL \u57fa\u4e8e requests \u548c pytest \u7684\u7b80\u5355\u6d4b\u8bd5 CORS \uff0c\u8de8\u57df\u8d44\u6e90\u5171\u4eab Cookie Sessions ......\u4ee5\u53ca\u66f4\u591a \u6027\u80fd \u00b6 \u72ec\u7acb\u673a\u6784 TechEmpower \u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u663e\u793a\uff0c\u57fa\u4e8e Uvicorn \u8fd0\u884c\u7684 FastAPI \u662f \u6700\u5feb\u7684 Python \u7f51\u7edc\u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e8e\uff08FastAPI \u5185\u90e8\u4f7f\u7528\u7684\uff09 Starlette \u548c Uvicorn\u3002(*) \u8be6\u89c1 \u57fa\u51c6\u6d4b\u8bd5 \u4e00\u7ae0\u3002 \u53ef\u9009\u4f9d\u8d56\u652f\u6301\u5e93 \u00b6 \u7528\u4e8e Pydantic\uff1a ujson - \u66f4\u5feb\u7684 JSON \u89e3\u6790 email_validator - \u7528\u4e8e email \u6821\u9a8c \u7528\u4e8e Starlette\uff1a requests - \u4f7f\u7528 TestClient \u65f6\u5b89\u88c5 aiofiles - \u4f7f\u7528 FileResponse \u6216 StaticFiles \u65f6\u5b89\u88c5 jinja2 - \u4f7f\u7528\u9ed8\u8ba4\u6a21\u677f\u914d\u7f6e\u65f6\u5b89\u88c5 python-multipart - \u901a\u8fc7 request.form() \u89e3\u6790 \u8868\u5355\u65f6\u5b89\u88c5 itsdangerous - \u9700\u8981 SessionMiddleware \u652f\u6301\u65f6\u5b89\u88c5 pyyaml - \u4f7f\u7528 Starlette \u7684 SchemaGenerator \u65f6\u5b89\u88c5\uff08FastAPI \u53ef\u80fd\u4e0d\u9700\u8981\u6b64\u652f\u6301\u5e93\uff09 graphene - \u9700\u8981 GraphQLApp \u652f\u6301\u65f6\u5b89\u88c5 ujson - \u4f7f\u7528 UJSONResponse \u65f6\u5b89\u88c5 \u7528\u4e8e FastAPI / Starlette\uff1a uvicorn - \u7528\u4e8e\u52a0\u8f7d\u548c\u8fd0\u884c\u5e94\u7528\u7684\u670d\u52a1\u5668 orjson - \u4f7f\u7528 ORJSONResponse \u65f6\u5b89\u88c5 \u4f7f\u7528 pip install fastapi[all] \u53ef\u5b89\u88c5\u4e0a\u8ff0\u6240\u6709\u4f9d\u8d56\u652f\u6301\u5e93\u3002 \u8bb8\u53ef\u534f\u8bae \u00b6 \u672c\u9879\u76ee\u9075\u5faa MIT \u8bb8\u53ef\u534f\u8bae\u3002","title":"FastAPI"},{"location":"#_1","text":"\u5176\u4ed6\u8d5e\u52a9\u5546","title":"\u8d5e\u52a9\u5546"},{"location":"#_2","text":"\u300c [...] \u6700\u8fd1\u6211\u4e00\u76f4\u5728\u7528 FastAPI \u3002[...] \u5b9e\u9645\u4e0a\uff0c\u6211\u6253\u7b97\u7528 FastAPI \u5b9e\u73b0 \u5fae\u8f6f \u56e2\u961f\u7684\u6240\u6709 \u673a\u5668\u5b66\u4e60\u670d\u52a1 \u3002\u76ee\u524d\uff0c\u6211\u4eec\u6b63\u628a\u4e00\u4e9b\u670d\u52a1\u96c6\u6210\u81f3 Windows \u548c Office \u7b49\u6838\u5fc3\u4ea7\u54c1\u3002 \u300d Kabir Khan - \u5fae\u8f6f (ref) \u300c \u6211\u4eec\u7528 FastAPI \u521b\u5efa\u83b7\u53d6 \u9884\u6d4b\u7ed3\u679c \u7684 REST \u670d\u52a1\u3002[\u7528\u4e8e Ludwig] \u300d Piero Molino\uff0cYaroslav Dudin \u548c Sai Sumanth Miryala - Uber (ref) \u300c Netflix \u5f88\u8363\u5e78\u5730\u5ba3\u5e03\uff0c\u6b63\u5f0f\u5f00\u6e90 \u5371\u673a\u7ba1\u7406 \u7f16\u6392\u6846\u67b6\uff1a Dispatch \uff01[\u4f7f\u7528 FastAPI \u6784\u5efa] \u300d Kevin Glisson\uff0cMarc Vilanova\uff0cForest Monsen - Netflix (ref) \u300c FastAPI \u8ba9\u6211\u6b23\u559c\u82e5\u72c2\u3002\u5b83\u592a\u68d2\u4e86\uff01 \u300d Brian Okken - Python Bytes \u64ad\u5ba2\u4e3b\u6301\u4eba (ref) \u300c \u8001\u5b9e\u8bf4\uff0c\u60a8\u7684\u4f5c\u54c1\u770b\u8d77\u6765\u975e\u5e38\u53ef\u9760\u548c\u4f18\u7f8e\u3002\u8fd9\u5c31\u662f\u6211\u5fc3\u76ee\u4e2d\u7684 Hug - \u770b\u5230\u6709\u4eba\u5b9e\u73b0\u4e86\uff0c\u771f\u7684\u5f88\u9f13\u821e\u4eba\u5fc3\u3002 \u300d Timothy Crosley - Hug \u4f5c\u8005 (ref) \u300c \u5982\u679c\u60a8\u60f3\u5b66\u4e60\u5f00\u53d1 REST API \u7684 \u73b0\u4ee3 Web \u6846\u67b6 \uff0c\u770b\u4e0b FastAPI \u5427 [...] \u5b83\u6613\u5b66\u3001\u6613\u7528\u3001\u901f\u5ea6\u5feb [...] \u300d \u300c \u6211\u4eec\u5df2\u7ecf\u5c06 API \u670d\u52a1\u5207\u6362\u5230\u4e86 FastAPI [...] \u6211\u89c9\u5f97\u60a8\u4e5f\u4f1a\u559c\u6b22 [...] \u300d Ines Montani - Matthew Honnibal - Explosion AI \u521b\u59cb\u4eba - spaCy \u4f5c\u8005 (ref) - (ref)","title":"\u8bc4\u4ef7"},{"location":"#typer-fastapi","text":"\u5982\u679c\u60a8\u5f00\u53d1\u7684\u4e0d\u662f Web API\uff0c\u800c\u662f\u5728\u7ec8\u7aef\u4e2d\u8fd0\u884c\u7684 \u547d\u4ee4\u884c \u5e94\u7528\uff0c\u4e0d\u59a8\u8bd5\u4e0b Typer \u3002 Typer \u662f FastAPI \u7684\u5c0f\u5144\u5f1f\uff0c\u7acb\u5fd7\u8981\u6210\u4e3a \u547d\u4ee4\u884c\u4e2d\u7684 FastAPI \u3002 \u2328\ufe0f \ud83d\ude80","title":"Typer\uff0c\u547d\u4ee4\u884c\u4e2d\u7684 FastAPI"},{"location":"#_3","text":"Python 3.7+ FastAPI \u7ad9\u5728\u4ee5\u4e0b\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff1a Starlette \u8d1f\u8d23\u63d0\u4f9b\u7f51\u7edc\u529f\u80fd\u3002 Pydantic \u8d1f\u8d23\u63d0\u4f9b\u6570\u636e\u529f\u80fd\u3002","title":"\u4f9d\u8d56\u652f\u6301"},{"location":"#_4","text":"$ pip install fastapi ---> 100% FastAPI \u8fd8\u9700\u8981 ASGI \u670d\u52a1\u5668\uff0c\u751f\u4ea7\u73af\u5883\u4e0b\u53ef\u4ee5\u4f7f\u7528 Uvicorn \u6216 Hypercorn \u3002 $ pip install uvicorn [ standard ] ---> 100%","title":"\u5b89\u88c5"},{"location":"#_5","text":"","title":"\u793a\u4f8b"},{"location":"#_6","text":"\u521b\u5efa main.py \uff0c\u5199\u5165\u4ee5\u4e0b\u4ee3\u7801\uff1a from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u6216\u8005\u4f7f\u7528 async def ... \u5982\u679c\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 async / await \uff0c\u8bf7\u4f7f\u7528 async def \uff1a from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u7b14\u8bb0 \uff1a \u5982\u679c\u4e0d\u6e05\u695a\u662f\u5426\u5e94\u8be5\u4f7f\u7528\u5f02\u6b65\uff0c\u8bf7\u53c2\u9605\u6587\u6863 \u7b49\u4e0d\u53ca\u4e86\uff1f \u4e2d \u5bf9 async \u548c await \u7684\u4ecb\u7ecd \u3002","title":"\u521b\u5efa\u5e94\u7528"},{"location":"#_7","text":"\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) INFO: Started reloader process [28720] INFO: Started server process [28722] INFO: Waiting for application startup. INFO: Application startup complete. \u5173\u4e8e uvicorn main:app --reload \u547d\u4ee4...... uvicorn main:app \u547d\u4ee4\u542b\u4e49\u5982\u4e0b\uff1a main \uff1a main.py \uff08 Python \u6a21\u5757 \uff09\u3002 app \uff1a main.py \u4e2d\u901a\u8fc7 app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u4ee3\u7801\u66f4\u65b0\u540e\uff0c\u91cd\u542f\u670d\u52a1\u5668\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u3002","title":"\u8fd0\u884c"},{"location":"#_8","text":"\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee http://127.0.0.1:8000/items/5?q=somequery \u3002 \u8fd4\u56de\u5982\u4e0b JSON \u54cd\u5e94\uff1a { \"item_id\" : 5 , \"q\" : \"somequery\" } \u81f3\u6b64\uff0c\u6211\u4eec\u5c31\u521b\u5efa\u4e86\u5177\u6709\u4ee5\u4e0b\u529f\u80fd\u7684 API\uff1a \u901a\u8fc7 \u8def\u5f84 / \u548c /items/{item_id} \u63a5\u6536 HTTP \u8bf7\u6c42\u3002 \u8fd9\u4e24\u4e2a \u8def\u5f84 \u90fd\u80fd\u63a5\u6536 GET \u64cd\u4f5c\uff08\u4e5f\u53eb\u4f5c HTTP \u65b9\u6cd5\uff09\u3002 /items/{item_id} \u8def\u5f84 \u5305\u542b\u7c7b\u578b\u4e3a int \u7684 \u8def\u5f84\u53c2\u6570 item_id \u3002 /items/{item_id} \u8def\u5f84 \u8fd8\u5305\u542b\u53ef\u9009\u7684\uff0c\u7c7b\u578b\u4e3a str \u7684 \u67e5\u8be2\u53c2\u6570 q \u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"#api","text":"\u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u67e5\u770b\u7531 Swagger UI \u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863\uff1a","title":"API \u4ea4\u4e92\u6587\u6863"},{"location":"#api_1","text":"\u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u67e5\u770b\u7531 ReDoc \u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863\uff1a","title":"\u5907\u7528 API \u6587\u6863"},{"location":"#_9","text":"\u4fee\u6539 main.py \uff0c\u4ece PUT \u8bf7\u6c42\u4e2d\u63a5\u6536\u8bf7\u6c42\u4f53\u3002 \u501f\u52a9 Pydantic \u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u58f0\u660e\u8bf7\u6c42\u4f53\u3002 from typing import Optional from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float is_offer : Optional [ bool ] = None @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } @app . put ( \"/items/ {item_id} \" ) def update_item ( item_id : int , item : Item ): return { \"item_name\" : item . name , \"item_id\" : item_id } \uff08\u56e0\u4e3a\u4e4b\u524d\u4e3a uvicorn \u547d\u4ee4\u6dfb\u52a0\u4e86 --reload \u9009\u9879\uff09\uff0c\u670d\u52a1\u5668\u4f1a\u81ea\u52a8\u91cd\u8f7d\u3002","title":"\u66f4\u65b0\u793a\u4f8b"},{"location":"#api_2","text":"\u8bbf\u95ee http://127.0.0.1:8000/docs \u3002 \u81ea\u52a8\u66f4\u65b0 API \u6587\u6863\uff0c\u5305\u62ec\u65b0\u7684\u8bf7\u6c42\u4f53\uff1a \u70b9\u51fb\u300c Try it out \u300d\u6309\u94ae\uff0c\u586b\u5199\u53c2\u6570\uff0c\u76f4\u63a5\u8c03\u7528 API\uff1a \u7136\u540e\uff0c\u70b9\u51fb\u300c Execute \u300d\u6309\u94ae\uff0c\u7528\u6237\u754c\u9762\u548c API \u901a\u4fe1\uff0c\u53d1\u9001\u53c2\u6570\uff0c\u83b7\u53d6\u7ed3\u679c\uff0c\u5e76\u5728\u5c4f\u5e55\u4e0a\u663e\u793a\uff1a","title":"\u66f4\u65b0 API \u6587\u6863"},{"location":"#_10","text":"\u8bbf\u95ee http://127.0.0.1:8000/redoc \u3002 \u5907\u9009\u6587\u6863\u4e5f\u4f1a\u663e\u793a\u65b0\u52a0\u5165\u7684\u8bf7\u6c42\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\uff1a","title":"\u66f4\u65b0\u5907\u7528\u6587\u6863"},{"location":"#_11","text":"\u603b\u7684\u6765\u8bf4\uff0c\u548c\u58f0\u660e\u51fd\u6570\u7684\u53c2\u6570\u4e00\u6837\uff0c\u53ea\u9700\u58f0\u660e \u4e00\u6b21 \u53c2\u6570\u7c7b\u578b\u548c\u8bf7\u6c42\u4f53\u3002 \u5728\u6b64\uff0c\u4f7f\u7528\u4e86\u73b0\u4ee3 Python \u7684\u6807\u51c6\u7c7b\u578b\u8fdb\u884c\u58f0\u660e\u3002 \u5f00\u53d1\u8005\u4e0d\u7528\u5b66\u4e60\u65b0\u8bed\u6cd5\uff0c\u4e5f\u4e0d\u7528\u4e86\u89e3\u7279\u5b9a\u5e93\u7684\u65b9\u6cd5\u6216\u7c7b\u3002 \u53ea\u8981\u4f7f\u7528\u6807\u51c6\u7684 Python 3.7+ \u3002 \u4f8b\u5982\uff0c\u58f0\u660e int \uff1a item_id : int \u6216\u4f7f\u7528\u66f4\u590d\u6742\u7684 Item \u6a21\u578b\uff1a item : Item ......\u53ea\u9700\u4e00\u6b21\u58f0\u660e\uff0c\u5c31\u53ef\u4ee5\u83b7\u5f97\u4ee5\u4e0b\u597d\u5904\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff0c\u5305\u62ec\uff1a \u81ea\u52a8\u8865\u5168\u3002 \u7c7b\u578b\u68c0\u67e5\u3002 \u6570\u636e\u6821\u9a8c\uff1a \u6821\u9a8c\u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u751f\u6210\u6e05\u6670\u7684\u9519\u8bef\u4fe1\u606f\u3002 \u5bf9\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61\u4f9d\u7136\u6267\u884c\u6821\u9a8c\u3002 \u8f6c\u6362 \u8f93\u5165\u6570\u636e\uff1a\u8f6c\u6362\u4e3a Python \u6570\u636e\u4e0e\u7c7b\u578b\u3002\u53ef\u4ece\u4ee5\u4e0b\u5bf9\u8c61\u4e2d\u8bfb\u53d6\uff1a JSON \u8def\u5f84\u53c2\u6570 \u67e5\u8be2\u53c2\u6570 Cookie \u8bf7\u6c42\u5934 \u8868\u5355 \u6587\u4ef6 \u8f6c\u6362 \u8f93\u51fa\u6570\u636e\uff1a\u628a Python \u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a\u4f9b\u7f51\u7edc\u4f20\u8f93\u7684\uff08 JSON \uff09\u6570\u636e\uff1a Python \u57fa\u7840\u7c7b\u578b \uff08 str \u3001 int \u3001 float \u3001 bool \u3001 list \u7b49\uff09 datetime \u5bf9\u8c61 UUID \u5bf9\u8c61 \u6570\u636e\u5e93\u6a21\u578b ......\u53ca\u66f4\u591a\u5176\u4ed6\u7c7b\u578b \u81ea\u52a8\u751f\u6210 API \u4ea4\u4e92\u6587\u6863\uff0c\u5305\u62ec\u4e24\u79cd\u7528\u6237\u754c\u9762\uff1a Swagger UI ReDoc \u56de\u987e\u672c\u7ae0\u7684\u4ee3\u7801\u793a\u4f8b\uff0c FastAPI \u53ef\u4ee5\uff1a \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u7684\u8def\u5f84\u4e2d\u662f\u5426\u542b\u6709 item_id \uff1b \u6821\u9a8c GET \u548c PUT \u8bf7\u6c42\u4e2d\u7684 item_id \u662f\u5426\u4e3a int \u7c7b\u578b \u5982\u679c\u4e0d\u662f int \u7c7b\u578b\uff0c\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u4fe1\u606f \u68c0\u67e5 GET \u8bf7\u6c42\u4e2d\u662f\u5426\u5305\u542b\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \uff08\u6bd4\u5982 http://127.0.0.1:8000/items/foo?q=somequery \uff09 q \u58f0\u660e\u4e3a = None \uff0c\u6240\u4ee5\u662f\u53ef\u9009\u7684 \u6ca1\u6709 None \uff0c q \u5c31\u662f\u5fc5\u9009\u7684\uff08\u5982 PUT \u4f8b\u5b50\u4e2d\u7684\u8bf7\u6c42\u4f53\uff09 \u5bf9\u4e8e\u8bbf\u95ee /items/{item_id} \u7684 PUT \u8bf7\u6c42\uff0c\u628a\u8bf7\u6c42\u4f53\u8bfb\u53d6\u4e3a JSON\uff0c\u5e76\u4e14\uff1a \u68c0\u67e5\u662f\u5426\u5305\u542b\u5fc5\u9009\u5c5e\u6027 name \uff0c\u5e76\u4e14\u503c\u7684\u7c7b\u578b\u4e3a str \u68c0\u67e5\u662f\u5426\u5305\u542b\u5fc5\u9009\u5c5e\u6027 price \uff0c\u5e76\u4e14\u503c\u7684\u7c7b\u578b\u4e3a float \u68c0\u67e5\u662f\u5426\u5305\u542b\u53ef\u9009\u5c5e\u6027 is_offer \uff0c \u5982\u679c\u5305\u542b\uff0c\u503c\u7684\u7c7b\u578b\u5e94\u4e3a bool \u4ee5\u4e0a\u8fc7\u7a0b\u4e5f\u9002\u7528\u4e8e\u591a\u5c42\u5d4c\u5957\u7684 JSON \u5bf9\u8c61 \u81ea\u52a8\u8f6c\u6362 JSON \u901a\u8fc7 OpenAPI \u6587\u6863\u5b58\u6863\u6240\u6709\u5185\u5bb9\uff0c\u53ef\u88ab\u7528\u4e8e\uff1a API \u6587\u6863 \u5176\u4ed6\u7f16\u7a0b\u8bed\u8a00\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u81ea\u52a8\u751f\u6210\u7cfb\u7edf \u76f4\u63a5\u63d0\u4f9b\u4e24\u79cd API \u6587\u6863 \u867d\u7136\u672c\u7bc7\u7684\u4ecb\u7ecd\u6bd4\u8f83\u6d45\uff0c\u4f46\u6db5\u76d6\u4e86 FastAPI \u7684\u6240\u6709\u5de5\u4f5c\u539f\u7406\u3002 \u8bd5\u7740\u628a\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\uff1a return { \"item_name\" : item . name , \"item_id\" : item_id } ......\u4ece\uff1a ... \"item_name\" : item . name ... ......\u6539\u4e3a\uff1a ... \"item_price\" : item . price ... ......\u6ce8\u610f\uff0c\u7f16\u8f91\u5668\u53ef\u4ee5\u81ea\u52a8\u8865\u5168\u5c5e\u6027\uff0c\u8fd8\u80fd\u8bc6\u522b\u5c5e\u6027\u7684\u7c7b\u578b\uff1a \u7528\u6237\u6307\u5357 \u4e2d\u4ecb\u7ecd\u4e86\u5305\u542b\u66f4\u591a\u529f\u80fd\u7684\u5b8c\u6574\u793a\u4f8b\u3002 \u5267\u900f\u8b66\u544a \uff1a \u7528\u6237\u6307\u5357\u4e2d\u7684\u5185\u5bb9\u6709\uff1a \u58f0\u660e\u5404\u79cd\u6765\u6e90\u7684\u53c2\u6570\uff0c\u5982\uff1a \u8bf7\u6c42\u5934 \u3001 cookies \u3001 form \u8868\u5355 \u53ca \u4e0a\u4f20\u6587\u4ef6 \u8bbe\u7f6e \u6821\u9a8c\u7ea6\u675f \uff0c\u5982 maximum_length \u6216 regex \u5f3a\u5927\u3001\u4f46\u6613\u7528\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf \u5b89\u5168\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u652f\u6301 OAuth2 \u3001 JWT Token \u3001 HTTP \u57fa\u672c\u8eab\u4efd\u9a8c\u8bc1 \u7b49\u65b9\u5f0f \uff08\u501f\u52a9 Pydantic\uff09\u4f7f\u7528\u66f4\u9ad8\u7ea7\uff0c\u4f46\u540c\u6837\u7b80\u5355\u7684\u6280\u672f\u58f0\u660e \u6df1\u5ea6\u5d4c\u5957 JSON \u6a21\u578b \uff08\u501f\u52a9 Starlette\uff09\u5b9e\u73b0\u4ee5\u4e0b\u66f4\u591a\u529f\u80fd\uff1a WebSockets GraphQL \u57fa\u4e8e requests \u548c pytest \u7684\u7b80\u5355\u6d4b\u8bd5 CORS \uff0c\u8de8\u57df\u8d44\u6e90\u5171\u4eab Cookie Sessions ......\u4ee5\u53ca\u66f4\u591a","title":"\u5c0f\u7ed3"},{"location":"#_12","text":"\u72ec\u7acb\u673a\u6784 TechEmpower \u7684\u57fa\u51c6\u6d4b\u8bd5\u7ed3\u679c\u663e\u793a\uff0c\u57fa\u4e8e Uvicorn \u8fd0\u884c\u7684 FastAPI \u662f \u6700\u5feb\u7684 Python \u7f51\u7edc\u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e8e\uff08FastAPI \u5185\u90e8\u4f7f\u7528\u7684\uff09 Starlette \u548c Uvicorn\u3002(*) \u8be6\u89c1 \u57fa\u51c6\u6d4b\u8bd5 \u4e00\u7ae0\u3002","title":"\u6027\u80fd"},{"location":"#_13","text":"\u7528\u4e8e Pydantic\uff1a ujson - \u66f4\u5feb\u7684 JSON \u89e3\u6790 email_validator - \u7528\u4e8e email \u6821\u9a8c \u7528\u4e8e Starlette\uff1a requests - \u4f7f\u7528 TestClient \u65f6\u5b89\u88c5 aiofiles - \u4f7f\u7528 FileResponse \u6216 StaticFiles \u65f6\u5b89\u88c5 jinja2 - \u4f7f\u7528\u9ed8\u8ba4\u6a21\u677f\u914d\u7f6e\u65f6\u5b89\u88c5 python-multipart - \u901a\u8fc7 request.form() \u89e3\u6790 \u8868\u5355\u65f6\u5b89\u88c5 itsdangerous - \u9700\u8981 SessionMiddleware \u652f\u6301\u65f6\u5b89\u88c5 pyyaml - \u4f7f\u7528 Starlette \u7684 SchemaGenerator \u65f6\u5b89\u88c5\uff08FastAPI \u53ef\u80fd\u4e0d\u9700\u8981\u6b64\u652f\u6301\u5e93\uff09 graphene - \u9700\u8981 GraphQLApp \u652f\u6301\u65f6\u5b89\u88c5 ujson - \u4f7f\u7528 UJSONResponse \u65f6\u5b89\u88c5 \u7528\u4e8e FastAPI / Starlette\uff1a uvicorn - \u7528\u4e8e\u52a0\u8f7d\u548c\u8fd0\u884c\u5e94\u7528\u7684\u670d\u52a1\u5668 orjson - \u4f7f\u7528 ORJSONResponse \u65f6\u5b89\u88c5 \u4f7f\u7528 pip install fastapi[all] \u53ef\u5b89\u88c5\u4e0a\u8ff0\u6240\u6709\u4f9d\u8d56\u652f\u6301\u5e93\u3002","title":"\u53ef\u9009\u4f9d\u8d56\u652f\u6301\u5e93"},{"location":"#_14","text":"\u672c\u9879\u76ee\u9075\u5faa MIT \u8bb8\u53ef\u534f\u8bae\u3002","title":"\u8bb8\u53ef\u534f\u8bae"},{"location":"about/","text":"\u4e2d\u6587\u7248\u8bf4\u660e \u00b6 \u5b98\u7f51\u4e2d\u6587\u5f85\u5ba1\u9605\u7684 PR \u00b6 \u8bd1\u8005 \u00b6 \u5446\u9e1f","title":"\u4e2d\u6587\u7248\u8bf4\u660e"},{"location":"about/#_1","text":"","title":"\u4e2d\u6587\u7248\u8bf4\u660e"},{"location":"about/#pr","text":"","title":"\u5b98\u7f51\u4e2d\u6587\u5f85\u5ba1\u9605\u7684 PR"},{"location":"about/#_2","text":"\u5446\u9e1f","title":"\u8bd1\u8005"},{"location":"alternatives/","text":"\u5907\u9009\u3001\u7075\u611f\u4e0e\u6bd4\u8f83 \u00b6 \u662f\u4ec0\u4e48\u6fc0\u53d1\u4e86 FastAPI \uff0c\u5b83\u4e0e\u5176\u4ed6\u6846\u67b6\u76f8\u6bd4\u6709\u4ec0\u4e48\u5f02\u540c\uff0c FastAPI \u4ece\u5b83\u4eec\u8eab\u4e0a\u5b66\u5230\u4e86\u4e9b\u4ec0\u4e48\u3002 \u7b80\u4ecb \u00b6 \u6ca1\u6709\u524d\u8f88\u7684\u8bf8\u591a\u6770\u4f5c\uff0c\u5c31\u4e0d\u4f1a\u6709 FastAPI \u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u6709\u5f88\u591a\u5de5\u5177\u6fc0\u53d1\u4e86 FastAPI \u7684\u521b\u610f\u3002 \u591a\u5e74\u6765\uff0c\u6211\u4e00\u76f4\u4e0d\u60f3\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6846\u67b6\u3002\u9996\u5148\uff0c\u6211\u5c1d\u8bd5\u4f7f\u7528\u5f88\u591a\u4e0d\u540c\u7684\u6846\u67b6\u3001\u63d2\u4ef6\u548c\u5de5\u5177\u89e3\u51b3 FastAPI \u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002 \u4f46\u5230\u4e86\u4e00\u5b9a\u65f6\u5019\uff0c\u9664\u4e86\u521b\u5efa\u4e2a\u4ec0\u4e48\u4e1c\u897f\uff0c\u63d0\u4f9b\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u6211\u522b\u65e0\u9009\u62e9\u3002\u5438\u53d6\u4e4b\u524d\u7684\u5de5\u5177\u7684\u4f18\u70b9\uff0c\u4f7f\u7528 Python 3.6+ \u63d0\u4f9b\u7684\u7c7b\u578b\u63d0\u793a\u7b49\u524d\u6240\u672a\u6709\u7684\u529f\u80fd\uff0c\u7528\u5c3d\u53ef\u80fd\u6700\u597d\u7684\u65b9\u5f0f\u628a\u6240\u6709\u8fd9\u4e9b\u7ec4\u5408\u5728\u4e00\u8d77\u3002 \u4e4b\u524d\u7684\u5de5\u5177 \u00b6 Django \u00b6 It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram. It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy. It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it. Django REST Framework \u00b6 Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities. It is used by many companies including Mozilla, Red Hat and Eventbrite. It was one of the first examples of automatic API documentation , and this was specifically one of the first ideas that inspired \"the search for\" FastAPI . Note Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which FastAPI is based. Inspired FastAPI to Have an automatic API documentation web user interface. Flask \u00b6 Flask is a \"microframework\", it doesn't include database integrations nor many of the things that come by default in Django. This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system. As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points. It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins. This decoupling of parts, and being a \"microframework\" that could be extended to cover exactly what is needed was a key feature that I wanted to keep. Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a \"Django REST Framework\" for Flask. Inspired FastAPI to Be a micro-framework. Making it easy to mix and match the tools and parts needed. Have a simple and easy to use routing system. Requests \u00b6 FastAPI is not actually an alternative to Requests . Their scope is very different. It would actually be common to use Requests inside of a FastAPI application. But still, FastAPI got quite some inspiration from Requests. Requests is a library to interact with APIs (as a client), while FastAPI is a library to build APIs (as a server). They are, more or less, at opposite ends, complementing each other. Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable. That's why, as said in the official website: Requests is one of the most downloaded Python packages of all time The way you use it is very simple. For example, to do a GET request, you would write: response = requests . get ( \"http://example.com/some/url\" ) The FastAPI counterpart API path operation could look like: @app . get ( \"/some/url\" ) def read_url (): return { \"message\" : \"Hello World\" } See the similarities in requests.get(...) and @app.get(...) . Inspired FastAPI to Have a simple and intuitive API. Use HTTP method names (operations) directly, in a straightforward and intuitive way. Have sensible defaults, but powerful customizations. Swagger / OpenAPI \u00b6 The main feature I wanted from Django REST Framework was the automatic API documentation. Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger. And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically. At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI. That's why when talking about version 2.0 it's common to say \"Swagger\", and for version 3+ \"OpenAPI\". Inspired FastAPI to Adopt and use an open standard for API specifications, instead of a custom schema. And integrate standards-based user interface tools: Swagger UI ReDoc These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of additional alternative user interfaces for OpenAPI (that you can use with FastAPI ). Flask REST frameworks \u00b6 There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit. Marshmallow \u00b6 One of the main features needed by API systems is data \" serialization \" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting datetime objects into strings, etc. Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an int , and not some random string. This is especially useful for incoming data. Without a data validation system, you would have to do all the checks by hand, in code. These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before. But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow. Inspired FastAPI to Use code to define \"schemas\" that provide data types and validation, automatically. Webargs \u00b6 Another big feature required by APIs is parsing data from incoming requests. Webargs is a tool that was made to provide that on top of several frameworks, including Flask. It uses Marshmallow underneath to do the data validation. And it was created by the same developers. It's a great tool and I have used it a lot too, before having FastAPI . Info Webargs was created by the same Marshmallow developers. Inspired FastAPI to Have automatic validation of incoming request data. APISpec \u00b6 Marshmallow and Webargs provide validation, parsing and serialization as plug-ins. But documentation is still missing. Then APISpec was created. It is a plug-in for many frameworks (and there's a plug-in for Starlette too). The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route. And it generates OpenAPI schemas. That's how it works in Flask, Starlette, Responder, etc. But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML). The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete. Info APISpec was created by the same Marshmallow developers. Inspired FastAPI to Support the open standard for APIs, OpenAPI. Flask-apispec \u00b6 It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec. It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec. It's a great tool, very under-rated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract. This solved having to write YAML (another syntax) inside of Python docstrings. This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building FastAPI . Using it led to the creation of several Flask full-stack generators. These are the main stack I (and several external teams) have been using up to now: https://github.com/tiangolo/full-stack https://github.com/tiangolo/full-stack-flask-couchbase https://github.com/tiangolo/full-stack-flask-couchdb And these same full-stack generators were the base of the FastAPI Project Generators . Info Flask-apispec was created by the same Marshmallow developers. Inspired FastAPI to Generate the OpenAPI schema automatically, from the same code that defines serialization and validation. NestJS (and Angular ) \u00b6 This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular. It achieves something somewhat similar to what can be done with Flask-apispec. It has an integrated dependency injection system, inspired by Angular two. It requires pre-registering the \"injectables\" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition. As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good. But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose. It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated. Inspired FastAPI to Use Python types to have great editor support. Have a powerful dependency injection system. Find a way to minimize code repetition. Sanic \u00b6 It was one of the first extremely fast Python frameworks based on asyncio . It was made to be very similar to Flask. Technical Details It used uvloop instead of the default Python asyncio loop. That's what made it so fast. It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks. Inspired FastAPI to Find a way to have a crazy performance. That's why FastAPI is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks). Falcon \u00b6 Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug. It is designed to have functions that receive two parameters, one \"request\" and one \"response\". Then you \"read\" parts from the request, and \"write\" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters. So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters. Inspired FastAPI to Find ways to get great performance. Along with Hug (as Hug is based on Falcon) inspired FastAPI to declare a response parameter in functions. Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes. Molten \u00b6 I discovered Molten in the first stages of building FastAPI . And it has quite similar ideas: Based on Python type hints. Validation and documentation from these types. Dependency Injection system. It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily. It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high-performance provided by tools like Uvicorn, Starlette and Sanic. The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one \"component\" that provides a certain type. Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled. Inspired FastAPI to Define extra validations for data types using the \"default\" value of model attributes. This improves editor support, and it was not available in Pydantic before. This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic). Hug \u00b6 Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same. It used custom types in its declarations instead of standard Python types, but it was still a huge step forward. It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON. It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea. It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs. As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too. Info Hug was created by Timothy Crosley, the same creator of isort , a great tool to automatically sort imports in Python files. Ideas inspired in FastAPI Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar. Hug helped inspiring FastAPI to use Python type hints to declare parameters, and to generate a schema defining the API automatically. Hug inspired FastAPI to declare a response parameter in functions to set headers and cookies. APIStar (<= 0.5) \u00b6 Right before deciding to build FastAPI I found APIStar server. It had almost everything I was looking for and had a great design. It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard. It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places. Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option. It had the best performance benchmarks at the time (only surpassed by Starlette). At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it. It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature. I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality. But then, the project's focus shifted. It was no longer an API web framework, as the creator needed to focus on Starlette. Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework. Info APIStar was created by Tom Christie. The same guy that created: Django REST Framework Starlette (in which FastAPI is based) Uvicorn (used by Starlette and FastAPI ) Inspired FastAPI to Exist. The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea. And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available. Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build FastAPI . I consider FastAPI a \"spiritual successor\" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools. Used by FastAPI \u00b6 Pydantic \u00b6 Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints. That makes it extremely intuitive. It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great. FastAPI uses it to Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema). FastAPI then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does. Starlette \u00b6 Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It is very simple and intuitive. It's designed to be easily extensible, and have modular components. It has: Seriously impressive performance. WebSocket support. In-process background tasks. Startup and shutdown events. Test client built on HTTPX. CORS, GZip, Static Files, Streaming responses. Session and Cookie support. 100% test coverage. 100% type annotated codebase. Few hard dependencies. Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server. Starlette provides all the basic web microframework functionality. But it doesn't provide automatic data validation, serialization or documentation. That's one of the main things that FastAPI adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc. Technical Details ASGI is a new \"standard\" being developed by Django core team members. It is still not a \"Python standard\" (a PEP), although they are in the process of doing that. Nevertheless, it is already being used as a \"standard\" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like python-socketio . FastAPI uses it to Handle all the core web parts. Adding features on top. The class FastAPI itself inherits directly from the class Starlette . So, anything that you can do with Starlette, you can do it directly with FastAPI , as it is basically Starlette on steroids. Uvicorn \u00b6 Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools. It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or FastAPI ) would provide on top. It is the recommended server for Starlette and FastAPI . FastAPI recommends it as The main web server to run FastAPI applications. You can combine it with Gunicorn, to have an asynchronous multi-process server. Check more details in the Deployment section. Benchmarks and speed \u00b6 To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about Benchmarks .","title":"\u5907\u9009\u3001\u7075\u611f\u4e0e\u6bd4\u8f83"},{"location":"alternatives/#_1","text":"\u662f\u4ec0\u4e48\u6fc0\u53d1\u4e86 FastAPI \uff0c\u5b83\u4e0e\u5176\u4ed6\u6846\u67b6\u76f8\u6bd4\u6709\u4ec0\u4e48\u5f02\u540c\uff0c FastAPI \u4ece\u5b83\u4eec\u8eab\u4e0a\u5b66\u5230\u4e86\u4e9b\u4ec0\u4e48\u3002","title":"\u5907\u9009\u3001\u7075\u611f\u4e0e\u6bd4\u8f83"},{"location":"alternatives/#_2","text":"\u6ca1\u6709\u524d\u8f88\u7684\u8bf8\u591a\u6770\u4f5c\uff0c\u5c31\u4e0d\u4f1a\u6709 FastAPI \u3002 \u5728\u6b64\u4e4b\u524d\uff0c\u6709\u5f88\u591a\u5de5\u5177\u6fc0\u53d1\u4e86 FastAPI \u7684\u521b\u610f\u3002 \u591a\u5e74\u6765\uff0c\u6211\u4e00\u76f4\u4e0d\u60f3\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6846\u67b6\u3002\u9996\u5148\uff0c\u6211\u5c1d\u8bd5\u4f7f\u7528\u5f88\u591a\u4e0d\u540c\u7684\u6846\u67b6\u3001\u63d2\u4ef6\u548c\u5de5\u5177\u89e3\u51b3 FastAPI \u63d0\u4f9b\u7684\u6240\u6709\u529f\u80fd\u3002 \u4f46\u5230\u4e86\u4e00\u5b9a\u65f6\u5019\uff0c\u9664\u4e86\u521b\u5efa\u4e2a\u4ec0\u4e48\u4e1c\u897f\uff0c\u63d0\u4f9b\u6240\u6709\u8fd9\u4e9b\u529f\u80fd\uff0c\u6211\u522b\u65e0\u9009\u62e9\u3002\u5438\u53d6\u4e4b\u524d\u7684\u5de5\u5177\u7684\u4f18\u70b9\uff0c\u4f7f\u7528 Python 3.6+ \u63d0\u4f9b\u7684\u7c7b\u578b\u63d0\u793a\u7b49\u524d\u6240\u672a\u6709\u7684\u529f\u80fd\uff0c\u7528\u5c3d\u53ef\u80fd\u6700\u597d\u7684\u65b9\u5f0f\u628a\u6240\u6709\u8fd9\u4e9b\u7ec4\u5408\u5728\u4e00\u8d77\u3002","title":"\u7b80\u4ecb"},{"location":"alternatives/#_3","text":"","title":"\u4e4b\u524d\u7684\u5de5\u5177"},{"location":"alternatives/#django","text":"It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram. It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy. It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it.","title":"Django"},{"location":"alternatives/#django-rest-framework","text":"Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities. It is used by many companies including Mozilla, Red Hat and Eventbrite. It was one of the first examples of automatic API documentation , and this was specifically one of the first ideas that inspired \"the search for\" FastAPI . Note Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which FastAPI is based. Inspired FastAPI to Have an automatic API documentation web user interface.","title":"Django REST Framework"},{"location":"alternatives/#flask","text":"Flask is a \"microframework\", it doesn't include database integrations nor many of the things that come by default in Django. This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system. As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points. It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins. This decoupling of parts, and being a \"microframework\" that could be extended to cover exactly what is needed was a key feature that I wanted to keep. Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a \"Django REST Framework\" for Flask. Inspired FastAPI to Be a micro-framework. Making it easy to mix and match the tools and parts needed. Have a simple and easy to use routing system.","title":"Flask"},{"location":"alternatives/#requests","text":"FastAPI is not actually an alternative to Requests . Their scope is very different. It would actually be common to use Requests inside of a FastAPI application. But still, FastAPI got quite some inspiration from Requests. Requests is a library to interact with APIs (as a client), while FastAPI is a library to build APIs (as a server). They are, more or less, at opposite ends, complementing each other. Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable. That's why, as said in the official website: Requests is one of the most downloaded Python packages of all time The way you use it is very simple. For example, to do a GET request, you would write: response = requests . get ( \"http://example.com/some/url\" ) The FastAPI counterpart API path operation could look like: @app . get ( \"/some/url\" ) def read_url (): return { \"message\" : \"Hello World\" } See the similarities in requests.get(...) and @app.get(...) . Inspired FastAPI to Have a simple and intuitive API. Use HTTP method names (operations) directly, in a straightforward and intuitive way. Have sensible defaults, but powerful customizations.","title":"Requests"},{"location":"alternatives/#swagger-openapi","text":"The main feature I wanted from Django REST Framework was the automatic API documentation. Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger. And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically. At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI. That's why when talking about version 2.0 it's common to say \"Swagger\", and for version 3+ \"OpenAPI\". Inspired FastAPI to Adopt and use an open standard for API specifications, instead of a custom schema. And integrate standards-based user interface tools: Swagger UI ReDoc These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of additional alternative user interfaces for OpenAPI (that you can use with FastAPI ).","title":"Swagger / OpenAPI"},{"location":"alternatives/#flask-rest-frameworks","text":"There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit.","title":"Flask REST frameworks"},{"location":"alternatives/#marshmallow","text":"One of the main features needed by API systems is data \" serialization \" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting datetime objects into strings, etc. Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an int , and not some random string. This is especially useful for incoming data. Without a data validation system, you would have to do all the checks by hand, in code. These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before. But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow. Inspired FastAPI to Use code to define \"schemas\" that provide data types and validation, automatically.","title":"Marshmallow"},{"location":"alternatives/#webargs","text":"Another big feature required by APIs is parsing data from incoming requests. Webargs is a tool that was made to provide that on top of several frameworks, including Flask. It uses Marshmallow underneath to do the data validation. And it was created by the same developers. It's a great tool and I have used it a lot too, before having FastAPI . Info Webargs was created by the same Marshmallow developers. Inspired FastAPI to Have automatic validation of incoming request data.","title":"Webargs"},{"location":"alternatives/#apispec","text":"Marshmallow and Webargs provide validation, parsing and serialization as plug-ins. But documentation is still missing. Then APISpec was created. It is a plug-in for many frameworks (and there's a plug-in for Starlette too). The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route. And it generates OpenAPI schemas. That's how it works in Flask, Starlette, Responder, etc. But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML). The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete. Info APISpec was created by the same Marshmallow developers. Inspired FastAPI to Support the open standard for APIs, OpenAPI.","title":"APISpec"},{"location":"alternatives/#flask-apispec","text":"It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec. It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec. It's a great tool, very under-rated. It should be way more popular than many Flask plug-ins out there. It might be due to its documentation being too concise and abstract. This solved having to write YAML (another syntax) inside of Python docstrings. This combination of Flask, Flask-apispec with Marshmallow and Webargs was my favorite backend stack until building FastAPI . Using it led to the creation of several Flask full-stack generators. These are the main stack I (and several external teams) have been using up to now: https://github.com/tiangolo/full-stack https://github.com/tiangolo/full-stack-flask-couchbase https://github.com/tiangolo/full-stack-flask-couchdb And these same full-stack generators were the base of the FastAPI Project Generators . Info Flask-apispec was created by the same Marshmallow developers. Inspired FastAPI to Generate the OpenAPI schema automatically, from the same code that defines serialization and validation.","title":"Flask-apispec"},{"location":"alternatives/#nestjs-and-angular","text":"This isn't even Python, NestJS is a JavaScript (TypeScript) NodeJS framework inspired by Angular. It achieves something somewhat similar to what can be done with Flask-apispec. It has an integrated dependency injection system, inspired by Angular two. It requires pre-registering the \"injectables\" (like all the other dependency injection systems I know), so, it adds to the verbosity and code repetition. As the parameters are described with TypeScript types (similar to Python type hints), editor support is quite good. But as TypeScript data is not preserved after compilation to JavaScript, it cannot rely on the types to define validation, serialization and documentation at the same time. Due to this and some design decisions, to get validation, serialization and automatic schema generation, it's needed to add decorators in many places. So, it becomes quite verbose. It can't handle nested models very well. So, if the JSON body in the request is a JSON object that has inner fields that in turn are nested JSON objects, it cannot be properly documented and validated. Inspired FastAPI to Use Python types to have great editor support. Have a powerful dependency injection system. Find a way to minimize code repetition.","title":"NestJS (and Angular)"},{"location":"alternatives/#sanic","text":"It was one of the first extremely fast Python frameworks based on asyncio . It was made to be very similar to Flask. Technical Details It used uvloop instead of the default Python asyncio loop. That's what made it so fast. It clearly inspired Uvicorn and Starlette, that are currently faster than Sanic in open benchmarks. Inspired FastAPI to Find a way to have a crazy performance. That's why FastAPI is based on Starlette, as it is the fastest framework available (tested by third-party benchmarks).","title":"Sanic"},{"location":"alternatives/#falcon","text":"Falcon is another high performance Python framework, it is designed to be minimal, and work as the foundation of other frameworks like Hug. It is designed to have functions that receive two parameters, one \"request\" and one \"response\". Then you \"read\" parts from the request, and \"write\" parts to the response. Because of this design, it is not possible to declare request parameters and bodies with standard Python type hints as function parameters. So, data validation, serialization, and documentation, have to be done in code, not automatically. Or they have to be implemented as a framework on top of Falcon, like Hug. This same distinction happens in other frameworks that are inspired by Falcon's design, of having one request object and one response object as parameters. Inspired FastAPI to Find ways to get great performance. Along with Hug (as Hug is based on Falcon) inspired FastAPI to declare a response parameter in functions. Although in FastAPI it's optional, and is used mainly to set headers, cookies, and alternative status codes.","title":"Falcon"},{"location":"alternatives/#molten","text":"I discovered Molten in the first stages of building FastAPI . And it has quite similar ideas: Based on Python type hints. Validation and documentation from these types. Dependency Injection system. It doesn't use a data validation, serialization and documentation third-party library like Pydantic, it has its own. So, these data type definitions would not be reusable as easily. It requires a little bit more verbose configurations. And as it is based on WSGI (instead of ASGI), it is not designed to take advantage of the high-performance provided by tools like Uvicorn, Starlette and Sanic. The dependency injection system requires pre-registration of the dependencies and the dependencies are solved based on the declared types. So, it's not possible to declare more than one \"component\" that provides a certain type. Routes are declared in a single place, using functions declared in other places (instead of using decorators that can be placed right on top of the function that handles the endpoint). This is closer to how Django does it than to how Flask (and Starlette) does it. It separates in the code things that are relatively tightly coupled. Inspired FastAPI to Define extra validations for data types using the \"default\" value of model attributes. This improves editor support, and it was not available in Pydantic before. This actually inspired updating parts of Pydantic, to support the same validation declaration style (all this functionality is now already available in Pydantic).","title":"Molten"},{"location":"alternatives/#hug","text":"Hug was one of the first frameworks to implement the declaration of API parameter types using Python type hints. This was a great idea that inspired other tools to do the same. It used custom types in its declarations instead of standard Python types, but it was still a huge step forward. It also was one of the first frameworks to generate a custom schema declaring the whole API in JSON. It was not based on a standard like OpenAPI and JSON Schema. So it wouldn't be straightforward to integrate it with other tools, like Swagger UI. But again, it was a very innovative idea. It has an interesting, uncommon feature: using the same framework, it's possible to create APIs and also CLIs. As it is based on the previous standard for synchronous Python web frameworks (WSGI), it can't handle Websockets and other things, although it still has high performance too. Info Hug was created by Timothy Crosley, the same creator of isort , a great tool to automatically sort imports in Python files. Ideas inspired in FastAPI Hug inspired parts of APIStar, and was one of the tools I found most promising, alongside APIStar. Hug helped inspiring FastAPI to use Python type hints to declare parameters, and to generate a schema defining the API automatically. Hug inspired FastAPI to declare a response parameter in functions to set headers and cookies.","title":"Hug"},{"location":"alternatives/#apistar-05","text":"Right before deciding to build FastAPI I found APIStar server. It had almost everything I was looking for and had a great design. It was one of the first implementations of a framework using Python type hints to declare parameters and requests that I ever saw (before NestJS and Molten). I found it more or less at the same time as Hug. But APIStar used the OpenAPI standard. It had automatic data validation, data serialization and OpenAPI schema generation based on the same type hints in several places. Body schema definitions didn't use the same Python type hints like Pydantic, it was a bit more similar to Marshmallow, so, editor support wouldn't be as good, but still, APIStar was the best available option. It had the best performance benchmarks at the time (only surpassed by Starlette). At first, it didn't have an automatic API documentation web UI, but I knew I could add Swagger UI to it. It had a dependency injection system. It required pre-registration of components, as other tools discussed above. But still, it was a great feature. I was never able to use it in a full project, as it didn't have security integration, so, I couldn't replace all the features I was having with the full-stack generators based on Flask-apispec. I had in my backlog of projects to create a pull request adding that functionality. But then, the project's focus shifted. It was no longer an API web framework, as the creator needed to focus on Starlette. Now APIStar is a set of tools to validate OpenAPI specifications, not a web framework. Info APIStar was created by Tom Christie. The same guy that created: Django REST Framework Starlette (in which FastAPI is based) Uvicorn (used by Starlette and FastAPI ) Inspired FastAPI to Exist. The idea of declaring multiple things (data validation, serialization and documentation) with the same Python types, that at the same time provided great editor support, was something I considered a brilliant idea. And after searching for a long time for a similar framework and testing many different alternatives, APIStar was the best option available. Then APIStar stopped to exist as a server and Starlette was created, and was a new better foundation for such a system. That was the final inspiration to build FastAPI . I consider FastAPI a \"spiritual successor\" to APIStar, while improving and increasing the features, typing system, and other parts, based on the learnings from all these previous tools.","title":"APIStar (&lt;= 0.5)"},{"location":"alternatives/#used-by-fastapi","text":"","title":"Used by FastAPI"},{"location":"alternatives/#pydantic","text":"Pydantic is a library to define data validation, serialization and documentation (using JSON Schema) based on Python type hints. That makes it extremely intuitive. It is comparable to Marshmallow. Although it's faster than Marshmallow in benchmarks. And as it is based on the same Python type hints, the editor support is great. FastAPI uses it to Handle all the data validation, data serialization and automatic model documentation (based on JSON Schema). FastAPI then takes that JSON Schema data and puts it in OpenAPI, apart from all the other things it does.","title":"Pydantic"},{"location":"alternatives/#starlette","text":"Starlette is a lightweight ASGI framework/toolkit, which is ideal for building high-performance asyncio services. It is very simple and intuitive. It's designed to be easily extensible, and have modular components. It has: Seriously impressive performance. WebSocket support. In-process background tasks. Startup and shutdown events. Test client built on HTTPX. CORS, GZip, Static Files, Streaming responses. Session and Cookie support. 100% test coverage. 100% type annotated codebase. Few hard dependencies. Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server. Starlette provides all the basic web microframework functionality. But it doesn't provide automatic data validation, serialization or documentation. That's one of the main things that FastAPI adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc. Technical Details ASGI is a new \"standard\" being developed by Django core team members. It is still not a \"Python standard\" (a PEP), although they are in the process of doing that. Nevertheless, it is already being used as a \"standard\" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like python-socketio . FastAPI uses it to Handle all the core web parts. Adding features on top. The class FastAPI itself inherits directly from the class Starlette . So, anything that you can do with Starlette, you can do it directly with FastAPI , as it is basically Starlette on steroids.","title":"Starlette"},{"location":"alternatives/#uvicorn","text":"Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools. It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or FastAPI ) would provide on top. It is the recommended server for Starlette and FastAPI . FastAPI recommends it as The main web server to run FastAPI applications. You can combine it with Gunicorn, to have an asynchronous multi-process server. Check more details in the Deployment section.","title":"Uvicorn"},{"location":"alternatives/#benchmarks-and-speed","text":"To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about Benchmarks .","title":"Benchmarks and speed"},{"location":"async/","text":"\u5e76\u53d1\u4e0e\u5f02\u6b65 \u00b6 \u672c\u7ae0\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 async def \u8bed\u6cd5\uff0c\u4ee5\u53ca\u5f02\u6b65\u3001\u5e76\u53d1\u3001\u5e76\u884c\u7684\u80cc\u666f\u77e5\u8bc6\u3002 \u7b49\u4e0d\u53ca\u4e86\uff1f \u00b6 TL;DR: \u5982\u679c\u9700\u8981\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528 await \u8c03\u7528\u7b2c\u4e09\u65b9\u652f\u6301\u5e93\uff1a results = await some_library () \u5c31\u8981\u4f7f\u7528 async def \u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff1a @app . get ( '/' ) async def read_results (): results = await some_library () return results \u7b14\u8bb0 \u53ea\u80fd\u5728 async def \u521b\u5efa\u7684\u51fd\u6570\u5185\u90e8\u4f7f\u7528 await \u3002 \u5982\u679c\u4f7f\u7528\u4e0d\u652f\u6301 await \u7684\u7b2c\u4e09\u65b9\u652f\u6301\u5e93\u4e0e\uff08\u6570\u636e\u5e93\u3001API\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\uff09\u5bf9\u8c61\u901a\u4fe1\uff0c\uff08\u8fd9\u662f\u7edd\u5927\u591a\u6570\u6570\u636e\u5e93\u652f\u6301\u5e93\u7684\u73b0\u72b6\uff09\uff0c\u5c31\u8981\u53ea\u80fd\u4f7f\u7528 def \u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u58f0\u660e\u4e3a\u666e\u901a\u51fd\u6570\uff0c\u5982\u4e0b\uff1a @app . get ( '/' ) def results (): results = some_library () return results \u5982\u679c\u4f60\u7684\u5e94\u7528\uff08\u4e0d\u77e5\u4e3a\u4f55\uff09\u867d\u7136\u4e0d\u4e0e\u5176\u4ed6\u5bf9\u8c61\u901a\u4fe1\uff0c\u4f46\u4ecd\u8981\u7b49\u5f85\u5176\u54cd\u5e94\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 async def \u3002 \u5982\u679c\u4e0d\u77e5\u9053\u7528\u4ec0\u4e48\u597d\uff0c\u5c31\u7528\u666e\u901a\u51fd\u6570\u3002 \u6ce8\u610f \uff1a\u53ef\u4ee5\u628a\u666e\u901a\uff08 def \uff09 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e0e\u5f02\u6b65\uff08 asnyc def \uff09 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u6df7\u5728\u4e00\u8d77\u4f7f\u7528\uff0c\u4e3a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u9009\u62e9\u6700\u9002\u5408\u7684\u65b9\u6848\u3002FastAPI \u80fd\u6b63\u786e\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684\u51fd\u6570\u3002 \u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u5bf9\u4e0a\u8ff0\u4efb\u610f\u60c5\u51b5\uff0cFastAPI \u90fd\u662f\u4ee5\u5f02\u6b65\u65b9\u5f0f\u8fd0\u884c\u7684\uff0c\u901f\u5ea6\u6781\u5feb\u3002 \u4f46\u4f7f\u7528\u4e0a\u8ff0\u65b9\u5f0f\uff0c\u5b83\u80fd\u66f4\u597d\u5730\u4f18\u5316\u6027\u80fd\u3002 \u6280\u672f\u7ec6\u8282 \u00b6 \u73b0\u4ee3 Python \u652f\u6301 \u201c\u5f02\u6b65\u7f16\u7801\u201d \uff0c\u4f7f\u7528\u7684\u662f async \u4e0e await \u5173\u952e\u5b57\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a \u534f\u7a0b \u3002 \u4e0b\u9762\u6211\u4eec\u5206\u522b\u4ecb\u7ecd\u8fd9\u53e5\u8bdd\u91cc\u7684\u51e0\u4e2a\u6982\u5ff5\uff1a \u5f02\u6b65\u7f16\u7801 async \u4e0e await \u534f\u7a0b \u5f02\u6b65\u7f16\u7801 \u00b6 \u5f02\u6b65\u7f16\u7801\u662f\u6307\u7f16\u7a0b\u8bed\u8a00 \ud83d\udcac \u4ee5\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16\uff0c\u5728\u4ee3\u7801\u4e2d\u7684\u67d0\u4e2a\u70b9\uff0c\u5b83 \ud83e\udd16 \u5fc5\u987b\u7b49\u5f85 \u67d0\u4e9b\u5bf9\u8c61 \u5728\u67d0\u4e9b\u4f4d\u7f6e\u5b8c\u6210\u67d0\u4e9b\u64cd\u4f5c\u3002\u5047\u8bbe\u6211\u4eec\u628a \u8fd9\u4e9b\u5bf9\u8c61 \u79f0\u4e3a\u201c\u6162\u6587\u4ef6\u201d \ud83d\udcdd\u3002 \u5728\u201c\u6162\u6587\u4ef6\u201d \ud83d\udcdd \u64cd\u4f5c\u7ed3\u675f\u524d\u7684\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u8ba1\u7b97\u673a\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u5728\u7b49\u5f85\u671f\u95f4\uff0c\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16 \u7ecf\u5e38\u4f1a\u67e5\u770b\u662f\u53ef\u4ee5\u7ee7\u7eed\u64cd\u4f5c\uff0c\u8fd8\u662f\u8981\u7ee7\u7eed\u7b49\u5f85\uff0c\u6216\u8005\u5f53\u5b83\u5b8c\u6210\u90a3\u4e2a\u70b9\u80fd\u505a\u7684\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16 \u4f1a\u67e5\u770b\u5b83\u6240\u7b49\u5f85\u7684\u4efb\u52a1\u662f\u5426\u5b8c\u6210\u4e86\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u5b83\u672c\u8be5\u5b8c\u6210\u7684\u64cd\u4f5c\u3002 \u63a5\u4e0b\u6765\uff0c\u5b83 \ud83e\udd16 \u5b8c\u6210\u7b2c\u4e00\u9879\u4efb\u52a1\uff08\u6bd4\u5982\u8bf4\uff0c\u201c\u6162\u6587\u4ef6\u201d \ud83d\udcdd\uff09\uff0c\u7136\u540e\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u3002 \"\u7b49\u5f85\u67d0\u4e9b\u5bf9\u8c61\"\u901a\u5e38\u662f\u6307\uff08\u4e0e\u5904\u7406\u5668\u548c\u5185\u5b58\u76f8\u6bd4\uff09\u901f\u5ea6\u76f8\u5bf9\u8f83\u201c\u6162\u201d\u7684 I/O \u64cd\u4f5c\uff0c\u6bd4\u5982\u7b49\u5f85\u5982\u4e0b\u5bf9\u8c61\uff1a \u901a\u8fc7\u7f51\u7edc\uff0c\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e \u901a\u8fc7\u7f51\u7edc\uff0c\u7531\u7a0b\u5e8f\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u6570\u636e \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4ece\u78c1\u76d8\u8bfb\u53d6\u5e76\u4f20\u9012\u7ed9\u7a0b\u5e8f\u7684\u6587\u4ef6\u5185\u5bb9 \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7531\u7a0b\u5e8f\u5199\u5165\u78c1\u76d8\u7684\u5185\u5bb9 \u8fdc\u7a0b API \u64cd\u4f5c \u8981\u5b8c\u6210\u7684\u6570\u636e\u5e93\u64cd\u4f5c \u6570\u636e\u5e93\u67e5\u8be2\u8fd4\u56de\u7684\u7ed3\u679c \u7b49 \u56e0\u4e3a\u6267\u884c\u65f6\u4e3b\u8981\u662f\u7b49\u5f85 I/O \u64cd\u4f5c\uff0c\u5b83\u4eec\u4e5f\u88ab\u79f0\u4e3a\u201cI/O \u5bc6\u96c6\u578b\u201d\u64cd\u4f5c\u3002 \u79f0\u4e4b\u4e3a \u201c\u5f02\u6b65\u201d\uff0c\u662f\u56e0\u4e3a\u8ba1\u7b97\u673a/\u7a0b\u5e8f\u4e0d\u5fc5\u4e0e\u6162\u4efb\u52a1\u201c\u540c\u6b65\u201d\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u53ea\u662f\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u7684\u90a3\u4e00\u523b\uff0c\u624d\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c\u5e76\u7ee7\u7eed\u6267\u884c\u3002 \u53cd\u4e4b\uff0c\u5728\u201c\u5f02\u6b65\u201d\u7cfb\u7edf\u4e2d\uff0c\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u4f1a\u8017\u8d39\u4e00\u70b9\u65f6\u95f4\uff08\u51e0\u5fae\u79d2\uff09\u7b49\u5f85\u8ba1\u7b97\u673a/ \u7a0b\u5e8f\u5b8c\u6210\u5f53\u524d\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u83b7\u53d6\u4efb\u52a1\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u7ee7\u7eed\u6267\u884c\u64cd\u4f5c\u3002 \uff08\u4e0e\u201c\u5f02\u6b65\u201d\u76f8\u53cd\uff09\uff0c\u201c\u540c\u6b65\u201d\u901a\u5e38\u4e5f\u4f7f\u7528\u672f\u8bed\u201c \u5e8f\u5217\uff08sequential\uff09 \u201d\uff0c\u8fd9\u662f\u56e0\u4e3a\u8ba1\u7b97\u673a/\u7a0b\u5e8f\u5728\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\u524d\uff0c\u603b\u662f\u6309\u5e8f\u6267\u884c\u6240\u6709\u64cd\u4f5c\u6b65\u9aa4\uff0c\u5373\u4f7f\u9700\u8981\u7b49\u5f85\u8fd9\u4e9b\u4efb\u52a1\u5b8c\u6210\u3002 \u5e76\u53d1\u4e0e\u6c49\u5821 \u00b6 \u4e0a\u8ff0 \u5f02\u6b65 \u7f16\u7801\u7684\u601d\u8def\u6709\u65f6\u4e5f\u53eb\u4f5c \u201c\u5e76\u53d1\uff08concurrency\uff09\u201d \uff0c\u5b83\u4e0e \u201d\u5e76\u884c\uff08parallelism\uff09\u201c \u4e0d\u4e00\u6837\u3002 \u5e76\u53d1 \u4e0e \u5e76\u884c \u90fd\u4e0e\u201c\u540c\u65f6\u53d1\u751f\u4e0d\u540c\u7684\u4e8b\u60c5\u201d\u76f8\u5173\u3002 \u4f46 \u5e76\u53d1 \u4e0e \u5e76\u884c \u7684\u7ec6\u8282\u5b8c\u5168\u4e0d\u540c\u3002 \u4e3a\u4e86\u8bf4\u660e\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u6211\u7f16\u4e86\u4e2a\u5173\u4e8e\u6c49\u5821\u7684\u6545\u4e8b\uff1a \u5e76\u53d1\u6c49\u5821 \u00b6 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u4e00\u8d77\u53bb\u5403\u5feb\u9910 \ud83c\udf54\uff0c\u4f60\u6392\u961f\u7684\u65f6\u5019\uff0c\u6536\u94f6\u5458 \ud83d\udc81 \u4e3a\u6392\u5728\u4f60\u524d\u9762\u7684\u4eba\u4e0b\u5355\u3002 \u8f6e\u5230\u4f60\u65f6\uff0c\u4f60\u4e3a\u81ea\u5df1\u548c\u5973\u53cb \ud83d\ude0d \u4e70\u4e86 2 \u4e2a\u975e\u5e38\u7f8e\u5473\u7684\u6c49\u5821 \ud83c\udf54\u3002 \u7136\u540e\u4ed8\u94b1 \ud83d\udcb8\u3002 \u6536\u94f6\u5458\u901a\u77e5\u53a8\u623f\u91cc\u7684\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u77e5\u9053\u8981\u7ed9\u4f60\u505a\u6c49\u5821 \ud83c\udf54 \uff08\u5373\u4fbf\u4ed6\u4eec\u73b0\u5728\u6b63\u5728\u4e3a\u4e0a\u4e00\u4e2a\u5ba2\u6237\u505a\u6c49\u5821\uff09\u3002 \u6536\u94f6\u5458 \ud83d\udc81 \u7ed9\u4e86\u4f60\u53d6\u9910\u53f7\u3002 \u7b49\u9910\u7684\u65f6\u5019\uff0c\u4f60\u56de\u53bb\u548c\u5973\u53cb \ud83d\ude0d \u627e\u4e86\u5f20\u684c\u5b50\u5750\u4e0b\uff0c\u5e76\u548c\u5973\u53cb \ud83d\ude0d \u804a\u4e86\u534a\u5929\uff08\u56e0\u4e3a\u4f60\u7684\u6c49\u5821\u975e\u5e38\u7f8e\u5473\uff0c\u8981\u82b1\u4e9b\u65f6\u95f4\u70f9\u5236 \u2728\ud83c\udf54\u2728\uff09 \u4f60\u4e00\u8fb9\u548c\u5973\u53cb \ud83d\ude0d \u804a\u5929\uff0c\u4e00\u8fb9\u7b49\u6c49\u5821 \ud83c\udf54\u3002\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ef\u4ee5\u606d\u7ef4\u5973\u53cb\u53c8\u8d5e\u3001\u53c8\u53ef\u7231\u3001\u53c8\u806a\u660e \u2728\ud83d\ude0d\u2728\u3002 \u5728\u7b49\u9910\u548c\u4e0e\u5973\u53cb\u804a\u5929\u7684\u540c\u65f6\uff0c\u4f60\u8fd8\u8981\u65f6\u4e0d\u65f6\u770b\u4e0b\u67dc\u53f0\u4e0a\u663e\u793a\u7684\u6570\u5b57\uff0c\u770b\u770b\u662f\u4e0d\u662f\u8f6e\u5230\u4f60\u4e86\u3002 \u5728\u67d0\u4e2a\u65f6\u70b9\uff0c\u7ec8\u4e8e\u8f6e\u5230\u4f60\u4e86\u3002\u4f60\u5230\u67dc\u53f0\u4e0a\u53d6\u4e86\u6c49\u5821 \ud83c\udf54\uff0c\u56de\u5230\u9910\u684c\u3002 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u5403\u7740\u7f8e\u5473\u7684\u6c49\u5821 \ud83c\udf54 \uff0c\u4eab\u53d7\u7f8e\u597d\u7684\u65f6\u5149 \u2728\u3002 \u5047\u8bbe\u4f60\u662f\u8fd9\u4e2a\u6545\u4e8b\u91cc\u7684\u8ba1\u7b97\u673a/\u7a0b\u5e8f\u3002 \u6392\u961f\u65f6\uff0c\u4f60\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001 \ud83d\ude34\uff0c\u53ea\u662f\u7b49\u7740\u6392\u961f\uff0c\u6ca1\u505a\u4efb\u4f55\u201c\u6709\u610f\u4e49\u201d\u7684\u4e8b\u3002\u4f46\u6392\u961f\u901f\u5ea6\u5f88\u5feb\uff0c\u56e0\u4e3a\u6536\u94f6\u5458 \ud83d\udc81 \u53ea\u8d1f\u8d23\u4e0b\u5355\uff08\u4e0d\u505a\u6c49\u5821\uff09\uff0c\u6240\u4ee5\u7b49\u4e00\u4f1a\u513f\u4e5f\u6ca1\u4ec0\u4e48\u3002 \u7ec8\u4e8e\u8f6e\u5230\u4f60\u4e86\uff0c\u6b64\u65f6\u5c31\u80fd\u5b9e\u9645\u505a\u4e9b\u201c\u6709\u610f\u4e49\u201d\u7684\u4e8b\u4e86 \ud83e\udd13\uff0c\u4f60\u8981\u770b\u83dc\u5355\uff0c\u51b3\u5b9a\u4e70\u4ec0\u4e48\uff0c\u8be2\u95ee\u5973\u53cb \ud83d\ude0d \u5403\u4ec0\u4e48\uff0c\u4ed8\u94b1 \ud83d\udcb8\uff0c\u68c0\u67e5\u8d26\u5355\u6216\u94f6\u884c\u5361\u662f\u5426\u6b63\u786e\uff0c\u68c0\u67e5\u8ba2\u5355\u91cc\u7684\u9910\u98df\u662f\u5426\u6b63\u786e\uff0c\u7b49\u7b49\u3002 \u4f46\u6b64\u65f6\uff0c\u4f60\u4ecd\u6ca1\u62ff\u5230\u6c49\u5821 \ud83c\udf54\uff0c\u4e0d\u8fc7\uff0c\u4f60\u548c\u6536\u94f6\u5458 \ud83d\udc81 \u4e4b\u95f4\u7684\u5de5\u4f5c\u201c\u6682\u505c\u201d\u4e86\uff0c\u56e0\u4e3a\u8981\u7b49 \ud83d\udd59 \u6c49\u5821\u505a\u597d\u3002 \u4f46\u79bb\u5f00\u67dc\u53f0\uff0c\u62ff\u7740\u53d6\u9910\u7801\u56de\u5230\u9910\u684c\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u628a\u6ce8\u610f\u529b\u5207\u6362 \ud83d\udd00 \u5230\u5973\u53cb \ud83d\ude0d\uff0c\u5f00\u59cb\u7ee7\u7eed\u8fd9\u9879\u201c\u5de5\u4f5c\u201d \u23ef \ud83e\udd13\u3002\u8fd9\u6837\uff0c\u4f60\u5c31\u53c8\u5f00\u59cb\u505a\u4e00\u4e9b\u975e\u5e38\u201c\u6709\u610f\u4e49\u201d\u7684\u5de5\u4f5c\u4e86 \ud83e\udd13\uff0c\u53d6\u60a6\u4f60\u7684\u5973\u53cb \ud83d\ude0d\u3002 \u7136\u540e\uff0c\u6536\u94f6\u5458 \ud83d\udc81 \u628a\u4f60\u7684\u53f7\u7801\u663e\u793a\u5728\u67dc\u53f0\u4e0a\uff0c\u544a\u8bc9\u4f60\u201c\u6c49\u5821 \ud83c\udf54 \u505a\u597d\u4e86\uff0c\u8bf7\u53d6\u9910\u201d\uff0c\u4f46\u4f60\u4e0d\u4f1a\u5728\u663e\u793a\u53d6\u9910\u7801\u65f6\u50cf\u75af\u4e86\u4e00\u6837\u5730\u7acb\u523b\u8df3\u8fc7\u53bb\u53d6\u9910\u3002\u4f60\u660e\u767d\u4e0d\u4f1a\u6709\u4eba\u62ff\u8d70\u4f60\u7684\u6c49\u5821 \ud83c\udf54\uff0c\u56e0\u4e3a\u4f60\u6709\u4f60\u7684\u53f7\u7801\uff0c\u4ed6\u4eec\u6709\u4ed6\u4eec\u7684\u53f7\u7801\u3002 \u56e0\u6b64\uff0c\u4f60\u4f1a\u5148\u7ed9\u5973\u53cb \ud83d\ude0d \u8bb2\u5b8c\u6545\u4e8b\uff08\u5b8c\u6210\u5f53\u524d\u8981\u5904\u7406\u7684\u4efb\u52a1 \u23ef \ud83e\udd13\uff09\uff0c\u7b11\u7740\u544a\u8bc9\u5979\uff0c\u4f60\u8981\u53bb\u53d6\u6c49\u5821 \u23f8\u3002 \u4f60\u6765\u5230\u67dc\u53f0 \ud83d\udd00\uff0c\u7ee7\u7eed\u5b8c\u6210\u4e00\u5f00\u59cb\u7684\u4efb\u52a1 \u23ef\uff0c\u53d6\u6c49\u5821\uff0c\u611f\u8c22\u6536\u94f6\u5458\uff0c\u5e76\u628a\u6c49\u5821 \ud83c\udf54 \u62ff\u56de\u9910\u684c\u3002\u8fd9\u5c31\u5b8c\u6210\u4e86\u4e0e\u6536\u94f6\u5458\u4ea4\u4e92\u7684\u4efb\u52a1 \u23f9\u3002\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u4efb\u52a1 - \u201c\u5403\u6c49\u5821\u201d \ud83d\udd00 \u23ef\uff0c\u4f46\u4e4b\u524d\u201c\u53d6\u6c49\u5821\u201d\u7684\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\u4e86 \u23f9\u3002 \u5e76\u884c\u6c49\u5821 \u00b6 \u73b0\u5728\uff0c\u628a\u201c\u5e76\u53d1\u6c49\u5821\u201d\u6362\u6210\u201c\u5e76\u884c\u6c49\u5821\u201d\u3002 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u6765\u5403\u5e76\u884c\u5feb\u9910 \ud83c\udf54\u3002 \u67dc\u53f0\u91cc\u6709\u597d\u591a\uff08\u6bd4\u5982\u8bf4 8 \u4e2a\uff09\u6536\u94f6\u5458\uff0c\u4f46\u8fd9\u51e0\u4f4d\u6536\u94f6\u5458\u540c\u65f6\u8fd8\u662f\u53a8\u5e08 \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\u3002 \u5728\u4f60\u524d\u9762\u7684\u6bcf\u4e2a\u4eba\u90fd\u8981\u7b49 \ud83d\udd59 \u4ed6\u4eec\u7684\u6c49\u5821 \ud83c\udf54 \u505a\u597d\u624d\u80fd\u79bb\u5f00\u67dc\u53f0\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6536\u94f6\u5458\u63a5\u5355\u540e\u7acb\u5373\u53bb\u70f9\u5236\u6c49\u5821\uff0c\u7136\u540e\u624d\u4f1a\u63a5\u4e0b\u4e00\u5355\u3002 \u7ec8\u4e8e\u8f6e\u5230\u4f60\u5566\uff0c\u4f60\u4e3a\u81ea\u5df1\u548c\u5973\u53cb \ud83d\ude0d \u4e70\u4e86 2 \u4e2a\u975e\u5e38\u7f8e\u5473\u7684\u6c49\u5821 \ud83c\udf54\u3002 \u7136\u540e\u4ed8\u94b1 \ud83d\udcb8\u3002 \u6536\u94f6\u5458\u53bb\u53a8\u623f \ud83d\udc68\u200d\ud83c\udf73\u3002 \u4f60\u53ea\u80fd\u7ad9\u5728\u67dc\u53f0\u524d\u8010\u5fc3\u7b49\u7740 \ud83d\udd59\uff0c\u8fd9\u6837\u522b\u4eba\u624d\u4e0d\u4f1a\u628a\u4f60\u7684\u6c49\u5821 \ud83c\udf54 \u62ff\u8d70\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u53d6\u9910\u53f7\u3002 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u4e00\u76f4\u5fd9\u7740\u4e0d\u8ba9\u522b\u4eba\u63d2\u961f\uff0c\u8fd8\u8981\u63d0\u9632\u522b\u4eba\u62ff\u8d70\u4f60\u4eec\u7684\u6c49\u5821 \ud83c\udf54 \uff0c\u8fd9\u6837\u4e00\u6765\u4f60\u5c31\u6ca1\u529f\u592b\u966a\u7740\u4f60\u7684\u5973\u53cb \ud83d\ude1e\u4e86\u3002 \u8fd9\u5c31\u662f\u201c\u540c\u6b65\u201d\u5de5\u4f5c\u673a\u5236\uff0c\u4f60\u4e0e\u6536\u94f6\u5458/\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73\u201c\u540c\u6b65\u201d\u3002\u4f60\u53ea\u80fd\u8010\u5fc3\u7b49\u5f85 \ud83d\udd59 \uff0c\u76f4\u5230\u6536\u94f6\u5458/\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73\u505a\u597d\u6c49\u5821 \ud83c\udf54 \u5e76\u7ed9\u4f60\u7684\u90a3\u4e00\u523b\uff0c\u5426\u5219\uff0c\u522b\u4eba\u5c31\u4f1a\u628a\u4f60\u7684\u6c49\u5821 \ud83c\udf54 \u62ff\u8d70\u3002 \u5728\u67dc\u53f0\u524d\u7b49 \ud83d\udd59 \u4e86\u534a\u5929\uff0c\u4f60\u7684\u6536\u94f6\u5458/\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73 \u7ec8\u4e8e\u628a\u6c49\u5821 \ud83c\udf54 \u505a\u597d\u7ed9\u4f60\u4e86\uff0c \u4f60\u628a\u6c49\u5821 \ud83c\udf54\u62ff\u56de\u9910\u684c\uff0c\u56de\u5230\u4e86\u5973\u53cb \ud83d\ude0d \u7684\u8eab\u8fb9\u3002 \u4f60\u4eec\u5f00\u59cb\u4eab\u7528\u6c49\u5821\uff0c\u7ec8\u4e8e\u5403\u5b8c\u4e86 \ud83c\udf54 \u23f9\u3002 \u5728\u8fd9\u91cc\uff0c\u4f60\u57fa\u672c\u4e0a\u90fd\u662f\u5728\u67dc\u53f0\u524d\u7b49 \ud83d\udd59\uff0c\u6ca1\u65f6\u95f4\u548c\u5973\u53cb \ud83d\ude1e \u804a\u5929\uff0c\u66f4\u522b\u63d0\u8c08\u60c5\u8bf4\u7231\u4e86\u3002 \u5728\u5e76\u884c\u6c49\u5821\u7684\u573a\u666f\u4e0b\uff0c\u4f60\u662f\u6709\u4e24\u4e2a\u5904\u7406\u5668\uff08\u4f60\u548c\u5973\u53cb \ud83d\ude0d\uff09\u7684\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16\uff0c\u4e24\u4e2a\u4eba\u90fd\u5728\u7b49\u5f85 \ud83d\udd59 \uff0c\u5e76\u4e14\u4f60\u4eec\u7684\u6ce8\u610f\u529b \u23ef \u957f\u65f6\u95f4\u90fd\u4e13\u6ce8\u4e8e\u201c\u5728\u67dc\u53f0\u524d\u7b49\u5f85 \ud83d\udd59\u201d\u3002 \u5e76\u884c\u5feb\u9910\u5e97\u6709 8 \u4e2a\u5904\u7406\u5668\uff08\u6536\u94f6\u5458/\u53a8\u5e08\uff09\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\uff0c\u5e76\u53d1\u6c49\u5821\u5e97\u53ea\u6709 2 \u4e2a\uff081 \u540d\u6536\u94f6\u5458\u548c 1 \u4f4d\u53a8\u5e08\uff09\ud83d\udc81 \ud83d\udc68\u200d\ud83c\udf73\u3002 \u4f46\u5b83\u7684\u6700\u7ec8\u4f53\u9a8c\u5e76\u4e0d\u597d \ud83d\ude1e\u3002 \u8fd9\u5c31\u662f\u6c49\u5821 \ud83c\udf54 \u5e76\u884c\u7b49\u6548\u7684\u6545\u4e8b\u3002 \u94f6\u884c\u662f\u73b0\u5b9e\u751f\u6d3b\u4e2d\u66f4\u8d34\u8fd1\u4e8e\u6b64\u7684\u4f8b\u5b50\u3002 \u76f4\u5230\u73b0\u5728\uff0c\u8fd8\u6709\u5f88\u591a\u94f6\u884c\u90fd\u8bbe\u7f6e\u4e86\u591a\u4e2a\u6536\u94f6\u5458 \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\uff0c\u4f46\u5f80\u5f80\u4f1a\u6392\u7740\u5927\u957f\u961f \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\u3002 \u6bcf\u4e2a\u6536\u94f6\u5458\u90fd\u8981\u4e3a\u4e00\u4e2a\u53c8\u4e00\u4e2a\u5ba2\u6237\u5b8c\u6210\u6240\u6709\u7684\u5de5\u4f5c \ud83d\udc68\u200d\ud83d\udcbc\u23ef\u3002 \u800c\u4e14\u4f60\u5fc5\u987b\u6392\u5f88\u957f\u65f6\u95f4\u7684\u961f\uff0c\u8981\u4e0d\u7136\u5c31\u8fc7\u53f7\u91cd\u6392\u3002 \u6240\u4ee5\u4f60\u6700\u597d\u8fd8\u662f\u522b\u5e26\u7740\u5973\u53cb\u53bb\u94f6\u884c\u529e\u4e8b \ud83d\ude0d\u3002 \u6c49\u5821\u7684\u7ed3\u8bba \u00b6 \u5728\u8fd9\u4e2a\u201c\u548c\u5973\u53cb\u4e00\u8d77\u5403\u6c49\u5821\u201d\u573a\u666f\u4e2d\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u7b49 \ud83d\udd59\uff0c\u6240\u4ee5\u8fd8\u662f\u5e76\u53d1\u7cfb\u7edf\u66f4\u9760\u8c31 \u23f8\ud83d\udd00\u23ef\u3002 \u8fd9\u79cd\u60c5\u51b5\u9002\u7528\u4e8e\u7edd\u5927\u591a\u6570 Web \u5e94\u7528\u3002 \u7528\u6237\u5f88\u591a\u5f88\u591a\uff0c\u4f46\u4f60\u7684\u670d\u52a1\u5668\u603b\u662f\u5728\u7b49\u5f85\u4ed6\u4eec\u4f7f\u7528 \u4e0d\u548b\u5730 \u7684\u8fde\u63a5\u53d1\u9001\u8bf7\u6c42\u3002 \u7136\u540e\u53c8\u662f\u7b49\u5f85 \ud83d\udd59 \u8fd4\u56de\u54cd\u5e94\u3002 \u8fd9\u79cd\u201c\u7b49\u5f85\u201d \ud83d\udd59 \u867d\u7136\u662f\u4ee5\u5fae\u79d2\u4e3a\u5355\u4f4d\u7684\uff0c\u4f46\u628a\u5b83\u4eec\u52a0\u5728\u4e00\u8d77\uff0c\u8fd8\u662f\u4f1a\u7b49\u5f88\u957f\u65f6\u95f4\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5f00\u53d1 Web API \u4f7f\u7528\u5f02\u6b65\u7f16\u7801 \u23f8\ud83d\udd00\u23ef \u66f4\u9760\u8c31\u7684\u539f\u56e0\u3002 \u5927\u591a\u6570\u6d41\u884c\u7684 Python \u6846\u67b6\uff08\u5305\u62ec Flask \u548c Django\uff09\u90fd\u662f\u5728 Python \u63a8\u51fa\u5f02\u6b65\u529f\u80fd\u524d\u5f00\u53d1\u7684\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u90e8\u7f72\u652f\u6301\u5e76\u884c\u6267\u884c\u65b9\u5f0f\uff0c\u8fd8\u652f\u6301\u4e00\u79cd\u4e0d\u5982\u65b0\u529f\u80fd\u8fd9\u822c\u5f3a\u5927\u7684\u65e7\u5f0f\u5f02\u6b65\u6267\u884c\u65b9\u5f0f\u3002 Python \u5f02\u6b65\u7f51\u7edc\u7684\u4e3b\u8981\u89c4\u8303 \uff08ASGI\uff09\u662f Django \u5f00\u53d1\u7684\uff0c\u8fd8\u6dfb\u52a0\u4e86\u5bf9 WebSockets \u7684\u652f\u6301\u3002 \u8fd9\u79cd\u5f02\u6b65\u65b9\u5f0f\u4e5f\u662f\u8ba9 NodeJS \u5e7f\u4e3a\u6d41\u884c\u7684\u539f\u56e0\uff08\u5373\u4f7f NodeJS \u4e0d\u652f\u6301\u5e76\u884c\uff09\uff0c\u540c\u65f6\u8fd9\u4e5f\u662f Go \u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5f3a\u52b2\u7684\u539f\u56e0\u3002 FastAPI \u4e5f\u53ef\u4ee5\u63d0\u4f9b\u540c\u7b49\u6027\u80fd\u3002 \u501f\u52a9\u4e8e Starlette \uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u5e76\u884c\u4e0e\u5f02\u6b65\uff0c\u4ece\u800c\u83b7\u5f97\u6bd4\u5927\u591a\u6570 NodeJS \u6846\u67b6\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u751a\u81f3\u662f\u80fd\u4e0e GO \uff08\u66f4\u8fd1\u4f3c\u4e8e C \u7684\u7f16\u8bd1\u8bed\u8a00\uff09\u6bd4\u80a9\u7684\u6027\u80fd\u3002 \u5e76\u53d1\u6bd4\u5e76\u884c\u66f4\u597d\u5417\uff1f \u00b6 \u4e0d\uff01\u8fd9\u4e2a\u6545\u4e8b\u60f3\u8868\u8fbe\u7684\u4e0d\u662f\u8fd9\u4e2a\u610f\u601d\u3002 \u5e76\u53d1\u548c\u5e76\u884c\u4e0d\u4e00\u6837\u3002\u5f88\u591a\u6d89\u53ca\u7b49\u5f85\u7684 \u7279\u5b9a \u573a\u666f\u4e0b\uff0c\u5b83\u786e\u5b9e\u66f4\u597d\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u5bf9\u4e8e\u5f00\u53d1 Web \u5e94\u7528\uff0c\u5e76\u53d1\u4e00\u822c\u8981\u597d\u5f88\u591a\u3002\u4f46\u4e0d\u662f\u6240\u6709\u573a\u666f\u5e76\u53d1\u90fd\u6bd4\u5e76\u884c\u66f4\u597d\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u5e73\u8861\uff0c\u5047\u8bbe\u4e0b\u9762\u8fd9\u4e2a\u8d85\u7ea7\u77ed\u7bc7\u5c0f\u8bf4\uff1a \u4f60\u5fc5\u987b\u6253\u626b\u4e00\u95f4\u53c8\u5927\u53c8\u810f\u7684\u623f\u5b50\u3002 \u6ca1\u9519\uff0c\u6574\u4e2a\u6545\u4e8b\u5c31\u8fd9\u4e48\u957f\u3002 \u4e0d\u7528\u5728\u4efb\u4f55\u5730\u65b9\u7b49\u5f85 \ud83d\udd59\uff0c\u53ea\u662f\u623f\u5b50\u91cc\u7684\u6bcf\u4e2a\u623f\u95f4\u90fd\u6709\u5927\u91cf\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u50cf\u6c49\u5821\u793a\u4f8b\u4e00\u6837\u8f6e\u6d41\u4f9d\u6b21\u64cd\u4f5c\uff0c\u5148\u662f\u5ba2\u5385\u3001\u518d\u662f\u53a8\u623f\uff0c\u4f60\u5b8c\u5168\u4e0d\u9700\u8981\u7b49 \ud83d\udd59 \uff0c\u53ea\u662f\u6253\u626b\u6253\u626b\u518d\u6253\u626b\uff0c\u8f6e\u6d41\u4f9d\u6b21\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002 \u662f\u5426\u8f6e\u6d41\u4f9d\u6b21\uff08\u5e76\u53d1\uff09\u4e0d\u4f1a\u5f71\u54cd\u5b8c\u6210\u5de5\u4f5c\u6240\u9700\u7684\u65f6\u95f4\u91cf\uff0c\u5de5\u4f5c\u91cf\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e00\u5171\u6709 8 \u4f4d\u524d\u6536\u94f6\u5458/\u53a8\u5e08\uff0c\u73b0\u5728\u662f\u6e05\u6d01\u5de5 \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\uff0c\u4ed6\u4eec\u6bcf\u4e2a\u4eba\uff08\u52a0\u4e0a\u4f60\uff09\u90fd\u8d1f\u8d23\u623f\u5b50\u91cc\u7684\u4e00\u7247\u533a\u57df\uff0c\u4f60\u53ef\u4ee5\u4ee5 \u5e76\u884c \u7684\u65b9\u5f0f\u5b8c\u6210\u6240\u6709\u5de5\u4f5c\uff0c\u6709\u4e86\u989d\u5916\u7684\u5e2e\u52a9\uff0c\u5c31\u53ef\u4ee5\u66f4\u5feb\u5e72\u5b8c\u3002 \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u6bcf\u4f4d\u6e05\u6d01\u5de5\uff08\u5305\u62ec\u4f60\u81ea\u5df1\uff09\u90fd\u662f\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u53ea\u505a\u81ea\u5df1\u7684\u90a3\u90e8\u5206\u5de5\u4f5c\u3002 \u7531\u4e8e\u5927\u591a\u6570\u6267\u884c\u65f6\u95f4\u90fd\u662f\u5b9e\u5b9e\u5728\u5728\u7684\u5de5\u4f5c\uff08\u800c\u4e0d\u662f\u5728\u7b49\u5f85\uff09\uff0c\u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u90fd\u662f\u7531\u4e00\u4e2a CPU \u5b8c\u6210\u7684\uff0c\u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4e3a \u201cCPU \u5bc6\u96c6\u578b\u201d\u3002 CPU \u5bc6\u96c6\u578b\u64cd\u4f5c\u7684\u5e38\u89c1\u6848\u4f8b\u4e00\u822c\u90fd\u662f\u9700\u8981\u590d\u6742\u6570\u5b66\u5904\u7406\u7684\u5bf9\u8c61\u3002 \u4f8b\u5982; \u5904\u7406 \u97f3\u9891 \u6216 \u56fe\u50cf \u8ba1\u7b97\u673a\u89c6\u89c9 \uff1a \u56fe\u50cf\u4e00\u822c\u7531\u51e0\u767e\u4e07\u4e2a\u50cf\u7d20\u7ec4\u6210\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709 3 \u4e2a\u503c/\u989c\u8272\uff0c\u5904\u7406\u56fe\u50cf\u6b63\u5e38\u90fd\u9700\u8981\u5bf9\u8fd9\u4e9b\u50cf\u7d20\u540c\u65f6\u8fdb\u884c\u8ba1\u7b97 \u673a\u5668\u5b66\u4e60 \uff1a\u6b63\u5e38\u9700\u8981\u8fdb\u884c\u5927\u91cf\u201c\u77e9\u9635\u201d\u4e0e\u201c\u5411\u91cf\u201d\u4e58\u6cd5\u3002\u53ef\u4ee5\u628a\u5b83\u60f3\u50cf\u6210\u4e00\u4e2a\u5de8\u5927\u7684\u3001\u5305\u542b\u6570\u5b57\u7684\u8868\u683c\uff0c\u6240\u6709\u8fd9\u4e9b\u6570\u5b57\u90fd\u5728\u540c\u65f6\u76f8\u4e58 \u6df1\u5ea6\u5b66\u4e60 \uff1a \u673a\u5668\u5b66\u4e60\u7684\u5b50\u9886\u57df\uff0c\u56e0\u6b64\u53ef\u4ee5\u5e94\u7528\u76f8\u540c\u89c4\u5219\u3002\u53ea\u4e0d\u8fc7\u5b83\u4e0d\u662f\u5355\u4e2a\u8981\u5b9e\u73b0\u6570\u5b57\u76f8\u4e58\u7684\u8868\u683c\uff0c\u800c\u662f\u4e00\u7ec4\u8fd9\u6837\u7684\u8868\u683c\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528\u7279\u6b8a\u5904\u7406\u5668\u6765\u6784\u5efa\u6216\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b \u5e76\u53d1 + \u5e76\u884c\uff1a Web + \u673a\u5668\u5b66\u4e60 \u00b6 Web \u5f00\u53d1\u7ecf\u5e38\u4f1a\u7528\u5230\u5e76\u53d1\uff0c\u8fd9\u662f FastAPI \u7684\u4f18\u52bf\uff0c\u4e5f\u662f NodeJS \u7684\u4e3b\u8981\u4f18\u52bf\u3002 \u4f46\u4f60\u8fd8\u53ef\u4ee5\u5728\u5904\u7406\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4e2d\u7684 CPU \u5bc6\u96c6\u578b \u5de5\u4f5c\u8d1f\u8f7d\u65f6\u5229\u7528\u5e76\u884c\u4e0e\u591a\u8fdb\u7a0b\uff08\u591a\u4e2a\u8fdb\u7a0b\u5e76\u884c\u8fd0\u884c\uff09\u7684\u4f18\u52bf\u3002 \u518d\u52a0\u4e0a Python \u73b0\u5728\u662f \u6570\u636e\u79d1\u5b66 \u3001\u673a\u5668\u5b66\u4e60\uff0c\u7279\u522b\u662f\u6df1\u5ea6\u5b66\u4e60\u7684\u4e3b\u6d41\u8bed\u8a00\uff0cFastAPI \u56e0\u6b64\u7279\u522b\u9002\u5408\u5f00\u53d1\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u7684 Web API \u4e0e\u5e94\u7528\uff08\u76f8\u5bf9\u4f17\u591a\u6846\u67b6\u800c\u8a00\uff09\u3002 \u6709\u5173\u5982\u4f55\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u5b9e\u73b0\u5e76\u884c\u7684\u5185\u5bb9\uff0c\u8be6\u89c1 \u90e8\u7f72 \u4e00\u7ae0\u3002 async \u4e0e await \u00b6 \u73b0\u4ee3 Python \u652f\u6301\u4ee5\u975e\u5e38\u76f4\u89c2\u7684\u65b9\u5f0f\u5b9a\u4e49\u5f02\u6b65\u4ee3\u7801\u3002\u8fd9\u79cd\u65b9\u5f0f\u8ba9\u5b83\u770b\u8d77\u6765\u5c31\u50cf\u666e\u901a\u7684\u201c\u5e8f\u5217\u201d\u4ee3\u7801\uff0c\u4f46\u5374\u80fd\u8ba9\u7a0b\u5e8f\u5728\u6b63\u786e\u7684\u65f6\u523b\u201c\u7b49\u5f85\u201d\u3002 \u5f53\u67d0\u4e2a\u64cd\u4f5c\u5728\u7ed9\u51fa\u7ed3\u679c\u524d\u8981\u7b49\u5f85\u65f6\uff0c\u5982\u679c\u652f\u6301 Python \u7684\u5f02\u6b65\u65b0\u529f\u80fd\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a burgers = await get_burgers ( 2 ) \u8fd9\u91cc\u7684\u5173\u952e\u662f await \u3002\u5b83\u544a\u8bc9 Python \u628a\u7ed3\u679c\u5b58\u50a8\u5230 burgers \u524d\uff0c\u5fc5\u987b\u8981\u7b49 \u23f8 get_burgers(2) \u5b8c\u6210\u64cd\u4f5c \ud83d\udd59\u3002\u4f7f\u7528 await \uff0c Python \u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u540c\u65f6\u505a\u4e9b\u522b\u7684\u4e8b\u60c5 \ud83d\udd00\uff08\u6bd4\u5982\u63a5\u6536\u53e6\u4e00\u4e2a\u8bf7\u6c42\uff09\u3002 await \u53ea\u6709\u5728\u652f\u6301\u5f02\u6b65\u7684\u51fd\u6570\u5185\u90e8\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u4e3a\u6b64\uff0c\u8981\u4f7f\u7528 async def \u58f0\u660e\u51fd\u6570\u3002 async def get_burgers ( number : int ): # Do some asynchronous stuff to create the burgers return burgers \u2026\u2026\u4ee5\u6b64\u66ff\u6362 def \uff1a # This is not asynchronous def get_sequential_burgers ( number : int ): # Do some sequential stuff to create the burgers return burgers \u4f7f\u7528 async def \uff0c Python \u5c31\u77e5\u9053\u5728\u8fd9\u4e2a\u51fd\u6570\u5185\u5fc5\u987b\u8981\u7559\u610f await \u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14 await \u8868\u8fbe\u5f0f\u53ef\u4ee5\u201c\u6682\u505c\u201d\u51fd\u6570\u6267\u884c\uff0c\u5e76\u5728\u8fd4\u56de\u4e4b\u524d\u53ef\u4ee5\u505a\u4e9b\u5176\u4ed6\u4e8b\u60c5\u3002 \u8c03\u7528 async def \u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u8981\u4f7f\u7528 await \u3002\u56e0\u6b64\uff0c\u5982\u4e0b\u4ee3\u7801\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 # This won't work, because get_burgers was defined with: async def burgers = get_burgers ( 2 ) \u56e0\u6b64\uff0c\u4f7f\u7528\u7531 await \u8c03\u7528\u7684\u652f\u6301\u5e93\uff0c\u9700\u8981\u4f7f\u7528 async def \u521b\u5efa \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a @app . get ( '/burgers' ) async def read_burgers (): burgers = await get_burgers ( 2 ) return burgers \u66f4\u591a\u6280\u672f\u7ec6\u8282 \u00b6 \u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 await \u53ea\u80fd\u5728 async def \u5b9a\u4e49\u7684\u51fd\u6570\u5185\u4f7f\u7528\u3002 \u4f46\u540c\u65f6\uff0c\u7531 async def \u5b9a\u4e49\u7684\u51fd\u6570\u5fc5\u987b\u8981\u201c\u7b49\u5f85\u201d\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 async def \u7684\u51fd\u6570\u53ea\u80fd\u5728\u7531 async def \u5b9a\u4e49\u7684\u51fd\u6570\u5185\u88ab\u8c03\u7528\u3002 \u8fd9\u662f\u4e2a\u9e21\u751f\u86cb\u3001\u86cb\u751f\u9e21\u7684\u95ee\u9898\uff0c\u600e\u4e48\u8c03\u7528\u7b2c\u4e00\u4e2a async \u51fd\u6570\u5462\uff1f \u4f7f\u7528 FastAPI \u5c31\u4e0d\u9700\u8981\u62c5\u5fc3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u201c\u7b2c\u4e00\u4e2a\u201d\u51fd\u6570\u5c31\u662f \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u800c FastAPI \u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u3002 \u4f46\u5982\u679c\u4e0d\u5728 FastAPI \u4e2d\u4f7f\u7528 async / await \uff0c\u5219\u8981\u53c2\u9605 Python \u5b98\u6863 \u3002 \u5176\u4ed6\u5f02\u6b65\u7f16\u7801\u5f62\u5f0f \u00b6 async \u4e0e await \u5bf9\u4e8e Python \u6765\u8bf4\u4e5f\u662f\u76f8\u5bf9\u8f83\u65b0\u7684\u3002 \u4f46\u5b83\u8ba9\u5f02\u6b65\u7f16\u7801\u53d8\u5f97\u66f4\u5bb9\u6613\u4e86\u3002 \u73b0\u4ee3 JavaScript \uff08\u5728\u6d4f\u89c8\u5668\u4e0e NodeJS \u4e2d\uff09\u6700\u8fd1\u4e5f\u6dfb\u52a0\u4e86\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u8bed\u6cd5\u3002 \u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u5904\u7406\u5f02\u6b65\u7f16\u7801\u8d85\u7ea7\u590d\u6742\uff0c\u800c\u4e14\u7279\u522b\u96be\u3002 \u5728 Python \u4ee5\u524d\u7684\u7248\u672c\u4e2d\uff0c\u53ea\u80fd\u4f7f\u7528\u7ebf\u7a0b\u6216 Gevent \u3002\u4f46\u8fd9\u79cd\u4ee3\u7801\u975e\u5e38\u590d\u6742\u96be\u61c2\uff0c\u4e5f\u4e0d\u65b9\u4fbf\u8c03\u8bd5\u4e0e\u7406\u89e3\u3002 \u5728 NodeJS/JavaScript \u4ee5\u524d\u7684\u7248\u672c\u4e2d\u4f7f\u7528\u201c\u56de\u8c03\u201d\uff0c\u8fd9\u79cd\u65b9\u5f0f\u76f4\u901a\u201c \u56de\u8c03\u5730\u72f1 \u201d\u3002 \u534f\u7a0b \u00b6 \u534f\u7a0b \u53ea\u662f\u4e2a\u975e\u5e38\u82b1\u54e8\u7684\u672f\u8bed\uff0c\u6307\u7684\u662f\u7531 async def \u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\u3002Python \u628a\u5b83\u8bc6\u522b\u4e3a\u53ef\u4ee5\u5728\u67d0\u4e9b\u70b9\u542f\u52a8\u6216\u7ec8\u6b62\u7684\u51fd\u6570\uff0c\u4f46\u5b83\u8fd8\u53ef\u4ee5\u5728\u5185\u90e8\u6682\u505c \u23f8\uff0c\u53ea\u8981\u5728\u5b83\u7684\u5185\u90e8\u5305\u542b await \u3002 \u4f46\u662f\u4f7f\u7528 async \u4e0e await \u7684\u5f02\u6b65\u7f16\u7801\u7684\u8fd9\u79cd\u529f\u80fd\u5e38\u5e38\u88ab\u7edf\u79f0\u4e3a\u201c\u534f\u7a0b\u201d\u3002\u5b83\u4e0e Go \u7684\u6838\u5fc3\u529f\u80fd \u201cGoroutines\u201d \u76f8\u5bf9\u5e94\u3002 \u7ed3\u8bba \u00b6 \u6211\u4eec\u518d\u56de\u8fc7\u5934\u6765\u770b\u4e00\u4e0b\u524d\u6587\u7684\u77ed\u8bed\u3002 \u73b0\u4ee3 Python \u652f\u6301 \u5f02\u6b65\u7f16\u7801 \uff0c\u4f7f\u7528\u7684\u662f async \u4e0e await \u5173\u952e\u5b57\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a \u534f\u7a0b \u3002 \u73b0\u5728\u518d\u770b\u8fd9\u53e5\u8bdd\u5c31\u66f4\u6709\u611f\u89c9\u4e86\u5427\u3002\u2728 \u6240\u6709\u8fd9\u4e9b\u6280\u672f\u90fd\uff08\u901a\u8fc7 Starlette\uff09\u4e3a FastAPI \u8d4b\u80fd\uff0c\u8ba9 FastAPI \u5177\u6709\u8ba9\u4eba\u53f9\u4e3a\u89c2\u6b62\u7684\u6027\u80fd\u3002 \u975e\u5e38\u7ec6\u7684\u6280\u672f\u7ec6\u8282 \u00b6 \u8b66\u544a \u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u6bb5\u5185\u5bb9\u3002 \u8fd9\u4e9b\u662f\u975e\u5e38\u7ec6\u7684\u6280\u672f\u7ec6\u8282\uff0c\u4ecb\u7ecd\u7684\u662f FastAPI \u5e95\u5c42\u8fd0\u4f5c\u673a\u5236\u3002 \u5982\u679c\u4f60\u4e86\u89e3\u8db3\u591f\u7684\u6280\u672f\u77e5\u8bc6\uff08\u534f\u7a0b\u3001\u7ebf\u7a0b\u3001\u963b\u585e\u7b49\uff09\uff0c\u5e76\u5bf9 FastAPI \u5982\u4f55\u5904\u7406 async def \u548c\u666e\u901a\u7684 def \u611f\u5174\u8da3\uff0c\u8bf7\u7ee7\u7eed\u3002 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u00b6 \u4f7f\u7528\u666e\u901a def \u66ff\u4ee3 async def \u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u65f6\uff0c\u8981\u5728\u7b49\u5f85\u7684\u5916\u90e8\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\uff0c\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff08\u56e0\u4e3a\u5b83\u4f1a\u963b\u585e\u670d\u52a1\u5668\uff09\u3002 \u5982\u679c\u4f60\u4e4b\u524d\u4f7f\u7528\u7684\u5f02\u6b65\u6846\u67b6\u4e0d\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\u8fd0\u884c\uff0c\u6216\u8005\u4f60\u4e60\u60ef\u4e86\u4f7f\u7528 def \u5b9a\u4e49\u7ec6\u788e\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u53ea\u4e3a\u4e86\u63d0\u5347\u90a3\u4e48\u4e00\u4e01\u70b9\u513f\u6027\u80fd\uff08\u7ea6 100 \u7eb3\u79d2\uff09\uff0c\u8bf7\u6ce8\u610f\uff0c\u5728 FastAPI \u4e2d\u7684\u6548\u679c\u6b63\u76f8\u53cd\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u975e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f7f\u7528\u6267\u884c\u963b\u585e I/O \u7684\u4ee3\u7801\uff0c\u6700\u597d\u4f7f\u7528 async def \u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u5f62\u4e0b\uff0c FastAPI \u4ecd\u4f1a\u6bd4\u4f60\u4e4b\u524d\u4f7f\u7528\u7684\u6846\u67b6 \u66f4\u5feb \uff0c\u6700\u8d77\u7801\u4e5f\u80fd\u63d0\u4f9b\u5dee\u4e0d\u591a\u7684\u6027\u80fd\u3002 \u4f9d\u8d56\u9879 \u00b6 \u4f9d\u8d56\u9879 \u4e5f\u53ef\u4ee5\u5e94\u7528\u5f02\u6b65\u7f16\u7801\u3002\u5982\u679c\u4f9d\u8d56\u9879\u662f\u6807\u51c6\u7684 def \u51fd\u6570\uff0c\u800c\u4e0d\u662f async def \uff0c\u5219\u662f\u5728\u5916\u90e8\u7ebf\u7a0b\u6c60\u91cc\u8fd0\u884c\u3002 \u5b50\u4f9d\u8d56\u9879 \u00b6 \u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u4f9d\u8d56\u9879\u548c \u5b50\u4f9d\u8d56\u9879 \uff08\u4f5c\u4e3a\u51fd\u6570\u5b9a\u4e49\u7684\u53c2\u6570\uff09\u3002\u5176\u4e2d\u4e00\u4e9b\u53ef\u4ee5\u662f async def \u521b\u5efa\u7684\uff0c\u53e6\u4e00\u4e9b\u662f\u7531\u666e\u901a\u7684 def \u521b\u5efa\u7684\u3002\u8fd9\u6837\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u4f7f\u7528\u666e\u901a\u7684 def \u521b\u5efa\u7684\u51fd\u6570\u662f\u7528\u5916\u90e8\u7ebf\u7a0b\uff08\u6765\u81ea\u7ebf\u7a0b\u6c60\uff09\u8c03\u7528\u7684\uff0c\u800c\u4e0d\u662f\u201c\u88ab\u7b49\u5f85\u201d\u3002 \u5176\u4ed6\u5de5\u5177\u51fd\u6570 \u00b6 \u76f4\u63a5\u8c03\u7528\u7684\u5176\u4ed6\u4efb\u610f\u5de5\u5177\u51fd\u6570\u90fd\u53ef\u4ee5\u7528\u666e\u901a\u7684 def \u6216 async def \u521b\u5efa\uff0cFastAPI \u4e0d\u4f1a\u5f71\u54cd\u8c03\u7528\u5de5\u5177\u51fd\u6570\u7684\u65b9\u5f0f\u3002 \u8fd9\u4e0e FastAPI \u4e3a\u4f60\u8c03\u7528\u7684\u51fd\u6570\u6b63\u76f8\u53cd\uff1a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e0e\u4f9d\u8d56\u9879\u3002 \u5982\u679c\u5de5\u5177\u51fd\u6570\u662f\u7531 def \u58f0\u660e\u7684\u666e\u901a\u51fd\u6570\uff0c\u5c31\u9700\u8981\u76f4\u63a5\u8c03\u7528\uff08\u4e0e\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u5199\u7684\u4e00\u6837\uff09\uff0c\u800c\u4e0d\u662f\u4ece\u7ebf\u7a0b\u6c60\u4e2d\u8c03\u7528\uff0c\u5982\u679c\u662f\u7531 async def \u521b\u5efa\u7684\u51fd\u6570\uff0c\u5219\u5728\u4ee3\u7801\u91cc\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u8981 await \u8fd9\u4e2a\u51fd\u6570\u3002 \u518d\u6b21\u5f3a\u8c03\uff0c\u8fd9\u4e9b\u662f\u975e\u5e38\u6df1\u5165\u7684\u6280\u672f\u7ec6\u8282\uff0c\u5728\u6df1\u5165\u63a2\u7d22\u65f6\u53ef\u80fd\u4f1a\u7528\u7684\u4e0a\u3002 \u82e5\u975e\u5982\u6b64\uff0c\u4f60\u53ea\u8981\u719f\u7ec3\u638c\u63e1\u4e0a\u6587\u4e2d \u7b49\u4e0d\u53ca\u4e86\uff1f \u4e00\u8282\u7684\u5185\u5bb9\u5c31\u591f\u4e86\u3002","title":"\u5e76\u53d1\u4e0e\u5f02\u6b65"},{"location":"async/#_1","text":"\u672c\u7ae0\u4ecb\u7ecd\u4e00\u4e9b\u5173\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 async def \u8bed\u6cd5\uff0c\u4ee5\u53ca\u5f02\u6b65\u3001\u5e76\u53d1\u3001\u5e76\u884c\u7684\u80cc\u666f\u77e5\u8bc6\u3002","title":"\u5e76\u53d1\u4e0e\u5f02\u6b65"},{"location":"async/#_2","text":"TL;DR: \u5982\u679c\u9700\u8981\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528 await \u8c03\u7528\u7b2c\u4e09\u65b9\u652f\u6301\u5e93\uff1a results = await some_library () \u5c31\u8981\u4f7f\u7528 async def \u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff1a @app . get ( '/' ) async def read_results (): results = await some_library () return results \u7b14\u8bb0 \u53ea\u80fd\u5728 async def \u521b\u5efa\u7684\u51fd\u6570\u5185\u90e8\u4f7f\u7528 await \u3002 \u5982\u679c\u4f7f\u7528\u4e0d\u652f\u6301 await \u7684\u7b2c\u4e09\u65b9\u652f\u6301\u5e93\u4e0e\uff08\u6570\u636e\u5e93\u3001API\u3001\u6587\u4ef6\u7cfb\u7edf\u7b49\uff09\u5bf9\u8c61\u901a\u4fe1\uff0c\uff08\u8fd9\u662f\u7edd\u5927\u591a\u6570\u6570\u636e\u5e93\u652f\u6301\u5e93\u7684\u73b0\u72b6\uff09\uff0c\u5c31\u8981\u53ea\u80fd\u4f7f\u7528 def \u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u58f0\u660e\u4e3a\u666e\u901a\u51fd\u6570\uff0c\u5982\u4e0b\uff1a @app . get ( '/' ) def results (): results = some_library () return results \u5982\u679c\u4f60\u7684\u5e94\u7528\uff08\u4e0d\u77e5\u4e3a\u4f55\uff09\u867d\u7136\u4e0d\u4e0e\u5176\u4ed6\u5bf9\u8c61\u901a\u4fe1\uff0c\u4f46\u4ecd\u8981\u7b49\u5f85\u5176\u54cd\u5e94\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 async def \u3002 \u5982\u679c\u4e0d\u77e5\u9053\u7528\u4ec0\u4e48\u597d\uff0c\u5c31\u7528\u666e\u901a\u51fd\u6570\u3002 \u6ce8\u610f \uff1a\u53ef\u4ee5\u628a\u666e\u901a\uff08 def \uff09 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e0e\u5f02\u6b65\uff08 asnyc def \uff09 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u6df7\u5728\u4e00\u8d77\u4f7f\u7528\uff0c\u4e3a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u9009\u62e9\u6700\u9002\u5408\u7684\u65b9\u6848\u3002FastAPI \u80fd\u6b63\u786e\u533a\u5206\u4e0d\u540c\u7c7b\u578b\u7684\u51fd\u6570\u3002 \u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c\u5bf9\u4e0a\u8ff0\u4efb\u610f\u60c5\u51b5\uff0cFastAPI \u90fd\u662f\u4ee5\u5f02\u6b65\u65b9\u5f0f\u8fd0\u884c\u7684\uff0c\u901f\u5ea6\u6781\u5feb\u3002 \u4f46\u4f7f\u7528\u4e0a\u8ff0\u65b9\u5f0f\uff0c\u5b83\u80fd\u66f4\u597d\u5730\u4f18\u5316\u6027\u80fd\u3002","title":"\u7b49\u4e0d\u53ca\u4e86\uff1f"},{"location":"async/#_3","text":"\u73b0\u4ee3 Python \u652f\u6301 \u201c\u5f02\u6b65\u7f16\u7801\u201d \uff0c\u4f7f\u7528\u7684\u662f async \u4e0e await \u5173\u952e\u5b57\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a \u534f\u7a0b \u3002 \u4e0b\u9762\u6211\u4eec\u5206\u522b\u4ecb\u7ecd\u8fd9\u53e5\u8bdd\u91cc\u7684\u51e0\u4e2a\u6982\u5ff5\uff1a \u5f02\u6b65\u7f16\u7801 async \u4e0e await \u534f\u7a0b","title":"\u6280\u672f\u7ec6\u8282"},{"location":"async/#_4","text":"\u5f02\u6b65\u7f16\u7801\u662f\u6307\u7f16\u7a0b\u8bed\u8a00 \ud83d\udcac \u4ee5\u67d0\u79cd\u65b9\u5f0f\u544a\u8bc9\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16\uff0c\u5728\u4ee3\u7801\u4e2d\u7684\u67d0\u4e2a\u70b9\uff0c\u5b83 \ud83e\udd16 \u5fc5\u987b\u7b49\u5f85 \u67d0\u4e9b\u5bf9\u8c61 \u5728\u67d0\u4e9b\u4f4d\u7f6e\u5b8c\u6210\u67d0\u4e9b\u64cd\u4f5c\u3002\u5047\u8bbe\u6211\u4eec\u628a \u8fd9\u4e9b\u5bf9\u8c61 \u79f0\u4e3a\u201c\u6162\u6587\u4ef6\u201d \ud83d\udcdd\u3002 \u5728\u201c\u6162\u6587\u4ef6\u201d \ud83d\udcdd \u64cd\u4f5c\u7ed3\u675f\u524d\u7684\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u8ba1\u7b97\u673a\u53ef\u4ee5\u53bb\u6267\u884c\u5176\u4ed6\u64cd\u4f5c\u3002 \u5728\u7b49\u5f85\u671f\u95f4\uff0c\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16 \u7ecf\u5e38\u4f1a\u67e5\u770b\u662f\u53ef\u4ee5\u7ee7\u7eed\u64cd\u4f5c\uff0c\u8fd8\u662f\u8981\u7ee7\u7eed\u7b49\u5f85\uff0c\u6216\u8005\u5f53\u5b83\u5b8c\u6210\u90a3\u4e2a\u70b9\u80fd\u505a\u7684\u6240\u6709\u64cd\u4f5c\u540e\uff0c\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16 \u4f1a\u67e5\u770b\u5b83\u6240\u7b49\u5f85\u7684\u4efb\u52a1\u662f\u5426\u5b8c\u6210\u4e86\uff0c\u5e76\u7ee7\u7eed\u6267\u884c\u5b83\u672c\u8be5\u5b8c\u6210\u7684\u64cd\u4f5c\u3002 \u63a5\u4e0b\u6765\uff0c\u5b83 \ud83e\udd16 \u5b8c\u6210\u7b2c\u4e00\u9879\u4efb\u52a1\uff08\u6bd4\u5982\u8bf4\uff0c\u201c\u6162\u6587\u4ef6\u201d \ud83d\udcdd\uff09\uff0c\u7136\u540e\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u3002 \"\u7b49\u5f85\u67d0\u4e9b\u5bf9\u8c61\"\u901a\u5e38\u662f\u6307\uff08\u4e0e\u5904\u7406\u5668\u548c\u5185\u5b58\u76f8\u6bd4\uff09\u901f\u5ea6\u76f8\u5bf9\u8f83\u201c\u6162\u201d\u7684 I/O \u64cd\u4f5c\uff0c\u6bd4\u5982\u7b49\u5f85\u5982\u4e0b\u5bf9\u8c61\uff1a \u901a\u8fc7\u7f51\u7edc\uff0c\u4ece\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e \u901a\u8fc7\u7f51\u7edc\uff0c\u7531\u7a0b\u5e8f\u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u63a5\u6536\u7684\u6570\u636e \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u4ece\u78c1\u76d8\u8bfb\u53d6\u5e76\u4f20\u9012\u7ed9\u7a0b\u5e8f\u7684\u6587\u4ef6\u5185\u5bb9 \u5728\u64cd\u4f5c\u7cfb\u7edf\u4e2d\uff0c\u7531\u7a0b\u5e8f\u5199\u5165\u78c1\u76d8\u7684\u5185\u5bb9 \u8fdc\u7a0b API \u64cd\u4f5c \u8981\u5b8c\u6210\u7684\u6570\u636e\u5e93\u64cd\u4f5c \u6570\u636e\u5e93\u67e5\u8be2\u8fd4\u56de\u7684\u7ed3\u679c \u7b49 \u56e0\u4e3a\u6267\u884c\u65f6\u4e3b\u8981\u662f\u7b49\u5f85 I/O \u64cd\u4f5c\uff0c\u5b83\u4eec\u4e5f\u88ab\u79f0\u4e3a\u201cI/O \u5bc6\u96c6\u578b\u201d\u64cd\u4f5c\u3002 \u79f0\u4e4b\u4e3a \u201c\u5f02\u6b65\u201d\uff0c\u662f\u56e0\u4e3a\u8ba1\u7b97\u673a/\u7a0b\u5e8f\u4e0d\u5fc5\u4e0e\u6162\u4efb\u52a1\u201c\u540c\u6b65\u201d\uff0c\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u53ea\u662f\u7b49\u5f85\u4efb\u52a1\u5b8c\u6210\u7684\u90a3\u4e00\u523b\uff0c\u624d\u83b7\u53d6\u4efb\u52a1\u7ed3\u679c\u5e76\u7ee7\u7eed\u6267\u884c\u3002 \u53cd\u4e4b\uff0c\u5728\u201c\u5f02\u6b65\u201d\u7cfb\u7edf\u4e2d\uff0c\u4efb\u52a1\u5b8c\u6210\u540e\uff0c\u4f1a\u8017\u8d39\u4e00\u70b9\u65f6\u95f4\uff08\u51e0\u5fae\u79d2\uff09\u7b49\u5f85\u8ba1\u7b97\u673a/ \u7a0b\u5e8f\u5b8c\u6210\u5f53\u524d\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u83b7\u53d6\u4efb\u52a1\u8fd4\u56de\u7684\u7ed3\u679c\uff0c\u7ee7\u7eed\u6267\u884c\u64cd\u4f5c\u3002 \uff08\u4e0e\u201c\u5f02\u6b65\u201d\u76f8\u53cd\uff09\uff0c\u201c\u540c\u6b65\u201d\u901a\u5e38\u4e5f\u4f7f\u7528\u672f\u8bed\u201c \u5e8f\u5217\uff08sequential\uff09 \u201d\uff0c\u8fd9\u662f\u56e0\u4e3a\u8ba1\u7b97\u673a/\u7a0b\u5e8f\u5728\u5207\u6362\u5230\u5176\u4ed6\u4efb\u52a1\u524d\uff0c\u603b\u662f\u6309\u5e8f\u6267\u884c\u6240\u6709\u64cd\u4f5c\u6b65\u9aa4\uff0c\u5373\u4f7f\u9700\u8981\u7b49\u5f85\u8fd9\u4e9b\u4efb\u52a1\u5b8c\u6210\u3002","title":"\u5f02\u6b65\u7f16\u7801"},{"location":"async/#_5","text":"\u4e0a\u8ff0 \u5f02\u6b65 \u7f16\u7801\u7684\u601d\u8def\u6709\u65f6\u4e5f\u53eb\u4f5c \u201c\u5e76\u53d1\uff08concurrency\uff09\u201d \uff0c\u5b83\u4e0e \u201d\u5e76\u884c\uff08parallelism\uff09\u201c \u4e0d\u4e00\u6837\u3002 \u5e76\u53d1 \u4e0e \u5e76\u884c \u90fd\u4e0e\u201c\u540c\u65f6\u53d1\u751f\u4e0d\u540c\u7684\u4e8b\u60c5\u201d\u76f8\u5173\u3002 \u4f46 \u5e76\u53d1 \u4e0e \u5e76\u884c \u7684\u7ec6\u8282\u5b8c\u5168\u4e0d\u540c\u3002 \u4e3a\u4e86\u8bf4\u660e\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\uff0c\u6211\u7f16\u4e86\u4e2a\u5173\u4e8e\u6c49\u5821\u7684\u6545\u4e8b\uff1a","title":"\u5e76\u53d1\u4e0e\u6c49\u5821"},{"location":"async/#_6","text":"\u4f60\u548c\u5973\u53cb \ud83d\ude0d \u4e00\u8d77\u53bb\u5403\u5feb\u9910 \ud83c\udf54\uff0c\u4f60\u6392\u961f\u7684\u65f6\u5019\uff0c\u6536\u94f6\u5458 \ud83d\udc81 \u4e3a\u6392\u5728\u4f60\u524d\u9762\u7684\u4eba\u4e0b\u5355\u3002 \u8f6e\u5230\u4f60\u65f6\uff0c\u4f60\u4e3a\u81ea\u5df1\u548c\u5973\u53cb \ud83d\ude0d \u4e70\u4e86 2 \u4e2a\u975e\u5e38\u7f8e\u5473\u7684\u6c49\u5821 \ud83c\udf54\u3002 \u7136\u540e\u4ed8\u94b1 \ud83d\udcb8\u3002 \u6536\u94f6\u5458\u901a\u77e5\u53a8\u623f\u91cc\u7684\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73\uff0c\u8fd9\u6837\u4ed6\u4eec\u5c31\u77e5\u9053\u8981\u7ed9\u4f60\u505a\u6c49\u5821 \ud83c\udf54 \uff08\u5373\u4fbf\u4ed6\u4eec\u73b0\u5728\u6b63\u5728\u4e3a\u4e0a\u4e00\u4e2a\u5ba2\u6237\u505a\u6c49\u5821\uff09\u3002 \u6536\u94f6\u5458 \ud83d\udc81 \u7ed9\u4e86\u4f60\u53d6\u9910\u53f7\u3002 \u7b49\u9910\u7684\u65f6\u5019\uff0c\u4f60\u56de\u53bb\u548c\u5973\u53cb \ud83d\ude0d \u627e\u4e86\u5f20\u684c\u5b50\u5750\u4e0b\uff0c\u5e76\u548c\u5973\u53cb \ud83d\ude0d \u804a\u4e86\u534a\u5929\uff08\u56e0\u4e3a\u4f60\u7684\u6c49\u5821\u975e\u5e38\u7f8e\u5473\uff0c\u8981\u82b1\u4e9b\u65f6\u95f4\u70f9\u5236 \u2728\ud83c\udf54\u2728\uff09 \u4f60\u4e00\u8fb9\u548c\u5973\u53cb \ud83d\ude0d \u804a\u5929\uff0c\u4e00\u8fb9\u7b49\u6c49\u5821 \ud83c\udf54\u3002\u8fd9\u6bb5\u65f6\u95f4\u91cc\uff0c\u4f60\u53ef\u4ee5\u606d\u7ef4\u5973\u53cb\u53c8\u8d5e\u3001\u53c8\u53ef\u7231\u3001\u53c8\u806a\u660e \u2728\ud83d\ude0d\u2728\u3002 \u5728\u7b49\u9910\u548c\u4e0e\u5973\u53cb\u804a\u5929\u7684\u540c\u65f6\uff0c\u4f60\u8fd8\u8981\u65f6\u4e0d\u65f6\u770b\u4e0b\u67dc\u53f0\u4e0a\u663e\u793a\u7684\u6570\u5b57\uff0c\u770b\u770b\u662f\u4e0d\u662f\u8f6e\u5230\u4f60\u4e86\u3002 \u5728\u67d0\u4e2a\u65f6\u70b9\uff0c\u7ec8\u4e8e\u8f6e\u5230\u4f60\u4e86\u3002\u4f60\u5230\u67dc\u53f0\u4e0a\u53d6\u4e86\u6c49\u5821 \ud83c\udf54\uff0c\u56de\u5230\u9910\u684c\u3002 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u5403\u7740\u7f8e\u5473\u7684\u6c49\u5821 \ud83c\udf54 \uff0c\u4eab\u53d7\u7f8e\u597d\u7684\u65f6\u5149 \u2728\u3002 \u5047\u8bbe\u4f60\u662f\u8fd9\u4e2a\u6545\u4e8b\u91cc\u7684\u8ba1\u7b97\u673a/\u7a0b\u5e8f\u3002 \u6392\u961f\u65f6\uff0c\u4f60\u5904\u4e8e\u7a7a\u95f2\u72b6\u6001 \ud83d\ude34\uff0c\u53ea\u662f\u7b49\u7740\u6392\u961f\uff0c\u6ca1\u505a\u4efb\u4f55\u201c\u6709\u610f\u4e49\u201d\u7684\u4e8b\u3002\u4f46\u6392\u961f\u901f\u5ea6\u5f88\u5feb\uff0c\u56e0\u4e3a\u6536\u94f6\u5458 \ud83d\udc81 \u53ea\u8d1f\u8d23\u4e0b\u5355\uff08\u4e0d\u505a\u6c49\u5821\uff09\uff0c\u6240\u4ee5\u7b49\u4e00\u4f1a\u513f\u4e5f\u6ca1\u4ec0\u4e48\u3002 \u7ec8\u4e8e\u8f6e\u5230\u4f60\u4e86\uff0c\u6b64\u65f6\u5c31\u80fd\u5b9e\u9645\u505a\u4e9b\u201c\u6709\u610f\u4e49\u201d\u7684\u4e8b\u4e86 \ud83e\udd13\uff0c\u4f60\u8981\u770b\u83dc\u5355\uff0c\u51b3\u5b9a\u4e70\u4ec0\u4e48\uff0c\u8be2\u95ee\u5973\u53cb \ud83d\ude0d \u5403\u4ec0\u4e48\uff0c\u4ed8\u94b1 \ud83d\udcb8\uff0c\u68c0\u67e5\u8d26\u5355\u6216\u94f6\u884c\u5361\u662f\u5426\u6b63\u786e\uff0c\u68c0\u67e5\u8ba2\u5355\u91cc\u7684\u9910\u98df\u662f\u5426\u6b63\u786e\uff0c\u7b49\u7b49\u3002 \u4f46\u6b64\u65f6\uff0c\u4f60\u4ecd\u6ca1\u62ff\u5230\u6c49\u5821 \ud83c\udf54\uff0c\u4e0d\u8fc7\uff0c\u4f60\u548c\u6536\u94f6\u5458 \ud83d\udc81 \u4e4b\u95f4\u7684\u5de5\u4f5c\u201c\u6682\u505c\u201d\u4e86\uff0c\u56e0\u4e3a\u8981\u7b49 \ud83d\udd59 \u6c49\u5821\u505a\u597d\u3002 \u4f46\u79bb\u5f00\u67dc\u53f0\uff0c\u62ff\u7740\u53d6\u9910\u7801\u56de\u5230\u9910\u684c\u540e\uff0c\u4f60\u5c31\u53ef\u4ee5\u628a\u6ce8\u610f\u529b\u5207\u6362 \ud83d\udd00 \u5230\u5973\u53cb \ud83d\ude0d\uff0c\u5f00\u59cb\u7ee7\u7eed\u8fd9\u9879\u201c\u5de5\u4f5c\u201d \u23ef \ud83e\udd13\u3002\u8fd9\u6837\uff0c\u4f60\u5c31\u53c8\u5f00\u59cb\u505a\u4e00\u4e9b\u975e\u5e38\u201c\u6709\u610f\u4e49\u201d\u7684\u5de5\u4f5c\u4e86 \ud83e\udd13\uff0c\u53d6\u60a6\u4f60\u7684\u5973\u53cb \ud83d\ude0d\u3002 \u7136\u540e\uff0c\u6536\u94f6\u5458 \ud83d\udc81 \u628a\u4f60\u7684\u53f7\u7801\u663e\u793a\u5728\u67dc\u53f0\u4e0a\uff0c\u544a\u8bc9\u4f60\u201c\u6c49\u5821 \ud83c\udf54 \u505a\u597d\u4e86\uff0c\u8bf7\u53d6\u9910\u201d\uff0c\u4f46\u4f60\u4e0d\u4f1a\u5728\u663e\u793a\u53d6\u9910\u7801\u65f6\u50cf\u75af\u4e86\u4e00\u6837\u5730\u7acb\u523b\u8df3\u8fc7\u53bb\u53d6\u9910\u3002\u4f60\u660e\u767d\u4e0d\u4f1a\u6709\u4eba\u62ff\u8d70\u4f60\u7684\u6c49\u5821 \ud83c\udf54\uff0c\u56e0\u4e3a\u4f60\u6709\u4f60\u7684\u53f7\u7801\uff0c\u4ed6\u4eec\u6709\u4ed6\u4eec\u7684\u53f7\u7801\u3002 \u56e0\u6b64\uff0c\u4f60\u4f1a\u5148\u7ed9\u5973\u53cb \ud83d\ude0d \u8bb2\u5b8c\u6545\u4e8b\uff08\u5b8c\u6210\u5f53\u524d\u8981\u5904\u7406\u7684\u4efb\u52a1 \u23ef \ud83e\udd13\uff09\uff0c\u7b11\u7740\u544a\u8bc9\u5979\uff0c\u4f60\u8981\u53bb\u53d6\u6c49\u5821 \u23f8\u3002 \u4f60\u6765\u5230\u67dc\u53f0 \ud83d\udd00\uff0c\u7ee7\u7eed\u5b8c\u6210\u4e00\u5f00\u59cb\u7684\u4efb\u52a1 \u23ef\uff0c\u53d6\u6c49\u5821\uff0c\u611f\u8c22\u6536\u94f6\u5458\uff0c\u5e76\u628a\u6c49\u5821 \ud83c\udf54 \u62ff\u56de\u9910\u684c\u3002\u8fd9\u5c31\u5b8c\u6210\u4e86\u4e0e\u6536\u94f6\u5458\u4ea4\u4e92\u7684\u4efb\u52a1 \u23f9\u3002\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4e00\u4e2a\u65b0\u4efb\u52a1 - \u201c\u5403\u6c49\u5821\u201d \ud83d\udd00 \u23ef\uff0c\u4f46\u4e4b\u524d\u201c\u53d6\u6c49\u5821\u201d\u7684\u4efb\u52a1\u5df2\u7ecf\u5b8c\u6210\u4e86 \u23f9\u3002","title":"\u5e76\u53d1\u6c49\u5821"},{"location":"async/#_7","text":"\u73b0\u5728\uff0c\u628a\u201c\u5e76\u53d1\u6c49\u5821\u201d\u6362\u6210\u201c\u5e76\u884c\u6c49\u5821\u201d\u3002 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u6765\u5403\u5e76\u884c\u5feb\u9910 \ud83c\udf54\u3002 \u67dc\u53f0\u91cc\u6709\u597d\u591a\uff08\u6bd4\u5982\u8bf4 8 \u4e2a\uff09\u6536\u94f6\u5458\uff0c\u4f46\u8fd9\u51e0\u4f4d\u6536\u94f6\u5458\u540c\u65f6\u8fd8\u662f\u53a8\u5e08 \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\u3002 \u5728\u4f60\u524d\u9762\u7684\u6bcf\u4e2a\u4eba\u90fd\u8981\u7b49 \ud83d\udd59 \u4ed6\u4eec\u7684\u6c49\u5821 \ud83c\udf54 \u505a\u597d\u624d\u80fd\u79bb\u5f00\u67dc\u53f0\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6536\u94f6\u5458\u63a5\u5355\u540e\u7acb\u5373\u53bb\u70f9\u5236\u6c49\u5821\uff0c\u7136\u540e\u624d\u4f1a\u63a5\u4e0b\u4e00\u5355\u3002 \u7ec8\u4e8e\u8f6e\u5230\u4f60\u5566\uff0c\u4f60\u4e3a\u81ea\u5df1\u548c\u5973\u53cb \ud83d\ude0d \u4e70\u4e86 2 \u4e2a\u975e\u5e38\u7f8e\u5473\u7684\u6c49\u5821 \ud83c\udf54\u3002 \u7136\u540e\u4ed8\u94b1 \ud83d\udcb8\u3002 \u6536\u94f6\u5458\u53bb\u53a8\u623f \ud83d\udc68\u200d\ud83c\udf73\u3002 \u4f60\u53ea\u80fd\u7ad9\u5728\u67dc\u53f0\u524d\u8010\u5fc3\u7b49\u7740 \ud83d\udd59\uff0c\u8fd9\u6837\u522b\u4eba\u624d\u4e0d\u4f1a\u628a\u4f60\u7684\u6c49\u5821 \ud83c\udf54 \u62ff\u8d70\uff0c\u56e0\u4e3a\u8fd9\u91cc\u6ca1\u6709\u53d6\u9910\u53f7\u3002 \u4f60\u548c\u5973\u53cb \ud83d\ude0d \u4e00\u76f4\u5fd9\u7740\u4e0d\u8ba9\u522b\u4eba\u63d2\u961f\uff0c\u8fd8\u8981\u63d0\u9632\u522b\u4eba\u62ff\u8d70\u4f60\u4eec\u7684\u6c49\u5821 \ud83c\udf54 \uff0c\u8fd9\u6837\u4e00\u6765\u4f60\u5c31\u6ca1\u529f\u592b\u966a\u7740\u4f60\u7684\u5973\u53cb \ud83d\ude1e\u4e86\u3002 \u8fd9\u5c31\u662f\u201c\u540c\u6b65\u201d\u5de5\u4f5c\u673a\u5236\uff0c\u4f60\u4e0e\u6536\u94f6\u5458/\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73\u201c\u540c\u6b65\u201d\u3002\u4f60\u53ea\u80fd\u8010\u5fc3\u7b49\u5f85 \ud83d\udd59 \uff0c\u76f4\u5230\u6536\u94f6\u5458/\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73\u505a\u597d\u6c49\u5821 \ud83c\udf54 \u5e76\u7ed9\u4f60\u7684\u90a3\u4e00\u523b\uff0c\u5426\u5219\uff0c\u522b\u4eba\u5c31\u4f1a\u628a\u4f60\u7684\u6c49\u5821 \ud83c\udf54 \u62ff\u8d70\u3002 \u5728\u67dc\u53f0\u524d\u7b49 \ud83d\udd59 \u4e86\u534a\u5929\uff0c\u4f60\u7684\u6536\u94f6\u5458/\u53a8\u5e08 \ud83d\udc68\u200d\ud83c\udf73 \u7ec8\u4e8e\u628a\u6c49\u5821 \ud83c\udf54 \u505a\u597d\u7ed9\u4f60\u4e86\uff0c \u4f60\u628a\u6c49\u5821 \ud83c\udf54\u62ff\u56de\u9910\u684c\uff0c\u56de\u5230\u4e86\u5973\u53cb \ud83d\ude0d \u7684\u8eab\u8fb9\u3002 \u4f60\u4eec\u5f00\u59cb\u4eab\u7528\u6c49\u5821\uff0c\u7ec8\u4e8e\u5403\u5b8c\u4e86 \ud83c\udf54 \u23f9\u3002 \u5728\u8fd9\u91cc\uff0c\u4f60\u57fa\u672c\u4e0a\u90fd\u662f\u5728\u67dc\u53f0\u524d\u7b49 \ud83d\udd59\uff0c\u6ca1\u65f6\u95f4\u548c\u5973\u53cb \ud83d\ude1e \u804a\u5929\uff0c\u66f4\u522b\u63d0\u8c08\u60c5\u8bf4\u7231\u4e86\u3002 \u5728\u5e76\u884c\u6c49\u5821\u7684\u573a\u666f\u4e0b\uff0c\u4f60\u662f\u6709\u4e24\u4e2a\u5904\u7406\u5668\uff08\u4f60\u548c\u5973\u53cb \ud83d\ude0d\uff09\u7684\u8ba1\u7b97\u673a/\u7a0b\u5e8f \ud83e\udd16\uff0c\u4e24\u4e2a\u4eba\u90fd\u5728\u7b49\u5f85 \ud83d\udd59 \uff0c\u5e76\u4e14\u4f60\u4eec\u7684\u6ce8\u610f\u529b \u23ef \u957f\u65f6\u95f4\u90fd\u4e13\u6ce8\u4e8e\u201c\u5728\u67dc\u53f0\u524d\u7b49\u5f85 \ud83d\udd59\u201d\u3002 \u5e76\u884c\u5feb\u9910\u5e97\u6709 8 \u4e2a\u5904\u7406\u5668\uff08\u6536\u94f6\u5458/\u53a8\u5e08\uff09\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\uff0c\u5e76\u53d1\u6c49\u5821\u5e97\u53ea\u6709 2 \u4e2a\uff081 \u540d\u6536\u94f6\u5458\u548c 1 \u4f4d\u53a8\u5e08\uff09\ud83d\udc81 \ud83d\udc68\u200d\ud83c\udf73\u3002 \u4f46\u5b83\u7684\u6700\u7ec8\u4f53\u9a8c\u5e76\u4e0d\u597d \ud83d\ude1e\u3002 \u8fd9\u5c31\u662f\u6c49\u5821 \ud83c\udf54 \u5e76\u884c\u7b49\u6548\u7684\u6545\u4e8b\u3002 \u94f6\u884c\u662f\u73b0\u5b9e\u751f\u6d3b\u4e2d\u66f4\u8d34\u8fd1\u4e8e\u6b64\u7684\u4f8b\u5b50\u3002 \u76f4\u5230\u73b0\u5728\uff0c\u8fd8\u6709\u5f88\u591a\u94f6\u884c\u90fd\u8bbe\u7f6e\u4e86\u591a\u4e2a\u6536\u94f6\u5458 \ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\ud83d\udc68\u200d\ud83d\udcbc\uff0c\u4f46\u5f80\u5f80\u4f1a\u6392\u7740\u5927\u957f\u961f \ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\ud83d\udd59\u3002 \u6bcf\u4e2a\u6536\u94f6\u5458\u90fd\u8981\u4e3a\u4e00\u4e2a\u53c8\u4e00\u4e2a\u5ba2\u6237\u5b8c\u6210\u6240\u6709\u7684\u5de5\u4f5c \ud83d\udc68\u200d\ud83d\udcbc\u23ef\u3002 \u800c\u4e14\u4f60\u5fc5\u987b\u6392\u5f88\u957f\u65f6\u95f4\u7684\u961f\uff0c\u8981\u4e0d\u7136\u5c31\u8fc7\u53f7\u91cd\u6392\u3002 \u6240\u4ee5\u4f60\u6700\u597d\u8fd8\u662f\u522b\u5e26\u7740\u5973\u53cb\u53bb\u94f6\u884c\u529e\u4e8b \ud83d\ude0d\u3002","title":"\u5e76\u884c\u6c49\u5821"},{"location":"async/#_8","text":"\u5728\u8fd9\u4e2a\u201c\u548c\u5973\u53cb\u4e00\u8d77\u5403\u6c49\u5821\u201d\u573a\u666f\u4e2d\uff0c\u5927\u90e8\u5206\u65f6\u95f4\u90fd\u5728\u7b49 \ud83d\udd59\uff0c\u6240\u4ee5\u8fd8\u662f\u5e76\u53d1\u7cfb\u7edf\u66f4\u9760\u8c31 \u23f8\ud83d\udd00\u23ef\u3002 \u8fd9\u79cd\u60c5\u51b5\u9002\u7528\u4e8e\u7edd\u5927\u591a\u6570 Web \u5e94\u7528\u3002 \u7528\u6237\u5f88\u591a\u5f88\u591a\uff0c\u4f46\u4f60\u7684\u670d\u52a1\u5668\u603b\u662f\u5728\u7b49\u5f85\u4ed6\u4eec\u4f7f\u7528 \u4e0d\u548b\u5730 \u7684\u8fde\u63a5\u53d1\u9001\u8bf7\u6c42\u3002 \u7136\u540e\u53c8\u662f\u7b49\u5f85 \ud83d\udd59 \u8fd4\u56de\u54cd\u5e94\u3002 \u8fd9\u79cd\u201c\u7b49\u5f85\u201d \ud83d\udd59 \u867d\u7136\u662f\u4ee5\u5fae\u79d2\u4e3a\u5355\u4f4d\u7684\uff0c\u4f46\u628a\u5b83\u4eec\u52a0\u5728\u4e00\u8d77\uff0c\u8fd8\u662f\u4f1a\u7b49\u5f88\u957f\u65f6\u95f4\u3002 \u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5f00\u53d1 Web API \u4f7f\u7528\u5f02\u6b65\u7f16\u7801 \u23f8\ud83d\udd00\u23ef \u66f4\u9760\u8c31\u7684\u539f\u56e0\u3002 \u5927\u591a\u6570\u6d41\u884c\u7684 Python \u6846\u67b6\uff08\u5305\u62ec Flask \u548c Django\uff09\u90fd\u662f\u5728 Python \u63a8\u51fa\u5f02\u6b65\u529f\u80fd\u524d\u5f00\u53d1\u7684\u3002\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u90e8\u7f72\u652f\u6301\u5e76\u884c\u6267\u884c\u65b9\u5f0f\uff0c\u8fd8\u652f\u6301\u4e00\u79cd\u4e0d\u5982\u65b0\u529f\u80fd\u8fd9\u822c\u5f3a\u5927\u7684\u65e7\u5f0f\u5f02\u6b65\u6267\u884c\u65b9\u5f0f\u3002 Python \u5f02\u6b65\u7f51\u7edc\u7684\u4e3b\u8981\u89c4\u8303 \uff08ASGI\uff09\u662f Django \u5f00\u53d1\u7684\uff0c\u8fd8\u6dfb\u52a0\u4e86\u5bf9 WebSockets \u7684\u652f\u6301\u3002 \u8fd9\u79cd\u5f02\u6b65\u65b9\u5f0f\u4e5f\u662f\u8ba9 NodeJS \u5e7f\u4e3a\u6d41\u884c\u7684\u539f\u56e0\uff08\u5373\u4f7f NodeJS \u4e0d\u652f\u6301\u5e76\u884c\uff09\uff0c\u540c\u65f6\u8fd9\u4e5f\u662f Go \u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5f3a\u52b2\u7684\u539f\u56e0\u3002 FastAPI \u4e5f\u53ef\u4ee5\u63d0\u4f9b\u540c\u7b49\u6027\u80fd\u3002 \u501f\u52a9\u4e8e Starlette \uff0c\u4f60\u53ef\u4ee5\u540c\u65f6\u4f7f\u7528\u5e76\u884c\u4e0e\u5f02\u6b65\uff0c\u4ece\u800c\u83b7\u5f97\u6bd4\u5927\u591a\u6570 NodeJS \u6846\u67b6\u66f4\u9ad8\u7684\u6027\u80fd\uff0c\u751a\u81f3\u662f\u80fd\u4e0e GO \uff08\u66f4\u8fd1\u4f3c\u4e8e C \u7684\u7f16\u8bd1\u8bed\u8a00\uff09\u6bd4\u80a9\u7684\u6027\u80fd\u3002","title":"\u6c49\u5821\u7684\u7ed3\u8bba"},{"location":"async/#_9","text":"\u4e0d\uff01\u8fd9\u4e2a\u6545\u4e8b\u60f3\u8868\u8fbe\u7684\u4e0d\u662f\u8fd9\u4e2a\u610f\u601d\u3002 \u5e76\u53d1\u548c\u5e76\u884c\u4e0d\u4e00\u6837\u3002\u5f88\u591a\u6d89\u53ca\u7b49\u5f85\u7684 \u7279\u5b9a \u573a\u666f\u4e0b\uff0c\u5b83\u786e\u5b9e\u66f4\u597d\u3002\u6b63\u56e0\u5982\u6b64\uff0c\u5bf9\u4e8e\u5f00\u53d1 Web \u5e94\u7528\uff0c\u5e76\u53d1\u4e00\u822c\u8981\u597d\u5f88\u591a\u3002\u4f46\u4e0d\u662f\u6240\u6709\u573a\u666f\u5e76\u53d1\u90fd\u6bd4\u5e76\u884c\u66f4\u597d\u3002 \u56e0\u6b64\uff0c\u4e3a\u4e86\u5e73\u8861\uff0c\u5047\u8bbe\u4e0b\u9762\u8fd9\u4e2a\u8d85\u7ea7\u77ed\u7bc7\u5c0f\u8bf4\uff1a \u4f60\u5fc5\u987b\u6253\u626b\u4e00\u95f4\u53c8\u5927\u53c8\u810f\u7684\u623f\u5b50\u3002 \u6ca1\u9519\uff0c\u6574\u4e2a\u6545\u4e8b\u5c31\u8fd9\u4e48\u957f\u3002 \u4e0d\u7528\u5728\u4efb\u4f55\u5730\u65b9\u7b49\u5f85 \ud83d\udd59\uff0c\u53ea\u662f\u623f\u5b50\u91cc\u7684\u6bcf\u4e2a\u623f\u95f4\u90fd\u6709\u5927\u91cf\u8981\u5b8c\u6210\u7684\u5de5\u4f5c\u3002 \u4f60\u53ef\u4ee5\u50cf\u6c49\u5821\u793a\u4f8b\u4e00\u6837\u8f6e\u6d41\u4f9d\u6b21\u64cd\u4f5c\uff0c\u5148\u662f\u5ba2\u5385\u3001\u518d\u662f\u53a8\u623f\uff0c\u4f60\u5b8c\u5168\u4e0d\u9700\u8981\u7b49 \ud83d\udd59 \uff0c\u53ea\u662f\u6253\u626b\u6253\u626b\u518d\u6253\u626b\uff0c\u8f6e\u6d41\u4f9d\u6b21\u64cd\u4f5c\u4e0d\u4f1a\u4ea7\u751f\u4efb\u4f55\u5f71\u54cd\u3002 \u662f\u5426\u8f6e\u6d41\u4f9d\u6b21\uff08\u5e76\u53d1\uff09\u4e0d\u4f1a\u5f71\u54cd\u5b8c\u6210\u5de5\u4f5c\u6240\u9700\u7684\u65f6\u95f4\u91cf\uff0c\u5de5\u4f5c\u91cf\u4e5f\u662f\u4e00\u6837\u7684\u3002 \u4f46\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f60\u4e00\u5171\u6709 8 \u4f4d\u524d\u6536\u94f6\u5458/\u53a8\u5e08\uff0c\u73b0\u5728\u662f\u6e05\u6d01\u5de5 \ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\ud83d\udc69\u200d\ud83c\udf73\ud83d\udc68\u200d\ud83c\udf73\uff0c\u4ed6\u4eec\u6bcf\u4e2a\u4eba\uff08\u52a0\u4e0a\u4f60\uff09\u90fd\u8d1f\u8d23\u623f\u5b50\u91cc\u7684\u4e00\u7247\u533a\u57df\uff0c\u4f60\u53ef\u4ee5\u4ee5 \u5e76\u884c \u7684\u65b9\u5f0f\u5b8c\u6210\u6240\u6709\u5de5\u4f5c\uff0c\u6709\u4e86\u989d\u5916\u7684\u5e2e\u52a9\uff0c\u5c31\u53ef\u4ee5\u66f4\u5feb\u5e72\u5b8c\u3002 \u5728\u8fd9\u79cd\u573a\u666f\u4e0b\uff0c\u6bcf\u4f4d\u6e05\u6d01\u5de5\uff08\u5305\u62ec\u4f60\u81ea\u5df1\uff09\u90fd\u662f\u4e00\u4e2a\u5904\u7406\u5668\uff0c\u53ea\u505a\u81ea\u5df1\u7684\u90a3\u90e8\u5206\u5de5\u4f5c\u3002 \u7531\u4e8e\u5927\u591a\u6570\u6267\u884c\u65f6\u95f4\u90fd\u662f\u5b9e\u5b9e\u5728\u5728\u7684\u5de5\u4f5c\uff08\u800c\u4e0d\u662f\u5728\u7b49\u5f85\uff09\uff0c\u8ba1\u7b97\u673a\u7684\u5de5\u4f5c\u90fd\u662f\u7531\u4e00\u4e2a CPU \u5b8c\u6210\u7684\uff0c\u8fd9\u79cd\u65b9\u5f0f\u88ab\u79f0\u4e3a \u201cCPU \u5bc6\u96c6\u578b\u201d\u3002 CPU \u5bc6\u96c6\u578b\u64cd\u4f5c\u7684\u5e38\u89c1\u6848\u4f8b\u4e00\u822c\u90fd\u662f\u9700\u8981\u590d\u6742\u6570\u5b66\u5904\u7406\u7684\u5bf9\u8c61\u3002 \u4f8b\u5982; \u5904\u7406 \u97f3\u9891 \u6216 \u56fe\u50cf \u8ba1\u7b97\u673a\u89c6\u89c9 \uff1a \u56fe\u50cf\u4e00\u822c\u7531\u51e0\u767e\u4e07\u4e2a\u50cf\u7d20\u7ec4\u6210\uff0c\u6bcf\u4e2a\u50cf\u7d20\u90fd\u6709 3 \u4e2a\u503c/\u989c\u8272\uff0c\u5904\u7406\u56fe\u50cf\u6b63\u5e38\u90fd\u9700\u8981\u5bf9\u8fd9\u4e9b\u50cf\u7d20\u540c\u65f6\u8fdb\u884c\u8ba1\u7b97 \u673a\u5668\u5b66\u4e60 \uff1a\u6b63\u5e38\u9700\u8981\u8fdb\u884c\u5927\u91cf\u201c\u77e9\u9635\u201d\u4e0e\u201c\u5411\u91cf\u201d\u4e58\u6cd5\u3002\u53ef\u4ee5\u628a\u5b83\u60f3\u50cf\u6210\u4e00\u4e2a\u5de8\u5927\u7684\u3001\u5305\u542b\u6570\u5b57\u7684\u8868\u683c\uff0c\u6240\u6709\u8fd9\u4e9b\u6570\u5b57\u90fd\u5728\u540c\u65f6\u76f8\u4e58 \u6df1\u5ea6\u5b66\u4e60 \uff1a \u673a\u5668\u5b66\u4e60\u7684\u5b50\u9886\u57df\uff0c\u56e0\u6b64\u53ef\u4ee5\u5e94\u7528\u76f8\u540c\u89c4\u5219\u3002\u53ea\u4e0d\u8fc7\u5b83\u4e0d\u662f\u5355\u4e2a\u8981\u5b9e\u73b0\u6570\u5b57\u76f8\u4e58\u7684\u8868\u683c\uff0c\u800c\u662f\u4e00\u7ec4\u8fd9\u6837\u7684\u8868\u683c\uff0c\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u9700\u8981\u4f7f\u7528\u7279\u6b8a\u5904\u7406\u5668\u6765\u6784\u5efa\u6216\u4f7f\u7528\u8fd9\u4e9b\u6a21\u578b","title":"\u5e76\u53d1\u6bd4\u5e76\u884c\u66f4\u597d\u5417\uff1f"},{"location":"async/#web","text":"Web \u5f00\u53d1\u7ecf\u5e38\u4f1a\u7528\u5230\u5e76\u53d1\uff0c\u8fd9\u662f FastAPI \u7684\u4f18\u52bf\uff0c\u4e5f\u662f NodeJS \u7684\u4e3b\u8981\u4f18\u52bf\u3002 \u4f46\u4f60\u8fd8\u53ef\u4ee5\u5728\u5904\u7406\u673a\u5668\u5b66\u4e60\u7cfb\u7edf\u4e2d\u7684 CPU \u5bc6\u96c6\u578b \u5de5\u4f5c\u8d1f\u8f7d\u65f6\u5229\u7528\u5e76\u884c\u4e0e\u591a\u8fdb\u7a0b\uff08\u591a\u4e2a\u8fdb\u7a0b\u5e76\u884c\u8fd0\u884c\uff09\u7684\u4f18\u52bf\u3002 \u518d\u52a0\u4e0a Python \u73b0\u5728\u662f \u6570\u636e\u79d1\u5b66 \u3001\u673a\u5668\u5b66\u4e60\uff0c\u7279\u522b\u662f\u6df1\u5ea6\u5b66\u4e60\u7684\u4e3b\u6d41\u8bed\u8a00\uff0cFastAPI \u56e0\u6b64\u7279\u522b\u9002\u5408\u5f00\u53d1\u6570\u636e\u79d1\u5b66\u3001\u673a\u5668\u5b66\u4e60\u7684 Web API \u4e0e\u5e94\u7528\uff08\u76f8\u5bf9\u4f17\u591a\u6846\u67b6\u800c\u8a00\uff09\u3002 \u6709\u5173\u5982\u4f55\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u5b9e\u73b0\u5e76\u884c\u7684\u5185\u5bb9\uff0c\u8be6\u89c1 \u90e8\u7f72 \u4e00\u7ae0\u3002","title":"\u5e76\u53d1 + \u5e76\u884c\uff1a Web + \u673a\u5668\u5b66\u4e60"},{"location":"async/#async-await","text":"\u73b0\u4ee3 Python \u652f\u6301\u4ee5\u975e\u5e38\u76f4\u89c2\u7684\u65b9\u5f0f\u5b9a\u4e49\u5f02\u6b65\u4ee3\u7801\u3002\u8fd9\u79cd\u65b9\u5f0f\u8ba9\u5b83\u770b\u8d77\u6765\u5c31\u50cf\u666e\u901a\u7684\u201c\u5e8f\u5217\u201d\u4ee3\u7801\uff0c\u4f46\u5374\u80fd\u8ba9\u7a0b\u5e8f\u5728\u6b63\u786e\u7684\u65f6\u523b\u201c\u7b49\u5f85\u201d\u3002 \u5f53\u67d0\u4e2a\u64cd\u4f5c\u5728\u7ed9\u51fa\u7ed3\u679c\u524d\u8981\u7b49\u5f85\u65f6\uff0c\u5982\u679c\u652f\u6301 Python \u7684\u5f02\u6b65\u65b0\u529f\u80fd\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a burgers = await get_burgers ( 2 ) \u8fd9\u91cc\u7684\u5173\u952e\u662f await \u3002\u5b83\u544a\u8bc9 Python \u628a\u7ed3\u679c\u5b58\u50a8\u5230 burgers \u524d\uff0c\u5fc5\u987b\u8981\u7b49 \u23f8 get_burgers(2) \u5b8c\u6210\u64cd\u4f5c \ud83d\udd59\u3002\u4f7f\u7528 await \uff0c Python \u5c31\u77e5\u9053\u5b83\u53ef\u4ee5\u540c\u65f6\u505a\u4e9b\u522b\u7684\u4e8b\u60c5 \ud83d\udd00\uff08\u6bd4\u5982\u63a5\u6536\u53e6\u4e00\u4e2a\u8bf7\u6c42\uff09\u3002 await \u53ea\u6709\u5728\u652f\u6301\u5f02\u6b65\u7684\u51fd\u6570\u5185\u90e8\u624d\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u4e3a\u6b64\uff0c\u8981\u4f7f\u7528 async def \u58f0\u660e\u51fd\u6570\u3002 async def get_burgers ( number : int ): # Do some asynchronous stuff to create the burgers return burgers \u2026\u2026\u4ee5\u6b64\u66ff\u6362 def \uff1a # This is not asynchronous def get_sequential_burgers ( number : int ): # Do some sequential stuff to create the burgers return burgers \u4f7f\u7528 async def \uff0c Python \u5c31\u77e5\u9053\u5728\u8fd9\u4e2a\u51fd\u6570\u5185\u5fc5\u987b\u8981\u7559\u610f await \u8868\u8fbe\u5f0f\uff0c\u5e76\u4e14 await \u8868\u8fbe\u5f0f\u53ef\u4ee5\u201c\u6682\u505c\u201d\u51fd\u6570\u6267\u884c\uff0c\u5e76\u5728\u8fd4\u56de\u4e4b\u524d\u53ef\u4ee5\u505a\u4e9b\u5176\u4ed6\u4e8b\u60c5\u3002 \u8c03\u7528 async def \u51fd\u6570\u65f6\uff0c\u5fc5\u987b\u8981\u4f7f\u7528 await \u3002\u56e0\u6b64\uff0c\u5982\u4e0b\u4ee3\u7801\u4e0d\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 # This won't work, because get_burgers was defined with: async def burgers = get_burgers ( 2 ) \u56e0\u6b64\uff0c\u4f7f\u7528\u7531 await \u8c03\u7528\u7684\u652f\u6301\u5e93\uff0c\u9700\u8981\u4f7f\u7528 async def \u521b\u5efa \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a @app . get ( '/burgers' ) async def read_burgers (): burgers = await get_burgers ( 2 ) return burgers","title":"async \u4e0e await"},{"location":"async/#_10","text":"\u4f60\u53ef\u80fd\u5df2\u7ecf\u6ce8\u610f\u5230 await \u53ea\u80fd\u5728 async def \u5b9a\u4e49\u7684\u51fd\u6570\u5185\u4f7f\u7528\u3002 \u4f46\u540c\u65f6\uff0c\u7531 async def \u5b9a\u4e49\u7684\u51fd\u6570\u5fc5\u987b\u8981\u201c\u7b49\u5f85\u201d\u3002\u56e0\u6b64\uff0c\u4f7f\u7528 async def \u7684\u51fd\u6570\u53ea\u80fd\u5728\u7531 async def \u5b9a\u4e49\u7684\u51fd\u6570\u5185\u88ab\u8c03\u7528\u3002 \u8fd9\u662f\u4e2a\u9e21\u751f\u86cb\u3001\u86cb\u751f\u9e21\u7684\u95ee\u9898\uff0c\u600e\u4e48\u8c03\u7528\u7b2c\u4e00\u4e2a async \u51fd\u6570\u5462\uff1f \u4f7f\u7528 FastAPI \u5c31\u4e0d\u9700\u8981\u62c5\u5fc3\u8fd9\u4e2a\u95ee\u9898\uff0c\u56e0\u4e3a\u201c\u7b2c\u4e00\u4e2a\u201d\u51fd\u6570\u5c31\u662f \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u800c FastAPI \u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u3002 \u4f46\u5982\u679c\u4e0d\u5728 FastAPI \u4e2d\u4f7f\u7528 async / await \uff0c\u5219\u8981\u53c2\u9605 Python \u5b98\u6863 \u3002","title":"\u66f4\u591a\u6280\u672f\u7ec6\u8282"},{"location":"async/#_11","text":"async \u4e0e await \u5bf9\u4e8e Python \u6765\u8bf4\u4e5f\u662f\u76f8\u5bf9\u8f83\u65b0\u7684\u3002 \u4f46\u5b83\u8ba9\u5f02\u6b65\u7f16\u7801\u53d8\u5f97\u66f4\u5bb9\u6613\u4e86\u3002 \u73b0\u4ee3 JavaScript \uff08\u5728\u6d4f\u89c8\u5668\u4e0e NodeJS \u4e2d\uff09\u6700\u8fd1\u4e5f\u6dfb\u52a0\u4e86\u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\u7684\u8bed\u6cd5\u3002 \u4f46\u5728\u6b64\u4e4b\u524d\uff0c\u5904\u7406\u5f02\u6b65\u7f16\u7801\u8d85\u7ea7\u590d\u6742\uff0c\u800c\u4e14\u7279\u522b\u96be\u3002 \u5728 Python \u4ee5\u524d\u7684\u7248\u672c\u4e2d\uff0c\u53ea\u80fd\u4f7f\u7528\u7ebf\u7a0b\u6216 Gevent \u3002\u4f46\u8fd9\u79cd\u4ee3\u7801\u975e\u5e38\u590d\u6742\u96be\u61c2\uff0c\u4e5f\u4e0d\u65b9\u4fbf\u8c03\u8bd5\u4e0e\u7406\u89e3\u3002 \u5728 NodeJS/JavaScript \u4ee5\u524d\u7684\u7248\u672c\u4e2d\u4f7f\u7528\u201c\u56de\u8c03\u201d\uff0c\u8fd9\u79cd\u65b9\u5f0f\u76f4\u901a\u201c \u56de\u8c03\u5730\u72f1 \u201d\u3002","title":"\u5176\u4ed6\u5f02\u6b65\u7f16\u7801\u5f62\u5f0f"},{"location":"async/#_12","text":"\u534f\u7a0b \u53ea\u662f\u4e2a\u975e\u5e38\u82b1\u54e8\u7684\u672f\u8bed\uff0c\u6307\u7684\u662f\u7531 async def \u51fd\u6570\u8fd4\u56de\u7684\u5bf9\u8c61\u3002Python \u628a\u5b83\u8bc6\u522b\u4e3a\u53ef\u4ee5\u5728\u67d0\u4e9b\u70b9\u542f\u52a8\u6216\u7ec8\u6b62\u7684\u51fd\u6570\uff0c\u4f46\u5b83\u8fd8\u53ef\u4ee5\u5728\u5185\u90e8\u6682\u505c \u23f8\uff0c\u53ea\u8981\u5728\u5b83\u7684\u5185\u90e8\u5305\u542b await \u3002 \u4f46\u662f\u4f7f\u7528 async \u4e0e await \u7684\u5f02\u6b65\u7f16\u7801\u7684\u8fd9\u79cd\u529f\u80fd\u5e38\u5e38\u88ab\u7edf\u79f0\u4e3a\u201c\u534f\u7a0b\u201d\u3002\u5b83\u4e0e Go \u7684\u6838\u5fc3\u529f\u80fd \u201cGoroutines\u201d \u76f8\u5bf9\u5e94\u3002","title":"\u534f\u7a0b"},{"location":"async/#_13","text":"\u6211\u4eec\u518d\u56de\u8fc7\u5934\u6765\u770b\u4e00\u4e0b\u524d\u6587\u7684\u77ed\u8bed\u3002 \u73b0\u4ee3 Python \u652f\u6301 \u5f02\u6b65\u7f16\u7801 \uff0c\u4f7f\u7528\u7684\u662f async \u4e0e await \u5173\u952e\u5b57\uff0c\u8fd9\u79cd\u65b9\u5f0f\u53eb\u505a \u534f\u7a0b \u3002 \u73b0\u5728\u518d\u770b\u8fd9\u53e5\u8bdd\u5c31\u66f4\u6709\u611f\u89c9\u4e86\u5427\u3002\u2728 \u6240\u6709\u8fd9\u4e9b\u6280\u672f\u90fd\uff08\u901a\u8fc7 Starlette\uff09\u4e3a FastAPI \u8d4b\u80fd\uff0c\u8ba9 FastAPI \u5177\u6709\u8ba9\u4eba\u53f9\u4e3a\u89c2\u6b62\u7684\u6027\u80fd\u3002","title":"\u7ed3\u8bba"},{"location":"async/#_14","text":"\u8b66\u544a \u4f60\u53ef\u4ee5\u8df3\u8fc7\u8fd9\u6bb5\u5185\u5bb9\u3002 \u8fd9\u4e9b\u662f\u975e\u5e38\u7ec6\u7684\u6280\u672f\u7ec6\u8282\uff0c\u4ecb\u7ecd\u7684\u662f FastAPI \u5e95\u5c42\u8fd0\u4f5c\u673a\u5236\u3002 \u5982\u679c\u4f60\u4e86\u89e3\u8db3\u591f\u7684\u6280\u672f\u77e5\u8bc6\uff08\u534f\u7a0b\u3001\u7ebf\u7a0b\u3001\u963b\u585e\u7b49\uff09\uff0c\u5e76\u5bf9 FastAPI \u5982\u4f55\u5904\u7406 async def \u548c\u666e\u901a\u7684 def \u611f\u5174\u8da3\uff0c\u8bf7\u7ee7\u7eed\u3002","title":"\u975e\u5e38\u7ec6\u7684\u6280\u672f\u7ec6\u8282"},{"location":"async/#_15","text":"\u4f7f\u7528\u666e\u901a def \u66ff\u4ee3 async def \u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u65f6\uff0c\u8981\u5728\u7b49\u5f85\u7684\u5916\u90e8\u7ebf\u7a0b\u6c60\u4e2d\u8fd0\u884c\uff0c\u4e0d\u80fd\u76f4\u63a5\u8c03\u7528\uff08\u56e0\u4e3a\u5b83\u4f1a\u963b\u585e\u670d\u52a1\u5668\uff09\u3002 \u5982\u679c\u4f60\u4e4b\u524d\u4f7f\u7528\u7684\u5f02\u6b65\u6846\u67b6\u4e0d\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\u8fd0\u884c\uff0c\u6216\u8005\u4f60\u4e60\u60ef\u4e86\u4f7f\u7528 def \u5b9a\u4e49\u7ec6\u788e\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u53ea\u4e3a\u4e86\u63d0\u5347\u90a3\u4e48\u4e00\u4e01\u70b9\u513f\u6027\u80fd\uff08\u7ea6 100 \u7eb3\u79d2\uff09\uff0c\u8bf7\u6ce8\u610f\uff0c\u5728 FastAPI \u4e2d\u7684\u6548\u679c\u6b63\u76f8\u53cd\u3002\u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9664\u975e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f7f\u7528\u6267\u884c\u963b\u585e I/O \u7684\u4ee3\u7801\uff0c\u6700\u597d\u4f7f\u7528 async def \u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u5f62\u4e0b\uff0c FastAPI \u4ecd\u4f1a\u6bd4\u4f60\u4e4b\u524d\u4f7f\u7528\u7684\u6846\u67b6 \u66f4\u5feb \uff0c\u6700\u8d77\u7801\u4e5f\u80fd\u63d0\u4f9b\u5dee\u4e0d\u591a\u7684\u6027\u80fd\u3002","title":"\u8def\u5f84\u64cd\u4f5c\u51fd\u6570"},{"location":"async/#_16","text":"\u4f9d\u8d56\u9879 \u4e5f\u53ef\u4ee5\u5e94\u7528\u5f02\u6b65\u7f16\u7801\u3002\u5982\u679c\u4f9d\u8d56\u9879\u662f\u6807\u51c6\u7684 def \u51fd\u6570\uff0c\u800c\u4e0d\u662f async def \uff0c\u5219\u662f\u5728\u5916\u90e8\u7ebf\u7a0b\u6c60\u91cc\u8fd0\u884c\u3002","title":"\u4f9d\u8d56\u9879"},{"location":"async/#_17","text":"\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u76f8\u4e92\u4f9d\u8d56\u7684\u4f9d\u8d56\u9879\u548c \u5b50\u4f9d\u8d56\u9879 \uff08\u4f5c\u4e3a\u51fd\u6570\u5b9a\u4e49\u7684\u53c2\u6570\uff09\u3002\u5176\u4e2d\u4e00\u4e9b\u53ef\u4ee5\u662f async def \u521b\u5efa\u7684\uff0c\u53e6\u4e00\u4e9b\u662f\u7531\u666e\u901a\u7684 def \u521b\u5efa\u7684\u3002\u8fd9\u6837\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u4f7f\u7528\u666e\u901a\u7684 def \u521b\u5efa\u7684\u51fd\u6570\u662f\u7528\u5916\u90e8\u7ebf\u7a0b\uff08\u6765\u81ea\u7ebf\u7a0b\u6c60\uff09\u8c03\u7528\u7684\uff0c\u800c\u4e0d\u662f\u201c\u88ab\u7b49\u5f85\u201d\u3002","title":"\u5b50\u4f9d\u8d56\u9879"},{"location":"async/#_18","text":"\u76f4\u63a5\u8c03\u7528\u7684\u5176\u4ed6\u4efb\u610f\u5de5\u5177\u51fd\u6570\u90fd\u53ef\u4ee5\u7528\u666e\u901a\u7684 def \u6216 async def \u521b\u5efa\uff0cFastAPI \u4e0d\u4f1a\u5f71\u54cd\u8c03\u7528\u5de5\u5177\u51fd\u6570\u7684\u65b9\u5f0f\u3002 \u8fd9\u4e0e FastAPI \u4e3a\u4f60\u8c03\u7528\u7684\u51fd\u6570\u6b63\u76f8\u53cd\uff1a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e0e\u4f9d\u8d56\u9879\u3002 \u5982\u679c\u5de5\u5177\u51fd\u6570\u662f\u7531 def \u58f0\u660e\u7684\u666e\u901a\u51fd\u6570\uff0c\u5c31\u9700\u8981\u76f4\u63a5\u8c03\u7528\uff08\u4e0e\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u5199\u7684\u4e00\u6837\uff09\uff0c\u800c\u4e0d\u662f\u4ece\u7ebf\u7a0b\u6c60\u4e2d\u8c03\u7528\uff0c\u5982\u679c\u662f\u7531 async def \u521b\u5efa\u7684\u51fd\u6570\uff0c\u5219\u5728\u4ee3\u7801\u91cc\u8c03\u7528\u8be5\u51fd\u6570\u65f6\uff0c\u8981 await \u8fd9\u4e2a\u51fd\u6570\u3002 \u518d\u6b21\u5f3a\u8c03\uff0c\u8fd9\u4e9b\u662f\u975e\u5e38\u6df1\u5165\u7684\u6280\u672f\u7ec6\u8282\uff0c\u5728\u6df1\u5165\u63a2\u7d22\u65f6\u53ef\u80fd\u4f1a\u7528\u7684\u4e0a\u3002 \u82e5\u975e\u5982\u6b64\uff0c\u4f60\u53ea\u8981\u719f\u7ec3\u638c\u63e1\u4e0a\u6587\u4e2d \u7b49\u4e0d\u53ca\u4e86\uff1f \u4e00\u8282\u7684\u5185\u5bb9\u5c31\u591f\u4e86\u3002","title":"\u5176\u4ed6\u5de5\u5177\u51fd\u6570"},{"location":"benchmarks/","text":"\u57fa\u51c6\u6d4b\u8bd5 \u00b6 \u7b2c\u4e09\u65b9\u673a\u6784 TechEmpower \u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u4f7f\u7528 Uvicorn \u7684 FastAPI \u5e94\u7528\u662f \u73b0\u6709\u6700\u5feb\u7684 Python \u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e8e Starlette \u548c Uvicorn\uff08FastAPI \u5185\u90e8\u7684\u652f\u6301\u9879\uff09\u3002 \u4f46\u5728\u67e5\u770b\u57fa\u51c6\u6d4b\u8bd5\u4e0e\u5bf9\u6bd4\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a \u57fa\u51c6\u6d4b\u8bd5\u4e0e\u901f\u5ea6 \u00b6 \u57fa\u51c6\u6d4b\u8bd5\u7ecf\u5e38\u628a\u4e0d\u540c\u7c7b\u578b\u7684\u5de5\u5177\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u628a Uvicorn\u3001Starlette\u3001FastAPI \uff08\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u5de5\u5177\uff09\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5de5\u5177\u89e3\u51b3\u7684\u95ee\u9898\u8d8a\u7b80\u5355\uff0c\u6027\u80fd\u5c31\u8d8a\u597d\u3002\u4f46\u5927\u591a\u6570\u57fa\u51c6\u6d4b\u8bd5\u4e0d\u4f1a\u6d4b\u8bd5\u5de5\u5177\u63d0\u4f9b\u7684\u5176\u4ed6\u529f\u80fd\u3002 \u5de5\u5177\u7684\u5c42\u6b21\u5212\u5206\u5982\u4e0b\uff1a Uvicorn \uff1aASGI \u670d\u52a1\u5668 Starlette \uff1a\u4f7f\u7528 Uvicorn \u7684 Web \u5fae\u6846\u67b6 FastAPI \uff1a\u4f7f\u7528 Starlette \u7684 API \u5fae\u6846\u67b6\uff0c\u652f\u6301\u6784\u5efa API\u3001\u9a8c\u8bc1\u6570\u636e\u7b49\u591a\u79cd\u529f\u80fd Uvicorn \uff1a \u6027\u80fd\u6700\u597d\uff0c\u9664\u4e86\u670d\u52a1\u5668\u672c\u8eab\u4ee5\u5916\uff0c\u6ca1\u6709\u4ec0\u4e48\u5176\u4ed6\u529f\u80fd \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 Uvicorn \u7f16\u5199\u5e94\u7528\u3002\u60a8\u7684\u5e94\u7528\u81f3\u5c11\u8981\u5305\u62ec Starlette\uff08\u6216 FastAPI \uff09\u7684\u6240\u6709\u529f\u80fd\u4ee3\u7801\u3002\u5982\u679c\u771f\u662f\u8fd9\u6837\uff0c\u60a8\u6700\u7ec8\u7684\u5e94\u7528\u548c\u4f7f\u7528\u6846\u67b6\u5f00\u53d1\u7684\u6027\u80fd\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u800c\u4e14\u8fd8\u8981\u5c3d\u91cf\u538b\u7f29\u5e94\u7528\u4ee3\u7801\uff0c\u907f\u514d bug Uvicorn \u8981\u548c Daphne\u3001Hypercorn\u3001uWSGI \u7b49\u5e94\u7528\u670d\u52a1\u5668\u653e\u5728\u4e00\u8d77\u8bc4\u6d4b Starlette : \u6027\u80fd\u4ec5\u6b21\u4e8e Uvicorn\u3002Starlette \u57fa\u4e8e Uvicorn \u8fd0\u884c\uff0c\u56e0\u4e3a\u8981\u6267\u884c\u66f4\u591a\u4ee3\u7801\uff0c\u53ea\u4f1a\u6bd4 Uvicorn \u6162 \u4f46\u5b83\u63d0\u4f9b\u4e86\u6784\u5efa\u7b80\u5355 Web \u5e94\u7528\u7684\u5de5\u5177\uff0c\u8fd8\u6709\u57fa\u4e8e\u8def\u5f84\u7684\u8def\u7531\u7b49\u529f\u80fd Starlette \u8981\u548c Sanic\u3001Flask\u3001Django \u7b49 Web \u6846\u67b6\uff08\u6216\u5fae\u6846\u67b6\uff09\u653e\u5728\u4e00\u8d77\u8bc4\u6d4b FastAPI : Starlette \u4e0d\u4f1a\u6bd4 Uvicorn \u5feb\uff0c\u540c\u7406\uff0c\u57fa\u4e8e Starlette \u7684 FastAPI \u4e5f\u4e0d\u53ef\u80fd\u6bd4 Starlette \u5feb\uff1b FastAPI \u6bd4 Starlette \u7684\u529f\u80fd\u66f4\u591a\u3002\u57fa\u672c\u4e0a\u90fd\u662f\u5728\u6784\u5efa API \u65f6\u6240\u9700\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u3002FastAPI \u8fd8\u63d0\u4f9b\u4e86 API \u6587\u6863\uff08API \u6587\u6863\u5728\u542f\u52a8\u65f6\u751f\u6210\u7684\uff0c\u4e0d\u4f1a\u7ed9\u8fd0\u884c\u5e94\u7528\u6dfb\u52a0\u66f4\u591a\u8d1f\u62c5\uff09 \u4e0d\u4f7f\u7528 FastAPI\uff0c\u76f4\u63a5\u4f7f\u7528 Starlette \uff08\u6216 Sanic\u3001Flask\u3001Responder \u7b49\u5de5\u5177\uff09\u5f00\u53d1\u5e94\u7528\u4e5f\u8981\u81ea\u884c\u5b9e\u73b0\u6570\u636e\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u7b49\u529f\u80fd\u3002\u56e0\u6b64\uff0c\u6700\u7ec8\u7684\u5e94\u7528\u548c\u4f7f\u7528 FastAPI \u7684\u6027\u80fd\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u4f46\u5f88\u591a\u65f6\u5019\uff0c\u6570\u636e\u9a8c\u8bc1\u4e0e\u5e8f\u5217\u5316\u5360\u6574\u4e2a\u5e94\u7528\u4ee3\u7801\u7684\u6bd4\u4f8b\u5f88\u5927 \u4f7f\u7528 FastAPI \u80fd\u8282\u7ea6\u5f00\u53d1\u65f6\u95f4\uff0c\u51cf\u5c11 bug\uff0c\u8ba9\u60a8\u5c11\u5199\u5f88\u591a\u4ee3\u7801\uff0c\u8fd8\u80fd\u83b7\u5f97\u4e0e\u81ea\u884c\u5f00\u53d1\u7684\u5e94\u7528\u76f8\u540c\u751a\u81f3\u66f4\u4f73\u7684\u6027\u80fd\uff08\u56e0\u4e3a\u60a8\u8981\u81ea\u5df1\u5199\u4ee3\u7801\u5b9e\u73b0\u6240\u6709\u529f\u80fd\uff09 FastAPI \u8981\u4e0e Flask-apispec\u3001NestJS\u3001Molten \u7b49\u63d0\u4f9b\u6570\u636e\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u548c\u6587\u6863\u529f\u80fd\u7684 Web \u5e94\u7528\u6846\u67b6\uff08\u6216\u5de5\u5177\u7ec4\uff09\u653e\u5728\u4e00\u8d77\u8bc4\u6d4b","title":"\u57fa\u51c6\u6d4b\u8bd5"},{"location":"benchmarks/#_1","text":"\u7b2c\u4e09\u65b9\u673a\u6784 TechEmpower \u7684\u57fa\u51c6\u6d4b\u8bd5\u8868\u660e\u4f7f\u7528 Uvicorn \u7684 FastAPI \u5e94\u7528\u662f \u73b0\u6709\u6700\u5feb\u7684 Python \u6846\u67b6\u4e4b\u4e00 \uff0c\u4ec5\u6b21\u4e8e Starlette \u548c Uvicorn\uff08FastAPI \u5185\u90e8\u7684\u652f\u6301\u9879\uff09\u3002 \u4f46\u5728\u67e5\u770b\u57fa\u51c6\u6d4b\u8bd5\u4e0e\u5bf9\u6bd4\u65f6\uff0c\u9700\u8981\u6ce8\u610f\u4ee5\u4e0b\u51e0\u70b9\uff1a","title":"\u57fa\u51c6\u6d4b\u8bd5"},{"location":"benchmarks/#_2","text":"\u57fa\u51c6\u6d4b\u8bd5\u7ecf\u5e38\u628a\u4e0d\u540c\u7c7b\u578b\u7684\u5de5\u5177\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u3002 \u5177\u4f53\u6765\u8bf4\uff0c\u5c31\u662f\u628a Uvicorn\u3001Starlette\u3001FastAPI \uff08\u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u5de5\u5177\uff09\u653e\u5728\u4e00\u8d77\u6bd4\u8f83\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5de5\u5177\u89e3\u51b3\u7684\u95ee\u9898\u8d8a\u7b80\u5355\uff0c\u6027\u80fd\u5c31\u8d8a\u597d\u3002\u4f46\u5927\u591a\u6570\u57fa\u51c6\u6d4b\u8bd5\u4e0d\u4f1a\u6d4b\u8bd5\u5de5\u5177\u63d0\u4f9b\u7684\u5176\u4ed6\u529f\u80fd\u3002 \u5de5\u5177\u7684\u5c42\u6b21\u5212\u5206\u5982\u4e0b\uff1a Uvicorn \uff1aASGI \u670d\u52a1\u5668 Starlette \uff1a\u4f7f\u7528 Uvicorn \u7684 Web \u5fae\u6846\u67b6 FastAPI \uff1a\u4f7f\u7528 Starlette \u7684 API \u5fae\u6846\u67b6\uff0c\u652f\u6301\u6784\u5efa API\u3001\u9a8c\u8bc1\u6570\u636e\u7b49\u591a\u79cd\u529f\u80fd Uvicorn \uff1a \u6027\u80fd\u6700\u597d\uff0c\u9664\u4e86\u670d\u52a1\u5668\u672c\u8eab\u4ee5\u5916\uff0c\u6ca1\u6709\u4ec0\u4e48\u5176\u4ed6\u529f\u80fd \u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 Uvicorn \u7f16\u5199\u5e94\u7528\u3002\u60a8\u7684\u5e94\u7528\u81f3\u5c11\u8981\u5305\u62ec Starlette\uff08\u6216 FastAPI \uff09\u7684\u6240\u6709\u529f\u80fd\u4ee3\u7801\u3002\u5982\u679c\u771f\u662f\u8fd9\u6837\uff0c\u60a8\u6700\u7ec8\u7684\u5e94\u7528\u548c\u4f7f\u7528\u6846\u67b6\u5f00\u53d1\u7684\u6027\u80fd\u6ca1\u4ec0\u4e48\u533a\u522b\uff0c\u800c\u4e14\u8fd8\u8981\u5c3d\u91cf\u538b\u7f29\u5e94\u7528\u4ee3\u7801\uff0c\u907f\u514d bug Uvicorn \u8981\u548c Daphne\u3001Hypercorn\u3001uWSGI \u7b49\u5e94\u7528\u670d\u52a1\u5668\u653e\u5728\u4e00\u8d77\u8bc4\u6d4b Starlette : \u6027\u80fd\u4ec5\u6b21\u4e8e Uvicorn\u3002Starlette \u57fa\u4e8e Uvicorn \u8fd0\u884c\uff0c\u56e0\u4e3a\u8981\u6267\u884c\u66f4\u591a\u4ee3\u7801\uff0c\u53ea\u4f1a\u6bd4 Uvicorn \u6162 \u4f46\u5b83\u63d0\u4f9b\u4e86\u6784\u5efa\u7b80\u5355 Web \u5e94\u7528\u7684\u5de5\u5177\uff0c\u8fd8\u6709\u57fa\u4e8e\u8def\u5f84\u7684\u8def\u7531\u7b49\u529f\u80fd Starlette \u8981\u548c Sanic\u3001Flask\u3001Django \u7b49 Web \u6846\u67b6\uff08\u6216\u5fae\u6846\u67b6\uff09\u653e\u5728\u4e00\u8d77\u8bc4\u6d4b FastAPI : Starlette \u4e0d\u4f1a\u6bd4 Uvicorn \u5feb\uff0c\u540c\u7406\uff0c\u57fa\u4e8e Starlette \u7684 FastAPI \u4e5f\u4e0d\u53ef\u80fd\u6bd4 Starlette \u5feb\uff1b FastAPI \u6bd4 Starlette \u7684\u529f\u80fd\u66f4\u591a\u3002\u57fa\u672c\u4e0a\u90fd\u662f\u5728\u6784\u5efa API \u65f6\u6240\u9700\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u6570\u636e\u9a8c\u8bc1\u548c\u5e8f\u5217\u5316\u3002FastAPI \u8fd8\u63d0\u4f9b\u4e86 API \u6587\u6863\uff08API \u6587\u6863\u5728\u542f\u52a8\u65f6\u751f\u6210\u7684\uff0c\u4e0d\u4f1a\u7ed9\u8fd0\u884c\u5e94\u7528\u6dfb\u52a0\u66f4\u591a\u8d1f\u62c5\uff09 \u4e0d\u4f7f\u7528 FastAPI\uff0c\u76f4\u63a5\u4f7f\u7528 Starlette \uff08\u6216 Sanic\u3001Flask\u3001Responder \u7b49\u5de5\u5177\uff09\u5f00\u53d1\u5e94\u7528\u4e5f\u8981\u81ea\u884c\u5b9e\u73b0\u6570\u636e\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u7b49\u529f\u80fd\u3002\u56e0\u6b64\uff0c\u6700\u7ec8\u7684\u5e94\u7528\u548c\u4f7f\u7528 FastAPI \u7684\u6027\u80fd\u6ca1\u4ec0\u4e48\u533a\u522b\u3002\u4f46\u5f88\u591a\u65f6\u5019\uff0c\u6570\u636e\u9a8c\u8bc1\u4e0e\u5e8f\u5217\u5316\u5360\u6574\u4e2a\u5e94\u7528\u4ee3\u7801\u7684\u6bd4\u4f8b\u5f88\u5927 \u4f7f\u7528 FastAPI \u80fd\u8282\u7ea6\u5f00\u53d1\u65f6\u95f4\uff0c\u51cf\u5c11 bug\uff0c\u8ba9\u60a8\u5c11\u5199\u5f88\u591a\u4ee3\u7801\uff0c\u8fd8\u80fd\u83b7\u5f97\u4e0e\u81ea\u884c\u5f00\u53d1\u7684\u5e94\u7528\u76f8\u540c\u751a\u81f3\u66f4\u4f73\u7684\u6027\u80fd\uff08\u56e0\u4e3a\u60a8\u8981\u81ea\u5df1\u5199\u4ee3\u7801\u5b9e\u73b0\u6240\u6709\u529f\u80fd\uff09 FastAPI \u8981\u4e0e Flask-apispec\u3001NestJS\u3001Molten \u7b49\u63d0\u4f9b\u6570\u636e\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u548c\u6587\u6863\u529f\u80fd\u7684 Web \u5e94\u7528\u6846\u67b6\uff08\u6216\u5de5\u5177\u7ec4\uff09\u653e\u5728\u4e00\u8d77\u8bc4\u6d4b","title":"\u57fa\u51c6\u6d4b\u8bd5\u4e0e\u901f\u5ea6"},{"location":"contributing/","text":"\u5f00\u53d1 - \u8d21\u732e \u00b6 First, you might want to see the basic ways to help FastAPI and get help . \u5f00\u53d1 \u00b6 If you already cloned the repository and you know that you need to deep dive in the code, here are some guidelines to set up your environment. \u7528 venv \u7ba1\u7406\u865a\u62df\u73af\u5883 \u00b6 You can create a virtual environment in a directory using Python's venv module: $ python -m venv env That will create a directory ./env/ with the Python binaries and then you will be able to install packages for that isolated environment. Activate the environment \u00b6 Activate the new environment with: Linux, macOS Windows PowerShell Windows Bash $ source ./env/bin/activate $ . \\e nv \\S cripts \\A ctivate.ps1 Or if you use Bash for Windows (e.g. Git Bash ): $ source ./env/Scripts/activate To check it worked, use: Linux, macOS, Windows Bash Windows PowerShell $ which pip some/directory/fastapi/env/bin/pip $ Get-Command pip some/directory/fastapi/env/bin/pip If it shows the pip binary at env/bin/pip then it worked. \ud83c\udf89 Make sure you have the latest pip version on your virtual environment to avoid errors on the next steps: $ python -m pip install --upgrade pip ---> 100% Tip Every time you install a new package with pip under that environment, activate the environment again. This makes sure that if you use a terminal program installed by that package, you use the one from your local environment and not any other that could be installed globally. pip \u00b6 After activating the environment as described above: $ pip install -e . \"[dev,doc,test]\" ---> 100% It will install all the dependencies and your local FastAPI in your local environment. Using your local FastAPI \u00b6 If you create a Python file that imports and uses FastAPI, and run it with the Python from your local environment, it will use your local FastAPI source code. And if you update that local FastAPI source code, as it is installed with -e , when you run that Python file again, it will use the fresh version of FastAPI you just edited. That way, you don't have to \"install\" your local version to be able to test every change. Format \u00b6 There is a script that you can run that will format and clean all your code: $ bash scripts/format.sh It will also auto-sort all your imports. For it to sort them correctly, you need to have FastAPI installed locally in your environment, with the command in the section above using -e . Docs \u00b6 First, make sure you set up your environment as described above, that will install all the requirements. The documentation uses MkDocs . And there are extra tools/scripts in place to handle translations in ./scripts/docs.py . Tip You don't need to see the code in ./scripts/docs.py , you just use it in the command line. All the documentation is in Markdown format in the directory ./docs/en/ . Many of the tutorials have blocks of code. In most of the cases, these blocks of code are actual complete applications that can be run as is. In fact, those blocks of code are not written inside the Markdown, they are Python files in the ./docs_src/ directory. And those Python files are included/injected in the documentation when generating the site. Docs for tests \u00b6 Most of the tests actually run against the example source files in the documentation. This helps making sure that: The documentation is up to date. The documentation examples can be run as is. Most of the features are covered by the documentation, ensured by test coverage. During local development, there is a script that builds the site and checks for any changes, live-reloading: $ python ./scripts/docs.py live <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes It will serve the documentation on http://127.0.0.1:8008 . That way, you can edit the documentation/source files and see the changes live. Typer CLI (optional) \u00b6 The instructions here show you how to use the script at ./scripts/docs.py with the python program directly. But you can also use Typer CLI , and you will get autocompletion in your terminal for the commands after installing completion. If you install Typer CLI, you can install completion with: $ typer --install-completion zsh completion installed in /home/user/.bashrc. Completion will take effect once you restart the terminal. Apps and docs at the same time \u00b6 If you run the examples with, e.g.: $ uvicorn tutorial001:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) as Uvicorn by default will use the port 8000 , the documentation on port 8008 won't clash. Translations \u00b6 Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. \ud83c\udf0e \ud83d\ude80 Here are the steps to help with translations. Tips and guidelines \u00b6 Check the currently existing pull requests for your language and add reviews requesting changes or approving them. Tip You can add comments with change suggestions to existing pull requests. Check the docs about adding a pull request review to approve it or request changes. Check in the issues to see if there's one coordinating translations for your language. Add a single pull request per page translated. That will make it much easier for others to review it. For the languages I don't speak, I'll wait for several others to review the translation before merging. You can also check if there are translations for your language and add a review to them, that will help me know that the translation is correct and I can merge it. Use the same Python examples and only translate the text in the docs. You don't have to change anything for this to work. Use the same images, file names, and links. You don't have to change anything for it to work. To check the 2-letter code for the language you want to translate you can use the table List of ISO 639-1 codes . Existing language \u00b6 Let's say you want to translate a page for a language that already has translations for some pages, like Spanish. In the case of Spanish, the 2-letter code is es . So, the directory for Spanish translations is located at docs/es/ . Tip The main (\"official\") language is English, located at docs/en/ . Now run the live server for the docs in Spanish: // Use the command \"live\" and pass the language code as a CLI argument $ python ./scripts/docs.py live es <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes Now you can go to http://127.0.0.1:8008 and see your changes live. If you look at the FastAPI docs website, you will see that every language has all the pages. But some pages are not translated and have a notification about the missing translation. But when you run it locally like this, you will only see the pages that are already translated. Now let's say that you want to add a translation for the section Features . Copy the file at: docs/en/docs/features.md Paste it in exactly the same location but for the language you want to translate, e.g.: docs/es/docs/features.md Tip Notice that the only change in the path and file name is the language code, from en to es . Now open the MkDocs config file for English at: docs/en/mkdocs.yml Find the place where that docs/features.md is located in the config file. Somewhere like: site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md Open the MkDocs config file for the language you are editing, e.g.: docs/es/mkdocs.yml Add it there at the exact same location it was for English, e.g.: site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md Make sure that if there are other entries, the new entry with your translation is exactly in the same order as in the English version. If you go to your browser you will see that now the docs show your new section. \ud83c\udf89 Now you can translate it all and see how it looks as you save the file. New Language \u00b6 Let's say that you want to add translations for a language that is not yet translated, not even some pages. Let's say you want to add translations for Creole, and it's not yet there in the docs. Checking the link from above, the code for \"Creole\" is ht . The next step is to run the script to generate a new translation directory: // Use the command new-lang, pass the language code as a CLI argument $ python ./scripts/docs.py new-lang ht Successfully initialized: docs/ht Updating ht Updating en Now you can check in your code editor the newly created directory docs/ht/ . Tip Create a first pull request with just this, to set up the configuration for the new language, before adding translations. That way others can help with other pages while you work on the first one. \ud83d\ude80 Start by translating the main page, docs/ht/index.md . Then you can continue with the previous instructions, for an \"Existing Language\". New Language not supported \u00b6 If when running the live server script you get an error about the language not being supported, something like: raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: partials/language/xx.html That means that the theme doesn't support that language (in this case, with a fake 2-letter code of xx ). But don't worry, you can set the theme language to English and then translate the content of the docs. If you need to do that, edit the mkdocs.yml for your new language, it will have something like: site_name : FastAPI # More stuff theme : # More stuff language : xx Change that language from xx (from your language code) to en . Then you can start the live server again. Preview the result \u00b6 When you use the script at ./scripts/docs.py with the live command it only shows the files and translations available for the current language. But once you are done, you can test it all as it would look online. To do that, first build all the docs: // Use the command \"build-all\", this will take a bit $ python ./scripts/docs.py build-all Updating es Updating en Building docs for: en Building docs for: es Successfully built docs for: es Copying en index.md to README.md That generates all the docs at ./docs_build/ for each language. This includes adding any files with missing translations, with a note saying that \"this file doesn't have a translation yet\". But you don't have to do anything with that directory. Then it builds all those independent MkDocs sites for each language, combines them, and generates the final output at ./site/ . Then you can serve that with the command serve : // Use the command \"serve\" after running \"build-all\" $ python ./scripts/docs.py serve Warning: this is a very simple server. For development, use mkdocs serve instead. This is here only to preview a site with translations already built. Make sure you run the build-all command first. Serving at: http://127.0.0.1:8008 Tests \u00b6 There is a script that you can run locally to test all the code and generate coverage reports in HTML: $ bash scripts/test-cov-html.sh This command generates a directory ./htmlcov/ , if you open the file ./htmlcov/index.html in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.","title":"\u5f00\u53d1 - \u8d21\u732e"},{"location":"contributing/#-","text":"First, you might want to see the basic ways to help FastAPI and get help .","title":"\u5f00\u53d1 - \u8d21\u732e"},{"location":"contributing/#_1","text":"If you already cloned the repository and you know that you need to deep dive in the code, here are some guidelines to set up your environment.","title":"\u5f00\u53d1"},{"location":"contributing/#venv","text":"You can create a virtual environment in a directory using Python's venv module: $ python -m venv env That will create a directory ./env/ with the Python binaries and then you will be able to install packages for that isolated environment.","title":"\u7528 venv \u7ba1\u7406\u865a\u62df\u73af\u5883"},{"location":"contributing/#activate-the-environment","text":"Activate the new environment with: Linux, macOS Windows PowerShell Windows Bash $ source ./env/bin/activate $ . \\e nv \\S cripts \\A ctivate.ps1 Or if you use Bash for Windows (e.g. Git Bash ): $ source ./env/Scripts/activate To check it worked, use: Linux, macOS, Windows Bash Windows PowerShell $ which pip some/directory/fastapi/env/bin/pip $ Get-Command pip some/directory/fastapi/env/bin/pip If it shows the pip binary at env/bin/pip then it worked. \ud83c\udf89 Make sure you have the latest pip version on your virtual environment to avoid errors on the next steps: $ python -m pip install --upgrade pip ---> 100% Tip Every time you install a new package with pip under that environment, activate the environment again. This makes sure that if you use a terminal program installed by that package, you use the one from your local environment and not any other that could be installed globally.","title":"Activate the environment"},{"location":"contributing/#pip","text":"After activating the environment as described above: $ pip install -e . \"[dev,doc,test]\" ---> 100% It will install all the dependencies and your local FastAPI in your local environment.","title":"pip"},{"location":"contributing/#using-your-local-fastapi","text":"If you create a Python file that imports and uses FastAPI, and run it with the Python from your local environment, it will use your local FastAPI source code. And if you update that local FastAPI source code, as it is installed with -e , when you run that Python file again, it will use the fresh version of FastAPI you just edited. That way, you don't have to \"install\" your local version to be able to test every change.","title":"Using your local FastAPI"},{"location":"contributing/#format","text":"There is a script that you can run that will format and clean all your code: $ bash scripts/format.sh It will also auto-sort all your imports. For it to sort them correctly, you need to have FastAPI installed locally in your environment, with the command in the section above using -e .","title":"Format"},{"location":"contributing/#docs","text":"First, make sure you set up your environment as described above, that will install all the requirements. The documentation uses MkDocs . And there are extra tools/scripts in place to handle translations in ./scripts/docs.py . Tip You don't need to see the code in ./scripts/docs.py , you just use it in the command line. All the documentation is in Markdown format in the directory ./docs/en/ . Many of the tutorials have blocks of code. In most of the cases, these blocks of code are actual complete applications that can be run as is. In fact, those blocks of code are not written inside the Markdown, they are Python files in the ./docs_src/ directory. And those Python files are included/injected in the documentation when generating the site.","title":"Docs"},{"location":"contributing/#docs-for-tests","text":"Most of the tests actually run against the example source files in the documentation. This helps making sure that: The documentation is up to date. The documentation examples can be run as is. Most of the features are covered by the documentation, ensured by test coverage. During local development, there is a script that builds the site and checks for any changes, live-reloading: $ python ./scripts/docs.py live <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes It will serve the documentation on http://127.0.0.1:8008 . That way, you can edit the documentation/source files and see the changes live.","title":"Docs for tests"},{"location":"contributing/#typer-cli-optional","text":"The instructions here show you how to use the script at ./scripts/docs.py with the python program directly. But you can also use Typer CLI , and you will get autocompletion in your terminal for the commands after installing completion. If you install Typer CLI, you can install completion with: $ typer --install-completion zsh completion installed in /home/user/.bashrc. Completion will take effect once you restart the terminal.","title":"Typer CLI (optional)"},{"location":"contributing/#apps-and-docs-at-the-same-time","text":"If you run the examples with, e.g.: $ uvicorn tutorial001:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) as Uvicorn by default will use the port 8000 , the documentation on port 8008 won't clash.","title":"Apps and docs at the same time"},{"location":"contributing/#translations","text":"Help with translations is VERY MUCH appreciated! And it can't be done without the help from the community. \ud83c\udf0e \ud83d\ude80 Here are the steps to help with translations.","title":"Translations"},{"location":"contributing/#tips-and-guidelines","text":"Check the currently existing pull requests for your language and add reviews requesting changes or approving them. Tip You can add comments with change suggestions to existing pull requests. Check the docs about adding a pull request review to approve it or request changes. Check in the issues to see if there's one coordinating translations for your language. Add a single pull request per page translated. That will make it much easier for others to review it. For the languages I don't speak, I'll wait for several others to review the translation before merging. You can also check if there are translations for your language and add a review to them, that will help me know that the translation is correct and I can merge it. Use the same Python examples and only translate the text in the docs. You don't have to change anything for this to work. Use the same images, file names, and links. You don't have to change anything for it to work. To check the 2-letter code for the language you want to translate you can use the table List of ISO 639-1 codes .","title":"Tips and guidelines"},{"location":"contributing/#existing-language","text":"Let's say you want to translate a page for a language that already has translations for some pages, like Spanish. In the case of Spanish, the 2-letter code is es . So, the directory for Spanish translations is located at docs/es/ . Tip The main (\"official\") language is English, located at docs/en/ . Now run the live server for the docs in Spanish: // Use the command \"live\" and pass the language code as a CLI argument $ python ./scripts/docs.py live es <span style=\"color: green;\">[INFO]</span> Serving on http://127.0.0.1:8008 <span style=\"color: green;\">[INFO]</span> Start watching changes <span style=\"color: green;\">[INFO]</span> Start detecting changes Now you can go to http://127.0.0.1:8008 and see your changes live. If you look at the FastAPI docs website, you will see that every language has all the pages. But some pages are not translated and have a notification about the missing translation. But when you run it locally like this, you will only see the pages that are already translated. Now let's say that you want to add a translation for the section Features . Copy the file at: docs/en/docs/features.md Paste it in exactly the same location but for the language you want to translate, e.g.: docs/es/docs/features.md Tip Notice that the only change in the path and file name is the language code, from en to es . Now open the MkDocs config file for English at: docs/en/mkdocs.yml Find the place where that docs/features.md is located in the config file. Somewhere like: site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md Open the MkDocs config file for the language you are editing, e.g.: docs/es/mkdocs.yml Add it there at the exact same location it was for English, e.g.: site_name : FastAPI # More stuff nav : - FastAPI : index.md - Languages : - en : / - es : /es/ - features.md Make sure that if there are other entries, the new entry with your translation is exactly in the same order as in the English version. If you go to your browser you will see that now the docs show your new section. \ud83c\udf89 Now you can translate it all and see how it looks as you save the file.","title":"Existing language"},{"location":"contributing/#new-language","text":"Let's say that you want to add translations for a language that is not yet translated, not even some pages. Let's say you want to add translations for Creole, and it's not yet there in the docs. Checking the link from above, the code for \"Creole\" is ht . The next step is to run the script to generate a new translation directory: // Use the command new-lang, pass the language code as a CLI argument $ python ./scripts/docs.py new-lang ht Successfully initialized: docs/ht Updating ht Updating en Now you can check in your code editor the newly created directory docs/ht/ . Tip Create a first pull request with just this, to set up the configuration for the new language, before adding translations. That way others can help with other pages while you work on the first one. \ud83d\ude80 Start by translating the main page, docs/ht/index.md . Then you can continue with the previous instructions, for an \"Existing Language\".","title":"New Language"},{"location":"contributing/#new-language-not-supported","text":"If when running the live server script you get an error about the language not being supported, something like: raise TemplateNotFound(template) jinja2.exceptions.TemplateNotFound: partials/language/xx.html That means that the theme doesn't support that language (in this case, with a fake 2-letter code of xx ). But don't worry, you can set the theme language to English and then translate the content of the docs. If you need to do that, edit the mkdocs.yml for your new language, it will have something like: site_name : FastAPI # More stuff theme : # More stuff language : xx Change that language from xx (from your language code) to en . Then you can start the live server again.","title":"New Language not supported"},{"location":"contributing/#preview-the-result","text":"When you use the script at ./scripts/docs.py with the live command it only shows the files and translations available for the current language. But once you are done, you can test it all as it would look online. To do that, first build all the docs: // Use the command \"build-all\", this will take a bit $ python ./scripts/docs.py build-all Updating es Updating en Building docs for: en Building docs for: es Successfully built docs for: es Copying en index.md to README.md That generates all the docs at ./docs_build/ for each language. This includes adding any files with missing translations, with a note saying that \"this file doesn't have a translation yet\". But you don't have to do anything with that directory. Then it builds all those independent MkDocs sites for each language, combines them, and generates the final output at ./site/ . Then you can serve that with the command serve : // Use the command \"serve\" after running \"build-all\" $ python ./scripts/docs.py serve Warning: this is a very simple server. For development, use mkdocs serve instead. This is here only to preview a site with translations already built. Make sure you run the build-all command first. Serving at: http://127.0.0.1:8008","title":"Preview the result"},{"location":"contributing/#tests","text":"There is a script that you can run locally to test all the code and generate coverage reports in HTML: $ bash scripts/test-cov-html.sh This command generates a directory ./htmlcov/ , if you open the file ./htmlcov/index.html in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.","title":"Tests"},{"location":"external-links/","text":"\u5916\u90e8\u94fe\u63a5\u4e0e\u6587\u7ae0 \u00b6 FastAPI \u793e\u533a\u6b63\u5728\u4e0d\u65ad\u58ee\u5927\u3002 \u6709\u5173 FastAPI \u7684\u5e16\u5b50\u3001\u6587\u7ae0\u3001\u5de5\u5177\u548c\u9879\u76ee\u8d8a\u6765\u8d8a\u591a\u3002 \u4ee5\u4e0b\u662f FastAPI \u5404\u79cd\u8d44\u6e90\u7684\u4e0d\u5b8c\u6574\u5217\u8868\u3002 \u63d0\u793a \u5982\u679c\u60a8\u7684\u6587\u7ae0\u3001\u9879\u76ee\u3001\u5de5\u5177\u6216\u5176\u4ed6\u4efb\u4f55\u4e0e FastAPI \u76f8\u5173\u7684\u5185\u5bb9\u5c1a\u672a\u6536\u5165\u6b64\u8868\uff0c\u8bf7\u5728\u6b64\u521b\u5efa PR \u3002 \u6587\u7ae0 \u00b6 \u82f1\u6587 \u00b6 Quickstart Guide to Build and Host Responsive APIs with Fast API and WayScript by WayScript . How to monitor FastAPI application performance using Python agent by New Relic . Building the Poll App From Django Tutorial With FastAPI And React by Jean-Baptiste Rocher . Seamless FastAPI Configuration with ConfZ by Silvan Melchior . 5 Advanced Features of FastAPI You Should Try by Kaustubh Gupta . Deploying ML Models as API Using FastAPI and Heroku by Kaustubh Gupta . Using GitHub Actions to Deploy a FastAPI Project to Heroku by Somraj Saha . How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI by @pystar . Building a realtime ticket booking solution with Kafka, FastAPI, and Ably by Ben Gamble . Building simple E-Commerce with NuxtJS and FastAPI by Shahriyar(Shako) Rzayev . Serve a machine learning model using Sklearn, FastAPI and Docker by Rodrigo Arenas . Building an API with FastAPI and Supabase and Deploying on Deta by Yashasvi Singh . Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao . Python Facebook messenger webhook with FastAPI on Glitch by Patrick Ladon . Authenticate Your FastAPI App with auth0 by Dom Patmore . Deploy a dockerized FastAPI application to AWS by Valon Januzaj . FastAPI for Flask Users by Amit Chaudhary . How to monitor your FastAPI service by Louis Guitton . HTTP server to display desktop notifications by Julien Harbulot . Creating a CRUD App with FastAPI (Part one) by Precious Ndubueze . Build And Host Fast Data Science Applications Using FastAPI by Farhad Malik . Deploy FastAPI on Azure App Service by Navule Pavan Kumar Rao . Machine learning model serving in Python using FastAPI and streamlit by Davide Fiocco . Introducing Dispatch by Netflix . Using FastAPI with Django by Stavros Korokithakis . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Real-time Notifications with Python and Postgres by Guillermo Cruz . Apache Kafka producer and consumer with FastAPI and aiokafka by Benjamin Ramser . Create and Deploy FastAPI app to Heroku without using Docker by Navule Pavan Kumar Rao . How to continuously deploy a FastAPI to AWS Lambda with AWS SAM by Benjamin Ramser . Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest by Arthur Henrique . Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker by Shane Soh . Towards Data Science: Deploying Iris Classifications with FastAPI and Docker by Mandy Gu . TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest by Michael Herman . How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker by Bernard Brenyah . Why I'm Leaving Flask by Dylan Anthony . Setting up Tortoise ORM with FastAPI by Rob Wagner . Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz . A FastAPI and Swagger UI visual cheatsheet by @euri10 . Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server] by Uber Engineering . How to Deploy a Machine Learning Model by Maarten Grootendorst . JWT Authentication with FastAPI and AWS Cognito by Johannes Gontrum . Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur . Deploying a scikit-learn model with ONNX and FastAPI by Nico Axtmann . FastAPI authentication revisited: Enabling API key authentication by Nils de Bruin . FastAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale . Introduction to the fastapi python framework by Errieta Kostala . FastAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin . FastAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin . FastAPI/Starlette debug vs prod by William Hayes . Developing FastAPI Application using K8s & AWS by Mukul Mantosh . Fastapi, Docker(Docker compose) and Postgres by KrishNa . \u65e5\u6587 \u00b6 [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b by @bee2 . Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) by @bee2 . \u3010\u7b2c4\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u6539\u826f\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c3\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u8a8d\u8a3c\u30fb\u30e6\u30fc\u30b6\u767b\u9332\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c2\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c1\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u74b0\u5883\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u958b\u767a\u8005\u5411\u3051\u306eDocker\u306b\u3088\u308bPython\u958b\u767a\u74b0\u5883\u69cb\u7bc9 by Hikaru Takahashi . FastAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u53d7\u3051\u53d6\u308b by @angel_katayoku . FastAPI\u3092MySQL\u3068\u63a5\u7d9a\u3057\u3066Docker\u3067\u7ba1\u7406\u3057\u3066\u307f\u308b by @angel_katayoku . FastAPI\u3067CORS\u3092\u56de\u907f by @angel_katayoku . python\u88fd\u306e\u6700\u65b0API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI \u3092\u89e6\u3063\u3066\u307f\u305f by @ryoryomaru . FastAPI\uff5cDB\u63a5\u7d9a\u3057\u3066CRUD\u3059\u308bPython\u88fdAPI\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9 by @mtitg . \u8d8a\u5357\u8bed \u00b6 FASTAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n . \u4fc4\u8bed \u00b6 FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler . \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? by prostomarkeloff . \u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 FastAPI by Andrey Korchak . \u5fb7\u8bed \u00b6 Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI by Nico Axtmann . REST-API Programmieren mittels Python und dem FastAPI Modul by Felix Sch\u00fcrmeyer . \u64ad\u5ba2 \u00b6 Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . FastAPI on PythonBytes by Python Bytes FM . \u8bbf\u8c08 \u00b6 [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyCon UK 2019: FastAPI from the ground up by Chris Withers . \u9879\u76ee \u00b6 GitHub \u4e0a\u6700\u65b0\u7684 fastapi \u4e3b\u9898\u9879\u76ee\uff1a","title":"\u5916\u90e8\u94fe\u63a5\u4e0e\u6587\u7ae0"},{"location":"external-links/#_1","text":"FastAPI \u793e\u533a\u6b63\u5728\u4e0d\u65ad\u58ee\u5927\u3002 \u6709\u5173 FastAPI \u7684\u5e16\u5b50\u3001\u6587\u7ae0\u3001\u5de5\u5177\u548c\u9879\u76ee\u8d8a\u6765\u8d8a\u591a\u3002 \u4ee5\u4e0b\u662f FastAPI \u5404\u79cd\u8d44\u6e90\u7684\u4e0d\u5b8c\u6574\u5217\u8868\u3002 \u63d0\u793a \u5982\u679c\u60a8\u7684\u6587\u7ae0\u3001\u9879\u76ee\u3001\u5de5\u5177\u6216\u5176\u4ed6\u4efb\u4f55\u4e0e FastAPI \u76f8\u5173\u7684\u5185\u5bb9\u5c1a\u672a\u6536\u5165\u6b64\u8868\uff0c\u8bf7\u5728\u6b64\u521b\u5efa PR \u3002","title":"\u5916\u90e8\u94fe\u63a5\u4e0e\u6587\u7ae0"},{"location":"external-links/#_2","text":"","title":"\u6587\u7ae0"},{"location":"external-links/#_3","text":"Quickstart Guide to Build and Host Responsive APIs with Fast API and WayScript by WayScript . How to monitor FastAPI application performance using Python agent by New Relic . Building the Poll App From Django Tutorial With FastAPI And React by Jean-Baptiste Rocher . Seamless FastAPI Configuration with ConfZ by Silvan Melchior . 5 Advanced Features of FastAPI You Should Try by Kaustubh Gupta . Deploying ML Models as API Using FastAPI and Heroku by Kaustubh Gupta . Using GitHub Actions to Deploy a FastAPI Project to Heroku by Somraj Saha . How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI by @pystar . Building a realtime ticket booking solution with Kafka, FastAPI, and Ably by Ben Gamble . Building simple E-Commerce with NuxtJS and FastAPI by Shahriyar(Shako) Rzayev . Serve a machine learning model using Sklearn, FastAPI and Docker by Rodrigo Arenas . Building an API with FastAPI and Supabase and Deploying on Deta by Yashasvi Singh . Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server by Navule Pavan Kumar Rao . Python Facebook messenger webhook with FastAPI on Glitch by Patrick Ladon . Authenticate Your FastAPI App with auth0 by Dom Patmore . Deploy a dockerized FastAPI application to AWS by Valon Januzaj . FastAPI for Flask Users by Amit Chaudhary . How to monitor your FastAPI service by Louis Guitton . HTTP server to display desktop notifications by Julien Harbulot . Creating a CRUD App with FastAPI (Part one) by Precious Ndubueze . Build And Host Fast Data Science Applications Using FastAPI by Farhad Malik . Deploy FastAPI on Azure App Service by Navule Pavan Kumar Rao . Machine learning model serving in Python using FastAPI and streamlit by Davide Fiocco . Introducing Dispatch by Netflix . Using FastAPI with Django by Stavros Korokithakis . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Real-time Notifications with Python and Postgres by Guillermo Cruz . Apache Kafka producer and consumer with FastAPI and aiokafka by Benjamin Ramser . Create and Deploy FastAPI app to Heroku without using Docker by Navule Pavan Kumar Rao . How to continuously deploy a FastAPI to AWS Lambda with AWS SAM by Benjamin Ramser . Another Boilerplate to FastAPI: Azure Pipeline CI + Pytest by Arthur Henrique . Deploy Machine Learning Models with Keras, FastAPI, Redis and Docker by Shane Soh . Towards Data Science: Deploying Iris Classifications with FastAPI and Docker by Mandy Gu . TestDriven.io: Developing and Testing an Asynchronous API with FastAPI and Pytest by Michael Herman . How To Deploy Tensorflow 2.0 Models As An API Service With FastAPI & Docker by Bernard Brenyah . Why I'm Leaving Flask by Dylan Anthony . Setting up Tortoise ORM with FastAPI by Rob Wagner . Using Docker Compose to deploy a lightweight Python REST API with a job queue by Mike Moritz . A FastAPI and Swagger UI visual cheatsheet by @euri10 . Uber: Ludwig v0.2 Adds New Features and Other Improvements to its Deep Learning Toolbox [including a FastAPI server] by Uber Engineering . How to Deploy a Machine Learning Model by Maarten Grootendorst . JWT Authentication with FastAPI and AWS Cognito by Johannes Gontrum . Top 5 Asynchronous Web Frameworks for Python by Ankush Thakur . Deploying a scikit-learn model with ONNX and FastAPI by Nico Axtmann . FastAPI authentication revisited: Enabling API key authentication by Nils de Bruin . FastAPI and Scikit-Learn: Easily Deploy Models by Nick Cortale . Introduction to the fastapi python framework by Errieta Kostala . FastAPI\u200a\u2014\u200aHow to add basic and cookie authentication by Nils de Bruin . FastAPI\u200a\u2014\u200aGoogle as an external authentication provider by Nils de Bruin . FastAPI/Starlette debug vs prod by William Hayes . Developing FastAPI Application using K8s & AWS by Mukul Mantosh . Fastapi, Docker(Docker compose) and Postgres by KrishNa .","title":"\u82f1\u6587"},{"location":"external-links/#_4","text":"[FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b by @bee2 . Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) by @bee2 . \u3010\u7b2c4\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u7ba1\u7406\u8005\u30da\u30fc\u30b8\u6539\u826f\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c3\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: toDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u8a8d\u8a3c\u30fb\u30e6\u30fc\u30b6\u767b\u9332\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c2\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u30e2\u30c7\u30eb\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u3010\u7b2c1\u56de\u3011FastAPI\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: ToDo\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3010\u74b0\u5883\u69cb\u7bc9\u7de8\u3011 by \u30e9\u30a4\u30c8\u30b3\u30fc\u30c9\u30e1\u30c7\u30a3\u30a2\u7de8\u96c6\u90e8 . \u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u958b\u767a\u8005\u5411\u3051\u306eDocker\u306b\u3088\u308bPython\u958b\u767a\u74b0\u5883\u69cb\u7bc9 by Hikaru Takahashi . FastAPI\u3067POST\u3055\u308c\u305fJSON\u306e\u30ec\u30b9\u30dd\u30f3\u30b9body\u3092\u53d7\u3051\u53d6\u308b by @angel_katayoku . FastAPI\u3092MySQL\u3068\u63a5\u7d9a\u3057\u3066Docker\u3067\u7ba1\u7406\u3057\u3066\u307f\u308b by @angel_katayoku . FastAPI\u3067CORS\u3092\u56de\u907f by @angel_katayoku . python\u88fd\u306e\u6700\u65b0API\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI \u3092\u89e6\u3063\u3066\u307f\u305f by @ryoryomaru . FastAPI\uff5cDB\u63a5\u7d9a\u3057\u3066CRUD\u3059\u308bPython\u88fdAPI\u30b5\u30fc\u30d0\u30fc\u3092\u69cb\u7bc9 by @mtitg .","title":"\u65e5\u6587"},{"location":"external-links/#_5","text":"FASTAPI: TRI\u1ec2N KHAI B\u1eb0NG DOCKER by Nguy\u1ec5n Nh\u00e2n .","title":"\u8d8a\u5357\u8bed"},{"location":"external-links/#_6","text":"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c by Troy K\u00f6hler . \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? by prostomarkeloff . \u041c\u0435\u043b\u043a\u0430\u044f \u043f\u0438\u0442\u043e\u043d\u044f\u0447\u0430\u044f \u0440\u0430\u0434\u043e\u0441\u0442\u044c #2: Starlette - \u0421\u043e\u043b\u0438\u0434\u043d\u0430\u044f \u043f\u0440\u0438\u043c\u043e\u0447\u043a\u0430 \u2013 FastAPI by Andrey Korchak .","title":"\u4fc4\u8bed"},{"location":"external-links/#_7","text":"Inbetriebnahme eines scikit-learn-Modells mit ONNX und FastAPI by Nico Axtmann . REST-API Programmieren mittels Python und dem FastAPI Modul by Felix Sch\u00fcrmeyer .","title":"\u5fb7\u8bed"},{"location":"external-links/#_8","text":"Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . FastAPI on PythonBytes by Python Bytes FM .","title":"\u64ad\u5ba2"},{"location":"external-links/#_9","text":"[VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PyCon UK 2019: FastAPI from the ground up by Chris Withers .","title":"\u8bbf\u8c08"},{"location":"external-links/#_10","text":"GitHub \u4e0a\u6700\u65b0\u7684 fastapi \u4e3b\u9898\u9879\u76ee\uff1a","title":"\u9879\u76ee"},{"location":"fastapi-people/","text":"FastAPI \u793e\u533a \u00b6 FastAPI \u6709\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u793e\u533a\uff0c\u5b83\u6b22\u8fce\u6765\u81ea\u5404\u4e2a\u9886\u57df\u548c\u80cc\u666f\u7684\u670b\u53cb\u3002 \u521b\u5efa\u8005 & \u7ef4\u62a4\u8005 \u00b6 \u563f! \ud83d\udc4b \u8fd9\u5c31\u662f\u6211: @tiangolo Answers: 1837 Pull Requests: 360 \u6211\u662f FastAPI \u7684\u521b\u5efa\u8005\u548c\u7ef4\u62a4\u8005. \u4f60\u80fd\u5728 \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 - \u4e0e\u4f5c\u8005\u8054\u7cfb \u9605\u8bfb\u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\u3002 ...\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u60f3\u5411\u60a8\u5c55\u793a\u793e\u533a\u3002 FastAPI \u5f97\u5230\u4e86\u793e\u533a\u7684\u5927\u529b\u652f\u6301\u3002\u56e0\u6b64\u6211\u60f3\u7a81\u51fa\u4ed6\u4eec\u7684\u8d21\u732e\u3002 \u8fd9\u4e9b\u4eba\uff1a \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u521b\u5efa Pull Requests \u3002 \u5ba1\u6838 Pull Requests\uff0c \u5bf9\u4e8e \u7ffb\u8bd1 \u5c24\u4e3a\u91cd\u8981\u3002 \u5411\u4ed6\u4eec\u81f4\u4ee5\u638c\u58f0\u3002 \ud83d\udc4f \ud83d\ude47 \u4e0a\u4e2a\u6708\u6700\u6d3b\u8dc3\u7684\u7528\u6237 \u00b6 \u4e0a\u4e2a\u6708\u8fd9\u4e9b\u7528\u6237\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 @jgould22 Issues replied: 9 @yinziyan1206 Issues replied: 9 @iudeen Issues replied: 8 @Kludex Issues replied: 5 @JarroVGIT Issues replied: 5 @TheJumpyWizard Issues replied: 4 @mbroton Issues replied: 3 @mateoradman Issues replied: 3 \u4e13\u5bb6\u7ec4 \u00b6 \u4ee5\u4e0b\u662f FastAPI \u4e13\u5bb6 \u3002 \ud83e\udd13 \u8fd9\u4e9b\u7528\u6237\u4e00\u76f4\u4ee5\u6765\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u4ed6\u4eec\u901a\u8fc7\u5e2e\u52a9\u8bb8\u591a\u4eba\u800c\u88ab\u8bc1\u660e\u662f\u4e13\u5bb6\u3002\u2728 @Kludex Issues replied: 374 @dmontagu Issues replied: 262 @ycd Issues replied: 221 @Mause Issues replied: 207 @JarroVGIT Issues replied: 192 @euri10 Issues replied: 166 @phy25 Issues replied: 130 @iudeen Issues replied: 87 @raphaelauv Issues replied: 77 @ArcLightSlavik Issues replied: 71 @falkben Issues replied: 59 @jgould22 Issues replied: 55 @sm-Fifteen Issues replied: 50 @insomnes Issues replied: 46 @Dustyposa Issues replied: 45 @adriangb Issues replied: 40 @includeamin Issues replied: 39 @STeveShary Issues replied: 37 @chbndrhnns Issues replied: 36 @frankie567 Issues replied: 33 @prostomarkeloff Issues replied: 33 @acidjunk Issues replied: 32 @krishnardt Issues replied: 31 @wshayes Issues replied: 29 @panla Issues replied: 29 @ghandic Issues replied: 25 @dbanty Issues replied: 25 @yinziyan1206 Issues replied: 25 @SirTelemak Issues replied: 24 @odiseo0 Issues replied: 24 @acnebs Issues replied: 22 @nsidnev Issues replied: 22 @chris-allnutt Issues replied: 21 @retnikt Issues replied: 19 @rafsaf Issues replied: 19 @Hultner Issues replied: 18 @jorgerpo Issues replied: 17 @nkhitrov Issues replied: 17 @harunyasar Issues replied: 17 @waynerv Issues replied: 16 @dstlny Issues replied: 16 @jonatasoli Issues replied: 15 @mbroton Issues replied: 15 @hellocoldworld Issues replied: 14 @haizaar Issues replied: 13 @valentin994 Issues replied: 13 @David-Lor Issues replied: 12 @n8sty Issues replied: 12 \u6770\u51fa\u8d21\u732e\u8005 \u00b6 \u4ee5\u4e0b\u662f \u6770\u51fa\u7684\u8d21\u732e\u8005 \u3002 \ud83d\udc77 \u8fd9\u4e9b\u7528\u6237 \u521b\u5efa\u4e86\u6700\u591a\u5df2\u88ab\u5408\u5e76\u7684 Pull Requests \u3002 \u4ed6\u4eec\u8d21\u732e\u4e86\u6e90\u4ee3\u7801\uff0c\u6587\u6863\uff0c\u7ffb\u8bd1\u7b49\u3002 \ud83d\udce6 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 22 @jaystone776 Pull Requests: 17 @dmontagu Pull Requests: 16 @Kludex Pull Requests: 15 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @Smlep Pull Requests: 10 @Serrones Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @hard-coders Pull Requests: 7 @rjNemo Pull Requests: 7 @wshayes Pull Requests: 5 @SwftAlpc Pull Requests: 5 @Attsun1031 Pull Requests: 5 @ComicShrimp Pull Requests: 5 @batlopes Pull Requests: 5 @jekirl Pull Requests: 4 @samuelcolvin Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @lsglucas Pull Requests: 4 @NinaHwang Pull Requests: 4 \u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u8d21\u732e\u8005\uff08\u8d85\u8fc7100\u4e2a\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 FastAPI GitHub \u8d21\u732e\u8005\u9875\u9762 \u4e2d\u770b\u5230\u4ed6\u4eec\u3002\ud83d\udc77 \u6770\u51fa\u5ba1\u6838\u8005 \u00b6 \u4ee5\u4e0b\u7528\u6237\u662f\u300c\u6770\u51fa\u7684\u8bc4\u5ba1\u8005\u300d\u3002 \ud83d\udd75\ufe0f \u7ffb\u8bd1\u5ba1\u6838 \u00b6 \u6211\u53ea\u4f1a\u8bf4\u5c11\u6570\u51e0\u79cd\u8bed\u8a00\uff08\u800c\u4e14\u8fd8\u4e0d\u662f\u5f88\u6d41\u5229 \ud83d\ude05\uff09\u3002\u6240\u4ee5\uff0c\u5177\u5907 \u80fd\u529b\u53bb\u6279\u51c6\u6587\u6863\u7ffb\u8bd1 \u662f\u8fd9\u4e9b\u8bc4\u5ba1\u8005\u4eec\u3002\u5982\u679c\u6ca1\u6709\u5b83\u4eec\uff0c\u5c31\u4e0d\u4f1a\u6709\u591a\u8bed\u8a00\u6587\u6863\u3002 \u6770\u51fa\u7684\u8bc4\u5ba1\u8005 \ud83d\udd75\ufe0f \u8bc4\u5ba1\u4e86\u6700\u591a\u6765\u81ea\u4ed6\u4eba\u7684 Pull Requests\uff0c\u4ed6\u4eec\u4fdd\u8bc1\u4e86\u4ee3\u7801\u3001\u6587\u6863\u5c24\u5176\u662f \u7ffb\u8bd1 \u7684\u8d28\u91cf\u3002 @Kludex Reviews: 109 @BilalAlpaslan Reviews: 70 @yezz123 Reviews: 59 @tokusumi Reviews: 50 @waynerv Reviews: 47 @Laineyzhang55 Reviews: 47 @ycd Reviews: 45 @cikay Reviews: 41 @JarroVGIT Reviews: 34 @AdrianDeAnda Reviews: 33 @iudeen Reviews: 33 @ArcLightSlavik Reviews: 31 @komtaki Reviews: 27 @cassiobotaro Reviews: 26 @lsglucas Reviews: 26 @dmontagu Reviews: 23 @hard-coders Reviews: 20 @0417taehyun Reviews: 19 @rjNemo Reviews: 17 @Smlep Reviews: 17 @zy7y Reviews: 17 @yanever Reviews: 16 @SwftAlpc Reviews: 16 @DevDae Reviews: 16 @pedabraham Reviews: 15 @delhi09 Reviews: 15 @odiseo0 Reviews: 15 @sh0nk Reviews: 13 @RunningIkkyu Reviews: 12 @LorhanSohaky Reviews: 11 @solomein-sv Reviews: 11 @mariacamilagl Reviews: 10 @Attsun1031 Reviews: 10 @maoyibo Reviews: 10 @ComicShrimp Reviews: 10 @peidrao Reviews: 10 @izaguerreiro Reviews: 9 @graingert Reviews: 9 @PandaHun Reviews: 9 @kty4119 Reviews: 9 @bezaca Reviews: 9 @raphaelauv Reviews: 8 @blt232018 Reviews: 8 @rogerbrinkmann Reviews: 8 @NinaHwang Reviews: 8 @dimaqq Reviews: 8 @Xewus Reviews: 8 @Serrones Reviews: 7 @jovicon Reviews: 7 \u8d5e\u52a9\u5546 \u00b6 \u4ee5\u4e0b\u662f \u8d5e\u52a9\u5546 \u3002\ud83d\ude0e \u4ed6\u4eec\u4e3b\u8981\u901a\u8fc7 GitHub Sponsors \u652f\u6301\u6211\u5728 FastAPI (\u548c\u5176\u4ed6\u9879\u76ee)\u7684\u5de5\u4f5c\u3002 \u91d1\u724c\u8d5e\u52a9\u5546 \u00b6 \u94f6\u724c\u8d5e\u52a9\u5546 \u00b6 \u4e2a\u4eba\u8d5e\u52a9 \u00b6 \u5173\u4e8e\u6570\u636e - \u6280\u672f\u7ec6\u8282 \u00b6 \u8be5\u9875\u9762\u7684\u76ee\u7684\u662f\u7a81\u51fa\u793e\u533a\u4e3a\u5e2e\u52a9\u4ed6\u4eba\u800c\u4ed8\u51fa\u7684\u52aa\u529b\u3002 \u5c24\u5176\u662f\u90a3\u4e9b\u4e0d\u5f15\u4eba\u6ce8\u76ee\u4e14\u6d89\u53ca\u66f4\u56f0\u96be\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\u6216\u8005\u8bc4\u5ba1\u7ffb\u8bd1 Pull Requests\u3002 \u8be5\u6570\u636e\u6bcf\u6708\u8ba1\u7b97\u4e00\u6b21\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb \u6e90\u4ee3\u7801 \u3002 \u8fd9\u91cc\u4e5f\u5f3a\u8c03\u4e86\u8d5e\u52a9\u5546\u7684\u8d21\u732e\u3002 \u6211\u4e5f\u4fdd\u7559\u66f4\u65b0\u7b97\u6cd5\uff0c\u680f\u76ee\uff0c\u7edf\u8ba1\u9608\u503c\u7b49\u7684\u6743\u5229\uff08\u4ee5\u9632\u4e07\u4e00\ud83e\udd37\uff09\u3002","title":"FastAPI \u793e\u533a"},{"location":"fastapi-people/#fastapi","text":"FastAPI \u6709\u4e00\u4e2a\u975e\u5e38\u68d2\u7684\u793e\u533a\uff0c\u5b83\u6b22\u8fce\u6765\u81ea\u5404\u4e2a\u9886\u57df\u548c\u80cc\u666f\u7684\u670b\u53cb\u3002","title":"FastAPI \u793e\u533a"},{"location":"fastapi-people/#_1","text":"\u563f! \ud83d\udc4b \u8fd9\u5c31\u662f\u6211: @tiangolo Answers: 1837 Pull Requests: 360 \u6211\u662f FastAPI \u7684\u521b\u5efa\u8005\u548c\u7ef4\u62a4\u8005. \u4f60\u80fd\u5728 \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 - \u4e0e\u4f5c\u8005\u8054\u7cfb \u9605\u8bfb\u6709\u5173\u6b64\u5185\u5bb9\u7684\u66f4\u591a\u4fe1\u606f\u3002 ...\u4f46\u662f\u5728\u8fd9\u91cc\u6211\u60f3\u5411\u60a8\u5c55\u793a\u793e\u533a\u3002 FastAPI \u5f97\u5230\u4e86\u793e\u533a\u7684\u5927\u529b\u652f\u6301\u3002\u56e0\u6b64\u6211\u60f3\u7a81\u51fa\u4ed6\u4eec\u7684\u8d21\u732e\u3002 \u8fd9\u4e9b\u4eba\uff1a \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u521b\u5efa Pull Requests \u3002 \u5ba1\u6838 Pull Requests\uff0c \u5bf9\u4e8e \u7ffb\u8bd1 \u5c24\u4e3a\u91cd\u8981\u3002 \u5411\u4ed6\u4eec\u81f4\u4ee5\u638c\u58f0\u3002 \ud83d\udc4f \ud83d\ude47","title":"\u521b\u5efa\u8005 &amp; \u7ef4\u62a4\u8005"},{"location":"fastapi-people/#_2","text":"\u4e0a\u4e2a\u6708\u8fd9\u4e9b\u7528\u6237\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 @jgould22 Issues replied: 9 @yinziyan1206 Issues replied: 9 @iudeen Issues replied: 8 @Kludex Issues replied: 5 @JarroVGIT Issues replied: 5 @TheJumpyWizard Issues replied: 4 @mbroton Issues replied: 3 @mateoradman Issues replied: 3","title":"\u4e0a\u4e2a\u6708\u6700\u6d3b\u8dc3\u7684\u7528\u6237"},{"location":"fastapi-people/#_3","text":"\u4ee5\u4e0b\u662f FastAPI \u4e13\u5bb6 \u3002 \ud83e\udd13 \u8fd9\u4e9b\u7528\u6237\u4e00\u76f4\u4ee5\u6765\u81f4\u529b\u4e8e \u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3 GitHub \u7684 issues \u3002 \u4ed6\u4eec\u901a\u8fc7\u5e2e\u52a9\u8bb8\u591a\u4eba\u800c\u88ab\u8bc1\u660e\u662f\u4e13\u5bb6\u3002\u2728 @Kludex Issues replied: 374 @dmontagu Issues replied: 262 @ycd Issues replied: 221 @Mause Issues replied: 207 @JarroVGIT Issues replied: 192 @euri10 Issues replied: 166 @phy25 Issues replied: 130 @iudeen Issues replied: 87 @raphaelauv Issues replied: 77 @ArcLightSlavik Issues replied: 71 @falkben Issues replied: 59 @jgould22 Issues replied: 55 @sm-Fifteen Issues replied: 50 @insomnes Issues replied: 46 @Dustyposa Issues replied: 45 @adriangb Issues replied: 40 @includeamin Issues replied: 39 @STeveShary Issues replied: 37 @chbndrhnns Issues replied: 36 @frankie567 Issues replied: 33 @prostomarkeloff Issues replied: 33 @acidjunk Issues replied: 32 @krishnardt Issues replied: 31 @wshayes Issues replied: 29 @panla Issues replied: 29 @ghandic Issues replied: 25 @dbanty Issues replied: 25 @yinziyan1206 Issues replied: 25 @SirTelemak Issues replied: 24 @odiseo0 Issues replied: 24 @acnebs Issues replied: 22 @nsidnev Issues replied: 22 @chris-allnutt Issues replied: 21 @retnikt Issues replied: 19 @rafsaf Issues replied: 19 @Hultner Issues replied: 18 @jorgerpo Issues replied: 17 @nkhitrov Issues replied: 17 @harunyasar Issues replied: 17 @waynerv Issues replied: 16 @dstlny Issues replied: 16 @jonatasoli Issues replied: 15 @mbroton Issues replied: 15 @hellocoldworld Issues replied: 14 @haizaar Issues replied: 13 @valentin994 Issues replied: 13 @David-Lor Issues replied: 12 @n8sty Issues replied: 12","title":"\u4e13\u5bb6\u7ec4"},{"location":"fastapi-people/#_4","text":"\u4ee5\u4e0b\u662f \u6770\u51fa\u7684\u8d21\u732e\u8005 \u3002 \ud83d\udc77 \u8fd9\u4e9b\u7528\u6237 \u521b\u5efa\u4e86\u6700\u591a\u5df2\u88ab\u5408\u5e76\u7684 Pull Requests \u3002 \u4ed6\u4eec\u8d21\u732e\u4e86\u6e90\u4ee3\u7801\uff0c\u6587\u6863\uff0c\u7ffb\u8bd1\u7b49\u3002 \ud83d\udce6 @waynerv Pull Requests: 25 @tokusumi Pull Requests: 22 @jaystone776 Pull Requests: 17 @dmontagu Pull Requests: 16 @Kludex Pull Requests: 15 @euri10 Pull Requests: 13 @mariacamilagl Pull Requests: 12 @Smlep Pull Requests: 10 @Serrones Pull Requests: 8 @RunningIkkyu Pull Requests: 7 @hard-coders Pull Requests: 7 @rjNemo Pull Requests: 7 @wshayes Pull Requests: 5 @SwftAlpc Pull Requests: 5 @Attsun1031 Pull Requests: 5 @ComicShrimp Pull Requests: 5 @batlopes Pull Requests: 5 @jekirl Pull Requests: 4 @samuelcolvin Pull Requests: 4 @jfunez Pull Requests: 4 @ycd Pull Requests: 4 @komtaki Pull Requests: 4 @hitrust Pull Requests: 4 @lsglucas Pull Requests: 4 @NinaHwang Pull Requests: 4 \u8fd8\u6709\u5f88\u591a\u5176\u4ed6\u8d21\u732e\u8005\uff08\u8d85\u8fc7100\u4e2a\uff09\uff0c\u4f60\u53ef\u4ee5\u5728 FastAPI GitHub \u8d21\u732e\u8005\u9875\u9762 \u4e2d\u770b\u5230\u4ed6\u4eec\u3002\ud83d\udc77","title":"\u6770\u51fa\u8d21\u732e\u8005"},{"location":"fastapi-people/#_5","text":"\u4ee5\u4e0b\u7528\u6237\u662f\u300c\u6770\u51fa\u7684\u8bc4\u5ba1\u8005\u300d\u3002 \ud83d\udd75\ufe0f","title":"\u6770\u51fa\u5ba1\u6838\u8005"},{"location":"fastapi-people/#_6","text":"\u6211\u53ea\u4f1a\u8bf4\u5c11\u6570\u51e0\u79cd\u8bed\u8a00\uff08\u800c\u4e14\u8fd8\u4e0d\u662f\u5f88\u6d41\u5229 \ud83d\ude05\uff09\u3002\u6240\u4ee5\uff0c\u5177\u5907 \u80fd\u529b\u53bb\u6279\u51c6\u6587\u6863\u7ffb\u8bd1 \u662f\u8fd9\u4e9b\u8bc4\u5ba1\u8005\u4eec\u3002\u5982\u679c\u6ca1\u6709\u5b83\u4eec\uff0c\u5c31\u4e0d\u4f1a\u6709\u591a\u8bed\u8a00\u6587\u6863\u3002 \u6770\u51fa\u7684\u8bc4\u5ba1\u8005 \ud83d\udd75\ufe0f \u8bc4\u5ba1\u4e86\u6700\u591a\u6765\u81ea\u4ed6\u4eba\u7684 Pull Requests\uff0c\u4ed6\u4eec\u4fdd\u8bc1\u4e86\u4ee3\u7801\u3001\u6587\u6863\u5c24\u5176\u662f \u7ffb\u8bd1 \u7684\u8d28\u91cf\u3002 @Kludex Reviews: 109 @BilalAlpaslan Reviews: 70 @yezz123 Reviews: 59 @tokusumi Reviews: 50 @waynerv Reviews: 47 @Laineyzhang55 Reviews: 47 @ycd Reviews: 45 @cikay Reviews: 41 @JarroVGIT Reviews: 34 @AdrianDeAnda Reviews: 33 @iudeen Reviews: 33 @ArcLightSlavik Reviews: 31 @komtaki Reviews: 27 @cassiobotaro Reviews: 26 @lsglucas Reviews: 26 @dmontagu Reviews: 23 @hard-coders Reviews: 20 @0417taehyun Reviews: 19 @rjNemo Reviews: 17 @Smlep Reviews: 17 @zy7y Reviews: 17 @yanever Reviews: 16 @SwftAlpc Reviews: 16 @DevDae Reviews: 16 @pedabraham Reviews: 15 @delhi09 Reviews: 15 @odiseo0 Reviews: 15 @sh0nk Reviews: 13 @RunningIkkyu Reviews: 12 @LorhanSohaky Reviews: 11 @solomein-sv Reviews: 11 @mariacamilagl Reviews: 10 @Attsun1031 Reviews: 10 @maoyibo Reviews: 10 @ComicShrimp Reviews: 10 @peidrao Reviews: 10 @izaguerreiro Reviews: 9 @graingert Reviews: 9 @PandaHun Reviews: 9 @kty4119 Reviews: 9 @bezaca Reviews: 9 @raphaelauv Reviews: 8 @blt232018 Reviews: 8 @rogerbrinkmann Reviews: 8 @NinaHwang Reviews: 8 @dimaqq Reviews: 8 @Xewus Reviews: 8 @Serrones Reviews: 7 @jovicon Reviews: 7","title":"\u7ffb\u8bd1\u5ba1\u6838"},{"location":"fastapi-people/#_7","text":"\u4ee5\u4e0b\u662f \u8d5e\u52a9\u5546 \u3002\ud83d\ude0e \u4ed6\u4eec\u4e3b\u8981\u901a\u8fc7 GitHub Sponsors \u652f\u6301\u6211\u5728 FastAPI (\u548c\u5176\u4ed6\u9879\u76ee)\u7684\u5de5\u4f5c\u3002","title":"\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_8","text":"","title":"\u91d1\u724c\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_9","text":"","title":"\u94f6\u724c\u8d5e\u52a9\u5546"},{"location":"fastapi-people/#_10","text":"","title":"\u4e2a\u4eba\u8d5e\u52a9"},{"location":"fastapi-people/#-","text":"\u8be5\u9875\u9762\u7684\u76ee\u7684\u662f\u7a81\u51fa\u793e\u533a\u4e3a\u5e2e\u52a9\u4ed6\u4eba\u800c\u4ed8\u51fa\u7684\u52aa\u529b\u3002 \u5c24\u5176\u662f\u90a3\u4e9b\u4e0d\u5f15\u4eba\u6ce8\u76ee\u4e14\u6d89\u53ca\u66f4\u56f0\u96be\u7684\u4efb\u52a1\uff0c\u4f8b\u5982\u5e2e\u52a9\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\u6216\u8005\u8bc4\u5ba1\u7ffb\u8bd1 Pull Requests\u3002 \u8be5\u6570\u636e\u6bcf\u6708\u8ba1\u7b97\u4e00\u6b21\uff0c\u60a8\u53ef\u4ee5\u9605\u8bfb \u6e90\u4ee3\u7801 \u3002 \u8fd9\u91cc\u4e5f\u5f3a\u8c03\u4e86\u8d5e\u52a9\u5546\u7684\u8d21\u732e\u3002 \u6211\u4e5f\u4fdd\u7559\u66f4\u65b0\u7b97\u6cd5\uff0c\u680f\u76ee\uff0c\u7edf\u8ba1\u9608\u503c\u7b49\u7684\u6743\u5229\uff08\u4ee5\u9632\u4e07\u4e00\ud83e\udd37\uff09\u3002","title":"\u5173\u4e8e\u6570\u636e - \u6280\u672f\u7ec6\u8282"},{"location":"features/","text":"\u7279\u6027 \u00b6 FastAPI \u7279\u6027 \u00b6 FastAPI \u5177\u5907\u4ee5\u4e0b\u7279\u6027\uff1a \u57fa\u4e8e\u5f00\u653e\u6807\u51c6 \u00b6 OpenAPI \u7528\u4e8e\u521b\u5efa API\uff0c\u5305\u62ec\u58f0\u660e \u8def\u5f84 \u64cd\u4f5c \u3001\u53c2\u6570\u3001\u8bf7\u6c42\u4f53\u3001\u5b89\u5168\u7b49 \u4f7f\u7528 JSON Schema \u7684\u81ea\u52a8\u6570\u636e\u6a21\u578b\u6587\u6863\uff0c\uff08OpenAPI \u5c31\u662f\u57fa\u4e8e JSON Schema\uff09 \u57fa\u4e8e\u6807\u51c6\u8bbe\u8ba1\uff0c\u5386\u7ecf\u7f1c\u5bc6\u7684\u7814\u7a76\uff0c\u5e76\u975e\u72d7\u5c3e\u7eed\u8c82 \u652f\u6301\u5728\u591a\u79cd\u8bed\u8a00\u4e2d\u81ea\u52a8 \u751f\u6210\u5ba2\u6237\u7aef\u4ee3\u7801 \u81ea\u52a8\u6587\u6863 \u00b6 API \u6587\u6863\u548c\u63a2\u7d22\u6027 Web \u7528\u6237\u754c\u9762\u3002FastAPI \u57fa\u4e8e OpenAPI\uff0c\u652f\u6301\u591a\u79cd\u5907\u9009\u6587\u6863\u65b9\u6848\uff0c\u76ee\u524d\u9ed8\u8ba4\u81ea\u5e26 2 \u4e2a API \u6587\u6863\u3002 Swagger UI \uff0c\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u5b9e\u73b0\u4ea4\u4e92\u5f0f\u63a2\u7d22\uff0c\u76f4\u63a5\u8c03\u7528\u548c\u6d4b\u8bd5 API \u5907\u9009 API \u6587\u6863\uff1a ReDoc \u73b0\u4ee3 Python \u00b6 \u501f\u52a9 Pydantic\uff0cFastAPI \u7684\u529f\u80fd\u5168\u90e8\u57fa\u4e8e\u6807\u51c6\u7684 Python 3.6 \u7c7b\u578b \u58f0\u660e\u3002\u65e0\u9700\u5b66\u4e60\u65b0\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u6807\u51c6\u7684\u73b0\u4ee3 Python \u3002 \u5c31\u7b97\u4e0d\u4f7f\u7528 FastAPI\uff0c\u6700\u597d\u4e5f\u82b1\u51e0\u5206\u949f\u5b66\u4e60\u4e00\u4e0b Python \u7c7b\u578b\uff0c\u8be6\u89c1\uff1a Python \u7c7b\u578b \u3002 \u4f7f\u7528\u7c7b\u578b\u7684\u6807\u51c6 Python\uff1a from datetime import date from pydantic import BaseModel # \u628a\u53d8\u91cf\u58f0\u660e\u4e3a\u5b57\u7b26\u4e32 # \u5728\u51fd\u6570\u5185\u90e8\u83b7\u5f97\u7f16\u8f91\u5668\u652f\u6301 def main ( user_id : str ): return user_id # Pydantic \u6a21\u578b class User ( BaseModel ): id : int name : str joined : date \u7528\u6cd5\u5982\u4e0b\uff1a my_user : User = User ( id = 3 , name = \"John Doe\" , joined = \"2018-07-19\" ) second_user_data = { \"id\" : 4 , \"name\" : \"Mary\" , \"joined\" : \"2018-11-30\" , } my_second_user : User = User ( ** second_user_data ) \u8bf4\u660e **second_user_data \u662f\u6307\uff1a \u76f4\u63a5\u628a second_user_data \u5b57\u5178\u7684\u952e\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u6548\u4e8e\uff1a User(id=4, name=\"Mary\", joined=\"2018-11-30\") \u7f16\u8f91\u5668\u652f\u6301 \u00b6 FastAPI \u8bbe\u8ba1\u7684\u6613\u7528\u4e14\u76f4\u89c2\uff0c\u4e3a\u4e86\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\uff0c\u6240\u6709\u8bbe\u8ba1\u65b9\u6848\u5728\u5f00\u53d1\u524d\u5c31\u5728\u591a\u4e2a\u7f16\u8f91\u5668\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002 \u6700\u65b0\u7684 Python \u5f00\u53d1\u8005\u8c03\u67e5\u62a5\u544a\u663e\u793a \u4f7f\u7528\u6700\u591a\u7684\u529f\u80fd\u662f \u81ea\u52a8\u8865\u5168 \u3002 FastAPI \u5c31\u662f\u57fa\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5904\u5904\u90fd\u6709\u81ea\u52a8\u8865\u5168\u3002 \u5f00\u53d1\u8005\u51e0\u4e4e\u4e0d\u9700\u8981\u7ffb\u9605\u6587\u6863\u3002 \u7f16\u8f91\u5668\u4f1a\u63d0\u4f9b\u5404\u79cd\u5e2e\u52a9\uff1a Visual Studio Code \uff1a PyCharm \uff1a \u5373\u4fbf\u5728\u4e4b\u524d\u4e0d\u6562\u60f3\u8c61\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5b9e\u73b0\u4e86\u4ee3\u7801\u81ea\u52a8\u8865\u5168\u3002\u4f8b\u5982\uff0c\u81ea\u52a8\u8865\u5168 JSON \u8bf7\u6c42\u4f53\uff08\u53ef\u80fd\u662f\u5d4c\u5957\u7684\uff09\u4e2d\u7684\u952e price \u3002 \u518d\u4e5f\u4e0d\u4f1a\u8f93\u9519\u952e\u540d\uff0c\u4e5f\u4e0d\u7528\u6765\u56de\u7ffb\u9605\u6587\u6863\uff0c\u66f4\u4e0d\u7528\u4e0a\u4e0b\u6c42\u7d22\uff0c\u786e\u8ba4\u6700\u540e\u4f7f\u7528\u7684\u662f username \u8fd8\u662f user_name \u3002 \u7b80\u6d01 \u00b6 \u6240\u6709\u5bf9\u8c61\u90fd\u6709\u5408\u7406\u7684 \u9ed8\u8ba4\u503c \uff0c\u5904\u5904\u90fd\u6709\u53ef\u9009\u914d\u7f6e\u3002\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u5fae\u8c03\uff0c\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\uff0c\u5f00\u53d1\u51fa\u7406\u60f3\u7684 API\u3002 \u4f46\u9ed8\u8ba4\u7684\u524d\u63d0\u662f\uff0c\u4e00\u5207\u90fd\u80fd \u6b63\u5e38\u8fd0\u8f6c \u3002 \u9a8c\u8bc1 \u00b6 \u9a8c\u8bc1\u7edd\u5927\u90e8\u5206 Python \u6570\u636e\u7c7b\u578b \uff0c\u5305\u62ec\uff1a JSON \u5bf9\u8c61\uff08 dict \uff09 JSON \u6570\u7ec4\uff08 list \uff09\uff0c\u652f\u6301\u5b9a\u4e49\u6210\u5458\u7c7b\u578b \u5b57\u7b26\u4e32\uff08 str \uff09\u5b57\u6bb5\uff0c\u652f\u6301\u5b9a\u4e49\u6700\u5c0f\u6216\u6700\u5927\u957f\u5ea6 \u6570\u5b57\uff08 int \u3001 float \uff09\uff0c\u652f\u6301\u5b9a\u4e49\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u6821\u9a8c\u5916\u90e8\u7c7b\u578b\uff0c \u6bd4\u5982\uff1a URL Email UUID \u7b49\u7b49\u2026\u2026 \u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u7531\u5b8c\u5584\u4e14\u7a33\u5b9a\u7684 Pydantic \u5904\u7406\u3002 \u5b89\u5168\u4e0e\u8eab\u4efd\u9a8c\u8bc1 \u00b6 \u96c6\u6210\u4e86\u5b89\u5168\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u675c\u7edd\u6570\u636e\u5e93\u6216\u6570\u636e\u6a21\u578b\u7684\u6e17\u900f\u98ce\u9669\u3002 OpenAPI \u4e2d\u5b9a\u4e49\u7684\u5b89\u5168\u6982\u56fe\uff0c\u5305\u62ec\uff1a HTTP \u57fa\u672c\u9a8c\u8bc1 OAuth2 \uff08\u4f7f\u7528 JWT Token \uff09\uff0c\u8be6\u89c1 OAuth2 \u4e0e JWT Token \u9a8c\u8bc1 \u4ee5\u4e0b\u51e0\u79cd\u5bf9\u8c61\u4e2d\u7684 API \u5bc6\u94a5\uff1a \u8bf7\u6c42\u5934 \u67e5\u8be2\u53c2\u6570 Cookies \u7b49 \u6b64\u5916\uff0c\u8fd8\u6709 Starlette\uff08\u5305\u62ec session cookie \uff09\u7684\u6240\u6709\u5b89\u5168\u529f\u80fd\u3002 \u6240\u6709\u7684\u5de5\u5177\u548c\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u590d\u7528\uff0c\u5e76\u80fd\u8f7b\u6613\u5730\u4e0e\u60a8\u7684\u7cfb\u7edf\u3001\u6570\u636e\u4ed3\u5e93\u3001\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3001 NoSQL \u6570\u636e\u5e93\u96c6\u6210\u3002 \u4f9d\u8d56\u6ce8\u5165 \u00b6 FastAPI \u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u5374\u5341\u5206\u5f3a\u5927\u3002 \u652f\u6301\u5b50\u4f9d\u8d56\u9879\u7684\u4f9d\u8d56\u9879\uff0c\u53ef\u521b\u5efa\u591a\u5c42\u4f9d\u8d56\u9879\u6216 \u56fe\u4f9d\u8d56\u9879 FastAPI \u4f1a \u81ea\u52a8\u5904\u7406 \u6240\u6709\u64cd\u4f5c \u6240\u6709\u4f9d\u8d56\u9879\u90fd\u53ef\u4ee5\u4ece\u8bf7\u6c42\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4e14 \u589e\u52a0\u4e86\u8def\u5f84\u64cd\u4f5c \u7ea6\u675f\u548c API \u6587\u6863 \u4f9d\u8d56\u9879\u4e2d\u5b9a\u4e49\u7684 \u8def\u5f84\u64cd\u4f5c \u53c2\u6570\u4e5f\u53ef\u4ee5 \u81ea\u52a8\u9a8c\u8bc1 \u652f\u6301\u590d\u6742\u7684\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\uff0c \u6570\u636e\u5e93\u8fde\u63a5 \u7b49 \u4e0d\u4f9d\u8d56 \u6570\u636e\u5e93\u3001\u524d\u7aef\uff0c\u4f46\u662f\u548c\u5b83\u4eec\u96c6\u6210\u5f88\u7b80\u5355 \u65e0\u9650\u7684\u63d2\u4ef6 \u00b6 \u5176\u5b9e\uff0cFastAPI \u5e76\u4e0d\u9700\u8981\u63d2\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u548c\u4f7f\u7528\u6240\u9700\u7684\u4ee3\u7801\u3002 \u4f9d\u8d56\u9879\u53ef\u4ee5\u628a\u4efb\u610f\u652f\u6301\u5e93\u8f7b\u6613\u5730\u6574\u5408\u8fdb FastAPI \u5e94\u7528\uff0c\u4f7f\u7528\u4e0e \u8def\u5f84\u64cd\u4f5c \u76f8\u540c\u7684\u67b6\u6784\u548c\u8bed\u6cd5\uff0c\u53ea\u8981\u4e24\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e3a\u5e94\u7528\u521b\u5efa\u4efb\u610f \u63d2\u4ef6 \u3002 \u6d4b\u8bd5 \u00b6 100% \u6d4b\u8bd5\u8986\u76d6 \u4ee3\u7801\u5e93 100% \u7c7b\u578b\u6ce8\u91ca \u7528\u4e8e\u751f\u4ea7\u5e94\u7528 Starlette \u7279\u6027 \u00b6 FastAPI \u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e Starlette \u3002\u6240\u4ee5\uff0cStarlette \u4ee3\u7801\u80fd\u5728 FastAPI \u5e94\u7528\u4e2d\u6b63\u5e38\u8fd0\u884c\u3002 FastAPI \u5b9e\u9645\u4e0a\u662f Starlette \u7684\u5b50\u7c7b\u3002\u53ea\u8981\u4e86\u89e3 Starlette\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\u3002 FastAPI \u62e5\u6709 Starlette \u7684\u6240\u6709\u529f\u80fd\uff0c\u53ef\u4ee5\u8bf4\uff0c\u5b83\u662f Starlette \u7684\u52a0\u5f3a\u7248\uff1a \u4ee4\u4eba\u60ca\u53f9\u7684\u6027\u80fd\u3002 Python \u6700\u5feb\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u582a\u6bd4 NodeJS \u548c Go \u652f\u6301 WebSocket \u652f\u6301 GraphQL \u540e\u53f0\u4efb\u52a1\u5904\u7406 Startup \u548c Shutdown \u4e8b\u4ef6 \u57fa\u4e8e requests \u6d4b\u8bd5\u5ba2\u6237\u7aef CORS \u3001GZip\u3001\u9759\u6001\u6587\u4ef6\u3001\u6d41\u54cd\u5e94 \u652f\u6301 Session \u548c Cookie 100% \u6d4b\u8bd5\u8986\u76d6\u7387 \u4ee3\u7801\u5e93 100% \u7c7b\u578b\u6ce8\u91ca Pydantic \u7279\u6027 \u00b6 FastAPI \u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e Pydantic \u3002\u6240\u4ee5\uff0cPydantic \u4ee3\u7801\u80fd\u5728 FastAPI \u5e94\u7528\u4e2d\u6b63\u5e38\u8fd0\u884c\u3002 FastAPI \u8fd8\u652f\u6301\u57fa\u4e8e Pydantic \u7684\u5916\u90e8\u5e93\uff0c\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u7684 ORM \u3001 ODM \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u628a\u4ece\u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u6570\u636e\u5e93 \uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u662f\u81ea\u52a8\u7684\u3002 \u53cd\u4e4b\uff0c\u4e5f\u53ef\u4ee5\u628a\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7684\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u5ba2\u6237\u7aef \u3002 FastAPI \u652f\u6301 Pydantic \u7684\u6240\u6709\u529f\u80fd\uff08\u57fa\u4e8e Pydantic \u5b9e\u73b0\u6570\u636e\u5904\u7406\uff09\uff1a \u4e0d\u70e7\u8111 \uff1a \u65e0\u9700\u5b66\u4e60\u65b0\u7684\u6982\u56fe\u5b9a\u4e49\u5fae\u8bed\u8a00 \u53ea\u8981\u4e86\u89e3 Python \u7c7b\u578b\uff0c\u5c31\u80fd\u4f7f\u7528 Pydantic \u9002\u914d IDE / linter /brain \uff1a \u56e0\u4e3a Pydantic \u6570\u636e\u7ed3\u6784\u53ea\u662f\u5b9a\u4e49\u7684\u7c7b\u5b9e\u4f8b\uff1b\u81ea\u52a8\u8865\u5168\u3001linting\u3001mypy \u90fd\u53ef\u4ee5\u548c\u9a8c\u8bc1\u6570\u636e\u4e00\u8d77\u6b63\u5e38\u8fd0\u4f5c\uff0c\u5b8c\u5168\u7b26\u5408\u76f4\u89c9 \u66f4\u5feb \uff1a \u5728 \u57fa\u51c6\u6d4b\u8bd5 \u4e2d\uff0cPydantic \u6bd4\u5176\u4ed6\u53c2\u4e0e\u6d4b\u8bd5\u7684\u5176\u4ed6\u5e93\u90fd\u5feb \u9a8c\u8bc1 \u590d\u6742\u7ed3\u6784 \uff1a \u4f7f\u7528\u5c42\u7ea7\u5f0f Pydantic \u6a21\u578b\uff0cPython typing \u7684 List \u548c Dict \u7b49 \u9a8c\u8bc1\u5668\u53ef\u4ee5\u6e05\u6670\u3001\u7b80\u5355\u5730\u5b9a\u4e49\u3001\u6821\u9a8c\u590d\u6742\u6570\u636e\u6982\u56fe\uff0c\u5e76\u5b58\u6863\u4e3a JSON Schema \u6df1\u5ea6 \u5d4c\u5957 JSON \u5bf9\u8c61\uff0c\u5e76\u53ef\u8fdb\u884c\u9a8c\u8bc1\u548c\u6ce8\u91ca \u53ef\u6269\u5c55 \uff1a Pydantic \u652f\u6301\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u4f7f\u7528\u9a8c\u8bc1\u88c5\u9970\u5668\u6269\u5c55\u5bf9\u6a21\u578b\u7684\u9a8c\u8bc1\u65b9\u6cd5 100% \u6d4b\u8bd5\u8986\u76d6\u7387","title":"\u7279\u6027"},{"location":"features/#_1","text":"","title":"\u7279\u6027"},{"location":"features/#fastapi","text":"FastAPI \u5177\u5907\u4ee5\u4e0b\u7279\u6027\uff1a","title":"FastAPI \u7279\u6027"},{"location":"features/#_2","text":"OpenAPI \u7528\u4e8e\u521b\u5efa API\uff0c\u5305\u62ec\u58f0\u660e \u8def\u5f84 \u64cd\u4f5c \u3001\u53c2\u6570\u3001\u8bf7\u6c42\u4f53\u3001\u5b89\u5168\u7b49 \u4f7f\u7528 JSON Schema \u7684\u81ea\u52a8\u6570\u636e\u6a21\u578b\u6587\u6863\uff0c\uff08OpenAPI \u5c31\u662f\u57fa\u4e8e JSON Schema\uff09 \u57fa\u4e8e\u6807\u51c6\u8bbe\u8ba1\uff0c\u5386\u7ecf\u7f1c\u5bc6\u7684\u7814\u7a76\uff0c\u5e76\u975e\u72d7\u5c3e\u7eed\u8c82 \u652f\u6301\u5728\u591a\u79cd\u8bed\u8a00\u4e2d\u81ea\u52a8 \u751f\u6210\u5ba2\u6237\u7aef\u4ee3\u7801","title":"\u57fa\u4e8e\u5f00\u653e\u6807\u51c6"},{"location":"features/#_3","text":"API \u6587\u6863\u548c\u63a2\u7d22\u6027 Web \u7528\u6237\u754c\u9762\u3002FastAPI \u57fa\u4e8e OpenAPI\uff0c\u652f\u6301\u591a\u79cd\u5907\u9009\u6587\u6863\u65b9\u6848\uff0c\u76ee\u524d\u9ed8\u8ba4\u81ea\u5e26 2 \u4e2a API \u6587\u6863\u3002 Swagger UI \uff0c\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u5b9e\u73b0\u4ea4\u4e92\u5f0f\u63a2\u7d22\uff0c\u76f4\u63a5\u8c03\u7528\u548c\u6d4b\u8bd5 API \u5907\u9009 API \u6587\u6863\uff1a ReDoc","title":"\u81ea\u52a8\u6587\u6863"},{"location":"features/#python","text":"\u501f\u52a9 Pydantic\uff0cFastAPI \u7684\u529f\u80fd\u5168\u90e8\u57fa\u4e8e\u6807\u51c6\u7684 Python 3.6 \u7c7b\u578b \u58f0\u660e\u3002\u65e0\u9700\u5b66\u4e60\u65b0\u8bed\u6cd5\uff0c\u53ea\u9700\u8981\u6807\u51c6\u7684\u73b0\u4ee3 Python \u3002 \u5c31\u7b97\u4e0d\u4f7f\u7528 FastAPI\uff0c\u6700\u597d\u4e5f\u82b1\u51e0\u5206\u949f\u5b66\u4e60\u4e00\u4e0b Python \u7c7b\u578b\uff0c\u8be6\u89c1\uff1a Python \u7c7b\u578b \u3002 \u4f7f\u7528\u7c7b\u578b\u7684\u6807\u51c6 Python\uff1a from datetime import date from pydantic import BaseModel # \u628a\u53d8\u91cf\u58f0\u660e\u4e3a\u5b57\u7b26\u4e32 # \u5728\u51fd\u6570\u5185\u90e8\u83b7\u5f97\u7f16\u8f91\u5668\u652f\u6301 def main ( user_id : str ): return user_id # Pydantic \u6a21\u578b class User ( BaseModel ): id : int name : str joined : date \u7528\u6cd5\u5982\u4e0b\uff1a my_user : User = User ( id = 3 , name = \"John Doe\" , joined = \"2018-07-19\" ) second_user_data = { \"id\" : 4 , \"name\" : \"Mary\" , \"joined\" : \"2018-11-30\" , } my_second_user : User = User ( ** second_user_data ) \u8bf4\u660e **second_user_data \u662f\u6307\uff1a \u76f4\u63a5\u628a second_user_data \u5b57\u5178\u7684\u952e\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u6548\u4e8e\uff1a User(id=4, name=\"Mary\", joined=\"2018-11-30\")","title":"\u73b0\u4ee3 Python"},{"location":"features/#_4","text":"FastAPI \u8bbe\u8ba1\u7684\u6613\u7528\u4e14\u76f4\u89c2\uff0c\u4e3a\u4e86\u786e\u4fdd\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\uff0c\u6240\u6709\u8bbe\u8ba1\u65b9\u6848\u5728\u5f00\u53d1\u524d\u5c31\u5728\u591a\u4e2a\u7f16\u8f91\u5668\u4e0a\u8fdb\u884c\u4e86\u6d4b\u8bd5\u3002 \u6700\u65b0\u7684 Python \u5f00\u53d1\u8005\u8c03\u67e5\u62a5\u544a\u663e\u793a \u4f7f\u7528\u6700\u591a\u7684\u529f\u80fd\u662f \u81ea\u52a8\u8865\u5168 \u3002 FastAPI \u5c31\u662f\u57fa\u4e8e\u8fd9\u4e00\u70b9\uff0c\u5904\u5904\u90fd\u6709\u81ea\u52a8\u8865\u5168\u3002 \u5f00\u53d1\u8005\u51e0\u4e4e\u4e0d\u9700\u8981\u7ffb\u9605\u6587\u6863\u3002 \u7f16\u8f91\u5668\u4f1a\u63d0\u4f9b\u5404\u79cd\u5e2e\u52a9\uff1a Visual Studio Code \uff1a PyCharm \uff1a \u5373\u4fbf\u5728\u4e4b\u524d\u4e0d\u6562\u60f3\u8c61\u7684\u4f4d\u7f6e\uff0c\u4e5f\u5b9e\u73b0\u4e86\u4ee3\u7801\u81ea\u52a8\u8865\u5168\u3002\u4f8b\u5982\uff0c\u81ea\u52a8\u8865\u5168 JSON \u8bf7\u6c42\u4f53\uff08\u53ef\u80fd\u662f\u5d4c\u5957\u7684\uff09\u4e2d\u7684\u952e price \u3002 \u518d\u4e5f\u4e0d\u4f1a\u8f93\u9519\u952e\u540d\uff0c\u4e5f\u4e0d\u7528\u6765\u56de\u7ffb\u9605\u6587\u6863\uff0c\u66f4\u4e0d\u7528\u4e0a\u4e0b\u6c42\u7d22\uff0c\u786e\u8ba4\u6700\u540e\u4f7f\u7528\u7684\u662f username \u8fd8\u662f user_name \u3002","title":"\u7f16\u8f91\u5668\u652f\u6301"},{"location":"features/#_5","text":"\u6240\u6709\u5bf9\u8c61\u90fd\u6709\u5408\u7406\u7684 \u9ed8\u8ba4\u503c \uff0c\u5904\u5904\u90fd\u6709\u53ef\u9009\u914d\u7f6e\u3002\u6240\u6709\u53c2\u6570\u90fd\u53ef\u4ee5\u5fae\u8c03\uff0c\u4ee5\u6ee1\u8db3\u60a8\u7684\u9700\u6c42\uff0c\u5f00\u53d1\u51fa\u7406\u60f3\u7684 API\u3002 \u4f46\u9ed8\u8ba4\u7684\u524d\u63d0\u662f\uff0c\u4e00\u5207\u90fd\u80fd \u6b63\u5e38\u8fd0\u8f6c \u3002","title":"\u7b80\u6d01"},{"location":"features/#_6","text":"\u9a8c\u8bc1\u7edd\u5927\u90e8\u5206 Python \u6570\u636e\u7c7b\u578b \uff0c\u5305\u62ec\uff1a JSON \u5bf9\u8c61\uff08 dict \uff09 JSON \u6570\u7ec4\uff08 list \uff09\uff0c\u652f\u6301\u5b9a\u4e49\u6210\u5458\u7c7b\u578b \u5b57\u7b26\u4e32\uff08 str \uff09\u5b57\u6bb5\uff0c\u652f\u6301\u5b9a\u4e49\u6700\u5c0f\u6216\u6700\u5927\u957f\u5ea6 \u6570\u5b57\uff08 int \u3001 float \uff09\uff0c\u652f\u6301\u5b9a\u4e49\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c \u6821\u9a8c\u5916\u90e8\u7c7b\u578b\uff0c \u6bd4\u5982\uff1a URL Email UUID \u7b49\u7b49\u2026\u2026 \u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u7531\u5b8c\u5584\u4e14\u7a33\u5b9a\u7684 Pydantic \u5904\u7406\u3002","title":"\u9a8c\u8bc1"},{"location":"features/#_7","text":"\u96c6\u6210\u4e86\u5b89\u5168\u548c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u675c\u7edd\u6570\u636e\u5e93\u6216\u6570\u636e\u6a21\u578b\u7684\u6e17\u900f\u98ce\u9669\u3002 OpenAPI \u4e2d\u5b9a\u4e49\u7684\u5b89\u5168\u6982\u56fe\uff0c\u5305\u62ec\uff1a HTTP \u57fa\u672c\u9a8c\u8bc1 OAuth2 \uff08\u4f7f\u7528 JWT Token \uff09\uff0c\u8be6\u89c1 OAuth2 \u4e0e JWT Token \u9a8c\u8bc1 \u4ee5\u4e0b\u51e0\u79cd\u5bf9\u8c61\u4e2d\u7684 API \u5bc6\u94a5\uff1a \u8bf7\u6c42\u5934 \u67e5\u8be2\u53c2\u6570 Cookies \u7b49 \u6b64\u5916\uff0c\u8fd8\u6709 Starlette\uff08\u5305\u62ec session cookie \uff09\u7684\u6240\u6709\u5b89\u5168\u529f\u80fd\u3002 \u6240\u6709\u7684\u5de5\u5177\u548c\u7ec4\u4ef6\u90fd\u53ef\u4ee5\u590d\u7528\uff0c\u5e76\u80fd\u8f7b\u6613\u5730\u4e0e\u60a8\u7684\u7cfb\u7edf\u3001\u6570\u636e\u4ed3\u5e93\u3001\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3001 NoSQL \u6570\u636e\u5e93\u96c6\u6210\u3002","title":"\u5b89\u5168\u4e0e\u8eab\u4efd\u9a8c\u8bc1"},{"location":"features/#_8","text":"FastAPI \u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u5374\u5341\u5206\u5f3a\u5927\u3002 \u652f\u6301\u5b50\u4f9d\u8d56\u9879\u7684\u4f9d\u8d56\u9879\uff0c\u53ef\u521b\u5efa\u591a\u5c42\u4f9d\u8d56\u9879\u6216 \u56fe\u4f9d\u8d56\u9879 FastAPI \u4f1a \u81ea\u52a8\u5904\u7406 \u6240\u6709\u64cd\u4f5c \u6240\u6709\u4f9d\u8d56\u9879\u90fd\u53ef\u4ee5\u4ece\u8bf7\u6c42\u83b7\u53d6\u6570\u636e\uff0c\u5e76\u4e14 \u589e\u52a0\u4e86\u8def\u5f84\u64cd\u4f5c \u7ea6\u675f\u548c API \u6587\u6863 \u4f9d\u8d56\u9879\u4e2d\u5b9a\u4e49\u7684 \u8def\u5f84\u64cd\u4f5c \u53c2\u6570\u4e5f\u53ef\u4ee5 \u81ea\u52a8\u9a8c\u8bc1 \u652f\u6301\u590d\u6742\u7684\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\uff0c \u6570\u636e\u5e93\u8fde\u63a5 \u7b49 \u4e0d\u4f9d\u8d56 \u6570\u636e\u5e93\u3001\u524d\u7aef\uff0c\u4f46\u662f\u548c\u5b83\u4eec\u96c6\u6210\u5f88\u7b80\u5355","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"features/#_9","text":"\u5176\u5b9e\uff0cFastAPI \u5e76\u4e0d\u9700\u8981\u63d2\u4ef6\uff0c\u53ef\u4ee5\u76f4\u63a5\u5bfc\u5165\u548c\u4f7f\u7528\u6240\u9700\u7684\u4ee3\u7801\u3002 \u4f9d\u8d56\u9879\u53ef\u4ee5\u628a\u4efb\u610f\u652f\u6301\u5e93\u8f7b\u6613\u5730\u6574\u5408\u8fdb FastAPI \u5e94\u7528\uff0c\u4f7f\u7528\u4e0e \u8def\u5f84\u64cd\u4f5c \u76f8\u540c\u7684\u67b6\u6784\u548c\u8bed\u6cd5\uff0c\u53ea\u8981\u4e24\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e3a\u5e94\u7528\u521b\u5efa\u4efb\u610f \u63d2\u4ef6 \u3002","title":"\u65e0\u9650\u7684\u63d2\u4ef6"},{"location":"features/#_10","text":"100% \u6d4b\u8bd5\u8986\u76d6 \u4ee3\u7801\u5e93 100% \u7c7b\u578b\u6ce8\u91ca \u7528\u4e8e\u751f\u4ea7\u5e94\u7528","title":"\u6d4b\u8bd5"},{"location":"features/#starlette","text":"FastAPI \u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e Starlette \u3002\u6240\u4ee5\uff0cStarlette \u4ee3\u7801\u80fd\u5728 FastAPI \u5e94\u7528\u4e2d\u6b63\u5e38\u8fd0\u884c\u3002 FastAPI \u5b9e\u9645\u4e0a\u662f Starlette \u7684\u5b50\u7c7b\u3002\u53ea\u8981\u4e86\u89e3 Starlette\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u5b83\u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\u3002 FastAPI \u62e5\u6709 Starlette \u7684\u6240\u6709\u529f\u80fd\uff0c\u53ef\u4ee5\u8bf4\uff0c\u5b83\u662f Starlette \u7684\u52a0\u5f3a\u7248\uff1a \u4ee4\u4eba\u60ca\u53f9\u7684\u6027\u80fd\u3002 Python \u6700\u5feb\u7684\u6846\u67b6\u4e4b\u4e00\uff0c\u582a\u6bd4 NodeJS \u548c Go \u652f\u6301 WebSocket \u652f\u6301 GraphQL \u540e\u53f0\u4efb\u52a1\u5904\u7406 Startup \u548c Shutdown \u4e8b\u4ef6 \u57fa\u4e8e requests \u6d4b\u8bd5\u5ba2\u6237\u7aef CORS \u3001GZip\u3001\u9759\u6001\u6587\u4ef6\u3001\u6d41\u54cd\u5e94 \u652f\u6301 Session \u548c Cookie 100% \u6d4b\u8bd5\u8986\u76d6\u7387 \u4ee3\u7801\u5e93 100% \u7c7b\u578b\u6ce8\u91ca","title":"Starlette \u7279\u6027"},{"location":"features/#pydantic","text":"FastAPI \u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e Pydantic \u3002\u6240\u4ee5\uff0cPydantic \u4ee3\u7801\u80fd\u5728 FastAPI \u5e94\u7528\u4e2d\u6b63\u5e38\u8fd0\u884c\u3002 FastAPI \u8fd8\u652f\u6301\u57fa\u4e8e Pydantic \u7684\u5916\u90e8\u5e93\uff0c\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u7684 ORM \u3001 ODM \u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u628a\u4ece\u8bf7\u6c42\u4e2d\u83b7\u5f97\u7684\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u6570\u636e\u5e93 \uff0c\u56e0\u4e3a\u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u662f\u81ea\u52a8\u7684\u3002 \u53cd\u4e4b\uff0c\u4e5f\u53ef\u4ee5\u628a\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7684\u5bf9\u8c61 \u76f4\u63a5\u4f20\u5230\u5ba2\u6237\u7aef \u3002 FastAPI \u652f\u6301 Pydantic \u7684\u6240\u6709\u529f\u80fd\uff08\u57fa\u4e8e Pydantic \u5b9e\u73b0\u6570\u636e\u5904\u7406\uff09\uff1a \u4e0d\u70e7\u8111 \uff1a \u65e0\u9700\u5b66\u4e60\u65b0\u7684\u6982\u56fe\u5b9a\u4e49\u5fae\u8bed\u8a00 \u53ea\u8981\u4e86\u89e3 Python \u7c7b\u578b\uff0c\u5c31\u80fd\u4f7f\u7528 Pydantic \u9002\u914d IDE / linter /brain \uff1a \u56e0\u4e3a Pydantic \u6570\u636e\u7ed3\u6784\u53ea\u662f\u5b9a\u4e49\u7684\u7c7b\u5b9e\u4f8b\uff1b\u81ea\u52a8\u8865\u5168\u3001linting\u3001mypy \u90fd\u53ef\u4ee5\u548c\u9a8c\u8bc1\u6570\u636e\u4e00\u8d77\u6b63\u5e38\u8fd0\u4f5c\uff0c\u5b8c\u5168\u7b26\u5408\u76f4\u89c9 \u66f4\u5feb \uff1a \u5728 \u57fa\u51c6\u6d4b\u8bd5 \u4e2d\uff0cPydantic \u6bd4\u5176\u4ed6\u53c2\u4e0e\u6d4b\u8bd5\u7684\u5176\u4ed6\u5e93\u90fd\u5feb \u9a8c\u8bc1 \u590d\u6742\u7ed3\u6784 \uff1a \u4f7f\u7528\u5c42\u7ea7\u5f0f Pydantic \u6a21\u578b\uff0cPython typing \u7684 List \u548c Dict \u7b49 \u9a8c\u8bc1\u5668\u53ef\u4ee5\u6e05\u6670\u3001\u7b80\u5355\u5730\u5b9a\u4e49\u3001\u6821\u9a8c\u590d\u6742\u6570\u636e\u6982\u56fe\uff0c\u5e76\u5b58\u6863\u4e3a JSON Schema \u6df1\u5ea6 \u5d4c\u5957 JSON \u5bf9\u8c61\uff0c\u5e76\u53ef\u8fdb\u884c\u9a8c\u8bc1\u548c\u6ce8\u91ca \u53ef\u6269\u5c55 \uff1a Pydantic \u652f\u6301\u81ea\u5b9a\u4e49\u6570\u636e\u7c7b\u578b\uff0c\u4f7f\u7528\u9a8c\u8bc1\u88c5\u9970\u5668\u6269\u5c55\u5bf9\u6a21\u578b\u7684\u9a8c\u8bc1\u65b9\u6cd5 100% \u6d4b\u8bd5\u8986\u76d6\u7387","title":"Pydantic \u7279\u6027"},{"location":"help-fastapi/","text":"\u5e2e\u52a9 FastAPI \u4e0e\u6c42\u52a9 \u00b6 \u60a8\u559c\u6b22 FastAPI \u5417\uff1f \u60f3\u5e2e\u52a9 FastAPI\uff1f\u5176\u4ed6\u7528\u6237\uff1f\u8fd8\u6709\u9879\u76ee\u4f5c\u8005\uff1f \u6216\u8981\u6c42\u52a9\u600e\u4e48\u4f7f\u7528 FastAPI \uff1f \u4ee5\u4e0b\u51e0\u79cd\u5e2e\u52a9\u7684\u65b9\u5f0f\u90fd\u975e\u5e38\u7b80\u5355\uff08\u6709\u4e9b\u53ea\u9700\u8981\u70b9\u51fb\u4e00\u4e24\u4e0b\u9f20\u6807\uff09\u3002 \u6c42\u52a9\u7684\u6e20\u9053\u4e5f\u5f88\u591a\u3002 \u8ba2\u9605\u65b0\u95fb\u90ae\u4ef6 \u00b6 \u60a8\u53ef\u4ee5\u8ba2\u9605 FastAPI \u548c\u5b83\u7684\u5c0f\u4f19\u4f34 \u65b0\u95fb\u90ae\u4ef6 \uff08\u4e0d\u4f1a\u7ecf\u5e38\u6536\u5230\uff09 FastAPI \u53ca\u5176\u5c0f\u4f19\u4f34\u7684\u65b0\u95fb \ud83d\ude80 \u6307\u5357 \ud83d\udcdd \u529f\u80fd \u2728 \u7834\u574f\u6027\u66f4\u6539 \ud83d\udea8 \u5f00\u53d1\u6280\u5de7 \u2705 \u5728\u63a8\u7279\u4e0a\u5173\u6ce8 FastAPI \u00b6 \u5728 Twitter \u4e0a\u5173\u6ce8 @fastapi \u83b7\u53d6 FastAPI \u7684\u6700\u65b0\u6d88\u606f\u3002\ud83d\udc26 \u5728 GitHub \u4e0a\u4e3a FastAPI \u52a0\u661f \u00b6 \u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a Star FastAPI\uff08\u53ea\u8981\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u661f\u661f\u5c31\u53ef\u4ee5\u4e86\uff09\uff1a https://github.com/tiangolo/fastapi\u3002 \u2b50\ufe0f Star \u4ee5\u540e\uff0c\u5176\u4ed6\u7528\u6237\u5c31\u80fd\u66f4\u5bb9\u6613\u627e\u5230 FastAPI\uff0c\u5e76\u4e86\u89e3\u5230\u5df2\u7ecf\u6709\u5176\u4ed6\u7528\u6237\u5728\u4f7f\u7528\u5b83\u4e86\u3002 \u5173\u6ce8 GitHub \u8d44\u6e90\u5e93\u7684\u7248\u672c\u53d1\u5e03 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u5728 GitHub \u4e0a Watch FastAPI\uff0c\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Watch \u6309\u94ae\uff09 https://github.com/tiangolo/fastapi\u3002 \ud83d\udc40 \u60a8\u53ef\u4ee5\u9009\u62e9\u53ea\u5173\u6ce8\u53d1\u5e03\uff08 Releases only \uff09\u3002 \u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\uff08\u5728\u7535\u5b50\u90ae\u4ef6\u91cc\uff09\u63a5\u6536\u5230 FastAPI \u65b0\u7248\u53d1\u5e03\u7684\u901a\u77e5\uff0c\u53ca\u65f6\u4e86\u89e3 bug \u4fee\u590d\u4e0e\u65b0\u529f\u80fd\u3002 \u8054\u7cfb\u4f5c\u8005 \u00b6 \u60a8\u53ef\u4ee5\u8054\u7cfb\u9879\u76ee\u4f5c\u8005\uff0c\u5c31\u662f \u6211\uff08Sebasti\u00e1n Ram\u00edrez / tiangolo \uff09\u3002 \u60a8\u53ef\u4ee5\uff1a \u5728 GitHub \u4e0a\u5173\u6ce8\u6211 \u4e86\u89e3\u5176\u4ed6\u6211\u521b\u5efa\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6216\u8bb8\u5bf9\u60a8\u4f1a\u6709\u5e2e\u52a9 \u5173\u6ce8\u6211\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u65b0\u7684\u5f00\u6e90\u9879\u76ee \u5728 Twitter \u4e0a\u5173\u6ce8\u6211 \u544a\u8bc9\u6211\u60a8\u4f7f\u7528 FastAPI\uff08\u6211\u975e\u5e38\u4e50\u610f\u542c\u5230\u8fd9\u79cd\u6d88\u606f\uff09 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f \u60a8\u8fd8\u53ef\u4ee5\u5173\u6ce8 @fastapi on Twitter \uff0c\u8fd9\u662f\u4e2a\u72ec\u7acb\u7684\u8d26\u53f7 \u5728 \u9886\u82f1 \u4e0a\u8054\u7cfb\u6211 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f\uff08\u867d\u7136\u6211\u7528 Twitter \u6bd4\u8f83\u591a\uff09 \u9605\u8bfb\u6211\u5728 Dev.to \u6216 Medium \u4e0a\u7684\u6587\u7ae0\uff0c\u6216\u5173\u6ce8\u6211 \u9605\u8bfb\u6211\u7684\u5176\u4ed6\u60f3\u6cd5\u3001\u6587\u7ae0\uff0c\u4e86\u89e3\u6211\u521b\u5efa\u7684\u5de5\u5177 \u5173\u6ce8\u6211\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u968f\u65f6\u770b\u5230\u6211\u53d1\u5e03\u7684\u65b0\u6587\u7ae0 Tweet about FastAPI \u00b6 Tweet about FastAPI \u8ba9\u6211\u548c\u5927\u5bb6\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\u3002\ud83c\udf89 \u77e5\u9053\u6709\u4eba\u4f7f\u7528 FastAPI \uff0c\u6211\u4f1a\u5f88\u5f00\u5fc3\uff0c\u6211\u4e5f\u60f3\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\uff0c\u4ee5\u53ca\u60a8\u5728\u4ec0\u4e48\u9879\u76ee/\u54ea\u4e9b\u516c\u53f8\u4f7f\u7528 FastAPI\uff0c\u7b49\u7b49\u3002 \u4e3a FastAPI \u6295\u7968 \u00b6 \u5728 Slant \u4e0a\u4e3a FastAPI \u6295\u7968 \u5728 AlternativeTo \u4e0a\u4e3a FastAPI \u6295\u7968 \u5728 GitHub \u4e0a\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898 \u00b6 \u60a8\u53ef\u4ee5\u67e5\u770b \u73b0\u6709 issues \uff0c\u5e76\u5c1d\u8bd5\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u60a8\u80fd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5462\u3002\ud83e\udd13 \u5982\u679c\u5e2e\u52a9\u5f88\u591a\u4eba\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u60a8\u5c31\u6709\u53ef\u80fd\u6210\u4e3a FastAPI \u7684\u5b98\u65b9\u4e13\u5bb6 \u3002\ud83c\udf89 \u76d1\u542c GitHub \u8d44\u6e90\u5e93 \u00b6 \u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a\u300c\u76d1\u542c\u300dFastAPI\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \"watch\" \u6309\u94ae\uff09\uff1a https://github.com/tiangolo/fastapi . \ud83d\udc40 \u5982\u679c\u60a8\u9009\u62e9 \"Watching\" \u800c\u4e0d\u662f \"Releases only\"\uff0c\u6709\u4eba\u521b\u5efa\u65b0 Issue \u65f6\uff0c\u60a8\u4f1a\u63a5\u6536\u5230\u901a\u77e5\u3002 \u7136\u540e\u60a8\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5e76\u5e2e\u52a9\u4ed6\u4eec\u89e3\u51b3\u95ee\u9898\u3002 \u521b\u5efa Issue \u00b6 \u60a8\u53ef\u4ee5\u5728 GitHub \u8d44\u6e90\u5e93\u4e2d \u521b\u5efa Issue \uff0c\u4f8b\u5982\uff1a \u63d0\u51fa \u95ee\u9898 \u6216 \u610f\u89c1 \u63d0\u51fa\u65b0 \u7279\u6027 \u5efa\u8bae \u6ce8\u610f \uff1a\u5982\u679c\u60a8\u521b\u5efa Issue\uff0c\u6211\u4f1a\u8981\u6c42\u60a8\u4e5f\u8981\u5e2e\u52a9\u522b\u7684\u7528\u6237\u3002\ud83d\ude09 \u521b\u5efa PR \u00b6 \u60a8\u53ef\u4ee5\u521b\u5efa PR \u4e3a\u6e90\u4ee3\u7801\u505a \u8d21\u732e \uff0c\u4f8b\u5982\uff1a \u4fee\u6539\u6587\u6863\u9519\u522b\u5b57 \u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6 \uff0c\u5206\u4eab FastAPI \u7684\u6587\u7ae0\u3001\u89c6\u9891\u3001\u535a\u5ba2\uff0c\u4e0d\u8bba\u662f\u60a8\u81ea\u5df1\u7684\uff0c\u8fd8\u662f\u60a8\u770b\u5230\u7684\u90fd\u6210 \u6ce8\u610f\uff0c\u6dfb\u52a0\u7684\u94fe\u63a5\u8981\u653e\u5728\u5bf9\u5e94\u533a\u5757\u7684\u5f00\u5934 \u7ffb\u8bd1\u6587\u6863 \u5ba1\u9605\u522b\u4eba\u7ffb\u8bd1\u7684\u6587\u6863 \u6dfb\u52a0\u65b0\u7684\u6587\u6863\u5185\u5bb9 \u4fee\u590d\u73b0\u6709\u95ee\u9898/Bug \u6dfb\u52a0\u65b0\u529f\u80fd \u52a0\u5165\u804a\u5929 \u00b6 \u5feb\u52a0\u5165 \ud83d\udc65 Discord \u804a\u5929\u670d\u52a1\u5668 \ud83d\udc65 \u548c FastAPI \u793e\u533a\u91cc\u7684\u5c0f\u4f19\u4f34\u4e00\u8d77\u54c8\u76ae\u5427\u3002 \u63d0\u793a \u5982\u6709\u95ee\u9898\uff0c\u8bf7\u5728 GitHub Issues \u91cc\u63d0\u95ee\uff0c\u5728\u8fd9\u91cc\u66f4\u5bb9\u6613\u5f97\u5230 FastAPI \u4e13\u5bb6 \u7684\u5e2e\u52a9\u3002 \u804a\u5929\u5ba4\u4ec5\u4f9b\u95f2\u804a\u3002 \u6211\u4eec\u4e4b\u524d\u8fd8\u4f7f\u7528\u8fc7 Gitter chat \uff0c\u4f46\u5b83\u4e0d\u652f\u6301\u9891\u9053\u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u804a\u5929\u4e5f\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u73b0\u5728\u63a8\u8350\u4f7f\u7528 Discord\u3002 \u522b\u5728\u804a\u5929\u5ba4\u91cc\u63d0\u95ee \u00b6 \u6ce8\u610f\uff0c\u804a\u5929\u5ba4\u66f4\u503e\u5411\u4e8e\u201c\u95f2\u804a\u201d\uff0c\u7ecf\u5e38\u6709\u4eba\u4f1a\u63d0\u51fa\u4e00\u4e9b\u7b3c\u7edf\u5f97\u8ba9\u4eba\u96be\u4ee5\u56de\u7b54\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u63d0\u95ee\u4e00\u822c\u6ca1\u4eba\u56de\u7b54\u3002 GitHub Issues \u91cc\u63d0\u4f9b\u4e86\u6a21\u677f\uff0c\u6307\u5f15\u60a8\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\uff0c\u6709\u5229\u4e8e\u83b7\u5f97\u4f18\u8d28\u7684\u56de\u7b54\uff0c\u751a\u81f3\u53ef\u80fd\u89e3\u51b3\u60a8\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u95ee\u9898\u3002\u800c\u4e14\u5c31\u7b97\u7b54\u7591\u89e3\u60d1\u8981\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\uff0c\u6211\u8fd8\u662f\u4f1a\u5c3d\u91cf\u5728 GitHub \u91cc\u56de\u7b54\u95ee\u9898\u3002\u4f46\u5728\u804a\u5929\u5ba4\u91cc\uff0c\u6211\u5c31\u6ca1\u529f\u592b\u8fd9\u4e48\u505a\u4e86\u3002\ud83d\ude05 \u804a\u5929\u5ba4\u91cc\u7684\u804a\u5929\u5185\u5bb9\u4e5f\u4e0d\u5982 GitHub \u91cc\u597d\u641c\u7d22\uff0c\u804a\u5929\u91cc\u7684\u95ee\u7b54\u5f88\u5bb9\u6613\u5c31\u627e\u4e0d\u5230\u4e86\u3002\u53ea\u6709\u5728 GitHub Issues \u91cc\u7684\u95ee\u7b54\u624d\u80fd\u5e2e\u52a9\u60a8\u6210\u4e3a FastAPI \u4e13\u5bb6 \uff0c\u5728 GitHub Issues \u4e2d\u4e3a\u60a8\u5e26\u6765\u66f4\u591a\u5173\u6ce8\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u804a\u5929\u5ba4\u91cc\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u5728\u8fd9\u91cc\uff0c\u60a8\u6709\u5f88\u5927\u53ef\u80fd\u9047\u5230\u804a\u5f97\u6765\u7684\u4eba\u3002\ud83d\ude04 \u8d5e\u52a9\u4f5c\u8005 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 GitHub \u8d5e\u52a9\u5546 \u8d44\u52a9\u672c\u9879\u76ee\u7684\u4f5c\u8005\uff08\u5c31\u662f\u6211\uff09\u3002 \u7ed9\u6211\u4e70\u676f\u5496\u5561 \u2615\ufe0f \u4ee5\u793a\u611f\u8c22 \ud83d\ude04 \u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u6210\u4e3a FastAPI \u7684\u91d1\u724c\u6216\u94f6\u724c\u8d5e\u52a9\u5546\u3002\ud83c\udfc5\ud83c\udf89 \u8d5e\u52a9 FastAPI \u4f7f\u7528\u7684\u5de5\u5177 \u00b6 \u5982\u60a8\u5728\u672c\u6587\u6863\u4e2d\u6240\u89c1\uff0cFastAPI \u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u5b83\u4eec\u5206\u522b\u662f Starlette \u548c Pydantic\u3002 \u60a8\u8fd8\u53ef\u4ee5\u8d5e\u52a9\uff1a Samuel Colvin \uff08Pydantic\uff09 Encode \uff08Starlette, Uvicorn\uff09 \u8c22\u8c22\uff01\ud83d\ude80","title":"\u5e2e\u52a9 FastAPI \u4e0e\u6c42\u52a9"},{"location":"help-fastapi/#fastapi","text":"\u60a8\u559c\u6b22 FastAPI \u5417\uff1f \u60f3\u5e2e\u52a9 FastAPI\uff1f\u5176\u4ed6\u7528\u6237\uff1f\u8fd8\u6709\u9879\u76ee\u4f5c\u8005\uff1f \u6216\u8981\u6c42\u52a9\u600e\u4e48\u4f7f\u7528 FastAPI \uff1f \u4ee5\u4e0b\u51e0\u79cd\u5e2e\u52a9\u7684\u65b9\u5f0f\u90fd\u975e\u5e38\u7b80\u5355\uff08\u6709\u4e9b\u53ea\u9700\u8981\u70b9\u51fb\u4e00\u4e24\u4e0b\u9f20\u6807\uff09\u3002 \u6c42\u52a9\u7684\u6e20\u9053\u4e5f\u5f88\u591a\u3002","title":"\u5e2e\u52a9 FastAPI \u4e0e\u6c42\u52a9"},{"location":"help-fastapi/#_1","text":"\u60a8\u53ef\u4ee5\u8ba2\u9605 FastAPI \u548c\u5b83\u7684\u5c0f\u4f19\u4f34 \u65b0\u95fb\u90ae\u4ef6 \uff08\u4e0d\u4f1a\u7ecf\u5e38\u6536\u5230\uff09 FastAPI \u53ca\u5176\u5c0f\u4f19\u4f34\u7684\u65b0\u95fb \ud83d\ude80 \u6307\u5357 \ud83d\udcdd \u529f\u80fd \u2728 \u7834\u574f\u6027\u66f4\u6539 \ud83d\udea8 \u5f00\u53d1\u6280\u5de7 \u2705","title":"\u8ba2\u9605\u65b0\u95fb\u90ae\u4ef6"},{"location":"help-fastapi/#fastapi_1","text":"\u5728 Twitter \u4e0a\u5173\u6ce8 @fastapi \u83b7\u53d6 FastAPI \u7684\u6700\u65b0\u6d88\u606f\u3002\ud83d\udc26","title":"\u5728\u63a8\u7279\u4e0a\u5173\u6ce8 FastAPI"},{"location":"help-fastapi/#github-fastapi","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a Star FastAPI\uff08\u53ea\u8981\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684\u661f\u661f\u5c31\u53ef\u4ee5\u4e86\uff09\uff1a https://github.com/tiangolo/fastapi\u3002 \u2b50\ufe0f Star \u4ee5\u540e\uff0c\u5176\u4ed6\u7528\u6237\u5c31\u80fd\u66f4\u5bb9\u6613\u627e\u5230 FastAPI\uff0c\u5e76\u4e86\u89e3\u5230\u5df2\u7ecf\u6709\u5176\u4ed6\u7528\u6237\u5728\u4f7f\u7528\u5b83\u4e86\u3002","title":"\u5728 GitHub \u4e0a\u4e3a FastAPI \u52a0\u661f"},{"location":"help-fastapi/#github","text":"\u60a8\u8fd8\u53ef\u4ee5\u5728 GitHub \u4e0a Watch FastAPI\uff0c\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 Watch \u6309\u94ae\uff09 https://github.com/tiangolo/fastapi\u3002 \ud83d\udc40 \u60a8\u53ef\u4ee5\u9009\u62e9\u53ea\u5173\u6ce8\u53d1\u5e03\uff08 Releases only \uff09\u3002 \u8fd9\u6837\uff0c\u60a8\u5c31\u53ef\u4ee5\uff08\u5728\u7535\u5b50\u90ae\u4ef6\u91cc\uff09\u63a5\u6536\u5230 FastAPI \u65b0\u7248\u53d1\u5e03\u7684\u901a\u77e5\uff0c\u53ca\u65f6\u4e86\u89e3 bug \u4fee\u590d\u4e0e\u65b0\u529f\u80fd\u3002","title":"\u5173\u6ce8 GitHub \u8d44\u6e90\u5e93\u7684\u7248\u672c\u53d1\u5e03"},{"location":"help-fastapi/#_2","text":"\u60a8\u53ef\u4ee5\u8054\u7cfb\u9879\u76ee\u4f5c\u8005\uff0c\u5c31\u662f \u6211\uff08Sebasti\u00e1n Ram\u00edrez / tiangolo \uff09\u3002 \u60a8\u53ef\u4ee5\uff1a \u5728 GitHub \u4e0a\u5173\u6ce8\u6211 \u4e86\u89e3\u5176\u4ed6\u6211\u521b\u5efa\u7684\u5f00\u6e90\u9879\u76ee\uff0c\u6216\u8bb8\u5bf9\u60a8\u4f1a\u6709\u5e2e\u52a9 \u5173\u6ce8\u6211\u4ec0\u4e48\u65f6\u5019\u521b\u5efa\u65b0\u7684\u5f00\u6e90\u9879\u76ee \u5728 Twitter \u4e0a\u5173\u6ce8\u6211 \u544a\u8bc9\u6211\u60a8\u4f7f\u7528 FastAPI\uff08\u6211\u975e\u5e38\u4e50\u610f\u542c\u5230\u8fd9\u79cd\u6d88\u606f\uff09 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f \u60a8\u8fd8\u53ef\u4ee5\u5173\u6ce8 @fastapi on Twitter \uff0c\u8fd9\u662f\u4e2a\u72ec\u7acb\u7684\u8d26\u53f7 \u5728 \u9886\u82f1 \u4e0a\u8054\u7cfb\u6211 \u63a5\u6536\u6211\u53d1\u5e03\u516c\u544a\u6216\u65b0\u5de5\u5177\u7684\u6d88\u606f\uff08\u867d\u7136\u6211\u7528 Twitter \u6bd4\u8f83\u591a\uff09 \u9605\u8bfb\u6211\u5728 Dev.to \u6216 Medium \u4e0a\u7684\u6587\u7ae0\uff0c\u6216\u5173\u6ce8\u6211 \u9605\u8bfb\u6211\u7684\u5176\u4ed6\u60f3\u6cd5\u3001\u6587\u7ae0\uff0c\u4e86\u89e3\u6211\u521b\u5efa\u7684\u5de5\u5177 \u5173\u6ce8\u6211\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u968f\u65f6\u770b\u5230\u6211\u53d1\u5e03\u7684\u65b0\u6587\u7ae0","title":"\u8054\u7cfb\u4f5c\u8005"},{"location":"help-fastapi/#tweet-about-fastapi","text":"Tweet about FastAPI \u8ba9\u6211\u548c\u5927\u5bb6\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\u3002\ud83c\udf89 \u77e5\u9053\u6709\u4eba\u4f7f\u7528 FastAPI \uff0c\u6211\u4f1a\u5f88\u5f00\u5fc3\uff0c\u6211\u4e5f\u60f3\u77e5\u9053\u60a8\u4e3a\u4ec0\u4e48\u559c\u6b22 FastAPI\uff0c\u4ee5\u53ca\u60a8\u5728\u4ec0\u4e48\u9879\u76ee/\u54ea\u4e9b\u516c\u53f8\u4f7f\u7528 FastAPI\uff0c\u7b49\u7b49\u3002","title":"Tweet about FastAPI"},{"location":"help-fastapi/#fastapi_2","text":"\u5728 Slant \u4e0a\u4e3a FastAPI \u6295\u7968 \u5728 AlternativeTo \u4e0a\u4e3a FastAPI \u6295\u7968","title":"\u4e3a FastAPI \u6295\u7968"},{"location":"help-fastapi/#github_1","text":"\u60a8\u53ef\u4ee5\u67e5\u770b \u73b0\u6709 issues \uff0c\u5e76\u5c1d\u8bd5\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898\uff0c\u8bf4\u4e0d\u5b9a\u60a8\u80fd\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u5462\u3002\ud83e\udd13 \u5982\u679c\u5e2e\u52a9\u5f88\u591a\u4eba\u89e3\u51b3\u4e86\u95ee\u9898\uff0c\u60a8\u5c31\u6709\u53ef\u80fd\u6210\u4e3a FastAPI \u7684\u5b98\u65b9\u4e13\u5bb6 \u3002\ud83c\udf89","title":"\u5728 GitHub \u4e0a\u5e2e\u52a9\u5176\u4ed6\u4eba\u89e3\u51b3\u95ee\u9898"},{"location":"help-fastapi/#github_2","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u4e0a\u300c\u76d1\u542c\u300dFastAPI\uff08\u70b9\u51fb\u53f3\u4e0a\u89d2\u7684 \"watch\" \u6309\u94ae\uff09\uff1a https://github.com/tiangolo/fastapi . \ud83d\udc40 \u5982\u679c\u60a8\u9009\u62e9 \"Watching\" \u800c\u4e0d\u662f \"Releases only\"\uff0c\u6709\u4eba\u521b\u5efa\u65b0 Issue \u65f6\uff0c\u60a8\u4f1a\u63a5\u6536\u5230\u901a\u77e5\u3002 \u7136\u540e\u60a8\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5e76\u5e2e\u52a9\u4ed6\u4eec\u89e3\u51b3\u95ee\u9898\u3002","title":"\u76d1\u542c GitHub \u8d44\u6e90\u5e93"},{"location":"help-fastapi/#issue","text":"\u60a8\u53ef\u4ee5\u5728 GitHub \u8d44\u6e90\u5e93\u4e2d \u521b\u5efa Issue \uff0c\u4f8b\u5982\uff1a \u63d0\u51fa \u95ee\u9898 \u6216 \u610f\u89c1 \u63d0\u51fa\u65b0 \u7279\u6027 \u5efa\u8bae \u6ce8\u610f \uff1a\u5982\u679c\u60a8\u521b\u5efa Issue\uff0c\u6211\u4f1a\u8981\u6c42\u60a8\u4e5f\u8981\u5e2e\u52a9\u522b\u7684\u7528\u6237\u3002\ud83d\ude09","title":"\u521b\u5efa Issue"},{"location":"help-fastapi/#pr","text":"\u60a8\u53ef\u4ee5\u521b\u5efa PR \u4e3a\u6e90\u4ee3\u7801\u505a \u8d21\u732e \uff0c\u4f8b\u5982\uff1a \u4fee\u6539\u6587\u6863\u9519\u522b\u5b57 \u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6 \uff0c\u5206\u4eab FastAPI \u7684\u6587\u7ae0\u3001\u89c6\u9891\u3001\u535a\u5ba2\uff0c\u4e0d\u8bba\u662f\u60a8\u81ea\u5df1\u7684\uff0c\u8fd8\u662f\u60a8\u770b\u5230\u7684\u90fd\u6210 \u6ce8\u610f\uff0c\u6dfb\u52a0\u7684\u94fe\u63a5\u8981\u653e\u5728\u5bf9\u5e94\u533a\u5757\u7684\u5f00\u5934 \u7ffb\u8bd1\u6587\u6863 \u5ba1\u9605\u522b\u4eba\u7ffb\u8bd1\u7684\u6587\u6863 \u6dfb\u52a0\u65b0\u7684\u6587\u6863\u5185\u5bb9 \u4fee\u590d\u73b0\u6709\u95ee\u9898/Bug \u6dfb\u52a0\u65b0\u529f\u80fd","title":"\u521b\u5efa PR"},{"location":"help-fastapi/#_3","text":"\u5feb\u52a0\u5165 \ud83d\udc65 Discord \u804a\u5929\u670d\u52a1\u5668 \ud83d\udc65 \u548c FastAPI \u793e\u533a\u91cc\u7684\u5c0f\u4f19\u4f34\u4e00\u8d77\u54c8\u76ae\u5427\u3002 \u63d0\u793a \u5982\u6709\u95ee\u9898\uff0c\u8bf7\u5728 GitHub Issues \u91cc\u63d0\u95ee\uff0c\u5728\u8fd9\u91cc\u66f4\u5bb9\u6613\u5f97\u5230 FastAPI \u4e13\u5bb6 \u7684\u5e2e\u52a9\u3002 \u804a\u5929\u5ba4\u4ec5\u4f9b\u95f2\u804a\u3002 \u6211\u4eec\u4e4b\u524d\u8fd8\u4f7f\u7528\u8fc7 Gitter chat \uff0c\u4f46\u5b83\u4e0d\u652f\u6301\u9891\u9053\u7b49\u9ad8\u7ea7\u529f\u80fd\uff0c\u804a\u5929\u4e5f\u6bd4\u8f83\u9ebb\u70e6\uff0c\u6240\u4ee5\u73b0\u5728\u63a8\u8350\u4f7f\u7528 Discord\u3002","title":"\u52a0\u5165\u804a\u5929"},{"location":"help-fastapi/#_4","text":"\u6ce8\u610f\uff0c\u804a\u5929\u5ba4\u66f4\u503e\u5411\u4e8e\u201c\u95f2\u804a\u201d\uff0c\u7ecf\u5e38\u6709\u4eba\u4f1a\u63d0\u51fa\u4e00\u4e9b\u7b3c\u7edf\u5f97\u8ba9\u4eba\u96be\u4ee5\u56de\u7b54\u7684\u95ee\u9898\uff0c\u6240\u4ee5\u5728\u8fd9\u91cc\u63d0\u95ee\u4e00\u822c\u6ca1\u4eba\u56de\u7b54\u3002 GitHub Issues \u91cc\u63d0\u4f9b\u4e86\u6a21\u677f\uff0c\u6307\u5f15\u60a8\u63d0\u51fa\u6b63\u786e\u7684\u95ee\u9898\uff0c\u6709\u5229\u4e8e\u83b7\u5f97\u4f18\u8d28\u7684\u56de\u7b54\uff0c\u751a\u81f3\u53ef\u80fd\u89e3\u51b3\u60a8\u8fd8\u6ca1\u6709\u60f3\u5230\u7684\u95ee\u9898\u3002\u800c\u4e14\u5c31\u7b97\u7b54\u7591\u89e3\u60d1\u8981\u8017\u8d39\u4e0d\u5c11\u65f6\u95f4\uff0c\u6211\u8fd8\u662f\u4f1a\u5c3d\u91cf\u5728 GitHub \u91cc\u56de\u7b54\u95ee\u9898\u3002\u4f46\u5728\u804a\u5929\u5ba4\u91cc\uff0c\u6211\u5c31\u6ca1\u529f\u592b\u8fd9\u4e48\u505a\u4e86\u3002\ud83d\ude05 \u804a\u5929\u5ba4\u91cc\u7684\u804a\u5929\u5185\u5bb9\u4e5f\u4e0d\u5982 GitHub \u91cc\u597d\u641c\u7d22\uff0c\u804a\u5929\u91cc\u7684\u95ee\u7b54\u5f88\u5bb9\u6613\u5c31\u627e\u4e0d\u5230\u4e86\u3002\u53ea\u6709\u5728 GitHub Issues \u91cc\u7684\u95ee\u7b54\u624d\u80fd\u5e2e\u52a9\u60a8\u6210\u4e3a FastAPI \u4e13\u5bb6 \uff0c\u5728 GitHub Issues \u4e2d\u4e3a\u60a8\u5e26\u6765\u66f4\u591a\u5173\u6ce8\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u804a\u5929\u5ba4\u91cc\u6709\u6210\u5343\u4e0a\u4e07\u7684\u7528\u6237\uff0c\u5728\u8fd9\u91cc\uff0c\u60a8\u6709\u5f88\u5927\u53ef\u80fd\u9047\u5230\u804a\u5f97\u6765\u7684\u4eba\u3002\ud83d\ude04","title":"\u522b\u5728\u804a\u5929\u5ba4\u91cc\u63d0\u95ee"},{"location":"help-fastapi/#_5","text":"\u60a8\u8fd8\u53ef\u4ee5\u901a\u8fc7 GitHub \u8d5e\u52a9\u5546 \u8d44\u52a9\u672c\u9879\u76ee\u7684\u4f5c\u8005\uff08\u5c31\u662f\u6211\uff09\u3002 \u7ed9\u6211\u4e70\u676f\u5496\u5561 \u2615\ufe0f \u4ee5\u793a\u611f\u8c22 \ud83d\ude04 \u5f53\u7136\u60a8\u4e5f\u53ef\u4ee5\u6210\u4e3a FastAPI \u7684\u91d1\u724c\u6216\u94f6\u724c\u8d5e\u52a9\u5546\u3002\ud83c\udfc5\ud83c\udf89","title":"\u8d5e\u52a9\u4f5c\u8005"},{"location":"help-fastapi/#fastapi_3","text":"\u5982\u60a8\u5728\u672c\u6587\u6863\u4e2d\u6240\u89c1\uff0cFastAPI \u7ad9\u5728\u5de8\u4eba\u7684\u80a9\u8180\u4e0a\uff0c\u5b83\u4eec\u5206\u522b\u662f Starlette \u548c Pydantic\u3002 \u60a8\u8fd8\u53ef\u4ee5\u8d5e\u52a9\uff1a Samuel Colvin \uff08Pydantic\uff09 Encode \uff08Starlette, Uvicorn\uff09 \u8c22\u8c22\uff01\ud83d\ude80","title":"\u8d5e\u52a9 FastAPI \u4f7f\u7528\u7684\u5de5\u5177"},{"location":"history-design-future/","text":"\u5386\u53f2\u3001\u8bbe\u8ba1\u3001\u672a\u6765 \u00b6 \u4e0d\u4e45\u524d\uff0c \u66fe\u6709 FastAPI \u7528\u6237\u95ee\u8fc7 \uff1a \u8fd9\u4e2a\u9879\u76ee\u6709\u600e\u6837\u7684\u5386\u53f2\uff1f\u597d\u50cf\u5b83\u53ea\u7528\u4e86\u51e0\u5468\u5c31\u4ece\u9ed8\u9ed8\u65e0\u95fb\u53d8\u5f97\u4f17\u6240\u5468\u77e5\u2026\u2026 \u5728\u6b64\uff0c\u6211\u4eec\u7b80\u5355\u56de\u987e\u4e00\u4e0b FastAPI \u7684\u5386\u53f2\u3002 \u5907\u9009\u65b9\u6848 \u00b6 \u6709\u90a3\u4e48\u51e0\u5e74\uff0c\u6211\u66fe\u9886\u5bfc\u6570\u4e2a\u5f00\u53d1\u56e2\u961f\u4e3a\u8bf8\u591a\u590d\u6742\u9700\u6c42\u521b\u5efa\u5404\u79cd API\uff0c\u8fd9\u4e9b\u9700\u6c42\u5305\u62ec\u673a\u5668\u5b66\u4e60\u3001\u5206\u5e03\u7cfb\u7edf\u3001\u5f02\u6b65\u4efb\u52a1\u3001NoSQL \u6570\u636e\u5e93\u7b49\u9886\u57df\u3002 \u4f5c\u4e3a\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u6211\u9700\u8981\u8c03\u7814\u5f88\u591a\u5907\u9009\u65b9\u6848\u3001\u8fd8\u8981\u6d4b\u8bd5\u5e76\u4e14\u4f7f\u7528\u8fd9\u4e9b\u5907\u9009\u65b9\u6848\u3002 FastAPI \u5176\u5b9e\u53ea\u662f\u5ef6\u7eed\u4e86\u8fd9\u4e9b\u524d\u8f88\u7684\u5386\u53f2\u3002 \u6b63\u5982 \u5907\u9009\u65b9\u6848 \u4e00\u7ae0\u6240\u8ff0\uff1a \u6ca1\u6709\u5927\u5bb6\u4e4b\u524d\u6240\u505a\u7684\u5de5\u4f5c\uff0c FastAPI \u5c31\u4e0d\u4f1a\u5b58\u5728\u3002 \u4ee5\u524d\u521b\u5efa\u7684\u8fd9\u4e9b\u5de5\u5177\u4e3a\u5b83\u7684\u51fa\u73b0\u63d0\u4f9b\u4e86\u7075\u611f\u3002 \u5728\u90a3\u51e0\u5e74\u4e2d\uff0c\u6211\u4e00\u76f4\u56de\u907f\u521b\u5efa\u65b0\u7684\u6846\u67b6\u3002\u9996\u5148\uff0c\u6211\u5c1d\u8bd5\u4f7f\u7528\u5404\u79cd\u6846\u67b6\u3001\u63d2\u4ef6\u3001\u5de5\u5177\u89e3\u51b3 FastAPI \u73b0\u5728\u7684\u529f\u80fd\u3002 \u4f46\u5230\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u4e4b\u540e\uff0c\u6211\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u4ece\u4e4b\u524d\u7684\u5de5\u5177\u4e2d\u6c72\u53d6\u6700\u4f18\u601d\u8def\uff0c\u5e76\u4ee5\u5c3d\u91cf\u597d\u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u601d\u8def\u6574\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u7528\u4e4b\u524d\u751a\u81f3\u662f\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7279\u6027\uff08Python 3.6+ \u7684\u7c7b\u578b\u63d0\u793a\uff09\uff0c\u4ece\u800c\u521b\u5efa\u4e00\u4e2a\u80fd\u6ee1\u8db3\u6211\u6240\u6709\u9700\u6c42\u7684\u6846\u67b6\u3002 \u8c03\u7814 \u00b6 \u901a\u8fc7\u4f7f\u7528\u4e4b\u524d\u6240\u6709\u7684\u5907\u9009\u65b9\u6848\uff0c\u6211\u6709\u673a\u4f1a\u4ece\u5b83\u4eec\u4e4b\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\u4e1c\u897f\uff0c\u83b7\u53d6\u4e86\u5f88\u591a\u60f3\u6cd5\uff0c\u5e76\u4ee5\u6211\u548c\u6211\u7684\u5f00\u53d1\u56e2\u961f\u80fd\u60f3\u5230\u7684\u6700\u597d\u65b9\u5f0f\u628a\u8fd9\u4e9b\u601d\u8def\u6574\u5408\u6210\u4e00\u4f53\u3002 \u4f8b\u5982\uff0c\u5927\u5bb6\u90fd\u6e05\u695a\uff0c\u5728\u7406\u60f3\u72b6\u6001\u4e0b\uff0c\u5b83\u5e94\u8be5\u57fa\u4e8e\u6807\u51c6\u7684 Python \u7c7b\u578b\u63d0\u793a\u3002 \u800c\u4e14\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u73b0\u6709\u7684\u6807\u51c6\u3002 \u56e0\u6b64\uff0c\u751a\u81f3\u5728\u5f00\u53d1 FastAPI \u524d\uff0c\u6211\u5c31\u82b1\u4e86\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u7814\u7a76 OpenAPI\u3001JSON Schema\u3001OAuth2 \u7b49\u89c4\u8303\u3002\u6df1\u5165\u7406\u89e3\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3001\u91cd\u53e0\u53ca\u533a\u522b\u4e4b\u5904\u3002 \u8bbe\u8ba1 \u00b6 \u7136\u540e\uff0c\u6211\u53c8\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u4ece\u7528\u6237\u89d2\u5ea6\uff08\u4f7f\u7528 FastAPI \u7684\u5f00\u53d1\u8005\uff09\u8bbe\u8ba1\u4e86\u5f00\u53d1\u8005 API \u3002 \u540c\u65f6\uff0c\u6211\u8fd8\u5728\u6700\u6d41\u884c\u7684 Python \u4ee3\u7801\u7f16\u8f91\u5668\u4e2d\u6d4b\u8bd5\u4e86\u5f88\u591a\u601d\u8def\uff0c\u5305\u62ec PyCharm\u3001VS Code\u3001\u57fa\u4e8e Jedi \u7684\u7f16\u8f91\u5668\u3002 \u6839\u636e\u6700\u65b0 Python \u5f00\u53d1\u8005\u8c03\u7814\u62a5\u544a \u663e\u793a\uff0c\u8fd9\u51e0\u79cd\u7f16\u8f91\u5668\u8986\u76d6\u4e86\u7ea6 80% \u7684\u7528\u6237\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c FastAPI \u9488\u5bf9\u5dee\u4e0d\u591a 80% \u7684 Python \u5f00\u53d1\u8005\u4f7f\u7528\u7684\u7f16\u8f91\u5668\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u800c\u4e14\u5176\u4ed6\u5927\u591a\u6570\u7f16\u8f91\u5668\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u56e0\u6b64\uff0c FastAPI \u7684\u4f18\u52bf\u51e0\u4e4e\u80fd\u5728\u6240\u6709\u7f16\u8f91\u5668\u4e0a\u4f53\u73b0\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u5c31\u80fd\u627e\u5230\u5c3d\u53ef\u80fd\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u7684\u6700\u4f73\u65b9\u5f0f\uff0c\u8fdb\u800c\u5b9e\u73b0\u5904\u5904\u90fd\u6709\u81ea\u52a8\u8865\u5168\u3001\u7c7b\u578b\u63d0\u793a\u4e0e\u9519\u8bef\u68c0\u67e5\u7b49\u652f\u6301\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4e3a\u4e86\u7ed9\u5f00\u53d1\u8005\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\u3002 \u9700\u6c42\u9879 \u00b6 \u7ecf\u8fc7\u6d4b\u8bd5\u591a\u79cd\u5907\u9009\u65b9\u6848\uff0c\u6211\u6700\u7ec8\u51b3\u5b9a\u4f7f\u7528 Pydantic \uff0c\u5e76\u5145\u5206\u5229\u7528\u5b83\u7684\u4f18\u52bf\u3002 \u6211\u751a\u81f3\u4e3a\u5b83\u505a\u4e86\u4e0d\u5c11\u8d21\u732e\uff0c\u8ba9\u5b83\u5b8c\u7f8e\u517c\u5bb9\u4e86 JSON Schema\uff0c\u652f\u6301\u591a\u79cd\u65b9\u5f0f\u5b9a\u4e49\u7ea6\u675f\u58f0\u660e\uff0c\u5e76\u57fa\u4e8e\u591a\u4e2a\u7f16\u8f91\u5668\uff0c\u6539\u8fdb\u4e86\u5b83\u5bf9\u7f16\u8f91\u5668\u652f\u6301\uff08\u7c7b\u578b\u68c0\u67e5\u3001\u81ea\u52a8\u8865\u5168\uff09\u3002 \u5728\u5f00\u53d1\u671f\u95f4\uff0c\u6211\u8fd8\u4e3a Starlette \u505a\u4e86\u4e0d\u5c11\u8d21\u732e\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u5173\u952e\u9700\u6c42\u9879\u3002 \u5f00\u53d1 \u00b6 \u5f53\u6211\u542f\u52a8 FastAPI \u5f00\u53d1\u7684\u65f6\u5019\uff0c\u7edd\u5927\u591a\u6570\u90e8\u4ef6\u90fd\u5df2\u7ecf\u5c31\u4f4d\uff0c\u8bbe\u8ba1\u5df2\u7ecf\u5b9a\u4e49\uff0c\u9700\u6c42\u9879\u548c\u5de5\u5177\u4e5f\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\uff0c\u76f8\u5173\u6807\u51c6\u4e0e\u89c4\u8303\u7684\u77e5\u8bc6\u50a8\u5907\u4e5f\u975e\u5e38\u6e05\u6670\u800c\u65b0\u9c9c\u3002 \u672a\u6765 \u00b6 \u81f3\u6b64\uff0c FastAPI \u53ca\u5176\u7406\u5ff5\u5df2\u7ecf\u4e3a\u5f88\u591a\u4eba\u6240\u7528\u3002 \u5bf9\u4e8e\u5f88\u591a\u7528\u4f8b\uff0c\u5b83\u6bd4\u4ee5\u524d\u5f88\u591a\u5907\u9009\u65b9\u6848\u90fd\u66f4\u9002\u7528\u3002 \u5f88\u591a\u5f00\u53d1\u8005\u548c\u5f00\u53d1\u56e2\u961f\u5df2\u7ecf\u4f9d\u8d56 FastAPI \u5f00\u53d1\u4ed6\u4eec\u7684\u9879\u76ee\uff08\u5305\u62ec\u6211\u548c\u6211\u7684\u56e2\u961f\uff09\u3002 \u4f46\uff0c FastAPI \u4ecd\u6709\u5f88\u591a\u6539\u8fdb\u7684\u4f59\u5730\uff0c\u4e5f\u8fd8\u9700\u8981\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\u3002 \u603b\u4e4b\uff0c FastAPI \u524d\u666f\u5149\u660e\u3002 \u5728\u6b64\uff0c\u6211\u4eec\u8877\u5fc3\u611f\u8c22 \u60a8\u7684\u5e2e\u52a9 \u3002","title":"\u5386\u53f2\u3001\u8bbe\u8ba1\u3001\u672a\u6765"},{"location":"history-design-future/#_1","text":"\u4e0d\u4e45\u524d\uff0c \u66fe\u6709 FastAPI \u7528\u6237\u95ee\u8fc7 \uff1a \u8fd9\u4e2a\u9879\u76ee\u6709\u600e\u6837\u7684\u5386\u53f2\uff1f\u597d\u50cf\u5b83\u53ea\u7528\u4e86\u51e0\u5468\u5c31\u4ece\u9ed8\u9ed8\u65e0\u95fb\u53d8\u5f97\u4f17\u6240\u5468\u77e5\u2026\u2026 \u5728\u6b64\uff0c\u6211\u4eec\u7b80\u5355\u56de\u987e\u4e00\u4e0b FastAPI \u7684\u5386\u53f2\u3002","title":"\u5386\u53f2\u3001\u8bbe\u8ba1\u3001\u672a\u6765"},{"location":"history-design-future/#_2","text":"\u6709\u90a3\u4e48\u51e0\u5e74\uff0c\u6211\u66fe\u9886\u5bfc\u6570\u4e2a\u5f00\u53d1\u56e2\u961f\u4e3a\u8bf8\u591a\u590d\u6742\u9700\u6c42\u521b\u5efa\u5404\u79cd API\uff0c\u8fd9\u4e9b\u9700\u6c42\u5305\u62ec\u673a\u5668\u5b66\u4e60\u3001\u5206\u5e03\u7cfb\u7edf\u3001\u5f02\u6b65\u4efb\u52a1\u3001NoSQL \u6570\u636e\u5e93\u7b49\u9886\u57df\u3002 \u4f5c\u4e3a\u5de5\u4f5c\u7684\u4e00\u90e8\u5206\uff0c\u6211\u9700\u8981\u8c03\u7814\u5f88\u591a\u5907\u9009\u65b9\u6848\u3001\u8fd8\u8981\u6d4b\u8bd5\u5e76\u4e14\u4f7f\u7528\u8fd9\u4e9b\u5907\u9009\u65b9\u6848\u3002 FastAPI \u5176\u5b9e\u53ea\u662f\u5ef6\u7eed\u4e86\u8fd9\u4e9b\u524d\u8f88\u7684\u5386\u53f2\u3002 \u6b63\u5982 \u5907\u9009\u65b9\u6848 \u4e00\u7ae0\u6240\u8ff0\uff1a \u6ca1\u6709\u5927\u5bb6\u4e4b\u524d\u6240\u505a\u7684\u5de5\u4f5c\uff0c FastAPI \u5c31\u4e0d\u4f1a\u5b58\u5728\u3002 \u4ee5\u524d\u521b\u5efa\u7684\u8fd9\u4e9b\u5de5\u5177\u4e3a\u5b83\u7684\u51fa\u73b0\u63d0\u4f9b\u4e86\u7075\u611f\u3002 \u5728\u90a3\u51e0\u5e74\u4e2d\uff0c\u6211\u4e00\u76f4\u56de\u907f\u521b\u5efa\u65b0\u7684\u6846\u67b6\u3002\u9996\u5148\uff0c\u6211\u5c1d\u8bd5\u4f7f\u7528\u5404\u79cd\u6846\u67b6\u3001\u63d2\u4ef6\u3001\u5de5\u5177\u89e3\u51b3 FastAPI \u73b0\u5728\u7684\u529f\u80fd\u3002 \u4f46\u5230\u4e86\u4e00\u5b9a\u7a0b\u5ea6\u4e4b\u540e\uff0c\u6211\u522b\u65e0\u9009\u62e9\uff0c\u53ea\u80fd\u4ece\u4e4b\u524d\u7684\u5de5\u5177\u4e2d\u6c72\u53d6\u6700\u4f18\u601d\u8def\uff0c\u5e76\u4ee5\u5c3d\u91cf\u597d\u7684\u65b9\u5f0f\u628a\u8fd9\u4e9b\u601d\u8def\u6574\u5408\u5728\u4e00\u8d77\uff0c\u4f7f\u7528\u4e4b\u524d\u751a\u81f3\u662f\u4e0d\u652f\u6301\u7684\u8bed\u8a00\u7279\u6027\uff08Python 3.6+ \u7684\u7c7b\u578b\u63d0\u793a\uff09\uff0c\u4ece\u800c\u521b\u5efa\u4e00\u4e2a\u80fd\u6ee1\u8db3\u6211\u6240\u6709\u9700\u6c42\u7684\u6846\u67b6\u3002","title":"\u5907\u9009\u65b9\u6848"},{"location":"history-design-future/#_3","text":"\u901a\u8fc7\u4f7f\u7528\u4e4b\u524d\u6240\u6709\u7684\u5907\u9009\u65b9\u6848\uff0c\u6211\u6709\u673a\u4f1a\u4ece\u5b83\u4eec\u4e4b\u4e2d\u5b66\u5230\u4e86\u5f88\u591a\u4e1c\u897f\uff0c\u83b7\u53d6\u4e86\u5f88\u591a\u60f3\u6cd5\uff0c\u5e76\u4ee5\u6211\u548c\u6211\u7684\u5f00\u53d1\u56e2\u961f\u80fd\u60f3\u5230\u7684\u6700\u597d\u65b9\u5f0f\u628a\u8fd9\u4e9b\u601d\u8def\u6574\u5408\u6210\u4e00\u4f53\u3002 \u4f8b\u5982\uff0c\u5927\u5bb6\u90fd\u6e05\u695a\uff0c\u5728\u7406\u60f3\u72b6\u6001\u4e0b\uff0c\u5b83\u5e94\u8be5\u57fa\u4e8e\u6807\u51c6\u7684 Python \u7c7b\u578b\u63d0\u793a\u3002 \u800c\u4e14\uff0c\u6700\u597d\u7684\u65b9\u5f0f\u662f\u4f7f\u7528\u73b0\u6709\u7684\u6807\u51c6\u3002 \u56e0\u6b64\uff0c\u751a\u81f3\u5728\u5f00\u53d1 FastAPI \u524d\uff0c\u6211\u5c31\u82b1\u4e86\u51e0\u4e2a\u6708\u7684\u65f6\u95f4\u7814\u7a76 OpenAPI\u3001JSON Schema\u3001OAuth2 \u7b49\u89c4\u8303\u3002\u6df1\u5165\u7406\u89e3\u5b83\u4eec\u4e4b\u95f4\u7684\u5173\u7cfb\u3001\u91cd\u53e0\u53ca\u533a\u522b\u4e4b\u5904\u3002","title":"\u8c03\u7814"},{"location":"history-design-future/#_4","text":"\u7136\u540e\uff0c\u6211\u53c8\u82b1\u4e86\u4e00\u4e9b\u65f6\u95f4\u4ece\u7528\u6237\u89d2\u5ea6\uff08\u4f7f\u7528 FastAPI \u7684\u5f00\u53d1\u8005\uff09\u8bbe\u8ba1\u4e86\u5f00\u53d1\u8005 API \u3002 \u540c\u65f6\uff0c\u6211\u8fd8\u5728\u6700\u6d41\u884c\u7684 Python \u4ee3\u7801\u7f16\u8f91\u5668\u4e2d\u6d4b\u8bd5\u4e86\u5f88\u591a\u601d\u8def\uff0c\u5305\u62ec PyCharm\u3001VS Code\u3001\u57fa\u4e8e Jedi \u7684\u7f16\u8f91\u5668\u3002 \u6839\u636e\u6700\u65b0 Python \u5f00\u53d1\u8005\u8c03\u7814\u62a5\u544a \u663e\u793a\uff0c\u8fd9\u51e0\u79cd\u7f16\u8f91\u5668\u8986\u76d6\u4e86\u7ea6 80% \u7684\u7528\u6237\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c FastAPI \u9488\u5bf9\u5dee\u4e0d\u591a 80% \u7684 Python \u5f00\u53d1\u8005\u4f7f\u7528\u7684\u7f16\u8f91\u5668\u8fdb\u884c\u4e86\u6d4b\u8bd5\uff0c\u800c\u4e14\u5176\u4ed6\u5927\u591a\u6570\u7f16\u8f91\u5668\u7684\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u4e0e\u4e4b\u7c7b\u4f3c\uff0c\u56e0\u6b64\uff0c FastAPI \u7684\u4f18\u52bf\u51e0\u4e4e\u80fd\u5728\u6240\u6709\u7f16\u8f91\u5668\u4e0a\u4f53\u73b0\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u5c31\u80fd\u627e\u5230\u5c3d\u53ef\u80fd\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u7684\u6700\u4f73\u65b9\u5f0f\uff0c\u8fdb\u800c\u5b9e\u73b0\u5904\u5904\u90fd\u6709\u81ea\u52a8\u8865\u5168\u3001\u7c7b\u578b\u63d0\u793a\u4e0e\u9519\u8bef\u68c0\u67e5\u7b49\u652f\u6301\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u662f\u4e3a\u4e86\u7ed9\u5f00\u53d1\u8005\u63d0\u4f9b\u6700\u4f73\u7684\u5f00\u53d1\u4f53\u9a8c\u3002","title":"\u8bbe\u8ba1"},{"location":"history-design-future/#_5","text":"\u7ecf\u8fc7\u6d4b\u8bd5\u591a\u79cd\u5907\u9009\u65b9\u6848\uff0c\u6211\u6700\u7ec8\u51b3\u5b9a\u4f7f\u7528 Pydantic \uff0c\u5e76\u5145\u5206\u5229\u7528\u5b83\u7684\u4f18\u52bf\u3002 \u6211\u751a\u81f3\u4e3a\u5b83\u505a\u4e86\u4e0d\u5c11\u8d21\u732e\uff0c\u8ba9\u5b83\u5b8c\u7f8e\u517c\u5bb9\u4e86 JSON Schema\uff0c\u652f\u6301\u591a\u79cd\u65b9\u5f0f\u5b9a\u4e49\u7ea6\u675f\u58f0\u660e\uff0c\u5e76\u57fa\u4e8e\u591a\u4e2a\u7f16\u8f91\u5668\uff0c\u6539\u8fdb\u4e86\u5b83\u5bf9\u7f16\u8f91\u5668\u652f\u6301\uff08\u7c7b\u578b\u68c0\u67e5\u3001\u81ea\u52a8\u8865\u5168\uff09\u3002 \u5728\u5f00\u53d1\u671f\u95f4\uff0c\u6211\u8fd8\u4e3a Starlette \u505a\u4e86\u4e0d\u5c11\u8d21\u732e\uff0c\u8fd9\u662f\u53e6\u4e00\u4e2a\u5173\u952e\u9700\u6c42\u9879\u3002","title":"\u9700\u6c42\u9879"},{"location":"history-design-future/#_6","text":"\u5f53\u6211\u542f\u52a8 FastAPI \u5f00\u53d1\u7684\u65f6\u5019\uff0c\u7edd\u5927\u591a\u6570\u90e8\u4ef6\u90fd\u5df2\u7ecf\u5c31\u4f4d\uff0c\u8bbe\u8ba1\u5df2\u7ecf\u5b9a\u4e49\uff0c\u9700\u6c42\u9879\u548c\u5de5\u5177\u4e5f\u5df2\u7ecf\u51c6\u5907\u5c31\u7eea\uff0c\u76f8\u5173\u6807\u51c6\u4e0e\u89c4\u8303\u7684\u77e5\u8bc6\u50a8\u5907\u4e5f\u975e\u5e38\u6e05\u6670\u800c\u65b0\u9c9c\u3002","title":"\u5f00\u53d1"},{"location":"history-design-future/#_7","text":"\u81f3\u6b64\uff0c FastAPI \u53ca\u5176\u7406\u5ff5\u5df2\u7ecf\u4e3a\u5f88\u591a\u4eba\u6240\u7528\u3002 \u5bf9\u4e8e\u5f88\u591a\u7528\u4f8b\uff0c\u5b83\u6bd4\u4ee5\u524d\u5f88\u591a\u5907\u9009\u65b9\u6848\u90fd\u66f4\u9002\u7528\u3002 \u5f88\u591a\u5f00\u53d1\u8005\u548c\u5f00\u53d1\u56e2\u961f\u5df2\u7ecf\u4f9d\u8d56 FastAPI \u5f00\u53d1\u4ed6\u4eec\u7684\u9879\u76ee\uff08\u5305\u62ec\u6211\u548c\u6211\u7684\u56e2\u961f\uff09\u3002 \u4f46\uff0c FastAPI \u4ecd\u6709\u5f88\u591a\u6539\u8fdb\u7684\u4f59\u5730\uff0c\u4e5f\u8fd8\u9700\u8981\u6dfb\u52a0\u66f4\u591a\u7684\u529f\u80fd\u3002 \u603b\u4e4b\uff0c FastAPI \u524d\u666f\u5149\u660e\u3002 \u5728\u6b64\uff0c\u6211\u4eec\u8877\u5fc3\u611f\u8c22 \u60a8\u7684\u5e2e\u52a9 \u3002","title":"\u672a\u6765"},{"location":"project-generation/","text":"\u9879\u76ee\u751f\u6210 - \u6a21\u677f \u00b6 \u9879\u76ee\u751f\u6210\u5668\u4e00\u822c\u90fd\u4f1a\u63d0\u4f9b\u5f88\u591a\u521d\u59cb\u8bbe\u7f6e\u3001\u5b89\u5168\u63aa\u65bd\u3001\u6570\u636e\u5e93\uff0c\u751a\u81f3\u8fd8\u51c6\u5907\u597d\u4e86\u7b2c\u4e00\u4e2a API \u7aef\u70b9\uff0c\u80fd\u5e2e\u52a9\u60a8\u5feb\u901f\u4e0a\u624b\u3002 \u9879\u76ee\u751f\u6210\u5668\u7684\u8bbe\u7f6e\u901a\u5e38\u90fd\u5f88\u4e3b\u89c2\uff0c\u60a8\u53ef\u4ee5\u6309\u9700\u66f4\u65b0\u6216\u4fee\u6539\uff0c\u4f46\u5bf9\u4e8e\u60a8\u7684\u9879\u76ee\u6765\u8bf4\uff0c\u5b83\u662f\u975e\u5e38\u597d\u7684\u8d77\u70b9\u3002 \u5168\u6808 FastAPI + PostgreSQL \u00b6 GitHub\uff1a https://github.com/tiangolo/full-stack-fastapi-postgresql \u5168\u6808 FastAPI + PostgreSQL - \u529f\u80fd \u00b6 \u5b8c\u6574\u7684 Docker \u96c6\u6210\uff08\u57fa\u4e8e Docker\uff09 Docker Swarm \u5f00\u53d1\u6a21\u5f0f Docker Compose \u672c\u5730\u5f00\u53d1\u96c6\u6210\u4e0e\u4f18\u5316 \u751f\u4ea7\u53ef\u7528 \u7684 Python \u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4f7f\u7528 Uvicorn \u6216 Gunicorn Python FastAPI \u540e\u7aef\uff1a \u901f\u5ea6\u5feb \uff1a\u53ef\u4e0e NodeJS \u548c Go \u6bd4\u80a9\u7684\u6781\u9ad8\u6027\u80fd\uff08\u5f52\u529f\u4e8e Starlette \u548c Pydantic\uff09 \u76f4\u89c2 \uff1a\u5f3a\u5927\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5904\u5904\u7686\u53ef \u81ea\u52a8\u8865\u5168 \uff0c\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4 \u7b80\u5355 \uff1a\u6613\u5b66\u3001\u6613\u7528\uff0c\u9605\u8bfb\u6587\u6863\u6240\u9700\u65f6\u95f4\u66f4\u77ed \u7b80\u77ed \uff1a\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\uff0c\u6bcf\u6b21\u53c2\u6570\u58f0\u660e\u90fd\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u529f\u80fd \u5065\u58ee \uff1a \u751f\u4ea7\u7ea7\u522b\u7684\u4ee3\u7801\uff0c\u8fd8\u6709\u81ea\u52a8\u4ea4\u4e92\u6587\u6863 \u57fa\u4e8e\u6807\u51c6 \uff1a\u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e API \u5f00\u653e\u6807\u51c6\uff1a OpenAPI \u548c JSON Schema \u66f4\u591a\u529f\u80fd \u5305\u62ec\u81ea\u52a8\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u3001\u4ea4\u4e92\u6587\u6863\u3001OAuth2 JWT Token \u8eab\u4efd\u9a8c\u8bc1\u7b49 \u5b89\u5168\u5bc6\u7801 \uff0c\u9ed8\u8ba4\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c JWT Token \u8eab\u4efd\u9a8c\u8bc1 SQLAlchemy \u6a21\u578b\uff08\u72ec\u7acb\u4e8e Flask \u6269\u5c55\uff0c\u53ef\u76f4\u63a5\u7528\u4e8e Celery Worker\uff09 \u57fa\u7840\u7684\u7528\u6237\u6a21\u578b\uff08\u53ef\u6309\u9700\u4fee\u6539\u6216\u5220\u9664\uff09 Alembic \u8fc1\u79fb CORS \uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09 Celery Worker \u53ef\u4ece\u540e\u7aef\u5176\u4ed6\u90e8\u5206\u6709\u9009\u62e9\u5730\u5bfc\u5165\u5e76\u4f7f\u7528\u6a21\u578b\u548c\u4ee3\u7801 REST \u540e\u7aef\u6d4b\u8bd5\u57fa\u4e8e Pytest\uff0c\u5e76\u4e0e Docker \u96c6\u6210\uff0c\u53ef\u72ec\u7acb\u4e8e\u6570\u636e\u5e93\u5b9e\u73b0\u5b8c\u6574\u7684 API \u4ea4\u4e92\u6d4b\u8bd5\u3002\u56e0\u4e3a\u662f\u5728 Docker \u4e2d\u8fd0\u884c\uff0c\u6bcf\u6b21\u90fd\u53ef\u4ece\u5934\u6784\u5efa\u65b0\u7684\u6570\u636e\u5b58\u50a8\uff08\u4f7f\u7528 ElasticSearch\u3001MongoDB\u3001CouchDB \u7b49\u6570\u636e\u5e93\uff0c\u4ec5\u6d4b\u8bd5 API \u8fd0\u884c\uff09 Python \u4e0e Jupyter Kernels \u96c6\u6210\uff0c\u7528\u4e8e\u8fdc\u7a0b\u6216 Docker \u5bb9\u5668\u5185\u90e8\u5f00\u53d1\uff0c\u4f7f\u7528 Atom Hydrogen \u6216 Visual Studio Code \u7684 Jupyter \u63d2\u4ef6 Vue \u524d\u7aef\uff1a \u7531 Vue CLI \u751f\u6210 JWT \u8eab\u4efd\u9a8c\u8bc1 \u5904\u7406 \u767b\u5f55\u89c6\u56fe \u767b\u5f55\u540e\u663e\u793a\u4e3b\u4eea\u8868\u76d8\u89c6\u56fe \u4e3b\u4eea\u8868\u76d8\u652f\u6301\u7528\u6237\u521b\u5efa\u4e0e\u7f16\u8f91 \u7528\u6237\u4fe1\u606f\u7f16\u8f91 Vuex Vue-router Vuetify \u7f8e\u5316\u7ec4\u4ef6 TypeScript \u57fa\u4e8e Nginx \u7684 Docker \u670d\u52a1\u5668\uff08\u4f18\u5316\u4e86 Vue-router \u914d\u7f6e\uff09 Docker \u591a\u9636\u6bb5\u6784\u5efa\uff0c\u65e0\u9700\u4fdd\u5b58\u6216\u63d0\u4ea4\u7f16\u8bd1\u7684\u4ee3\u7801 \u5728\u6784\u5efa\u65f6\u8fd0\u884c\u524d\u7aef\u6d4b\u8bd5\uff08\u53ef\u7981\u7528\uff09 \u5c3d\u91cf\u6a21\u5757\u5316\uff0c\u5f00\u7bb1\u5373\u7528\uff0c\u4f46\u4ecd\u53ef\u4f7f\u7528 Vue CLI \u91cd\u65b0\u751f\u6210\u6216\u521b\u5efa\u6240\u9700\u9879\u76ee\uff0c\u6216\u590d\u7528\u6240\u9700\u5185\u5bb9 \u4f7f\u7528 PGAdmin \u7ba1\u7406 PostgreSQL \u6570\u636e\u5e93\uff0c\u53ef\u8f7b\u677e\u66ff\u6362\u4e3a PHPMyAdmin \u6216 MySQL \u4f7f\u7528 Flower \u76d1\u63a7 Celery \u4efb\u52a1 \u4f7f\u7528 Traefik \u5904\u7406\u524d\u540e\u7aef\u8d1f\u8f7d\u5e73\u8861\uff0c\u53ef\u628a\u524d\u540e\u7aef\u653e\u5728\u540c\u4e00\u4e2a\u57df\u4e0b\uff0c\u6309\u8def\u5f84\u5206\u9694\uff0c\u4f46\u5728\u4e0d\u540c\u5bb9\u5668\u4e2d\u63d0\u4f9b\u670d\u52a1 Traefik \u96c6\u6210\uff0c\u5305\u62ec\u81ea\u52a8\u751f\u6210 Let's Encrypt HTTPS \u51ed\u8bc1 GitLab CI \uff08\u6301\u7eed\u96c6\u6210\uff09\uff0c\u5305\u62ec\u524d\u540e\u7aef\u6d4b\u8bd5 \u5168\u6808 FastAPI + Couchbase \u00b6 GitHub\uff1a https://github.com/tiangolo/full-stack-fastapi-couchbase \u26a0\ufe0f \u8b66\u544a \u26a0\ufe0f \u5982\u679c\u60a8\u60f3\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u5907\u9009\u65b9\u6848\u3002 \u4f8b\u5982\uff0c\u9879\u76ee\u751f\u6210\u5668 \u5168\u6808 FastAPI + PostgreSQL \u4f1a\u66f4\u9002\u7528\uff0c\u8fd9\u4e2a\u9879\u76ee\u7684\u7ef4\u62a4\u79ef\u6781\uff0c\u7528\u7684\u4eba\u4e5f\u591a\uff0c\u8fd8\u5305\u62ec\u4e86\u6240\u6709\u65b0\u529f\u80fd\u548c\u6539\u8fdb\u5185\u5bb9\u3002 \u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u8fd9\u4e2a\u57fa\u4e8e Couchbase \u7684\u751f\u6210\u5668\uff0c\u5b83\u4e5f\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u5c31\u7b97\u7528\u5b83\u751f\u6210\u9879\u76ee\u4e5f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff08\u4e3a\u4e86\u66f4\u597d\u5730\u6ee1\u8db3\u9700\u6c42\uff0c\u60a8\u53ef\u4ee5\u81ea\u884c\u66f4\u65b0\u8fd9\u4e2a\u9879\u76ee\uff09\u3002 \u8be6\u89c1\u8d44\u6e90\u4ed3\u5e93\u4e2d\u7684\u6587\u6863\u3002 \u5168\u6808 FastAPI + MongoDB \u00b6 \u2026\u2026\u656c\u8bf7\u671f\u5f85\uff0c\u5f97\u770b\u6211\u6709\u6ca1\u6709\u65f6\u95f4\u505a\u8fd9\u4e2a\u9879\u76ee\u3002\ud83d\ude05 \ud83c\udf89 FastAPI + spaCy \u673a\u5668\u5b66\u4e60\u6a21\u578b \u00b6 GitHub\uff1a https://github.com/microsoft/cookiecutter-spacy-fastapi FastAPI + spaCy \u673a\u5668\u5b66\u4e60\u6a21\u578b - \u529f\u80fd \u00b6 \u96c6\u6210 spaCy NER \u6a21\u578b \u5185\u7f6e Azure \u8ba4\u77e5\u641c\u7d22 \u8bf7\u6c42\u683c\u5f0f \u751f\u4ea7\u53ef\u7528 \u7684 Python \u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4f7f\u7528 Uvicorn \u4e0e Gunicorn \u5185\u7f6e Azure DevOps Kubernetes (AKS) CI/CD \u5f00\u53d1 \u591a\u8bed \u652f\u6301\uff0c\u53ef\u5728\u9879\u76ee\u8bbe\u7f6e\u65f6\u9009\u62e9 spaCy \u5185\u7f6e\u7684\u8bed\u8a00 \u4e0d\u4ec5\u5c40\u9650\u4e8e spaCy\uff0c\u53ef \u8f7b\u677e\u6269\u5c55 \u81f3\u5176\u4ed6\u6a21\u578b\u6846\u67b6\uff08Pytorch\u3001TensorFlow\uff09","title":"\u9879\u76ee\u751f\u6210 - \u6a21\u677f"},{"location":"project-generation/#-","text":"\u9879\u76ee\u751f\u6210\u5668\u4e00\u822c\u90fd\u4f1a\u63d0\u4f9b\u5f88\u591a\u521d\u59cb\u8bbe\u7f6e\u3001\u5b89\u5168\u63aa\u65bd\u3001\u6570\u636e\u5e93\uff0c\u751a\u81f3\u8fd8\u51c6\u5907\u597d\u4e86\u7b2c\u4e00\u4e2a API \u7aef\u70b9\uff0c\u80fd\u5e2e\u52a9\u60a8\u5feb\u901f\u4e0a\u624b\u3002 \u9879\u76ee\u751f\u6210\u5668\u7684\u8bbe\u7f6e\u901a\u5e38\u90fd\u5f88\u4e3b\u89c2\uff0c\u60a8\u53ef\u4ee5\u6309\u9700\u66f4\u65b0\u6216\u4fee\u6539\uff0c\u4f46\u5bf9\u4e8e\u60a8\u7684\u9879\u76ee\u6765\u8bf4\uff0c\u5b83\u662f\u975e\u5e38\u597d\u7684\u8d77\u70b9\u3002","title":"\u9879\u76ee\u751f\u6210 - \u6a21\u677f"},{"location":"project-generation/#fastapi-postgresql","text":"GitHub\uff1a https://github.com/tiangolo/full-stack-fastapi-postgresql","title":"\u5168\u6808 FastAPI + PostgreSQL"},{"location":"project-generation/#fastapi-postgresql-","text":"\u5b8c\u6574\u7684 Docker \u96c6\u6210\uff08\u57fa\u4e8e Docker\uff09 Docker Swarm \u5f00\u53d1\u6a21\u5f0f Docker Compose \u672c\u5730\u5f00\u53d1\u96c6\u6210\u4e0e\u4f18\u5316 \u751f\u4ea7\u53ef\u7528 \u7684 Python \u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4f7f\u7528 Uvicorn \u6216 Gunicorn Python FastAPI \u540e\u7aef\uff1a \u901f\u5ea6\u5feb \uff1a\u53ef\u4e0e NodeJS \u548c Go \u6bd4\u80a9\u7684\u6781\u9ad8\u6027\u80fd\uff08\u5f52\u529f\u4e8e Starlette \u548c Pydantic\uff09 \u76f4\u89c2 \uff1a\u5f3a\u5927\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u5904\u5904\u7686\u53ef \u81ea\u52a8\u8865\u5168 \uff0c\u51cf\u5c11\u8c03\u8bd5\u65f6\u95f4 \u7b80\u5355 \uff1a\u6613\u5b66\u3001\u6613\u7528\uff0c\u9605\u8bfb\u6587\u6863\u6240\u9700\u65f6\u95f4\u66f4\u77ed \u7b80\u77ed \uff1a\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\uff0c\u6bcf\u6b21\u53c2\u6570\u58f0\u660e\u90fd\u53ef\u4ee5\u5b9e\u73b0\u591a\u4e2a\u529f\u80fd \u5065\u58ee \uff1a \u751f\u4ea7\u7ea7\u522b\u7684\u4ee3\u7801\uff0c\u8fd8\u6709\u81ea\u52a8\u4ea4\u4e92\u6587\u6863 \u57fa\u4e8e\u6807\u51c6 \uff1a\u5b8c\u5168\u517c\u5bb9\u5e76\u57fa\u4e8e API \u5f00\u653e\u6807\u51c6\uff1a OpenAPI \u548c JSON Schema \u66f4\u591a\u529f\u80fd \u5305\u62ec\u81ea\u52a8\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u3001\u4ea4\u4e92\u6587\u6863\u3001OAuth2 JWT Token \u8eab\u4efd\u9a8c\u8bc1\u7b49 \u5b89\u5168\u5bc6\u7801 \uff0c\u9ed8\u8ba4\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c JWT Token \u8eab\u4efd\u9a8c\u8bc1 SQLAlchemy \u6a21\u578b\uff08\u72ec\u7acb\u4e8e Flask \u6269\u5c55\uff0c\u53ef\u76f4\u63a5\u7528\u4e8e Celery Worker\uff09 \u57fa\u7840\u7684\u7528\u6237\u6a21\u578b\uff08\u53ef\u6309\u9700\u4fee\u6539\u6216\u5220\u9664\uff09 Alembic \u8fc1\u79fb CORS \uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09 Celery Worker \u53ef\u4ece\u540e\u7aef\u5176\u4ed6\u90e8\u5206\u6709\u9009\u62e9\u5730\u5bfc\u5165\u5e76\u4f7f\u7528\u6a21\u578b\u548c\u4ee3\u7801 REST \u540e\u7aef\u6d4b\u8bd5\u57fa\u4e8e Pytest\uff0c\u5e76\u4e0e Docker \u96c6\u6210\uff0c\u53ef\u72ec\u7acb\u4e8e\u6570\u636e\u5e93\u5b9e\u73b0\u5b8c\u6574\u7684 API \u4ea4\u4e92\u6d4b\u8bd5\u3002\u56e0\u4e3a\u662f\u5728 Docker \u4e2d\u8fd0\u884c\uff0c\u6bcf\u6b21\u90fd\u53ef\u4ece\u5934\u6784\u5efa\u65b0\u7684\u6570\u636e\u5b58\u50a8\uff08\u4f7f\u7528 ElasticSearch\u3001MongoDB\u3001CouchDB \u7b49\u6570\u636e\u5e93\uff0c\u4ec5\u6d4b\u8bd5 API \u8fd0\u884c\uff09 Python \u4e0e Jupyter Kernels \u96c6\u6210\uff0c\u7528\u4e8e\u8fdc\u7a0b\u6216 Docker \u5bb9\u5668\u5185\u90e8\u5f00\u53d1\uff0c\u4f7f\u7528 Atom Hydrogen \u6216 Visual Studio Code \u7684 Jupyter \u63d2\u4ef6 Vue \u524d\u7aef\uff1a \u7531 Vue CLI \u751f\u6210 JWT \u8eab\u4efd\u9a8c\u8bc1 \u5904\u7406 \u767b\u5f55\u89c6\u56fe \u767b\u5f55\u540e\u663e\u793a\u4e3b\u4eea\u8868\u76d8\u89c6\u56fe \u4e3b\u4eea\u8868\u76d8\u652f\u6301\u7528\u6237\u521b\u5efa\u4e0e\u7f16\u8f91 \u7528\u6237\u4fe1\u606f\u7f16\u8f91 Vuex Vue-router Vuetify \u7f8e\u5316\u7ec4\u4ef6 TypeScript \u57fa\u4e8e Nginx \u7684 Docker \u670d\u52a1\u5668\uff08\u4f18\u5316\u4e86 Vue-router \u914d\u7f6e\uff09 Docker \u591a\u9636\u6bb5\u6784\u5efa\uff0c\u65e0\u9700\u4fdd\u5b58\u6216\u63d0\u4ea4\u7f16\u8bd1\u7684\u4ee3\u7801 \u5728\u6784\u5efa\u65f6\u8fd0\u884c\u524d\u7aef\u6d4b\u8bd5\uff08\u53ef\u7981\u7528\uff09 \u5c3d\u91cf\u6a21\u5757\u5316\uff0c\u5f00\u7bb1\u5373\u7528\uff0c\u4f46\u4ecd\u53ef\u4f7f\u7528 Vue CLI \u91cd\u65b0\u751f\u6210\u6216\u521b\u5efa\u6240\u9700\u9879\u76ee\uff0c\u6216\u590d\u7528\u6240\u9700\u5185\u5bb9 \u4f7f\u7528 PGAdmin \u7ba1\u7406 PostgreSQL \u6570\u636e\u5e93\uff0c\u53ef\u8f7b\u677e\u66ff\u6362\u4e3a PHPMyAdmin \u6216 MySQL \u4f7f\u7528 Flower \u76d1\u63a7 Celery \u4efb\u52a1 \u4f7f\u7528 Traefik \u5904\u7406\u524d\u540e\u7aef\u8d1f\u8f7d\u5e73\u8861\uff0c\u53ef\u628a\u524d\u540e\u7aef\u653e\u5728\u540c\u4e00\u4e2a\u57df\u4e0b\uff0c\u6309\u8def\u5f84\u5206\u9694\uff0c\u4f46\u5728\u4e0d\u540c\u5bb9\u5668\u4e2d\u63d0\u4f9b\u670d\u52a1 Traefik \u96c6\u6210\uff0c\u5305\u62ec\u81ea\u52a8\u751f\u6210 Let's Encrypt HTTPS \u51ed\u8bc1 GitLab CI \uff08\u6301\u7eed\u96c6\u6210\uff09\uff0c\u5305\u62ec\u524d\u540e\u7aef\u6d4b\u8bd5","title":"\u5168\u6808 FastAPI + PostgreSQL - \u529f\u80fd"},{"location":"project-generation/#fastapi-couchbase","text":"GitHub\uff1a https://github.com/tiangolo/full-stack-fastapi-couchbase \u26a0\ufe0f \u8b66\u544a \u26a0\ufe0f \u5982\u679c\u60a8\u60f3\u4ece\u5934\u5f00\u59cb\u521b\u5efa\u65b0\u9879\u76ee\uff0c\u5efa\u8bae\u4f7f\u7528\u4ee5\u4e0b\u5907\u9009\u65b9\u6848\u3002 \u4f8b\u5982\uff0c\u9879\u76ee\u751f\u6210\u5668 \u5168\u6808 FastAPI + PostgreSQL \u4f1a\u66f4\u9002\u7528\uff0c\u8fd9\u4e2a\u9879\u76ee\u7684\u7ef4\u62a4\u79ef\u6781\uff0c\u7528\u7684\u4eba\u4e5f\u591a\uff0c\u8fd8\u5305\u62ec\u4e86\u6240\u6709\u65b0\u529f\u80fd\u548c\u6539\u8fdb\u5185\u5bb9\u3002 \u5f53\u7136\uff0c\u60a8\u4e5f\u53ef\u4ee5\u653e\u5fc3\u4f7f\u7528\u8fd9\u4e2a\u57fa\u4e8e Couchbase \u7684\u751f\u6210\u5668\uff0c\u5b83\u4e5f\u80fd\u6b63\u5e38\u4f7f\u7528\u3002\u5c31\u7b97\u7528\u5b83\u751f\u6210\u9879\u76ee\u4e5f\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\uff08\u4e3a\u4e86\u66f4\u597d\u5730\u6ee1\u8db3\u9700\u6c42\uff0c\u60a8\u53ef\u4ee5\u81ea\u884c\u66f4\u65b0\u8fd9\u4e2a\u9879\u76ee\uff09\u3002 \u8be6\u89c1\u8d44\u6e90\u4ed3\u5e93\u4e2d\u7684\u6587\u6863\u3002","title":"\u5168\u6808 FastAPI + Couchbase"},{"location":"project-generation/#fastapi-mongodb","text":"\u2026\u2026\u656c\u8bf7\u671f\u5f85\uff0c\u5f97\u770b\u6211\u6709\u6ca1\u6709\u65f6\u95f4\u505a\u8fd9\u4e2a\u9879\u76ee\u3002\ud83d\ude05 \ud83c\udf89","title":"\u5168\u6808 FastAPI + MongoDB"},{"location":"project-generation/#fastapi-spacy","text":"GitHub\uff1a https://github.com/microsoft/cookiecutter-spacy-fastapi","title":"FastAPI + spaCy \u673a\u5668\u5b66\u4e60\u6a21\u578b"},{"location":"project-generation/#fastapi-spacy-","text":"\u96c6\u6210 spaCy NER \u6a21\u578b \u5185\u7f6e Azure \u8ba4\u77e5\u641c\u7d22 \u8bf7\u6c42\u683c\u5f0f \u751f\u4ea7\u53ef\u7528 \u7684 Python \u7f51\u7edc\u670d\u52a1\u5668\uff0c\u4f7f\u7528 Uvicorn \u4e0e Gunicorn \u5185\u7f6e Azure DevOps Kubernetes (AKS) CI/CD \u5f00\u53d1 \u591a\u8bed \u652f\u6301\uff0c\u53ef\u5728\u9879\u76ee\u8bbe\u7f6e\u65f6\u9009\u62e9 spaCy \u5185\u7f6e\u7684\u8bed\u8a00 \u4e0d\u4ec5\u5c40\u9650\u4e8e spaCy\uff0c\u53ef \u8f7b\u677e\u6269\u5c55 \u81f3\u5176\u4ed6\u6a21\u578b\u6846\u67b6\uff08Pytorch\u3001TensorFlow\uff09","title":"FastAPI + spaCy \u673a\u5668\u5b66\u4e60\u6a21\u578b - \u529f\u80fd"},{"location":"python-types/","text":"Python \u7c7b\u578b\u63d0\u793a \u00b6 Python \u652f\u6301\u53ef\u9009\u7684 \u7c7b\u578b\u63d0\u793a \u3002 \u7c7b\u578b\u63d0\u793a \u662f\u58f0\u660e\u53d8\u91cf \u7c7b\u578b \u7684\u7279\u6b8a\u8bed\u6cd5\u3002 \u58f0\u660e\u4e86\u53d8\u91cf\u7c7b\u578b\uff0c\u7f16\u8f91\u5668\u548c\u5f00\u53d1\u5de5\u5177\u5c31\u80fd\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u3002 \u672c\u7ae0\u53ea\u662f Python \u7c7b\u578b\u63d0\u793a\u7684 \u5feb\u901f\u5165\u95e8 \uff0c\u4ec5\u4ecb\u7ecd\u4e86 FastAPI \u4e2d\u4e0e\u7c7b\u578b\u63d0\u793a\u76f8\u5173\u7684\u5185\u5bb9\u2026\u2026\u771f\u7684\u5f88\u5c11\u3002 FastAPI \u662f\u57fa\u4e8e\u7c7b\u578b\u63d0\u793a\u5f00\u53d1\u7684\uff0c\u5199\u4ee3\u7801\u7684\u4f53\u9a8c\u975e\u5e38\u4e0d\u9519\u3002 \u5c31\u7b97\u4e0d\u4f7f\u7528 FastAPI \uff0c\u4e86\u89e3\u4e00\u4e0b\u7c7b\u578b\u63d0\u793a\u4e5f\u4f1a\u8ba9\u60a8\u83b7\u76ca\u532a\u6d45\u3002 \u7b14\u8bb0 \u5982\u679c\u60a8\u662f Python \u4e13\u5bb6\uff0c\u5df2\u7ecf\u719f\u77e5\u7c7b\u578b\u63d0\u793a\uff0c\u5c31\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u7ae0\u5427\u3002 \u52a8\u673a \u00b6 \u5148\u4ecb\u7ecd\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u8fd9\u6bb5\u4ee3\u7801\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a John Doe \u8be5\u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u63a5\u6536 first_name \u548c last_name \u53c2\u6570 \u4f7f\u7528 title() \u628a\u53c2\u6570\u7684\u9996\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199 \u4f7f\u7528\u7a7a\u683c \u62fc\u63a5 \u4e24\u4e2a\u53c2\u6570\u7684\u503c def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u7f16\u8f91\u793a\u4f8b \u00b6 \u8fd9\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7a0b\u5e8f\u3002 \u73b0\u5728\uff0c\u5047\u8bbe\u60a8\u8981\u4ece\u5934\u7f16\u5199\u8fd9\u6bb5\u7a0b\u5e8f\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u5f00\u59cb\u5b9a\u4e49\u51fd\u6570\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u4e86\u53c2\u6570\u2026\u2026 \u6b64\u65f6\uff0c\u9700\u8981\u8c03\u7528 \u628a\u9996\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u65b9\u6cd5 \u3002 \u7b49\u7b49\uff0c\u90a3\u4e2a\u65b9\u6cd5\u662f\u4ec0\u4e48\u6765\u7740\uff1f upper \uff1f uppercase \uff1f first_uppercase \uff1f\u8fd8\u662f capitalize \uff1f \u7136\u540e\uff0c\u60a8\u5c1d\u8bd5\u5411\u7a0b\u5e8f\u5458\u8001\u624b\u7684\u670b\u53cb\u2014\u2014\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\u5bfb\u6c42\u5e2e\u52a9\u3002 \u8f93\u5165\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 first_name \uff0c\u8f93\u5165\u70b9\u53f7\uff08 . \uff09\uff0c\u7136\u540e\u6572\u4e0b Ctrl+Space \u89e6\u53d1\u4ee3\u7801\u8865\u5168\u3002 \u53ef\u60dc\uff0c\u8fd9\u6ca1\u6709\u4ec0\u4e48\u7528\uff1a \u6dfb\u52a0\u7c7b\u578b \u00b6 \u63a5\u4e0b\u6765\uff0c\u4fee\u6539\u4e0a\u4f8b\u4e2d\u7684\u4e00\u884c\u4ee3\u7801\u3002 \u628a\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u53c2\u6570\u4ece\uff1a first_name , last_name \u6539\u6210\uff1a first_name : str , last_name : str \u5c31\u662f\u8fd9\u6837\u3002 \u8fd9\u5c31\u662f \u7c7b\u578b\u63d0\u793a \uff1a def get_full_name ( first_name : str , last_name : str ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u4e0e\u58f0\u660e\u9ed8\u8ba4\u503c\u4e0d\u540c\uff0c\u4f8b\u5982\uff1a first_name = \"john\" , last_name = \"doe\" \u8fd9\u4e24\u8005\u4e0d\u4e00\u6837\u3002 \u7c7b\u578b\u63d0\u793a\u7528\u7684\u662f\u5192\u53f7\uff08 : \uff09\uff0c\u4e0d\u662f\u7b49\u53f7\uff08 = \uff09\u3002 \u800c\u4e14\u7c7b\u578b\u63d0\u793a\u4e00\u822c\u4e0d\u4f1a\u6539\u53d8\u539f\u6709\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u518d\u6b21\u521b\u5efa\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd9\u6b21\u6dfb\u52a0\u4e86\u7c7b\u578b\u63d0\u793a\u3002 \u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u7528 Ctrl+Space \u89e6\u53d1\u81ea\u52a8\u8865\u5168\uff0c\u5c31\u4f1a\u53d1\u73b0\uff1a \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u6eda\u52a8\u67e5\u770b\u9009\u9879\uff0c\u627e\u5230\u9700\u8981\u7684\u529f\u80fd\uff1a \u66f4\u591a\u52a8\u673a \u00b6 \u4e0b\u9762\u662f\u4e2a\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u7684\u51fd\u6570\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + age return name_with_age \u56e0\u4e3a\u7f16\u8f91\u5668\u5df2\u7ecf\u77e5\u9053\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4ec5\u80fd\u5bf9\u4ee3\u7801\u8fdb\u884c\u8865\u5168\uff0c\u8fd8\u80fd\u68c0\u67e5\u4ee3\u7801\u9519\u8bef\uff1a \u73b0\u5728\uff0c\u5fc5\u987b\u5148\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528 str(age) \u628a age \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + str ( age ) return name_with_age \u58f0\u660e\u7c7b\u578b \u00b6 \u60a8\u521a\u521a\u770b\u5230\u7684\u5c31\u662f\u7c7b\u578b\u63d0\u793a\u5e38\u89c1\u7684\u573a\u666f ~ \u7528\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u3002 \u8fd9\u4e5f\u662f\u5728 FastAPI \u4e2d\u7c7b\u578b\u63d0\u793a\u7684\u5e38\u7528\u573a\u666f\u3002 \u7b80\u5355\u7c7b\u578b \u00b6 \u7c7b\u578b\u63d0\u793a\u4e0d\u53ea\u4f7f\u7528 str \uff0c\u8fd8\u80fd\u58f0\u660e\u6240\u6709 Python \u6807\u51c6\u7c7b\u578b\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u7c7b\u578b\uff1a int float bool bytes def get_items ( item_a : str , item_b : int , item_c : float , item_d : bool , item_e : bytes ): return item_a , item_b , item_c , item_d , item_d , item_e \u901a\u7528\u7c7b\u578b\u7684\u7c7b\u578b\u53c2\u6570 \u00b6 dict \u3001 list \u3001 set \u3001 tuple \u7b49\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u503c\uff0c\u800c\u4e14\u5176\u5185\u90e8\u7684\u503c\u4e5f\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 Python \u7684 typing \u6807\u51c6\u5e93\u53ef\u4ee5\u58f0\u660e\u8fd9\u4e9b\u7c7b\u578b\u53ca\u5176\u5b50\u7c7b\u578b\u3002 \u8fd9\u4e2a\u6807\u51c6\u5e93\u4e13\u95e8\u7528\u6765\u652f\u6301\u7c7b\u578b\u63d0\u793a\u3002 \u5217\u8868 \u00b6 \u4f8b\u5982\uff0c\u5b9a\u4e49\u7531 str \u7ec4\u6210\u7684 list \u53d8\u91cf\u3002 Python 3.6 and above Python 3.9 and above \u4ece typing \u4e2d\u5bfc\u5165 List \uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f \u5927\u5199\u7684 L \uff1a from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u4f7f\u7528\u5192\u53f7\uff08 : \uff09\u8bed\u6cd5\u58f0\u660e\u53d8\u91cf\u3002 \u4ece typing \u4e2d\u5bfc\u5165 List \u7c7b\u578b\u3002 \u5217\u8868\u8fd8\u652f\u6301\u5185\u90e8\u7c7b\u578b\uff0c\u53ef\u4ee5\u628a\u5185\u90e8\u7c7b\u578b\u653e\u5728\u65b9\u62ec\u53f7\u91cc\uff1a: from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u540c\u6837\uff0c\u4f7f\u7528\u5192\u53f7\uff08 : \uff09\u8bed\u6cd5\u58f0\u660e\u53d8\u91cf\u3002 \u7c7b\u578b\u662f list \u3002 \u5217\u8868\u8fd8\u652f\u6301\u5185\u90e8\u7c7b\u578b\uff0c\u53ef\u4ee5\u628a\u5185\u90e8\u7c7b\u578b\u653e\u5728\u65b9\u62ec\u53f7\u91cc\uff1a def process_items ( items : list [ str ]): for item in items : print ( item ) \u8bf4\u660e \u65b9\u62ec\u53f7\u91cc\u7684\u5185\u90e8\u7c7b\u578b\u53eb\u505a \u7c7b\u578b\u53c2\u6570 \u3002 \u672c\u4f8b\u4e2d\uff0c str \u662f\u4f20\u9012\u7ed9 List \u7684\u7c7b\u578b\u53c2\u6570\u3002 \u5373\uff1a\u53d8\u91cf items \u7684\u7c7b\u578b\u662f list \uff0c\u5e76\u4e14\u5217\u8868\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u90fd\u662f str \u3002 \u63d0\u793a \u5982\u679c\u4f7f\u7528\u7684\u662f Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u5219\u65e0\u987b\u4ece typing \u4e2d\u5bfc\u5165 List \uff0c\u53ef\u4ee5\u7528\u5e38\u89c4\u7684 list \u7c7b\u578b\u4ee3\u66ff List \u7c7b\u578b\u3002 \u8fd9\u6837\uff0c\u5373\u4f7f\u5728\u5904\u7406\u5217\u8868\u91cc\u7684\u5143\u7d20\u65f6\uff0c\u7f16\u8f91\u5668\u4e5f\u80fd\u63d0\u4f9b\u652f\u6301\uff1a \u6ca1\u6709\u7c7b\u578b\uff0c\u8fd9\u79cd\u652f\u6301\u51e0\u4e4e\u4e0d\u53ef\u80fd\u5b9e\u73b0\u3002 \u6ce8\u610f\uff0c\u53d8\u91cf item \u662f\u5217\u8868 items \u91cc\u7684\u5143\u7d20\u3002 \u800c\u4e14\uff0c\u7f16\u8f91\u5668\u4ecd\u7136\u628a\u5b83\u8bc6\u522b\u4e3a str \uff0c\u5e76\u63d0\u4f9b\u76f8\u5173\u652f\u6301\u3002 \u5143\u7ec4\u548c\u96c6\u5408 \u00b6 \u58f0\u660e tuple \u548c set \u7684\u65b9\u6cd5\u4e5f\u4e00\u6837\uff1a Python 3.6 and above Python 3.9 and above from typing import Set , Tuple def process_items ( items_t : Tuple [ int , int , str ], items_s : Set [ bytes ]): return items_t , items_s def process_items ( items_t : tuple [ int , int , str ], items_s : set [ bytes ]): return items_t , items_s \u5373\uff1a items_t \u53d8\u91cf\u662f\u5305\u542b 3 \u4e2a\u5143\u7d20\u7684 tuple \uff0c\u5206\u522b\u662f int \u3001 int \u548c str \u3002 items_s \u53d8\u91cf\u662f set \uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u90fd\u662f bytes \u3002 \u5b57\u5178 \u00b6 \u5b9a\u4e49 dict \u8981\u4f20\u5165 2 \u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u5b50\u7c7b\u578b\u3002 \u7b2c\u4e00\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u952e\u3002 \u7b2c\u4e8c\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u503c\uff1a Python 3.6 and above Python 3.9 and above from typing import Dict def process_items ( prices : Dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) def process_items ( prices : dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) \u5373\uff1a \u53d8\u91cf prices \u662f dict \uff1a dict \u7684\u952e\u7684\u7c7b\u578b\u662f str \uff08\u5143\u7d20\u540d\u79f0\uff09 dict \u7684\u503c\u7684\u7c7b\u578b\u662f float \uff08\u5143\u7d20\u4ef7\u683c\uff09 Optional \u00b6 \u4f7f\u7528 Optional \u628a\u53d8\u91cf\u58f0\u660e\u4e3a str \u7b49\u7c7b\u578b\uff0c\u4f46\u8be5\u7c7b\u578b\u662f \u53ef\u9009\u7684 \uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u662f None : from typing import Optional def say_hi ( name : Optional [ str ] = None ): if name is not None : print ( f \"Hey { name } !\" ) else : print ( \"Hello World\" ) \u4f7f\u7528 Optional[str] \u66ff\u4ee3\u7b80\u5355\u7684 str \u53ef\u4ee5\u8ba9\u7f16\u8f91\u5668\u68c0\u6d4b\u503c\u7684\u7c7b\u578b\u5e94\u4e3a str \uff0c\u4f46\u4e5f\u53ef\u80fd\u4e3a None \u7684\u9519\u8bef\u3002 \u901a\u7528\u7c7b\u578b \u00b6 \u8fd9\u4e9b\u53ef\u4ee5\u5728\u65b9\u62ec\u53f7\u4e2d\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u79f0\u4e3a \u901a\u7528\u7c7b\u578b \u6216 Generics \uff0c\u4f8b\u5982\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above \u5217\u8868 ~ List \u5143\u7ec4 ~ Tuple \u96c6\u5408 ~ Set \u5b57\u5178 ~ Dict Union Optional ... \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u901a\u7528\u7c7b\u578b\uff08\u4f7f\u7528\u65b9\u62ec\u53f7\uff0c\u5e76\u5728\u5176\u4e2d\u4f7f\u7528\u7c7b\u578b\uff09\uff1a \u5217\u8868 ~ list \u5143\u7ec4 ~ tuple \u96c6\u5408 ~ set \u5b57\u5178 ~ dict \u4e0e Python 3.6 \u4e00\u6837\uff0c\u8981\u4ece typing \u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u7c7b\u578b\uff1a Union Optional ... \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u901a\u7528\u7c7b\u578b\uff08\u4f7f\u7528\u65b9\u62ec\u53f7\uff0c\u5e76\u5728\u5176\u4e2d\u4f7f\u7528\u7c7b\u578b\uff09\uff1a list tuple set dict \u4e0e Python 3.6 \u4e00\u6837\uff0c\u8981\u4ece typing \u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u7c7b\u578b\uff1a Union Optional \uff08\u4e0e Python 3.6 \u4e00\u6837\uff09 ... \u5728 Python 3.10 \u4e2d\uff0c\u4f5c\u4e3a\u901a\u7528\u7c7b\u578b Union \u4e0e Optional \u7684\u5907\u9009\u65b9\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528 \u5782\u76f4\u6761\uff08 | \uff09\u3002 \u7c7b\u4e3a\u7c7b\u578b \u00b6 \u7c7b\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e3a\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u5305\u542b name \u5c5e\u6027\u7684\u7c7b Person \uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u4e0b\u9762\uff0c\u628a\u53d8\u91cf\u7684\u7c7b\u578b\u58f0\u660e\u4e3a Person \uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u518d\u4e00\u6b21\uff0c\u83b7\u5f97\u4e86\u6240\u6709\u7684\u7f16\u8f91\u5668\u652f\u6301\uff1a Pydantic \u6a21\u578b \u00b6 Pydantic \u662f\u6267\u884c\u6570\u636e\u6821\u9a8c\u7684 Python \u5e93\u3002 \u53ef\u4ee5\u628a\u6570\u636e \u7ed3\u6784 \u58f0\u660e\u4e3a\u5305\u542b\u5c5e\u6027\u7684\u7c7b\u3002 \u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 \u63a5\u4e0b\u6765\uff0c\u7528\u4e00\u4e9b\u503c\u521b\u5efa\u7c7b\u5b9e\u4f8b\uff0cFastAPI \u4f1a\u6821\u9a8c\u8fd9\u4e9b\u503c\uff0c\uff08\u5728\u9700\u8981\u7684\u60c5\u51b5\u4e0b\uff09\u628a\u503c\u8f6c\u6362\u4e3a\u9002\u5f53\u7684\u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u53ef\u4ee5\u83b7\u5f97\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4e0b\u9762\u662f Pydantic \u5b98\u65b9\u6587\u6863\u4e2d\u7684\u793a\u4f8b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from datetime import datetime from typing import List , Union from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : Union [ datetime , None ] = None friends : List [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 from datetime import datetime from typing import Union from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : Union [ datetime , None ] = None friends : list [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 from datetime import datetime from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : datetime | None = None friends : list [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 \u8bf4\u660e \u8fdb\u4e00\u6b65\u4e86\u89e3 Pydantic\uff0c\u8bf7\u53c2\u9605\u6b64\u6587\u6863 \u3002 FastAPI \u5c31\u662f\u57fa\u4e8e Pydantic \u5f00\u53d1\u7684\u3002 \u7528\u6237\u6307\u5357 \u4e2d\u5217\u51fa\u4e86\u5f88\u591a\u793a\u4f8b\u3002 FastAPI \u4e2d\u7684\u7c7b\u578b\u63d0\u793a \u00b6 FastAPI \u5145\u5206\u5229\u7528\u4e86\u7c7b\u578b\u63d0\u793a\u7684\u4f18\u52bf\u3002 FastAPI \u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u58f0\u660e\u53c2\u6570\u53ef\u4ee5\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301 \u7c7b\u578b\u68c0\u67e5 \u2026\u2026 FastAPI \u8fd8\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\uff1a \u5b9a\u4e49\u53c2\u6570\u9700\u6c42 \uff1a\u58f0\u660e\u5bf9\u8bf7\u6c42\u8def\u5f84\u53c2\u6570\u3001\u67e5\u8be2\u53c2\u6570\u3001\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u3001\u4f9d\u8d56\u9879\u7b49\u7684\u9700\u6c42 \u8f6c\u6362\u6570\u636e \uff1a\u628a\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u9700\u8981\u7684\u7c7b\u578b \u6821\u9a8c\u6570\u636e \uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8bf7\u6c42\uff1a \u6570\u636e\u6821\u9a8c\u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u751f\u6210 \u9519\u8bef\u4fe1\u606f \uff0c\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef \u4f7f\u7528 OpenAPI \u6587\u6863 API\uff1a \u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a \u542c\u4e0a\u53bb\u6709\u70b9\u62bd\u8c61\uff0c\u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\u3002 \u7528\u6237\u6307\u5357 \u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\uff0c\u53ea\u8981\u5728\u4e00\u4e2a\u5730\u65b9\u58f0\u660e\uff08\u4e0d\u7528\u6dfb\u52a0\u66f4\u591a\u7684\u7c7b\u3001\u88c5\u9970\u5668\u7b49\uff09\uff0c FastAPI \u5c31\u80fd\u5b8c\u6210\u5f88\u591a\u5de5\u4f5c\u3002 \u8bf4\u660e \u5b66\u4e60\u5b8c\u6559\u7a0b\u540e\uff0c\u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u7c7b\u578b\u7684\u5185\u5bb9\uff0c mypy \u7684 \u901f\u67e5\u8868 \u975e\u5e38\u4e0d\u9519\u3002","title":"Python \u7c7b\u578b\u63d0\u793a"},{"location":"python-types/#python","text":"Python \u652f\u6301\u53ef\u9009\u7684 \u7c7b\u578b\u63d0\u793a \u3002 \u7c7b\u578b\u63d0\u793a \u662f\u58f0\u660e\u53d8\u91cf \u7c7b\u578b \u7684\u7279\u6b8a\u8bed\u6cd5\u3002 \u58f0\u660e\u4e86\u53d8\u91cf\u7c7b\u578b\uff0c\u7f16\u8f91\u5668\u548c\u5f00\u53d1\u5de5\u5177\u5c31\u80fd\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u3002 \u672c\u7ae0\u53ea\u662f Python \u7c7b\u578b\u63d0\u793a\u7684 \u5feb\u901f\u5165\u95e8 \uff0c\u4ec5\u4ecb\u7ecd\u4e86 FastAPI \u4e2d\u4e0e\u7c7b\u578b\u63d0\u793a\u76f8\u5173\u7684\u5185\u5bb9\u2026\u2026\u771f\u7684\u5f88\u5c11\u3002 FastAPI \u662f\u57fa\u4e8e\u7c7b\u578b\u63d0\u793a\u5f00\u53d1\u7684\uff0c\u5199\u4ee3\u7801\u7684\u4f53\u9a8c\u975e\u5e38\u4e0d\u9519\u3002 \u5c31\u7b97\u4e0d\u4f7f\u7528 FastAPI \uff0c\u4e86\u89e3\u4e00\u4e0b\u7c7b\u578b\u63d0\u793a\u4e5f\u4f1a\u8ba9\u60a8\u83b7\u76ca\u532a\u6d45\u3002 \u7b14\u8bb0 \u5982\u679c\u60a8\u662f Python \u4e13\u5bb6\uff0c\u5df2\u7ecf\u719f\u77e5\u7c7b\u578b\u63d0\u793a\uff0c\u5c31\u76f4\u63a5\u8df3\u5230\u4e0b\u4e00\u7ae0\u5427\u3002","title":"Python \u7c7b\u578b\u63d0\u793a"},{"location":"python-types/#_1","text":"\u5148\u4ecb\u7ecd\u4e00\u4e2a\u7b80\u5355\u7684\u4f8b\u5b50\uff1a def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u8fd9\u6bb5\u4ee3\u7801\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a John Doe \u8be5\u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u63a5\u6536 first_name \u548c last_name \u53c2\u6570 \u4f7f\u7528 title() \u628a\u53c2\u6570\u7684\u9996\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199 \u4f7f\u7528\u7a7a\u683c \u62fc\u63a5 \u4e24\u4e2a\u53c2\u6570\u7684\u503c def get_full_name ( first_name , last_name ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" ))","title":"\u52a8\u673a"},{"location":"python-types/#_2","text":"\u8fd9\u662f\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u7a0b\u5e8f\u3002 \u73b0\u5728\uff0c\u5047\u8bbe\u60a8\u8981\u4ece\u5934\u7f16\u5199\u8fd9\u6bb5\u7a0b\u5e8f\u3002 \u5728\u67d0\u4e00\u65f6\u523b\uff0c\u5f00\u59cb\u5b9a\u4e49\u51fd\u6570\uff0c\u5e76\u4e14\u51c6\u5907\u597d\u4e86\u53c2\u6570\u2026\u2026 \u6b64\u65f6\uff0c\u9700\u8981\u8c03\u7528 \u628a\u9996\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u7684\u65b9\u6cd5 \u3002 \u7b49\u7b49\uff0c\u90a3\u4e2a\u65b9\u6cd5\u662f\u4ec0\u4e48\u6765\u7740\uff1f upper \uff1f uppercase \uff1f first_uppercase \uff1f\u8fd8\u662f capitalize \uff1f \u7136\u540e\uff0c\u60a8\u5c1d\u8bd5\u5411\u7a0b\u5e8f\u5458\u8001\u624b\u7684\u670b\u53cb\u2014\u2014\u7f16\u8f91\u5668\u81ea\u52a8\u8865\u5168\u5bfb\u6c42\u5e2e\u52a9\u3002 \u8f93\u5165\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570 first_name \uff0c\u8f93\u5165\u70b9\u53f7\uff08 . \uff09\uff0c\u7136\u540e\u6572\u4e0b Ctrl+Space \u89e6\u53d1\u4ee3\u7801\u8865\u5168\u3002 \u53ef\u60dc\uff0c\u8fd9\u6ca1\u6709\u4ec0\u4e48\u7528\uff1a","title":"\u7f16\u8f91\u793a\u4f8b"},{"location":"python-types/#_3","text":"\u63a5\u4e0b\u6765\uff0c\u4fee\u6539\u4e0a\u4f8b\u4e2d\u7684\u4e00\u884c\u4ee3\u7801\u3002 \u628a\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e2d\u7684\u51fd\u6570\u53c2\u6570\u4ece\uff1a first_name , last_name \u6539\u6210\uff1a first_name : str , last_name : str \u5c31\u662f\u8fd9\u6837\u3002 \u8fd9\u5c31\u662f \u7c7b\u578b\u63d0\u793a \uff1a def get_full_name ( first_name : str , last_name : str ): full_name = first_name . title () + \" \" + last_name . title () return full_name print ( get_full_name ( \"john\" , \"doe\" )) \u4e0e\u58f0\u660e\u9ed8\u8ba4\u503c\u4e0d\u540c\uff0c\u4f8b\u5982\uff1a first_name = \"john\" , last_name = \"doe\" \u8fd9\u4e24\u8005\u4e0d\u4e00\u6837\u3002 \u7c7b\u578b\u63d0\u793a\u7528\u7684\u662f\u5192\u53f7\uff08 : \uff09\uff0c\u4e0d\u662f\u7b49\u53f7\uff08 = \uff09\u3002 \u800c\u4e14\u7c7b\u578b\u63d0\u793a\u4e00\u822c\u4e0d\u4f1a\u6539\u53d8\u539f\u6709\u7684\u8fd0\u884c\u7ed3\u679c\u3002 \u518d\u6b21\u521b\u5efa\u8fd9\u4e2a\u51fd\u6570\uff0c\u8fd9\u6b21\u6dfb\u52a0\u4e86\u7c7b\u578b\u63d0\u793a\u3002 \u5728\u540c\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u7528 Ctrl+Space \u89e6\u53d1\u81ea\u52a8\u8865\u5168\uff0c\u5c31\u4f1a\u53d1\u73b0\uff1a \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u6eda\u52a8\u67e5\u770b\u9009\u9879\uff0c\u627e\u5230\u9700\u8981\u7684\u529f\u80fd\uff1a","title":"\u6dfb\u52a0\u7c7b\u578b"},{"location":"python-types/#_4","text":"\u4e0b\u9762\u662f\u4e2a\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u7684\u51fd\u6570\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + age return name_with_age \u56e0\u4e3a\u7f16\u8f91\u5668\u5df2\u7ecf\u77e5\u9053\u4e86\u53d8\u91cf\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u4e0d\u4ec5\u80fd\u5bf9\u4ee3\u7801\u8fdb\u884c\u8865\u5168\uff0c\u8fd8\u80fd\u68c0\u67e5\u4ee3\u7801\u9519\u8bef\uff1a \u73b0\u5728\uff0c\u5fc5\u987b\u5148\u4fee\u590d\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f7f\u7528 str(age) \u628a age \u8f6c\u6362\u6210\u5b57\u7b26\u4e32\uff1a def get_name_with_age ( name : str , age : int ): name_with_age = name + \" is this old: \" + str ( age ) return name_with_age","title":"\u66f4\u591a\u52a8\u673a"},{"location":"python-types/#_5","text":"\u60a8\u521a\u521a\u770b\u5230\u7684\u5c31\u662f\u7c7b\u578b\u63d0\u793a\u5e38\u89c1\u7684\u573a\u666f ~ \u7528\u4e8e\u51fd\u6570\u7684\u53c2\u6570\u3002 \u8fd9\u4e5f\u662f\u5728 FastAPI \u4e2d\u7c7b\u578b\u63d0\u793a\u7684\u5e38\u7528\u573a\u666f\u3002","title":"\u58f0\u660e\u7c7b\u578b"},{"location":"python-types/#_6","text":"\u7c7b\u578b\u63d0\u793a\u4e0d\u53ea\u4f7f\u7528 str \uff0c\u8fd8\u80fd\u58f0\u660e\u6240\u6709 Python \u6807\u51c6\u7c7b\u578b\u3002 \u6bd4\u5982\uff0c\u4ee5\u4e0b\u7c7b\u578b\uff1a int float bool bytes def get_items ( item_a : str , item_b : int , item_c : float , item_d : bool , item_e : bytes ): return item_a , item_b , item_c , item_d , item_d , item_e","title":"\u7b80\u5355\u7c7b\u578b"},{"location":"python-types/#_7","text":"dict \u3001 list \u3001 set \u3001 tuple \u7b49\u6570\u636e\u7ed3\u6784\u53ef\u4ee5\u5305\u542b\u5176\u4ed6\u503c\uff0c\u800c\u4e14\u5176\u5185\u90e8\u7684\u503c\u4e5f\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 Python \u7684 typing \u6807\u51c6\u5e93\u53ef\u4ee5\u58f0\u660e\u8fd9\u4e9b\u7c7b\u578b\u53ca\u5176\u5b50\u7c7b\u578b\u3002 \u8fd9\u4e2a\u6807\u51c6\u5e93\u4e13\u95e8\u7528\u6765\u652f\u6301\u7c7b\u578b\u63d0\u793a\u3002","title":"\u901a\u7528\u7c7b\u578b\u7684\u7c7b\u578b\u53c2\u6570"},{"location":"python-types/#_8","text":"\u4f8b\u5982\uff0c\u5b9a\u4e49\u7531 str \u7ec4\u6210\u7684 list \u53d8\u91cf\u3002 Python 3.6 and above Python 3.9 and above \u4ece typing \u4e2d\u5bfc\u5165 List \uff0c\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f \u5927\u5199\u7684 L \uff1a from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u4f7f\u7528\u5192\u53f7\uff08 : \uff09\u8bed\u6cd5\u58f0\u660e\u53d8\u91cf\u3002 \u4ece typing \u4e2d\u5bfc\u5165 List \u7c7b\u578b\u3002 \u5217\u8868\u8fd8\u652f\u6301\u5185\u90e8\u7c7b\u578b\uff0c\u53ef\u4ee5\u628a\u5185\u90e8\u7c7b\u578b\u653e\u5728\u65b9\u62ec\u53f7\u91cc\uff1a: from typing import List def process_items ( items : List [ str ]): for item in items : print ( item ) \u540c\u6837\uff0c\u4f7f\u7528\u5192\u53f7\uff08 : \uff09\u8bed\u6cd5\u58f0\u660e\u53d8\u91cf\u3002 \u7c7b\u578b\u662f list \u3002 \u5217\u8868\u8fd8\u652f\u6301\u5185\u90e8\u7c7b\u578b\uff0c\u53ef\u4ee5\u628a\u5185\u90e8\u7c7b\u578b\u653e\u5728\u65b9\u62ec\u53f7\u91cc\uff1a def process_items ( items : list [ str ]): for item in items : print ( item ) \u8bf4\u660e \u65b9\u62ec\u53f7\u91cc\u7684\u5185\u90e8\u7c7b\u578b\u53eb\u505a \u7c7b\u578b\u53c2\u6570 \u3002 \u672c\u4f8b\u4e2d\uff0c str \u662f\u4f20\u9012\u7ed9 List \u7684\u7c7b\u578b\u53c2\u6570\u3002 \u5373\uff1a\u53d8\u91cf items \u7684\u7c7b\u578b\u662f list \uff0c\u5e76\u4e14\u5217\u8868\u91cc\u7684\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u90fd\u662f str \u3002 \u63d0\u793a \u5982\u679c\u4f7f\u7528\u7684\u662f Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\uff0c\u5219\u65e0\u987b\u4ece typing \u4e2d\u5bfc\u5165 List \uff0c\u53ef\u4ee5\u7528\u5e38\u89c4\u7684 list \u7c7b\u578b\u4ee3\u66ff List \u7c7b\u578b\u3002 \u8fd9\u6837\uff0c\u5373\u4f7f\u5728\u5904\u7406\u5217\u8868\u91cc\u7684\u5143\u7d20\u65f6\uff0c\u7f16\u8f91\u5668\u4e5f\u80fd\u63d0\u4f9b\u652f\u6301\uff1a \u6ca1\u6709\u7c7b\u578b\uff0c\u8fd9\u79cd\u652f\u6301\u51e0\u4e4e\u4e0d\u53ef\u80fd\u5b9e\u73b0\u3002 \u6ce8\u610f\uff0c\u53d8\u91cf item \u662f\u5217\u8868 items \u91cc\u7684\u5143\u7d20\u3002 \u800c\u4e14\uff0c\u7f16\u8f91\u5668\u4ecd\u7136\u628a\u5b83\u8bc6\u522b\u4e3a str \uff0c\u5e76\u63d0\u4f9b\u76f8\u5173\u652f\u6301\u3002","title":"\u5217\u8868"},{"location":"python-types/#_9","text":"\u58f0\u660e tuple \u548c set \u7684\u65b9\u6cd5\u4e5f\u4e00\u6837\uff1a Python 3.6 and above Python 3.9 and above from typing import Set , Tuple def process_items ( items_t : Tuple [ int , int , str ], items_s : Set [ bytes ]): return items_t , items_s def process_items ( items_t : tuple [ int , int , str ], items_s : set [ bytes ]): return items_t , items_s \u5373\uff1a items_t \u53d8\u91cf\u662f\u5305\u542b 3 \u4e2a\u5143\u7d20\u7684 tuple \uff0c\u5206\u522b\u662f int \u3001 int \u548c str \u3002 items_s \u53d8\u91cf\u662f set \uff0c\u5176\u4e2d\u6bcf\u4e2a\u5143\u7d20\u7684\u7c7b\u578b\u90fd\u662f bytes \u3002","title":"\u5143\u7ec4\u548c\u96c6\u5408"},{"location":"python-types/#_10","text":"\u5b9a\u4e49 dict \u8981\u4f20\u5165 2 \u4e2a\u7528\u9017\u53f7\u5206\u9694\u7684\u5b50\u7c7b\u578b\u3002 \u7b2c\u4e00\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u952e\u3002 \u7b2c\u4e8c\u4e2a\u5b50\u7c7b\u578b\u58f0\u660e dict \u7684\u6240\u6709\u503c\uff1a Python 3.6 and above Python 3.9 and above from typing import Dict def process_items ( prices : Dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) def process_items ( prices : dict [ str , float ]): for item_name , item_price in prices . items (): print ( item_name ) print ( item_price ) \u5373\uff1a \u53d8\u91cf prices \u662f dict \uff1a dict \u7684\u952e\u7684\u7c7b\u578b\u662f str \uff08\u5143\u7d20\u540d\u79f0\uff09 dict \u7684\u503c\u7684\u7c7b\u578b\u662f float \uff08\u5143\u7d20\u4ef7\u683c\uff09","title":"\u5b57\u5178"},{"location":"python-types/#optional","text":"\u4f7f\u7528 Optional \u628a\u53d8\u91cf\u58f0\u660e\u4e3a str \u7b49\u7c7b\u578b\uff0c\u4f46\u8be5\u7c7b\u578b\u662f \u53ef\u9009\u7684 \uff0c\u56e0\u6b64\u4e5f\u53ef\u4ee5\u662f None : from typing import Optional def say_hi ( name : Optional [ str ] = None ): if name is not None : print ( f \"Hey { name } !\" ) else : print ( \"Hello World\" ) \u4f7f\u7528 Optional[str] \u66ff\u4ee3\u7b80\u5355\u7684 str \u53ef\u4ee5\u8ba9\u7f16\u8f91\u5668\u68c0\u6d4b\u503c\u7684\u7c7b\u578b\u5e94\u4e3a str \uff0c\u4f46\u4e5f\u53ef\u80fd\u4e3a None \u7684\u9519\u8bef\u3002","title":"Optional"},{"location":"python-types/#_11","text":"\u8fd9\u4e9b\u53ef\u4ee5\u5728\u65b9\u62ec\u53f7\u4e2d\u4f7f\u7528\u7c7b\u578b\u53c2\u6570\u7684\u7c7b\u578b\u79f0\u4e3a \u901a\u7528\u7c7b\u578b \u6216 Generics \uff0c\u4f8b\u5982\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above \u5217\u8868 ~ List \u5143\u7ec4 ~ Tuple \u96c6\u5408 ~ Set \u5b57\u5178 ~ Dict Union Optional ... \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u901a\u7528\u7c7b\u578b\uff08\u4f7f\u7528\u65b9\u62ec\u53f7\uff0c\u5e76\u5728\u5176\u4e2d\u4f7f\u7528\u7c7b\u578b\uff09\uff1a \u5217\u8868 ~ list \u5143\u7ec4 ~ tuple \u96c6\u5408 ~ set \u5b57\u5178 ~ dict \u4e0e Python 3.6 \u4e00\u6837\uff0c\u8981\u4ece typing \u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u7c7b\u578b\uff1a Union Optional ... \u53ef\u4ee5\u4f7f\u7528\u5185\u7f6e\u7c7b\u578b\u4f5c\u4e3a\u901a\u7528\u7c7b\u578b\uff08\u4f7f\u7528\u65b9\u62ec\u53f7\uff0c\u5e76\u5728\u5176\u4e2d\u4f7f\u7528\u7c7b\u578b\uff09\uff1a list tuple set dict \u4e0e Python 3.6 \u4e00\u6837\uff0c\u8981\u4ece typing \u6a21\u5757\u4e2d\u5bfc\u5165\u4ee5\u4e0b\u7c7b\u578b\uff1a Union Optional \uff08\u4e0e Python 3.6 \u4e00\u6837\uff09 ... \u5728 Python 3.10 \u4e2d\uff0c\u4f5c\u4e3a\u901a\u7528\u7c7b\u578b Union \u4e0e Optional \u7684\u5907\u9009\u65b9\u6848\uff0c\u53ef\u4ee5\u4f7f\u7528 \u5782\u76f4\u6761\uff08 | \uff09\u3002","title":"\u901a\u7528\u7c7b\u578b"},{"location":"python-types/#_12","text":"\u7c7b\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e3a\u53d8\u91cf\u7684\u7c7b\u578b\u3002 \u5047\u8bbe\u6709\u4e00\u4e2a\u5305\u542b name \u5c5e\u6027\u7684\u7c7b Person \uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u4e0b\u9762\uff0c\u628a\u53d8\u91cf\u7684\u7c7b\u578b\u58f0\u660e\u4e3a Person \uff1a class Person : def __init__ ( self , name : str ): self . name = name def get_person_name ( one_person : Person ): return one_person . name \u518d\u4e00\u6b21\uff0c\u83b7\u5f97\u4e86\u6240\u6709\u7684\u7f16\u8f91\u5668\u652f\u6301\uff1a","title":"\u7c7b\u4e3a\u7c7b\u578b"},{"location":"python-types/#pydantic","text":"Pydantic \u662f\u6267\u884c\u6570\u636e\u6821\u9a8c\u7684 Python \u5e93\u3002 \u53ef\u4ee5\u628a\u6570\u636e \u7ed3\u6784 \u58f0\u660e\u4e3a\u5305\u542b\u5c5e\u6027\u7684\u7c7b\u3002 \u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 \u63a5\u4e0b\u6765\uff0c\u7528\u4e00\u4e9b\u503c\u521b\u5efa\u7c7b\u5b9e\u4f8b\uff0cFastAPI \u4f1a\u6821\u9a8c\u8fd9\u4e9b\u503c\uff0c\uff08\u5728\u9700\u8981\u7684\u60c5\u51b5\u4e0b\uff09\u628a\u503c\u8f6c\u6362\u4e3a\u9002\u5f53\u7684\u7c7b\u578b\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u6240\u6709\u6570\u636e\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u8fd9\u4e2a\u5bf9\u8c61\u5c31\u53ef\u4ee5\u83b7\u5f97\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4e0b\u9762\u662f Pydantic \u5b98\u65b9\u6587\u6863\u4e2d\u7684\u793a\u4f8b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from datetime import datetime from typing import List , Union from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : Union [ datetime , None ] = None friends : List [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 from datetime import datetime from typing import Union from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : Union [ datetime , None ] = None friends : list [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 from datetime import datetime from pydantic import BaseModel class User ( BaseModel ): id : int name = \"John Doe\" signup_ts : datetime | None = None friends : list [ int ] = [] external_data = { \"id\" : \"123\" , \"signup_ts\" : \"2017-06-01 12:22\" , \"friends\" : [ 1 , \"2\" , b \"3\" ], } user = User ( ** external_data ) print ( user ) # > User id=123 name='John Doe' signup_ts=datetime.datetime(2017, 6, 1, 12, 22) friends=[1, 2, 3] print ( user . id ) # > 123 \u8bf4\u660e \u8fdb\u4e00\u6b65\u4e86\u89e3 Pydantic\uff0c\u8bf7\u53c2\u9605\u6b64\u6587\u6863 \u3002 FastAPI \u5c31\u662f\u57fa\u4e8e Pydantic \u5f00\u53d1\u7684\u3002 \u7528\u6237\u6307\u5357 \u4e2d\u5217\u51fa\u4e86\u5f88\u591a\u793a\u4f8b\u3002","title":"Pydantic \u6a21\u578b"},{"location":"python-types/#fastapi","text":"FastAPI \u5145\u5206\u5229\u7528\u4e86\u7c7b\u578b\u63d0\u793a\u7684\u4f18\u52bf\u3002 FastAPI \u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u58f0\u660e\u53c2\u6570\u53ef\u4ee5\u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u652f\u6301 \u7c7b\u578b\u68c0\u67e5 \u2026\u2026 FastAPI \u8fd8\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\uff1a \u5b9a\u4e49\u53c2\u6570\u9700\u6c42 \uff1a\u58f0\u660e\u5bf9\u8bf7\u6c42\u8def\u5f84\u53c2\u6570\u3001\u67e5\u8be2\u53c2\u6570\u3001\u8bf7\u6c42\u5934\u3001\u8bf7\u6c42\u4f53\u3001\u4f9d\u8d56\u9879\u7b49\u7684\u9700\u6c42 \u8f6c\u6362\u6570\u636e \uff1a\u628a\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u8f6c\u6362\u4e3a\u9700\u8981\u7684\u7c7b\u578b \u6821\u9a8c\u6570\u636e \uff1a \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8bf7\u6c42\uff1a \u6570\u636e\u6821\u9a8c\u5931\u8d25\u65f6\uff0c\u81ea\u52a8\u751f\u6210 \u9519\u8bef\u4fe1\u606f \uff0c\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef \u4f7f\u7528 OpenAPI \u6587\u6863 API\uff1a \u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a \u542c\u4e0a\u53bb\u6709\u70b9\u62bd\u8c61\uff0c\u4e0d\u8fc7\u4e0d\u7528\u62c5\u5fc3\u3002 \u7528\u6237\u6307\u5357 \u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4e0a\u8ff0\u6240\u6709\u5185\u5bb9\u3002 \u6700\u91cd\u8981\u7684\u662f\uff0c\u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\uff0c\u53ea\u8981\u5728\u4e00\u4e2a\u5730\u65b9\u58f0\u660e\uff08\u4e0d\u7528\u6dfb\u52a0\u66f4\u591a\u7684\u7c7b\u3001\u88c5\u9970\u5668\u7b49\uff09\uff0c FastAPI \u5c31\u80fd\u5b8c\u6210\u5f88\u591a\u5de5\u4f5c\u3002 \u8bf4\u660e \u5b66\u4e60\u5b8c\u6559\u7a0b\u540e\uff0c\u5982\u679c\u60f3\u4e86\u89e3\u66f4\u591a\u7c7b\u578b\u7684\u5185\u5bb9\uff0c mypy \u7684 \u901f\u67e5\u8868 \u975e\u5e38\u4e0d\u9519\u3002","title":"FastAPI \u4e2d\u7684\u7c7b\u578b\u63d0\u793a"},{"location":"release-notes-cn/","text":"\u4e2d\u6587\u5b98\u6863 - \u66f4\u65b0\u65e5\u5fd7 \u00b6 2022-12-10 \u00b6 \u4e3b\u8981\u66f4\u65b0 \u00b6 FastAPI \u6587\u6863\u7248\u672c\u540c\u6b65\u81f3 0.88.0\u3002 \u65b0\u589e\u7ffb\u8bd1 \u00b6 \u6dfb\u52a0 \u9ad8\u7ea7\u7528\u6237\u6307\u5357/generate-clients.md\u3002 \u6dfb\u52a0 \u90e8\u7f72/server-workers.md\u3002 \u6dfb\u52a0 \u90e8\u7f72/concepts.md\u3002 \u6dfb\u52a0 alternatives.md\u3002 \u6dfb\u52a0 contributing.md\u3002 \u6dfb\u52a0 generate-clients.md\u3002 \u66f4\u65b0\u7ffb\u8bd1 \u00b6 \u66f4\u65b0 testing.md\u3002 \u66f4\u65b0 body-nested-models.md\u3002 \u66f4\u65b0 path-operation-configuration.md\u3002 \u66f4\u65b0 query-params-str-validations.md\u3002 \u66f4\u65b0 body-fields.md\u3002 \u4fee\u590d\u9ad8\u7ea7\u7528\u6237\u6307\u5357/\u4e2d\u95f4\u4ef6\u4e2d\u7684\u65ad\u53e5\u9519\u8bef\u3002 \u529f\u80fd\u6027\u4fee\u590d \u00b6 \u4fee\u590d\u5931\u6548\u7684\u5916\u90e8\u94fe\u63a5\u3002 \u4fee\u590d\u56fe\u7247\u94fe\u63a5\u3002 \u66f4\u65b0\u4ee3\u7801\u793a\u4f8b\uff0c\u540c\u6b65\u4e86\u65b0\u7248\u6587\u6863\u4e2d Python 3.6\u30013.9 \u548c 3.10 \u7684\u793a\u4f8b\u4ee3\u7801\u3002 \u683c\u5f0f\u8c03\u6574 \u00b6 \u628a \u659c\u4f53 \u4e2d\u6587\u7684\u683c\u5f0f\u6539\u4e3a \u7c97\u4f53 \u3002 \u9057\u7559\u95ee\u9898 \u00b6 extra-models.md \u4e2d\u7684 Union in Python 3.10 \u5f85\u7ffb\u8bd1 2021-12-21 \u00b6 \u5df2\u77e5\u95ee\u9898\uff0c\u670d\u52a1\u5668\u4e0a\u7684\u56fe\u7247\u4e0d\u80fd\u6b63\u5e38\u663e\u793a \u4f18\u5316\u4e86\u5bfc\u822a\u6761\u7684\u663e\u793a\u6548\u679c \u6dfb\u52a0\u4e86 FastAPI \u5b98\u6863\u4e2d\u6587\u7248\u8bf4\u660e 2021-12-17 \u00b6 \u4f18\u5316\u4e86\u6587\u6863\u4e2d\u7684\u4e00\u4e9b\u82f1\u6587\u62fc\u5199\u9519\u8bef\u3002 \u66f4\u65b0\u4e86 GraphQL \u7684\u6587\u6863\u3002 \u53bb\u6389\u4e86 \u7279\u6027 \u4e00\u7ae0\u4e2d\u6ca1\u6709\u4f7f\u7528\u7684\u5bfc\u5165\u8bed\u53e5\uff0c from typing import List, Dict \u3002 \u5220\u9664 \u8bf7\u6c42\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u6709\u5173 \u622a\u81f3 2019 \u5e74 4 \u6708 14 \u65e5\uff0cSwagger UI \u4e0d\u652f\u6301\u5728\u540c\u4e00\u4e2a\u8868\u5355\u5b57\u6bb5\u4e2d\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u7684\u5185\u5bb9\uff0c\u76ee\u524d\uff0cSwagger UI \u5df2\u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u4fee\u590d \u8bf7\u6c42\u4f53-\u591a\u4e2a\u53c2\u6570 - \u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570 \u4e2d\u4ee3\u7801\u793a\u4f8b\u7684\u9ad8\u4eae\u9519\u8bef\uff0c\u5e94\u8be5\u662f q: Optional[str] = None \u8fd9\u884c\u3002","title":"\u4e2d\u6587\u5b98\u6863 - \u66f4\u65b0\u65e5\u5fd7"},{"location":"release-notes-cn/#-","text":"","title":"\u4e2d\u6587\u5b98\u6863 - \u66f4\u65b0\u65e5\u5fd7"},{"location":"release-notes-cn/#2022-12-10","text":"","title":"2022-12-10"},{"location":"release-notes-cn/#_1","text":"FastAPI \u6587\u6863\u7248\u672c\u540c\u6b65\u81f3 0.88.0\u3002","title":"\u4e3b\u8981\u66f4\u65b0"},{"location":"release-notes-cn/#_2","text":"\u6dfb\u52a0 \u9ad8\u7ea7\u7528\u6237\u6307\u5357/generate-clients.md\u3002 \u6dfb\u52a0 \u90e8\u7f72/server-workers.md\u3002 \u6dfb\u52a0 \u90e8\u7f72/concepts.md\u3002 \u6dfb\u52a0 alternatives.md\u3002 \u6dfb\u52a0 contributing.md\u3002 \u6dfb\u52a0 generate-clients.md\u3002","title":"\u65b0\u589e\u7ffb\u8bd1"},{"location":"release-notes-cn/#_3","text":"\u66f4\u65b0 testing.md\u3002 \u66f4\u65b0 body-nested-models.md\u3002 \u66f4\u65b0 path-operation-configuration.md\u3002 \u66f4\u65b0 query-params-str-validations.md\u3002 \u66f4\u65b0 body-fields.md\u3002 \u4fee\u590d\u9ad8\u7ea7\u7528\u6237\u6307\u5357/\u4e2d\u95f4\u4ef6\u4e2d\u7684\u65ad\u53e5\u9519\u8bef\u3002","title":"\u66f4\u65b0\u7ffb\u8bd1"},{"location":"release-notes-cn/#_4","text":"\u4fee\u590d\u5931\u6548\u7684\u5916\u90e8\u94fe\u63a5\u3002 \u4fee\u590d\u56fe\u7247\u94fe\u63a5\u3002 \u66f4\u65b0\u4ee3\u7801\u793a\u4f8b\uff0c\u540c\u6b65\u4e86\u65b0\u7248\u6587\u6863\u4e2d Python 3.6\u30013.9 \u548c 3.10 \u7684\u793a\u4f8b\u4ee3\u7801\u3002","title":"\u529f\u80fd\u6027\u4fee\u590d"},{"location":"release-notes-cn/#_5","text":"\u628a \u659c\u4f53 \u4e2d\u6587\u7684\u683c\u5f0f\u6539\u4e3a \u7c97\u4f53 \u3002","title":"\u683c\u5f0f\u8c03\u6574"},{"location":"release-notes-cn/#_6","text":"extra-models.md \u4e2d\u7684 Union in Python 3.10 \u5f85\u7ffb\u8bd1","title":"\u9057\u7559\u95ee\u9898"},{"location":"release-notes-cn/#2021-12-21","text":"\u5df2\u77e5\u95ee\u9898\uff0c\u670d\u52a1\u5668\u4e0a\u7684\u56fe\u7247\u4e0d\u80fd\u6b63\u5e38\u663e\u793a \u4f18\u5316\u4e86\u5bfc\u822a\u6761\u7684\u663e\u793a\u6548\u679c \u6dfb\u52a0\u4e86 FastAPI \u5b98\u6863\u4e2d\u6587\u7248\u8bf4\u660e","title":"2021-12-21"},{"location":"release-notes-cn/#2021-12-17","text":"\u4f18\u5316\u4e86\u6587\u6863\u4e2d\u7684\u4e00\u4e9b\u82f1\u6587\u62fc\u5199\u9519\u8bef\u3002 \u66f4\u65b0\u4e86 GraphQL \u7684\u6587\u6863\u3002 \u53bb\u6389\u4e86 \u7279\u6027 \u4e00\u7ae0\u4e2d\u6ca1\u6709\u4f7f\u7528\u7684\u5bfc\u5165\u8bed\u53e5\uff0c from typing import List, Dict \u3002 \u5220\u9664 \u8bf7\u6c42\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u6709\u5173 \u622a\u81f3 2019 \u5e74 4 \u6708 14 \u65e5\uff0cSwagger UI \u4e0d\u652f\u6301\u5728\u540c\u4e00\u4e2a\u8868\u5355\u5b57\u6bb5\u4e2d\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u7684\u5185\u5bb9\uff0c\u76ee\u524d\uff0cSwagger UI \u5df2\u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u4fee\u590d \u8bf7\u6c42\u4f53-\u591a\u4e2a\u53c2\u6570 - \u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570 \u4e2d\u4ee3\u7801\u793a\u4f8b\u7684\u9ad8\u4eae\u9519\u8bef\uff0c\u5e94\u8be5\u662f q: Optional[str] = None \u8fd9\u884c\u3002","title":"2021-12-17"},{"location":"release-notes/","text":"\u66f4\u65b0\u65e5\u5fd7 \u00b6 \u6700\u8fd1\u66f4\u65b0 \u00b6 \ud83d\udcdd Update docs/tutorial/dependencies/classes-as-dependencies : Add type of query parameters in a description of Classes as dependencies . PR #4015 by @0417taehyun . \ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/path-params.md . PR #3548 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/query-params.md . PR #3556 by @Smlep . \ud83c\udf10 Add Turkish translation for docs/python-types.md . PR #3926 by @BilalAlpaslan . 0.70.0 \u00b6 This release just upgrades Starlette to the latest version, 0.16.0 , which includes several bug fixes and some small breaking changes. These last three consecutive releases are independent so that you can migrate gradually : First to FastAPI 0.68.2 , with no breaking changes, but upgrading all the sub-dependencies. Next to FastAPI 0.69.0 , which upgrades Starlette to 0.15.0 , with AnyIO support, and a higher chance of having breaking changes in your code. Finally to FastAPI 0.70.0 , just upgrading Starlette to the latest version 0.16.0 with additional bug fixes. This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728 Breaking Changes - Upgrade \u00b6 \u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @tiangolo . Also upgrades the ranges of optional dependencies: \"jinja2 >=2.11.2,<4.0.0\" \"itsdangerous >=1.1.0,<3.0.0\" 0.69.0 \u00b6 Breaking Changes - Upgrade \u00b6 This release adds support for Trio . \u2728 It upgrades the version of Starlette to 0.15.0 , now based on AnyIO , and the internal async components in FastAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio . You can read the docs about running FastAPI with Trio using Hypercorn . This release also removes graphene as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry . You can read the new FastAPI with GraphQL docs . Features \u00b6 \u2728 Add support for Trio via AnyIO, upgrading Starlette to 0.15.0 . PR #3372 by @graingert . \u2796 Remove graphene as an optional dependency. PR #4007 by @tiangolo . Docs \u00b6 \ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @tiangolo . \u270f Fix typos in Deployment Guide. PR #3975 by @ghandic . \ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7 . \ud83d\udcdd Add external link to article: Deploying ML Models as API Using FastAPI and Heroku. PR #3904 by @kaustubhgupta . \u270f Fix typo in file paths in docs/en/docs/contributing.md . PR #3752 by @NinaHwang . \u270f Fix a typo in docs/en/docs/advanced/path-operation-advanced-configuration.md and docs/en/docs/release-notes.md . PR #3750 by @saintmalik . \u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura . \u270f Fix typo in docs/en/docs/help-fastapi.md . PR #3760 by @jaystone776 . \u270f Fix typo about file path in docs/en/docs/tutorial/bigger-applications.md . PR #3285 by @HolyDorus . \u270f Re-word to clarify test client in docs/en/docs/tutorial/testing.md . PR #3382 by @Bharat123rox . \ud83d\udcdd Fix incorrect highlighted code. PR #3325 by @paxcodes . \ud83d\udcdd Add external link to article: How-to deploy FastAPI app to Heroku. PR #3241 by @Jarmos-san . \u270f Fix typo (mistranslation) in docs/en/docs/advanced/templates.md . PR #3211 by @oerpli . \ud83d\udcdd Remove note about (now supported) feature from Swagger UI in docs/en/docs/tutorial/request-files.md . PR #2803 by @gsganden . \u270f Fix typo re-word in docs/tutorial/handling-errors.md . PR #2700 by @graue70 . Translations \u00b6 \ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay . \ud83c\udf10 Add Turkish translation for docs/fastapi-people.md . PR #3848 by @BilalAlpaslan . Internal \u00b6 \ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani . \u270f Fix link in Japanese docs for docs/ja/docs/deployment/docker.md . PR #3245 by @utamori . \ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert . \ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield . \ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @tiangolo . \ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @tiangolo . 0.68.2 \u00b6 This release has no breaking changes . \ud83c\udf89 It upgrades the version ranges of sub-dependencies to allow applications using FastAPI to easily upgrade them. Soon there will be a new FastAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release. Features \u00b6 \u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis . \u2796 Do not require backports in Python >= 3.7. PR #1880 by @FFY00 . \u2b06 Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin . \u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex . Docs \u00b6 \ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @tiangolo . \ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @tiangolo . \ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Turkish translation for docs/features.md . PR #1950 by @ycd . \ud83c\udf10 Add Turkish translation for docs/benchmarks.md . PR #2729 by @Telomeraz . \ud83c\udf10 Add Turkish translation for docs/index.md . PR #1908 by @ycd . \ud83c\udf10 Add French translation for docs/tutorial/body.md . PR #3671 by @Smlep . \ud83c\udf10 Add French translation for deployment/docker.md . PR #3694 by @rjNemo . \ud83c\udf10 Add Portuguese translation for docs/tutorial/path-params.md . PR #3664 by @FelipeSilva93 . \ud83c\udf10 Add Portuguese translation for docs/deployment/https.md . PR #3754 by @lsglucas . \ud83c\udf10 Add German translation for docs/features.md . PR #3699 by @mawassk . Internal \u00b6 \u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @tiangolo . \u2b06\ufe0f Upgrade development autoflake , supporting multi-line imports. PR #3988 by @tiangolo . \u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3986 by @github-actions[bot] . \ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic . \u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik . \u2728 Add Deepset Sponsorship. PR #3976 by @tiangolo . \ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @tiangolo . \ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @tiangolo . 0.68.1 \u00b6 \u2728 Add support for read_with_orm_mode , to support SQLModel relationship attributes. PR #3757 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Portuguese translation of docs/fastapi-people.md . PR #3461 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md . PR #3492 by @jaystone776 . \ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @tiangolo . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/sub-dependencies.md . PR #3491 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/advanced/index.md . PR #3460 by @ComicShrimp . \ud83c\udf10 Portuguese translation of docs/async.md . PR #1330 by @Serrones . \ud83c\udf10 Add French translation for docs/async.md . PR #3416 by @Smlep . Internal \u00b6 \u2728 Add GitHub Action: Notify Translations. PR #3715 by @tiangolo . \u2728 Update computation of FastAPI People and sponsors. PR #3714 by @tiangolo . \u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @tiangolo . \ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @tiangolo . \u2795 Update docs library to include sources in Markdown. PR #3648 by @tiangolo . \u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex . \ud83d\udc65 Update FastAPI People. PR #3642 by @github-actions[bot] . 0.68.0 \u00b6 Features \u00b6 \u2728 Add support for extensions and updates to the OpenAPI schema in each path operation . New docs: FastAPI Path Operation Advanced Configuration - OpenAPI Extra . Initial PR #1922 by @edouardlp . \u2728 Add additional OpenAPI metadata parameters to FastAPI class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs . Initial PR #1812 by @dkreeft . \u2728 Add description parameter to all the security scheme classes, e.g. APIKeyQuery(name=\"key\", description=\"A very cool API key\") . PR #1757 by @hylkepostma . \u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @tiangolo . \u2728 Import and re-export data structures from Starlette, used by Request properties, on fastapi.datastructures . Initial PR #1872 by @jamescurtin . Docs \u00b6 \ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight . Translations \u00b6 \ud83c\udf10 Add Russian translation for docs/python-types.md . PR #3039 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/index.md . PR #3489 by @jaystone776 . \ud83c\udf10 Add Russian translation for docs/external-links.md . PR #3036 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/global-dependencies.md . PR #3493 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/deployment/versions.md . PR #3618 by @lsglucas . \ud83c\udf10 Add Japanese translation for docs/tutorial/security/oauth2-jwt.md . PR #3526 by @sattosan . Internal \u00b6 \u2705 Add the docs_src directory to test coverage and update tests. Initial PR #1904 by @Kludex . \ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @tiangolo . \ud83d\udcdd Add official FastAPI Twitter to docs: @fastapi . PR #3578 by @tiangolo . 0.67.0 \u00b6 Features \u00b6 \u2728 Add support for dataclasses in request bodies and response_model . New documentation: Advanced User Guide - Using Dataclasses . PR #3577 by @tiangolo . \u2728 Support dataclasses in responses. PR #3576 by @tiangolo , continuation from initial PR #2722 by @amitlissack . Docs \u00b6 \ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR #2839 by @aitoehigie . \u270f Fix code highlighted line in: body-nested-models.md . PR #3463 by @jaystone776 . \u270f Fix typo in body-nested-models.md . PR #3462 by @jaystone776 . \u270f Fix typo \"might me\" -> \"might be\" in docs/en/docs/tutorial/schema-extra-example.md . PR #3362 by @dbrakman . \ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR #3271 by @ShahriyarR . \ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR #2974 by @rodrigo-arenas . \u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex . \ud83d\udcdd Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @tiangolo . \ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @tiangolo . Internal \u00b6 \ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex . \ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @tiangolo . \ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @tiangolo . \ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @tiangolo . 0.66.1 \u00b6 Translations \u00b6 \ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark . \ud83c\udf10 Add Portuguese translation for docs/tutorial/security/index.md . PR #3507 by @oandersonmagalhaes . \ud83c\udf10 Add Portuguese translation for docs/deployment/index.md . PR #3337 by @lsglucas . Internal \u00b6 \ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to >=6.2.4,<7.0.0 and pytest-cov to >=2.12.0,<3.0.0 . Initial PR #2790 by @graingert . \u2b06\ufe0f Upgrade python-jose dependency to >=3.3.0,<4.0.0 for tests. PR #3468 by @tiangolo . 0.66.0 \u00b6 Features \u00b6 \u2728 Allow setting the response_class to RedirectResponse or FileResponse and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others , in RedirectResponse and in FileResponse . PR #3457 by @tiangolo . Fixes \u00b6 \ud83d\udc1b Fix include/exclude for dicts in jsonable_encoder . PR #2016 by @Rubikoid . \ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson . Translations \u00b6 \ud83c\udf10 Add Spanish translation for tutorial/query-params.md . PR #2243 by @mariacamilagl . \ud83c\udf10 Add Spanish translation for advanced/response-directly.md . PR #1253 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/additional-status-codes.md . PR #1252 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/path-operation-advanced-configuration.md . PR #1251 by @jfunez . 0.65.3 \u00b6 Fixes \u00b6 \u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118 . It should allow upgrading FastAPI applications with clients that send JSON data without a Content-Type header. And there's still protection against CSRFs. PR #3456 by @tiangolo . Translations \u00b6 \ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge . \ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl . \ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl . \ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776 . \ud83c\udf10 Add Chinese translation for FastAPI People. PR #3112 by @hareru . \ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep . \ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep . \ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep . \ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo . \ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh . \ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776 . Internal \u00b6 \ud83d\udc65 Update FastAPI People. PR #3450 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #3319 by @github-actions[bot] . \u2b06 Upgrade docs development dependency on typer-cli to >=0.0.12 to fix conflicts. PR #3429 by @tiangolo . 0.65.2 \u00b6 Security fixes \u00b6 \ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang . This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers. In versions lower than 0.65.2 , FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json ). So, a request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. But requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests . So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. See CVE-2021-32677 for more details. Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12 Internal \u00b6 \ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @tiangolo . \ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @tiangolo . \ud83d\udd27 Add new banner sponsor badge for FastAPI courses bundle. PR #3288 by @tiangolo . \ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @tiangolo . 0.65.1 \u00b6 Security fixes \u00b6 \ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510 . PR #3213 by @tiangolo . 0.65.0 \u00b6 Breaking Changes - Upgrade \u00b6 \u2b06\ufe0f Upgrade Starlette to 0.14.2 , including internal UJSONResponse migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner . Translations \u00b6 \ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer . Internal \u00b6 \ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @tiangolo . \u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @tiangolo . \ud83d\udc1b Fix docs script to generate a new translation language with overrides boilerplate. PR #3202 by @tiangolo . \u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3189 by @github-actions[bot] . \ud83d\udd0a Update FastAPI People to allow better debugging. PR #3188 by @tiangolo . 0.64.0 \u00b6 Features \u00b6 \u2728 Add support for adding multiple examples in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data . Initial PR #1267 by @austinorr . Fixes \u00b6 \ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @tiangolo . \ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @tiangolo . \ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu . Docs \u00b6 \ud83d\udcdd Add link to article in Russian \"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler . \ud83d\udcdd Add external link to blog post \"Authenticate Your FastAPI App with Auth0\". PR #2172 by @dompatmore . \ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR #2557 by @davidefiocco . \ud83d\udcdd Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR #2515 by @vjanz . \u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen . \u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00 . \u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni . \ud83d\udcdd Add external link to \"FastAPI for Flask Users\". PR #2280 by @amitness . Translations \u00b6 \ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109 . \ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang . \ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders . \ud83c\udf10 Add French translation for FastAPI People. PR #2232 by @JulianMaurin . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders . \ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev . \ud83d\udc65 Update FastAPI People. PR #3031 by @github-actions[bot] . \ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv . \ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9 . \ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018 . \ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing . \ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo . \ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947 . \ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi . \ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi . \ud83c\udf10 Add Japanese translation for FastAPI People. PR #2254 by @tokusumi . \ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc . Internal \u00b6 \ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @tiangolo . \ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2880 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #2739 by @github-actions[bot] . \ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @tiangolo . \ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @tiangolo . \ud83d\udd27 Add FastAPI user survey banner. PR #2623 by @tiangolo . \ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @tiangolo . \ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Sponsors order. PR #2620 by @tiangolo . \ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2590 by @github-actions[bot] . 0.63.0 \u00b6 Features \u00b6 \u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @tiangolo . Breaking changes \u00b6 \u2b06\ufe0f Upgrade Uvicorn when installing fastapi[all] to the latest version including uvloop , the new range is uvicorn[standard] >=0.12.0,<0.14.0 . PR #2548 by @tiangolo . Fixes \u00b6 \ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with callbacks parameters and when using the OAuth2 class. Docs \u00b6 \ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @tiangolo . \ud83d\udcdd Update title for Deta tutorial. PR #2466 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2454 by @github-actions[bot] . Translations \u00b6 \ud83c\udf10 Add docs lang selector widget. PR #2542 by @tiangolo . \ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv . \ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo . \ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders . \ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031 . Internal \u00b6 \ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @tiangolo . \u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @tiangolo . \u2728 Add newsletter: FastAPI and friends. PR #2509 by @tiangolo . \u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @tiangolo . \ud83d\udd27 Add issue template configs. PR #2476 by @tiangolo . 0.62.0 \u00b6 Features \u00b6 \u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @tiangolo . Up to now, for several options, the only way to apply them to a group of path operations was in include_router . That works well, but the call to app.include_router() or router.include_router() is normally done in another file. That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together. Setting options in include_router still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the APIRouter . In FastAPI This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . dependencies : to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication. callbacks : OpenAPI callbacks that apply to all the path operations . deprecated : to mark all the path operations as deprecated. \ud83e\udd37 include_in_schema : to allow excluding all the path operations from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations . For example: from fastapi import FastAPI , Depends async def some_dependency (): return app = FastAPI ( dependencies = [ Depends ( some_dependency )]) In APIRouter This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . For example, it's not needed to set it explicitly when creating callbacks . dependencies : to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with include_router . callbacks : OpenAPI callbacks that apply to all the path operations in this router. deprecated : to mark all the path operations in a router as deprecated. include_in_schema : to allow excluding all the path operations in a router from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations in a router. prefix : to set the path prefix for a router. Up to now, this was only possible when calling include_router . tags : OpenAPI tags to apply to all the path operations in this router. For example: from fastapi import APIRouter , Depends async def some_dependency (): return router = APIRouter ( prefix = \"/users\" , dependencies = [ Depends ( some_dependency )]) In include_router Most of these settings are now supported in APIRouter , which normally lives closer to the related code, so it is recommended to use APIRouter when possible. But include_router is still useful to, for example, adding options (like dependencies , prefix , and tags ) when including a third party router, or a generic router that is shared between several projects. This PR allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and FastAPI . deprecated : to mark all the path operations in a router as deprecated in OpenAPI. include_in_schema : to allow disabling all the path operations from showing in the OpenAPI schema. callbacks : OpenAPI callbacks that apply to all the path operations in this router. Note: all the previous parameters are still there, so it's still possible to declare dependencies in include_router . Breaking Changes \u00b6 PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios: If you are testing the generated OpenAPI (you shouldn't, FastAPI already tests it extensively for you): the order for tags in include_router and path operations was updated for consistency, but it's a simple order change. If you have advanced custom logic to access each route's route.response_class , or the router.default_response_class , or the app.default_response_class : the default value for response_class in APIRoute and for default_response_class in APIRouter and FastAPI is now a DefaultPlaceholder used internally to handle and solve default values and overrides. The actual response class inside the DefaultPlaceholder is available at route.response_class.value . Docs \u00b6 PR #2434 (above) includes new or updated docs: Advanced User Guide - OpenAPI Callbacks . Tutorial - Bigger Applications . Tutorial - Dependencies - Dependencies in path operation decorators . Tutorial - Dependencies - Global Dependencies . \ud83d\udcdd Add FastAPI monitoring blog post to External Links. PR #2324 by @louisguitton . \u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @tiangolo . \u2728 Add Discord chat. PR #2322 by @tiangolo . \ud83d\udcdd Fix image links for sponsors. PR #2304 by @tiangolo . Translations \u00b6 \ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031 . \ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv . \ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu . Internal \u00b6 \ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @tiangolo . \ud83c\udf71 Update sponsor logos. PR #2418 by @tiangolo . \ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @tiangolo . \ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @tiangolo . \u2728 Add silver sponsor WeTransfer. PR #2338 by @tiangolo . \u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @tiangolo . 0.61.2 \u00b6 Fixes \u00b6 \ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold . \ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo . \u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex . Docs \u00b6 \u270f\ufe0f Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl . \u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy . \u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd . \u270f Fix typo in docs. PR #2179 by @ammarasmro . \ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd . \u270f Fix typos and add rewording in docs. PR #2159 by @nukopy . \ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy . \ud83d\udcdd Fix renamed parameter content_type typo. PR #2135 by @TeoZosa . \u270f Fix minor typos in docs. PR #2122 by @TeoZosa . \u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda . \u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles . \ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust . \u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd . \ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell . \ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2282 by @github-actions[bot] . \u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl . \ud83d\udcdd Add articles to External Links. PR #2247 by @tiangolo . \u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho . Translations \u00b6 \ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031 . \ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones . \ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi . \ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki . \ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi . \ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki . \ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz . \ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro . \ud83c\udf10 Add Japanese translation for Help FastAPI. PR #1692 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi . \ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones . \ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi . \ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders . \ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones . Internal \u00b6 \ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @tiangolo . \ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @tiangolo . \u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @tiangolo . \u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @tiangolo . \ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2202 by @github-actions[bot] . \u267b\ufe0f Update FastAPI People GitHub Action to send the PR as github-actions. PR #2201 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Action config, run monthly. PR #2199 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependencies. PR #2197 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action when there's nothing to change. PR #2196 by @tiangolo . \ud83d\udc65 Add new section FastAPI People. PR #2195 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @tiangolo . \ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @tiangolo . \ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @tiangolo . \ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @tiangolo . \ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @tiangolo . \ud83d\udc77 Add GitHub Action Latest Changes. PR #2160 . \ud83d\udc77 Add GitHub Action Label Approved. PR #2161 . 0.61.1 \u00b6 Fixes \u00b6 Fix issues using jsonable_encoder with SQLAlchemy models directly. PR #1987 . Docs \u00b6 Fix typo in NoSQL docs. PR #1980 by @facundojmaero . Translations \u00b6 Add translation for main page to Japanese PR #1571 by @ryuckel . Initialize French translations. PR #1975 by @JulianMaurin-BM . Initialize Turkish translations. PR #1905 by @ycd . Internal \u00b6 Improve docs maintainability by updating hl_lines syntax to use ranges. PR #1863 by @la-mar . 0.61.0 \u00b6 Features \u00b6 Add support for injecting HTTPConnection (as Request and WebSocket ). Useful for sharing app state in dependencies. PR #1827 by @nsidnev . Export WebSocketDisconnect and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss . Breaking Changes \u00b6 Require Pydantic > 1.0.0 . Remove support for deprecated Pydantic 0.32.2 . This improves maintainability and allows new features. In FastAPI and APIRouter : Remove path operation decorators related/deprecated parameter response_model_skip_defaults (use response_model_exclude_unset instead). Change path operation decorators parameter default for response_model_exclude from set() to None (as is in Pydantic). In encoders.jsonable_encoder : Remove deprecated skip_defaults , use instead exclude_unset . Set default of exclude from set() to None (as is in Pydantic). PR #1862 . In encoders.jsonable_encoder remove parameter sqlalchemy_safe . It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's orm_mode as described in the tutorial: SQL (Relational) Databases . PR #1864 . Docs \u00b6 Add link to the course by TestDriven.io: Test-Driven Development with FastAPI and Docker . PR #1860 . Fix empty log message in docs example about handling errors. PR #1815 by @manlix . Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause . Internal \u00b6 Add Flake8 linting. Original PR #1774 by @MashhadiNima . Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853 . 0.60.2 \u00b6 Fix typo in docs for query parameters. PR #1832 by @ycd . Add docs about Async Tests . PR #1619 by @empicano . Raise an exception when using form data ( Form , File ) without having python-multipart installed. Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies. It also detects if the correct package python-multipart is installed instead of the incorrect multipart (both importable as multipart ). PR #1851 based on original PR #1627 by @chrisngyn , @YKo20010 , @kx-chen . Re-enable Gitter releases bot. PR #1831 . Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings . Fix typo in tutorial about behind a proxy. PR #1807 by @toidi . Fix typo in Portuguese docs. PR #1795 by @izaguerreiro . Add translations setup for Ukrainian. PR #1830 . Add external link Build And Host Fast Data Science Applications Using FastAPI . PR #1786 by @Kludex . Fix encoding of Pydantic models that inherit from others models with custom json_encoders . PR #1769 by @henrybetts . Simplify and improve jsonable_encoder . PR #1754 by @MashhadiNima . Simplify internal code syntax in several points. PR #1753 by @uriyyo . Improve internal typing, declare Optional parameters. PR #1731 by @MashhadiNima . Add external link Deploy FastAPI on Azure App Service to docs. PR #1726 by @windson . Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld . Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie . Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra . Fix typos in docs for security. PR #1678 by @nilslindemann . Fix typos in docs for dependencies. PR #1675 by @nilslindemann . Fix type annotation for **extra parameters in FastAPI . PR #1659 by @bharel . Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia . Remove docs preview comment from each commit. PR #1826 . Update GitHub context extraction for Gitter notification bot. PR #1766 . 0.60.1 \u00b6 Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764 . Use OS preference theme for online docs. PR #1760 by @adriencaccia . Upgrade Starlette to version 0.13.6 to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26 . Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249 . PR #1763 . Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761 . Update GitHub Actions, refactor Gitter bot. PR #1746 . 0.60.0 \u00b6 Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740 . Add custom GitHub Action to get artifact with docs preview. PR #1739 . Add new GitHub Actions to preview docs from PRs. PR #1738 . Add XML test coverage to support GitHub Actions. PR #1737 . Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736 . Add GitHub Actions for CI, move from Travis. PR #1735 . Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3 . 0.59.0 \u00b6 Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2 . Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux . Fix/re-enable search bar in docs. PR #1703 . Auto-generate a \"server\" in OpenAPI servers when there's a root_path instead of prefixing all the paths : Add a new parameter for FastAPI classes: root_path_in_servers to disable the auto-generation of servers . New docs about root_path and servers in Additional Servers . Update OAuth2 examples to use a relative URL for tokenUrl=\"token\" to make sure those examples keep working as-is even when behind a reverse proxy. Initial PR #1596 by @rkbeatss . Fix typo/link in External Links. PR #1702 . Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/tiangolo/fastapi/pull/1701 . Add external link Machine learning model serving in Python using FastAPI and Streamlit to docs. PR #1669 by @davidefiocco . Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc . Improve support for tests in editor. PR #1699 . Pin dependencies. PR #1697 . Update isort to version 5.x.x. PR #1670 by @asheux . 0.58.1 \u00b6 Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi . Fix link in warning logs for openapi_prefix . PR #1611 by @bavaria95 . Fix bad link in docs. PR #1603 by @molto0504 . Add Vim temporary files to .gitignore for contributors using Vim. PR #1590 by @asheux . Fix typo in docs for sub-applications. PR #1578 by @schlpbch . Use Optional in all the examples in the docs. Original PR #1574 by @chrisngyn , @kx-chen , @YKo20010 . Updated and merged PR #1644 . Update tests and handling of response_model_by_alias . PR #1642 . Add translation to Chinese for Body - Fields - \u8bf7\u6c42\u4f53 - \u5b57\u6bb5 . PR #1569 by @waynerv . Update Chinese translation of main page. PR #1564 by @waynerv . Add translation to Chinese for Body - Multiple Parameters - \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 . PR #1532 by @waynerv . Add translation to Chinese for Path Parameters and Numeric Validations - \u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c . PR #1506 by @waynerv . Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638 . 0.58.0 \u00b6 Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577 . Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie . Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie . Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie . Fix Model for JSON Schema keyword not as a JSON Schema instead of a list. PR #1548 by @v-do . Add support for OpenAPI servers . PR #1547 by @mikaello . 0.57.0 \u00b6 Remove broken link from \"External Links\". PR #1565 by @victorphoenix3 . Update/fix docs for WebSockets with dependencies . Original PR #1540 by @ChihSeanHsu . Add support for Python's http.HTTPStatus in status_code parameters. PR #1534 by @retnikt . When using Pydantic models with __root__ , use the internal value in jsonable_encoder . PR #1524 by @patrickkwang . Update docs for path parameters. PR #1521 by @yankeexe . Update docs for first steps, links and rewording. PR #1518 by @yankeexe . Enable showCommonExtensions in Swagger UI to show additional validations like maxLength , etc. PR #1466 by @TiewKH . Make OAuth2PasswordRequestFormStrict importable directly from fastapi.security . PR #1462 by @RichardHoekstra . Add docs about Default response class . PR #1455 by @TezRomacH . Add note in docs about additional parameters response_model_exclude_defaults and response_model_exclude_none in Response Model . PR #1427 by @wshayes . Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi . Update and clarify testing function name. PR #1395 by @chenl . Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail . Upgrade Starlette version to 0.13.4 . PR #1361 by @rushton . Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha . Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags . PR #1348 by @thomas-maschler . Add basic setup for Russian translations. PR #1566 . Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv . Add __repr__ for path operation function parameter helpers (like Query , Depends , etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3 . 0.56.1 \u00b6 Add link to advanced docs from tutorial. PR #1512 by @kx-chen . Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka . Add translation to Chinese for Query Parameters and String Validations - \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c . PR #1500 by @waynerv . Add translation to Chinese for Request Body - \u8bf7\u6c42\u4f53 . PR #1492 by @waynerv . Add translation to Chinese for Help FastAPI - Get Help - \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 . PR #1465 by @waynerv . Add translation to Chinese for Query Parameters - \u67e5\u8be2\u53c2\u6570 . PR #1454 by @waynerv . Add translation to Chinese for Contributing - \u5f00\u53d1 - \u8d21\u732e . PR #1460 by @waynerv . Add translation to Chinese for Path Parameters - \u8def\u5f84\u53c2\u6570 . PR #1453 by @waynerv . Add official Microsoft project generator for serving spaCy with FastAPI and Azure Cognitive Skills to Project Generators . PR #1390 by @kabirkhan . Update docs in Python Types Intro to include info about Optional . Original PR #1377 by @yaegassy . Fix support for callable class dependencies with yield . PR #1365 by @mrosales . Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty . Add translation to Chinese for First Steps - \u7b2c\u4e00\u6b65 . PR #1323 by @waynerv . Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev . Optimize internal regex performance in get_path_param_names() . PR #1243 by @heckad . Remove *, from functions in docs where it's not needed. PR #1239 by @pankaj-giri . Start translations for Italian. PR #1557 by @csr . 0.56.0 \u00b6 Add support for ASGI root_path : Use root_path internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters. Add new root_path parameter for FastAPI applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter --root-path ). Deprecate openapi_prefix parameter in favor of the new root_path parameter. Add new/updated docs for Sub Applications - Mounts , without openapi_prefix (as it is now handled automatically). Add new/updated docs for Behind a Proxy , including how to setup a local testing proxy with Traefik and using root_path . Update docs for Extending OpenAPI with the new openapi_prefix parameter passed (internally generated from root_path ). Original PR #1199 by @iksteen . Update new issue templates and docs: Help FastAPI - Get Help . PR #1531 . Update GitHub action issue-manager. PR #1520 . Add new links: English articles : Real-time Notifications with Python and Postgres by Guillermo Cruz . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Using FastAPI with Django by Stavros Korokithakis . Introducing Dispatch by Netflix . Podcasts : Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . Talks : PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PR #1467 . Add translation to Chinese for Python Types Intro - Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb . PR #1197 by @waynerv . 0.55.1 \u00b6 Fix handling of enums with their own schema in path parameters. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1463 . 0.55.0 \u00b6 Allow enums to allow them to have their own schemas in OpenAPI. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1461 . Add links for funding through GitHub sponsors . PR #1425 . Update issue template for for questions. PR #1344 by @retnikt . Update warning about storing passwords in docs. PR #1336 by @skorokithakis . Fix typo. PR #1326 by @chenl . Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es . PR #1325 by @Serrones . Fix 2 typos in docs. PR #1324 by @waynerv . Update CORS docs, fix correct default of max_age=600 . PR #1301 by @derekbekoe . Add translation of main page to Portuguese . PR #1300 by @Serrones . Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt . Make sure the * in short features in the docs is consistent (after . ) in all languages. PR #1424 . Update order of execution for get_db in SQLAlchemy tutorial. PR #1293 by @bcb . Fix typos in Async docs. PR #1423 . 0.54.2 \u00b6 Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await . PR #1290 by @alvaropernas . Remove obsolete vote link. PR #1289 by @donhui . Allow disabling docs UIs by just disabling OpenAPI with openapi_url=None . New example in docs: Advanced: Conditional OpenAPI . PR #1421 . Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es . PR #1274 by @Serrones . Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o . PR #1259 by @marcosmmb . Allow using Unicode in MkDocs for translations. PR #1419 . Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n . PR #1250 by @jfunez . Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro . PR #1249 by @marcosmmb . Add translation to Portuguese for Features - Recursos . PR #1248 by @marcosmmb . Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n . PR #1244 by @MartinEliasQ . Add translation to Chinese for Deployment - \u90e8\u7f72 . PR #1203 by @RunningIkkyu . Add translation to Chinese for Tutorial - User Guide - Intro - \u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb . PR #1202 by @waynerv . Add translation to Chinese for Features - \u7279\u6027 . PR #1192 by @Dustyposa . Add translation for main page to Chinese PR #1191 by @waynerv . Update docs for project generation. PR #1287 . Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro) . PR #1237 by @mariacamilagl . Add Spanish translation for Caracter\u00edsticas (Features) . PR #1220 by @mariacamilagl . 0.54.1 \u00b6 Update database test setup. PR #1226 . Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin . 0.54.0 \u00b6 Fix grammatical mistakes in async docs. PR #1188 by @mickeypash . Add support for response_model_exclude_defaults and response_model_exclude_none : Deprecate the parameter include_none in jsonable_encoder and add the inverted exclude_none , to keep in sync with Pydantic. PR #1166 by @voegtlel . Add example about Testing a Database . Initial PR #1144 by @duganchen . Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215 . Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao . Add Python venv env to .gitignore . PR #1212 by @cassiobotaro . Start Portuguese translations. PR #1210 by @cassiobotaro . Update docs for Pydantic's Settings using a dependency with @lru_cache() . PR #1214 . Add first translation to Spanish FastAPI . PR #1201 by @mariacamilagl . Add docs about Settings and Environment Variables . Initial PR 1118 by @alexmitelman . 0.53.2 \u00b6 Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186 . Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack . Fix docs script to ensure languages are always sorted. PR #1189 . Start translations for Chinese. PR #1187 by @RunningIkkyu . Add docs for Schema Extra - Example . PR #1185 . 0.53.1 \u00b6 Fix included example after translations refactor. PR #1182 . Add docs example for example in Field . Docs at Body - Fields: JSON Schema extras . PR #1106 by @JohnPaton . Fix using recursive models in response_model . PR #1164 by @voegtlel . Add docs for Pycharm Debugging . PR #1096 by @youngquan . Fix typo in docs. PR #1148 by @PLNech . Update Windows development environment instructions. PR #1179 . 0.53.0 \u00b6 Update test coverage badge. PR #1175 . Add orjson to pip install fastapi[all] . PR #1161 by @michael0liver . Fix included example for GZipMiddleware . PR #1138 by @arimbr . Fix class name in docstring for OAuth2PasswordRequestFormStrict . PR #1126 by @adg-mh . Clarify function name in example in docs. PR #1121 by @tmsick . Add external link Apache Kafka producer and consumer with FastAPI and aiokafka to docs. PR #1112 by @iwpnd . Fix serialization when using by_alias or exclude_unset and returning data with Pydantic models. PR #1074 by @juhovh-aiven . Add Gitter chat to docs. PR #1061 by @aakashnand . Update and simplify translations docs. PR #1171 . Update development of FastAPI docs, set address to 127.0.0.1 to improve Windows support. PR #1169 by @mariacamilagl . Add support for docs translations. New docs: Development - Contributing: Docs: Translations . PR #1168 . Update terminal styles in docs and add note about Typer , the FastAPI of CLIs . PR #1139 . 0.52.0 \u00b6 Add new high-performance JSON response class using orjson . New docs: Custom Response - HTML, Stream, File, others: ORJSONResponse . PR #1065 . 0.51.0 \u00b6 Re-export utils from Starlette: This allows using things like from fastapi.responses import JSONResponse instead of from starlette.responses import JSONResponse . It's mainly syntax sugar, a convenience for developer experience. Now Request , Response , WebSocket , status can be imported directly from fastapi as in from fastapi import Response . This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc. Documentation changes in many places, but new docs and noticeable improvements: Custom Response - HTML, Stream, File, others . Advanced Middleware . Including WSGI - Flask, Django, others . PR #1064 . 0.50.0 \u00b6 Add link to Release Notes from docs about pinning versions for deployment. PR #1058 . Upgrade code to use the latest version of Starlette, including: Several bug fixes. Optional redirects of slashes, with or without ending in / . Events for routers, \"startup\" , and \"shutdown\" . PR #1057 . Add docs about pinning FastAPI versions for deployment: Deployment: FastAPI versions . PR #1056 . 0.49.2 \u00b6 Fix links in release notes. PR #1052 by @sattosan . Fix typo in release notes. PR #1051 by @sattosan . Refactor/clarify serialize_response parameter name to avoid confusion. PR #1031 by @patrickmckenna . Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen . Add missing dependencies for testing. PR #1026 by @sm-Fifteen . Fix accepting valid types for response models, including Python types like List[int] . PR #1017 by @patrickmckenna . Fix format in SQL tutorial. PR #1015 by @vegarsti . 0.49.1 \u00b6 Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92 . Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047 . Move mypy configurations to config file. PR #987 by @hukkinj1 . Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl . 0.49.0 \u00b6 Fix encoding of pathlib paths in jsonable_encoder . PR #978 by @patrickmckenna . Add articles to External Links : Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) and [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b . PR #974 by @tokusumi . Fix broken links in docs. PR #949 by @tsotnikov . Fix small typos. PR #941 by @NikitaKolesov . Update and clarify docs for dependencies with yield . PR #986 . Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with yield and HTTPException . PR #985 . Update CI to run docs deployment in GitHub actions. PR #983 . Allow callable s in path operation functions , like functions modified with functools.partial . PR #977 . 0.48.0 \u00b6 Run linters first in tests to error out faster. PR #948 . Log warning about email-validator only when used. PR #946 . Simplify Peewee docs with double dependency with yield . PR #947 . Add article External Links : Create and Deploy FastAPI app to Heroku . PR #942 by @windson . Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv . Fix typo in main page. PR #920 by @mMarzeta . Fix parsing of possibly invalid bodies. PR #918 by @dmontagu . Fix typo #916 by @adursun . Allow Any type for enums in OpenAPI. PR #906 by @songzhi . Add article to External Links : How to continuously deploy a FastAPI to AWS Lambda with AWS SAM . PR #901 by @iwpnd . Add note about using Body parameters without Pydantic. PR #900 by @pawamoy . Fix Pydantic field clone logic. PR #899 by @deuce2367 . Fix link in middleware docs. PR #893 by @linchiwei123 . Rename default API title from \"Fast API\" to \"FastAPI\" for consistency. PR #890 . 0.47.1 \u00b6 Fix model filtering in response_model , cloning sub-models. PR #889 . Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888 . 0.47.0 \u00b6 Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887 . Tweak external links, Markdown format, typos. PR #881 . Fix bug in tutorial handling HTTP Basic Auth username and password . PR #865 by @isaevpd . Fix handling form path operation parameters declared with pure classes like list , tuple , etc. PR #856 by @nsidnev . Add request body to RequestValidationError , new docs: Use the RequestValidationError body . Initial PR #853 by @aviramha . Update External Links with new links and dynamic GitHub projects with fastapi topic. PR #850 . Fix Peewee contextvars handling in docs: SQL (Relational) Databases with Peewee . PR #879 . Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing . PR #877 . Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass . 0.46.0 \u00b6 Fix typos and tweak configs. PR #837 . Add link to Chinese article in External Links . PR 810 by @wxq0309 . Implement OAuth2AuthorizationCodeBearer class. PR #797 by @kuwv . Update example upgrade in docs main page. PR #795 by @cdeil . Fix callback handling for sub-routers. PR #792 by @jekirl . Fix typos. PR #784 by @kkinder . Add 4 Japanese articles to External Links . PR #783 by @HymanZHAN . Add support for subtypes of main types in jsonable_encoder , e.g. asyncpg's UUIDs. PR #756 by @RmStorm . Fix usage of Pydantic's HttpUrl in docs. PR #832 by @Dustyposa . Fix Twitter links in docs. PR #813 by @justindujardin . Add docs for correctly using FastAPI with Peewee ORM . Including how to overwrite parts of Peewee to correctly handle async threads. PR #789 . 0.45.0 \u00b6 Add support for OpenAPI Callbacks: New docs: OpenAPI Callbacks . Refactor generation of operationId s to be valid Python names (also valid variables in most languages). Add default_response_class parameter to APIRouter . Original PR #722 by @booooh . Refactor logging to use the same logger everywhere, update log strings and levels. PR #781 . Add article to External Links : \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? . PR #766 by @prostomarkeloff . Remove gender bias in docs for handling errors. PR #780 . Original idea in PR #761 by @classywhetten . Rename docs and references to body-schema to body-fields to keep in line with Pydantic. PR #746 by @prostomarkeloff . 0.44.1 \u00b6 Add GitHub social preview images to git. PR #752 . Update PyPI \"trove classifiers\". PR #751 . Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749 . Update \"new issue\" templates. PR #749 . Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu . 0.44.0 \u00b6 Add GitHub action Issue Manager . PR #742 . Fix typos in docs. PR 734 by @bundabrg . Fix usage of custom_encoder in jsonable_encoder . PR #715 by @matrixise . Fix invalid XML example. PR 710 by @OcasoProtal . Fix typos and update wording in deployment docs. PR #700 by @marier-nico . Add note about dependencies in APIRouter docs. PR #698 by @marier-nico . Add support for async class methods as dependencies #681 by @frankie567 . Add FastAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10 . Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster . Add support for Pydantic versions 1.0.0 and above, with temporary (deprecated) backwards compatibility for Pydantic 0.32.2 . PR #646 by @dmontagu . 0.43.0 \u00b6 Update docs to reduce gender bias. PR #645 by @ticosax . Add docs about overriding the operationId for all the path operations based on their function name. PR #642 by @SKalt . Fix validators in models generating an incorrect key order. PR #637 by @jaddison . Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom . Remove $ from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek . Add docs for self-serving docs' (Swagger UI) static assets , e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch . Fix black linting after upgrade. PR #682 by @frankie567 . 0.42.0 \u00b6 Add dependencies with yield , a.k.a. exit steps, context managers, cleanup, teardown, ... This allows adding extra code after a dependency is done. It can be used, for example, to close database connections. Dependencies with yield can be normal or async , FastAPI will run normal dependencies in a threadpool. They can be combined with normal dependencies. It's possible to have arbitrary trees/levels of dependencies with yield and exit steps are handled in the correct order automatically. It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies: async-exit-stack async-generator New docs at Dependencies with yield . Updated database docs SQL (Relational) Databases: Main FastAPI app . PR #595 . Fix sitemap.xml in website. PR #598 by @samuelcolvin . 0.41.0 \u00b6 Upgrade required Starlette to 0.12.9 , the new range is >=0.12.9,<=0.12.9 . Add State to FastAPI apps at app.state . PR #593 . Improve handling of custom classes for Request s and APIRoute s. This helps to more easily solve use cases like: Reading a body before and/or after a request (equivalent to a middleware). Run middleware-like code only for a subset of path operations . Process a request before passing it to a path operation function . E.g. decompressing, deserializing, etc. Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata. New docs section: Custom Request and APIRoute class . PR #589 by @dmontagu . Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu . 0.40.0 \u00b6 Add notes to docs about installing python-multipart when using forms. PR #574 by @sliptonic . Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu . Add support for truncating docstrings from path operation functions . New docs at Advanced description from docstring . PR #556 by @svalouch . Fix DOCTYPE in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21 . Fix handling 4XX responses overriding default 422 validation error responses. PR #517 by @tsouvarev . Fix typo in documentation for Simple HTTP Basic Auth . PR #514 by @prostomarkeloff . Fix incorrect documentation example in first steps . PR #511 by @IgnatovFedor . Add support for Swagger UI initOauth settings with the parameter swagger_ui_init_oauth . PR #499 by @zamiramir . 0.39.0 \u00b6 Allow path parameters to have default values (e.g. None ) and discard them instead of raising an error. This allows declaring a parameter like user_id: str = None that can be taken from a query parameter, but the same path operation can be included in a router with a path /users/{user_id} , in which case will be taken from the path and will be required. PR #464 by @jonathanunderwood . Add support for setting a default_response_class in the FastAPI instance or in include_router . Initial PR #467 by @toppk . Add support for type annotations using strings and from __future__ import annotations . PR #451 by @dmontagu . 0.38.1 \u00b6 Fix incorrect Request class import. PR #493 by @kamalgill . 0.38.0 \u00b6 Add recent articles to External Links and recent opinions. PR #490 . Upgrade support range for Starlette to include 0.12.8 . The new range is >=0.11.1,<=0.12.8\" . PR #477 by @dmontagu . Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu . 0.37.0 \u00b6 Add support for custom route classes for advanced use cases. PR #468 by @dmontagu . Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje . Fix security issue: when returning a sub-class of a response model and using skip_defaults it could leak information. PR #485 by @dmontagu . Enable tests for Python 3.8-dev. PR #465 by @Jamim . Add support and tests for Pydantic dataclasses in response_model . PR #454 by @dconathan . Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa . Use the media_type parameter in Body() params to set the media type in OpenAPI for requestBody . PR #439 by @divums . Add article Deploying a scikit-learn model with ONNX and FastAPI by https://www.linkedin.com/in/nico-axtmann . PR #438 by @naxty . Allow setting custom 422 (validation error) response/schema in OpenAPI. And use media type from response class instead of fixed application/json (the default). PR #437 by @divums . Fix using \"default\" extra response with status codes at the same time. PR #489 . Allow additional responses to use status code ranges (like 5XX and 4XX ) and \"default\" . PR #435 by @divums . 0.36.0 \u00b6 Fix implementation for skip_defaults when returning a Pydantic model. PR #422 by @dmontagu . Fix OpenAPI generation when using the same dependency in multiple places for the same path operation . PR #417 by @dmontagu . Allow having empty paths in path operations used with include_router and a prefix . This allows having a router for /cats and all its path operations , while having one of them for /cats . Now it doesn't have to be only /cats/ (with a trailing slash). To use it, declare the path in the path operation as the empty string ( \"\" ). PR #415 by @vitalik . Fix mypy error after merging PR #415. PR #462 . 0.35.0 \u00b6 Fix typo in routing assert . PR #419 by @pablogamboa . Fix typo in docs. PR #411 by @bronsen . Fix parsing a body type declared with Union . PR #400 by @koxudaxi . 0.34.0 \u00b6 Upgrade Starlette supported range to include the latest 0.12.7 . The new range is 0.11.1,<=0.12.7 . PR #367 by @dedsm . Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu . PR #385 . 0.33.0 \u00b6 Upgrade Pydantic version to 0.30.0 . PR #384 by @jekirl . 0.32.0 \u00b6 Fix typo in docs for features. PR #380 by @MartinoMensio . Fix source code limit for example in Query Parameters . PR #366 by @Smashman . Update wording in docs about OAuth2 scopes . PR #371 by @cjw296 . Update docs for Enum s to inherit from str and improve Swagger UI rendering. PR #351 . Fix regression, add Swagger UI deep linking again. PR #350 . Add test for having path templates in prefix of .include_router . PR #349 . Add note to docs: Include the same router multiple times with different prefix . PR #348 . Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies. Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules. The same new ID generation applies to response models. This also changes the generated title for those models. Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file). This also adds the possibility of using .include_router() with the same APIRouter multiple times, with different prefixes, e.g. /api/v2 and /api/latest , and it will now work correctly. PR #347 . 0.31.0 \u00b6 Upgrade Pydantic supported version to 0.29.0 . New supported version range is \"pydantic >=0.28,<=0.29.0\" . This adds support for Pydantic Generic Models , kudos to @dmontagu . PR #344 . 0.30.1 \u00b6 Add section in docs about External Links and Articles . PR #341 . Remove Pipfile.lock from the repository as it is only used by FastAPI contributors (developers of FastAPI itself). See the PR for more details. PR #340 . Update section about Help FastAPI - Get Help . PR #339 . Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338 . Update and clarify SQL tutorial with SQLAlchemy . PR #331 by @mariacamilagl . Add SQLite online viewers to the docs . PR #330 by @cyrilbois . 0.30.0 \u00b6 Add support for Pydantic's ORM mode: Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases . The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using @property decorators) and several other use cases. This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other. If your path operations return an arbitrary object with attributes (e.g. my_item.name instead of my_item[\"name\"] ) AND you use a response_model , make sure to update the Pydantic models with orm_mode = True as described in the docs (link above). New documentation about receiving plain dict s as request bodies: Bodies of arbitrary dict s . New documentation about returning arbitrary dict s in responses: Response with arbitrary dict . Technical Details : When declaring a response_model it is used directly to generate the response content, from whatever was returned from the path operation function . Before this, the return content was first passed through jsonable_encoder to ensure it was a \"jsonable\" object, like a dict , instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use orm_mode = True . If you don't have a response_model , the return object will still be passed through jsonable_encoder first. When a response_model is declared, the same response_model type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic Field with all the submodels cloned as well). This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the response_model (e.g. you return a UserInDB that inherits from User but contains extra fields, like hashed_password , and User is used in the response_model ), it would still pass the validation (because UserInDB is a subclass of User ) and the object would be returned as-is, including the hashed_password . To fix this, the declared response_model is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a List[Item] ), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned response_model . Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned response_model , containing only the declared fields as normally. PR #322 . Remove/clean unused RegEx code in routing. PR #314 by @dmontagu . Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao . Upgrade Pydantic support to 0.28 . PR #320 by @jekirl . 0.29.1 \u00b6 Fix handling an empty-body request with a required body param. PR #311 . Fix broken link in docs: Return a Response directly . PR #306 by @dmontagu . Fix docs discrepancy in docs for Response Model . PR #288 by @awiddersheim . 0.29.0 \u00b6 Add support for declaring a Response parameter: This allows declaring: Response Cookies . Response Headers . An HTTP Status Code different than the default: Response - Change Status Code . All of this while still being able to return arbitrary objects ( dict , DB model, etc). Update attribution to Hug, for inspiring the response parameter pattern. PR #294 . 0.28.0 \u00b6 Implement dependency cache per request. This avoids calling each dependency multiple times for the same request. This is useful while calling external services, performing costly computation, etc. This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with .include_router() ) and then it is declared again in a specific path operation , the dependency will be called only once. The cache can be disabled per dependency declaration, using use_cache=False as in Depends(your_dependency, use_cache=False) . Updated docs at: Using the same dependency multiple times . PR #292 . Implement dependency overrides for testing. This allows using overrides/mocks of dependencies during tests. New docs: Testing Dependencies with Overrides . PR #291 . 0.27.2 \u00b6 Fix path and query parameters receiving dict as a valid type. It should be mapped to a body payload. PR #287 . Updated docs at: Query parameter list / multiple values with defaults: Using list . 0.27.1 \u00b6 Fix auto_error=False handling in HTTPBearer security scheme. Do not raise when there's an incorrect Authorization header if auto_error=False . PR #282 . Fix type declaration of HTTPException . PR #279 . 0.27.0 \u00b6 Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu . Refactor param extraction using Pydantic Field : Large refactor, improvement, and simplification of param extraction from path operations . Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults . Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values . Add support for type annotations using Optional as in param: Optional[str] = None . New documentation: Optional type declarations . PR #278 . 0.26.0 \u00b6 Separate error handling for validation errors. This will allow developers to customize the exception handlers. Document better how to handle exceptions and use error handlers. Include RequestValidationError and WebSocketRequestValidationError (this last one will be useful once encode/starlette#527 or equivalent is merged). New documentation about exceptions handlers: Install custom exception handlers . Override the default exception handlers . Re-use FastAPI's exception handlers . PR #273 . Fix support for paths in path parameters without needing explicit Path(...) . PR #256 . Documented in PR #272 by @wshayes . New documentation at: Path Parameters containing paths . Update docs for testing FastAPI. Include using POST , sending JSON, testing headers, etc. New documentation: Testing . PR #271 . Fix type declaration of response_model to allow generic Python types as List[Model] . Mainly to fix mypy for users. PR #266 . 0.25.0 \u00b6 Add support for Pydantic's include , exclude , by_alias . Update documentation: Response Model . Add docs for: Body - updates , using Pydantic's skip_defaults . Add method consistency tests. PR #264 . Add CONTRIBUTING.md file to GitHub, to help new contributors. PR #255 by @wshayes . Add support for Pydantic's skip_defaults : There's a new path operation decorator parameter response_model_skip_defaults . The name of the parameter will most probably change in a future version to response_skip_defaults , model_skip_defaults or something similar. New documentation section about using response_model_skip_defaults . PR #248 by @wshayes . 0.24.0 \u00b6 Add support for WebSockets with dependencies and parameters. Support included for: Depends Security Cookie Header Path Query ...as these are compatible with the WebSockets protocol (e.g. Body is not). Updated documentation for WebSockets . PR #178 by @jekirl . Upgrade the compatible version of Pydantic to 0.26.0 . This includes JSON Schema support for IP address and network objects, bug fixes, and other features. PR #247 by @euri10 . 0.23.0 \u00b6 Upgrade the compatible version of Starlette to 0.12.0 . This includes support for ASGI 3 (the latest version of the standard). It's now possible to use Starlette's StreamingResponse with iterators, like file-like objects (as those returned by open() ). It's now possible to use the low level utility iterate_in_threadpool from starlette.concurrency (for advanced scenarios). PR #243 . Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add {your_origin}/docs/oauth2-redirect to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc). For example, during development, it could be http://localhost:8000/docs/oauth2-redirect . Have in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at https://yourdomain.com/login/callback . This is only to allow delegated authentication in the API docs with Swagger UI. PR #198 by @steinitzu . Make Swagger UI and ReDoc route handlers ( path operations ) be async functions instead of lambdas to improve performance. PR #241 by @Trim21 . Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10 . 0.22.0 \u00b6 Add support for dependencies parameter: A parameter in path operation decorators , for dependencies that should be executed but the return value is not important or not used in the path operation function . A parameter in the .include_router() method of FastAPI applications and routers, to include dependencies that should be executed in each path operation in a router. This is useful, for example, to require authentication or permissions in specific group of path operations . Different dependencies can be applied to different routers. These dependencies are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined. Dependencies declared in a router are executed first, then the ones defined in path operation decorators , and then the ones declared in normal parameters. They are all combined and executed. All this also supports using Security with scopes in those dependencies parameters, for more advanced OAuth 2.0 security scenarios with scopes. New documentation about dependencies in path operation decorators . New documentation about dependencies in the include_router() method . PR #235 . Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using path convertors, to take a whole path as a parameter, like /some/url/{p:path} . PR #234 by @euri10 . Make default parameter utilities exported from fastapi be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix mypy errors in FastAPI's users' code. Applies to Path , Query , Header , Cookie , Body , Form , File , Depends , and Security . PR #226 and PR #231 . Separate development scripts test.sh , lint.sh , and format.sh . PR #232 . Re-enable black formatting checks for Python 3.7. PR #229 by @zamiramir . 0.21.0 \u00b6 On body parsing errors, raise from previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm . Use Python logger named \" fastapi \" instead of root logger. PR #222 by @euri10 . Upgrade Pydantic to version 0.25. PR #225 by @euri10 . Fix typo in routing. PR #221 by @djlambert . 0.20.1 \u00b6 Add typing information to package including file py.typed . PR #209 by @meadsteve . Add FastAPI bot for Gitter. To automatically announce new releases. PR #189 . 0.20.0 \u00b6 Upgrade OAuth2: Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 UNAUTHORIZED , with WWW-Authenticate headers. Update, simplify, and improve all the security docs . Add new scope_str to SecurityScopes and update docs: OAuth2 scopes . Update docs, images, tests. PR #188 . Include Hypercorn as an alternative ASGI server in the docs. PR #187 . Add docs for Static Files and Templates . PR #186 . Add docs for handling Response Cookies and Response Headers . PR #185 . Fix typos in docs. PR #176 by @chdsbd . 0.19.0 \u00b6 Rename path operation decorator parameter content_type to response_class . PR #183 . Add docs: How to use the jsonable_encoder in JSON compatible encoder . How to Return a Response directly . Update how to use a Custom Response Class . PR #184 . 0.18.0 \u00b6 Add docs for HTTP Basic Auth . PR #177 . Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175 . Update dependencies for security. PR #174 . Add docs for Middleware . PR #173 . 0.17.0 \u00b6 Make Flit publish from CI. PR #170 . Add documentation about handling CORS (Cross-Origin Resource Sharing) . PR #169 . By default, encode by alias. This allows using Pydantic alias parameters working by default. PR #168 . 0.16.0 \u00b6 Upgrade path operation docstring parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration . PR #163 . Refactor internal usage of Pydantic to use correct data types. PR #164 . Upgrade Pydantic to version 0.23 . PR #160 by @euri10 . Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels . Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto . 0.15.0 \u00b6 Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads . PR #158 . Add docs for: Additional Status Codes . PR #156 . 0.14.0 \u00b6 Improve automatically generated names of path operations in OpenAPI (in API docs). A function read_items instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155 . Add docs for: Testing FastAPI . PR #151 . Update /docs Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes . Update development dependencies, Pipfile.lock . PR #150 . Include Falcon and Hug in: Alternatives, Inspiration and Comparisons . 0.13.0 \u00b6 Improve/upgrade OAuth2 scopes support with SecurityScopes : SecurityScopes can be declared as a parameter like Request , to get the scopes of all super-dependencies/dependants. Improve Security handling, merging scopes when declaring SecurityScopes . Allow using SecurityBase (like OAuth2 ) classes with Depends and still document them. Security now is needed only to declare scopes . Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens . New docs about: OAuth2 scopes . PR #141 . 0.12.1 \u00b6 Fix bug: handling additional responses in APIRouter.include_router() . PR #140 . Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari . Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud . 0.12.0 \u00b6 Add additional responses parameter to path operation decorators to extend responses in OpenAPI (and API docs). It also allows extending existing responses generated from response_model , declare other media types (like images), etc. The new documentation is here: Additional Responses . responses can also be added to .include_router() , the updated docs are here: Bigger Applications . PR #97 originally initiated by @barsi . Update scripts/test-cov-html.sh to allow passing extra parameters like -vv , for development. 0.11.0 \u00b6 Add auto_error parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134 . Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri . Fix duplicate dependency in pyproject.toml . PR #128 by @zxalif . 0.10.3 \u00b6 Add Gitter chat, badge, links, etc. https://gitter.im/tiangolo/fastapi . PR #117 . Add docs about Extending OpenAPI . PR #126 . Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed . Fix duplicated param variable creation. PR #123 by @yihuang . Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders . Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear . 0.10.2 \u00b6 Fix OpenAPI (JSON Schema) for declarations of Python Union (JSON Schema additionalProperties ). PR #121 . Update Background Tasks with a note on Celery. Document response models using unions and lists, updated at: Extra Models . PR #108 . 0.10.1 \u00b6 Add docs and tests for encode/databases . New docs at: Async SQL (Relational) Databases . PR #107 . 0.10.0 \u00b6 Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here . PR #103 . Add support for .websocket_route() in APIRouter . PR #100 by @euri10 . New docs section about Events: startup - shutdown . PR #99 . 0.9.1 \u00b6 Document receiving Multiple values with the same query parameter and Duplicate headers . PR #95 . 0.9.0 \u00b6 Upgrade compatible Pydantic version to 0.21.0 . PR #90 . Add documentation for: Application Configuration . Fix typo in docs. PR #76 by @matthewhegarty . Fix link in \"Deployment\" to \"Bigger Applications\". 0.8.0 \u00b6 Make development scripts executable. PR #76 by @euri10 . Add support for adding tags in app.include_router() . PR #55 by @euri10 . Documentation updated in the section: Bigger Applications . Update docs related to Uvicorn to use new --reload option from version 0.5.x . PR #74 . Update isort imports and scripts to be compatible with newer versions. PR #75 . 0.7.1 \u00b6 Update technical details about async def handling with respect to previous frameworks. PR #64 by @haizaar . Add deployment documentation for Docker in Raspberry Pi and other architectures. Trigger Docker images build on Travis CI automatically. PR #65 . 0.7.0 \u00b6 Add support for UploadFile in File parameter annotations. This includes a file-like interface. Here's the updated documentation for declaring File parameters with UploadFile . And here's the updated documentation for using Form parameters mixed with File parameters, supporting bytes and UploadFile at the same time. PR #63 . 0.6.4 \u00b6 Add technical details about async def handling to docs . PR #61 . Add docs for Debugging FastAPI applications in editors . Clarify Bigger Applications deployed with Docker . Fix typos in docs. Add section about History, Design and Future . Add docs for using WebSockets with FastAPI . PR #62 . 0.6.3 \u00b6 Add Favicons to docs. PR #53 . 0.6.2 \u00b6 Introduce new project generator based on FastAPI and PostgreSQL: https://github.com/tiangolo/full-stack-fastapi-postgresql . PR #52 . Update SQL tutorial with SQLAlchemy, using Depends to improve editor support and reduce code repetition . PR #52 . Improve middleware naming in tutorial for SQL with SQLAlchemy https://fastapi.tiangolo.com/tutorial/sql-databases/ . 0.6.1 \u00b6 Add docs for GraphQL: https://fastapi.tiangolo.com/advanced/graphql/ . PR #48 . 0.6.0 \u00b6 Update SQL with SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using the new official request.state . PR #45 . Upgrade Starlette to version 0.11.1 and add required compatibility changes. PR #44 . 0.5.1 \u00b6 Add section about helping and getting help with FastAPI . Add note about path operations order in docs . Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41 . Add Development - Contributing section to the docs . PR #42 . 0.5.0 \u00b6 Add new HTTPException with support for custom headers. With new documentation for handling errors at: https://fastapi.tiangolo.com/tutorial/handling-errors/ . PR #35 . Add documentation to use Starlette Request object directly. Check #25 by @euri10 . Add issue templates to simplify reporting bugs, getting help, etc: #34 . Update example for the SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using middleware and database session attached to request. 0.4.0 \u00b6 Add openapi_prefix , support for reverse proxy and mounting sub-applications. See the docs at https://fastapi.tiangolo.com/advanced/sub-applications-proxy/ : #26 by @kabirkhan . Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite . 0.3.0 \u00b6 Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy : #30 . 0.2.1 \u00b6 Fix jsonable_encoder for Pydantic models with Config but without json_encoders : #29 . 0.2.0 \u00b6 Fix typos in Security section: #24 by @kkinder . Add support for Pydantic custom JSON encoders: #21 by @euri10 . 0.1.19 \u00b6 Upgrade Starlette version to the current latest 0.10.1 : #17 by @euri10 .","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"release-notes/#_1","text":"","title":"\u66f4\u65b0\u65e5\u5fd7"},{"location":"release-notes/#_2","text":"\ud83d\udcdd Update docs/tutorial/dependencies/classes-as-dependencies : Add type of query parameters in a description of Classes as dependencies . PR #4015 by @0417taehyun . \ud83c\udf10 Add French translation for Tutorial - First steps. PR #3455 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/path-params.md . PR #3548 by @Smlep . \ud83c\udf10 Add French translation for docs/tutorial/query-params.md . PR #3556 by @Smlep . \ud83c\udf10 Add Turkish translation for docs/python-types.md . PR #3926 by @BilalAlpaslan .","title":"\u6700\u8fd1\u66f4\u65b0"},{"location":"release-notes/#0700","text":"This release just upgrades Starlette to the latest version, 0.16.0 , which includes several bug fixes and some small breaking changes. These last three consecutive releases are independent so that you can migrate gradually : First to FastAPI 0.68.2 , with no breaking changes, but upgrading all the sub-dependencies. Next to FastAPI 0.69.0 , which upgrades Starlette to 0.15.0 , with AnyIO support, and a higher chance of having breaking changes in your code. Finally to FastAPI 0.70.0 , just upgrading Starlette to the latest version 0.16.0 with additional bug fixes. This way, in case there was a breaking change for your code in one of the releases, you can still benefit from the previous upgrades. \u2728","title":"0.70.0"},{"location":"release-notes/#breaking-changes-upgrade","text":"\u2b06\ufe0f Upgrade Starlette to 0.16.0. PR #4016 by @tiangolo . Also upgrades the ranges of optional dependencies: \"jinja2 >=2.11.2,<4.0.0\" \"itsdangerous >=1.1.0,<3.0.0\"","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#0690","text":"","title":"0.69.0"},{"location":"release-notes/#breaking-changes-upgrade_1","text":"This release adds support for Trio . \u2728 It upgrades the version of Starlette to 0.15.0 , now based on AnyIO , and the internal async components in FastAPI are now based on AnyIO as well, making it compatible with both asyncio and Trio . You can read the docs about running FastAPI with Trio using Hypercorn . This release also removes graphene as an optional dependency for GraphQL. If you need to work with GraphQL, the recommended library now is Strawberry . You can read the new FastAPI with GraphQL docs .","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#features","text":"\u2728 Add support for Trio via AnyIO, upgrading Starlette to 0.15.0 . PR #3372 by @graingert . \u2796 Remove graphene as an optional dependency. PR #4007 by @tiangolo .","title":"Features"},{"location":"release-notes/#docs","text":"\ud83d\udcdd Add docs for using Trio with Hypercorn. PR #4014 by @tiangolo . \u270f Fix typos in Deployment Guide. PR #3975 by @ghandic . \ud83d\udcdd Update docs with pip install calls when using extras with brackets, use quotes for compatibility with Zsh. PR #3131 by @tomwei7 . \ud83d\udcdd Add external link to article: Deploying ML Models as API Using FastAPI and Heroku. PR #3904 by @kaustubhgupta . \u270f Fix typo in file paths in docs/en/docs/contributing.md . PR #3752 by @NinaHwang . \u270f Fix a typo in docs/en/docs/advanced/path-operation-advanced-configuration.md and docs/en/docs/release-notes.md . PR #3750 by @saintmalik . \u270f\ufe0f Add a missing comma in the security tutorial. PR #3564 by @jalvaradosegura . \u270f Fix typo in docs/en/docs/help-fastapi.md . PR #3760 by @jaystone776 . \u270f Fix typo about file path in docs/en/docs/tutorial/bigger-applications.md . PR #3285 by @HolyDorus . \u270f Re-word to clarify test client in docs/en/docs/tutorial/testing.md . PR #3382 by @Bharat123rox . \ud83d\udcdd Fix incorrect highlighted code. PR #3325 by @paxcodes . \ud83d\udcdd Add external link to article: How-to deploy FastAPI app to Heroku. PR #3241 by @Jarmos-san . \u270f Fix typo (mistranslation) in docs/en/docs/advanced/templates.md . PR #3211 by @oerpli . \ud83d\udcdd Remove note about (now supported) feature from Swagger UI in docs/en/docs/tutorial/request-files.md . PR #2803 by @gsganden . \u270f Fix typo re-word in docs/tutorial/handling-errors.md . PR #2700 by @graue70 .","title":"Docs"},{"location":"release-notes/#translations","text":"\ud83c\udf10 Initialize Azerbaijani translations. PR #3941 by @madatbay . \ud83c\udf10 Add Turkish translation for docs/fastapi-people.md . PR #3848 by @BilalAlpaslan .","title":"Translations"},{"location":"release-notes/#internal","text":"\ud83d\udcdd Add supported Python versions badge. PR #2794 by @hramezani . \u270f Fix link in Japanese docs for docs/ja/docs/deployment/docker.md . PR #3245 by @utamori . \ud83d\udd27 Correct DeprecationWarning config and comment in pytest settings. PR #4008 by @graingert . \ud83d\udd27 Swap light/dark theme button icon. PR #3246 by @eddsalkield . \ud83d\udd27 Lint only in Python 3.7 and above. PR #4006 by @tiangolo . \ud83d\udd27 Add GitHub Action notify-translations config for Azerbaijani. PR #3995 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0682","text":"This release has no breaking changes . \ud83c\udf89 It upgrades the version ranges of sub-dependencies to allow applications using FastAPI to easily upgrade them. Soon there will be a new FastAPI release upgrading Starlette to take advantage of recent improvements, but as that has a higher chance of having breaking changes, it will be in a separate release.","title":"0.68.2"},{"location":"release-notes/#features_1","text":"\u2b06Increase supported version of aiofiles to suppress warnings. PR #2899 by @SnkSynthesis . \u2796 Do not require backports in Python >= 3.7. PR #1880 by @FFY00 . \u2b06 Upgrade required Python version to >= 3.6.1, needed by typing.Deque, used by Pydantic. PR #2733 by @hukkin . \u2b06\ufe0f Bump Uvicorn max range to 0.15.0. PR #3345 by @Kludex .","title":"Features"},{"location":"release-notes/#docs_1","text":"\ud83d\udcdd Update GraphQL docs, recommend Strawberry. PR #3981 by @tiangolo . \ud83d\udcdd Re-write and extend Deployment guide: Concepts, Uvicorn, Gunicorn, Docker, Containers, Kubernetes. PR #3974 by @tiangolo . \ud83d\udcdd Upgrade HTTPS guide with more explanations and diagrams. PR #3950 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_1","text":"\ud83c\udf10 Add Turkish translation for docs/features.md . PR #1950 by @ycd . \ud83c\udf10 Add Turkish translation for docs/benchmarks.md . PR #2729 by @Telomeraz . \ud83c\udf10 Add Turkish translation for docs/index.md . PR #1908 by @ycd . \ud83c\udf10 Add French translation for docs/tutorial/body.md . PR #3671 by @Smlep . \ud83c\udf10 Add French translation for deployment/docker.md . PR #3694 by @rjNemo . \ud83c\udf10 Add Portuguese translation for docs/tutorial/path-params.md . PR #3664 by @FelipeSilva93 . \ud83c\udf10 Add Portuguese translation for docs/deployment/https.md . PR #3754 by @lsglucas . \ud83c\udf10 Add German translation for docs/features.md . PR #3699 by @mawassk .","title":"Translations"},{"location":"release-notes/#internal_1","text":"\u2728 Update GitHub Action: notify-translations, to avoid a race conditions. PR #3989 by @tiangolo . \u2b06\ufe0f Upgrade development autoflake , supporting multi-line imports. PR #3988 by @tiangolo . \u2b06\ufe0f Increase dependency ranges for tests and docs: pytest-cov, pytest-asyncio, black, httpx, sqlalchemy, databases, mkdocs-markdownextradata-plugin. PR #3987 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3986 by @github-actions[bot] . \ud83d\udc9a Fix badges in README and main page. PR #3979 by @ghandic . \u2b06 Upgrade internal testing dependencies: mypy to version 0.910, add newly needed type packages. PR #3350 by @ArcLightSlavik . \u2728 Add Deepset Sponsorship. PR #3976 by @tiangolo . \ud83c\udfa8 Tweak CSS styles for shell animations. PR #3888 by @tiangolo . \ud83d\udd27 Add new Sponsor Calmcode.io. PR #3777 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0681","text":"\u2728 Add support for read_with_orm_mode , to support SQLModel relationship attributes. PR #3757 by @tiangolo .","title":"0.68.1"},{"location":"release-notes/#translations_2","text":"\ud83c\udf10 Add Portuguese translation of docs/fastapi-people.md . PR #3461 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/dependencies-in-path-operation-decorators.md . PR #3492 by @jaystone776 . \ud83d\udd27 Add new Translation tracking issues for German and Indonesian. PR #3718 by @tiangolo . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/sub-dependencies.md . PR #3491 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/advanced/index.md . PR #3460 by @ComicShrimp . \ud83c\udf10 Portuguese translation of docs/async.md . PR #1330 by @Serrones . \ud83c\udf10 Add French translation for docs/async.md . PR #3416 by @Smlep .","title":"Translations"},{"location":"release-notes/#internal_2","text":"\u2728 Add GitHub Action: Notify Translations. PR #3715 by @tiangolo . \u2728 Update computation of FastAPI People and sponsors. PR #3714 by @tiangolo . \u2728 Enable recent Material for MkDocs Insiders features. PR #3710 by @tiangolo . \ud83d\udd25 Remove/clean extra imports from examples in docs for features. PR #3709 by @tiangolo . \u2795 Update docs library to include sources in Markdown. PR #3648 by @tiangolo . \u2b06 Enable tests for Python 3.9. PR #2298 by @Kludex . \ud83d\udc65 Update FastAPI People. PR #3642 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0680","text":"","title":"0.68.0"},{"location":"release-notes/#features_2","text":"\u2728 Add support for extensions and updates to the OpenAPI schema in each path operation . New docs: FastAPI Path Operation Advanced Configuration - OpenAPI Extra . Initial PR #1922 by @edouardlp . \u2728 Add additional OpenAPI metadata parameters to FastAPI class, shown on the automatic API docs UI. New docs: Metadata and Docs URLs . Initial PR #1812 by @dkreeft . \u2728 Add description parameter to all the security scheme classes, e.g. APIKeyQuery(name=\"key\", description=\"A very cool API key\") . PR #1757 by @hylkepostma . \u2728 Update OpenAPI models, supporting recursive models and extensions. PR #3628 by @tiangolo . \u2728 Import and re-export data structures from Starlette, used by Request properties, on fastapi.datastructures . Initial PR #1872 by @jamescurtin .","title":"Features"},{"location":"release-notes/#docs_2","text":"\ud83d\udcdd Update docs about async and response-model with more gender neutral language. PR #1869 by @Edward-Knight .","title":"Docs"},{"location":"release-notes/#translations_3","text":"\ud83c\udf10 Add Russian translation for docs/python-types.md . PR #3039 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/index.md . PR #3489 by @jaystone776 . \ud83c\udf10 Add Russian translation for docs/external-links.md . PR #3036 by @dukkee . \ud83c\udf10 Add Chinese translation for docs/tutorial/dependencies/global-dependencies.md . PR #3493 by @jaystone776 . \ud83c\udf10 Add Portuguese translation for docs/deployment/versions.md . PR #3618 by @lsglucas . \ud83c\udf10 Add Japanese translation for docs/tutorial/security/oauth2-jwt.md . PR #3526 by @sattosan .","title":"Translations"},{"location":"release-notes/#internal_3","text":"\u2705 Add the docs_src directory to test coverage and update tests. Initial PR #1904 by @Kludex . \ud83d\udd27 Add new GitHub templates with forms for new issues. PR #3612 by @tiangolo . \ud83d\udcdd Add official FastAPI Twitter to docs: @fastapi . PR #3578 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0670","text":"","title":"0.67.0"},{"location":"release-notes/#features_3","text":"\u2728 Add support for dataclasses in request bodies and response_model . New documentation: Advanced User Guide - Using Dataclasses . PR #3577 by @tiangolo . \u2728 Support dataclasses in responses. PR #3576 by @tiangolo , continuation from initial PR #2722 by @amitlissack .","title":"Features"},{"location":"release-notes/#docs_3","text":"\ud83d\udcdd Add external link: How to Create A Fake Certificate Authority And Generate TLS Certs for FastAPI. PR #2839 by @aitoehigie . \u270f Fix code highlighted line in: body-nested-models.md . PR #3463 by @jaystone776 . \u270f Fix typo in body-nested-models.md . PR #3462 by @jaystone776 . \u270f Fix typo \"might me\" -> \"might be\" in docs/en/docs/tutorial/schema-extra-example.md . PR #3362 by @dbrakman . \ud83d\udcdd Add external link: Building simple E-Commerce with NuxtJS and FastAPI. PR #3271 by @ShahriyarR . \ud83d\udcdd Add external link: Serve a machine learning model using Sklearn, FastAPI and Docker. PR #2974 by @rodrigo-arenas . \u270f\ufe0f Fix typo on docstring in datastructures file. PR #2887 by @Kludex . \ud83d\udcdd Add External Link: Deploy FastAPI on Ubuntu and Serve using Caddy 2 Web Server. PR #3572 by @tiangolo . \ud83d\udcdd Add External Link, replaces #1898. PR #3571 by @tiangolo .","title":"Docs"},{"location":"release-notes/#internal_4","text":"\ud83c\udfa8 Improve style for sponsors, add radius border. PR #2388 by @Kludex . \ud83d\udc77 Update GitHub Action latest-changes. PR #3574 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes. PR #3573 by @tiangolo . \ud83d\udc77 Rename and clarify CI workflow job names. PR #3570 by @tiangolo . \ud83d\udc77 Update GitHub Action latest-changes, strike 2 \u26be. PR #3575 by @tiangolo . \ud83d\udd27 Sort external links in docs to have the most recent at the top. PR #3568 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0661","text":"","title":"0.66.1"},{"location":"release-notes/#translations_4","text":"\ud83c\udf10 Add basic setup for German translations. PR #3522 by @0x4Dark . \ud83c\udf10 Add Portuguese translation for docs/tutorial/security/index.md . PR #3507 by @oandersonmagalhaes . \ud83c\udf10 Add Portuguese translation for docs/deployment/index.md . PR #3337 by @lsglucas .","title":"Translations"},{"location":"release-notes/#internal_5","text":"\ud83d\udd27 Configure strict pytest options and update/refactor tests. Upgrade pytest to >=6.2.4,<7.0.0 and pytest-cov to >=2.12.0,<3.0.0 . Initial PR #2790 by @graingert . \u2b06\ufe0f Upgrade python-jose dependency to >=3.3.0,<4.0.0 for tests. PR #3468 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0660","text":"","title":"0.66.0"},{"location":"release-notes/#features_4","text":"\u2728 Allow setting the response_class to RedirectResponse or FileResponse and returning the URL from the function. New and updated docs are in the tutorial section Custom Response - HTML, Stream, File, others , in RedirectResponse and in FileResponse . PR #3457 by @tiangolo .","title":"Features"},{"location":"release-notes/#fixes","text":"\ud83d\udc1b Fix include/exclude for dicts in jsonable_encoder . PR #2016 by @Rubikoid . \ud83d\udc1b Support custom OpenAPI / JSON Schema fields in the generated output OpenAPI. PR #1429 by @jmagnusson .","title":"Fixes"},{"location":"release-notes/#translations_5","text":"\ud83c\udf10 Add Spanish translation for tutorial/query-params.md . PR #2243 by @mariacamilagl . \ud83c\udf10 Add Spanish translation for advanced/response-directly.md . PR #1253 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/additional-status-codes.md . PR #1252 by @jfunez . \ud83c\udf10 Add Spanish translation for advanced/path-operation-advanced-configuration.md . PR #1251 by @jfunez .","title":"Translations"},{"location":"release-notes/#0653","text":"","title":"0.65.3"},{"location":"release-notes/#fixes_1","text":"\u267b Assume request bodies contain JSON when no Content-Type header is provided. This fixes a breaking change introduced by 0.65.2 with PR #2118 . It should allow upgrading FastAPI applications with clients that send JSON data without a Content-Type header. And there's still protection against CSRFs. PR #3456 by @tiangolo .","title":"Fixes"},{"location":"release-notes/#translations_6","text":"\ud83c\udf10 Initialize Indonesian translations. PR #3014 by @pace-noge . \ud83c\udf10 Add Spanish translation of Tutorial - Path Parameters. PR #2219 by @mariacamilagl . \ud83c\udf10 Add Spanish translation of Tutorial - First Steps. PR #2208 by @mariacamilagl . \ud83c\udf10 Portuguese translation of Tutorial - Body - Fields. PR #3420 by @ComicShrimp . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Forms - and - Files. PR #3249 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Handling - Errors. PR #3299 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Form - Data. PR #3248 by @jaystone776 . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Updates. PR #3237 by @jaystone776 . \ud83c\udf10 Add Chinese translation for FastAPI People. PR #3112 by @hareru . \ud83c\udf10 Add French translation for Project Generation. PR #3197 by @Smlep . \ud83c\udf10 Add French translation for Python Types Intro. PR #3185 by @Smlep . \ud83c\udf10 Add French translation for External Links. PR #3103 by @Smlep . \ud83c\udf10 Add French translation for Alternatives, Inspiration and Comparisons. PR #3020 by @rjNemo . \ud83c\udf10 Fix Chinese translation code snippet mismatch in Tutorial - Python Types Intro. PR #2573 by @BoYanZh . \ud83c\udf10 Add Portuguese translation for Development Contributing. PR #1364 by @Serrones . \ud83c\udf10 Add Chinese translation for Tutorial - Request - Files. PR #3244 by @jaystone776 .","title":"Translations"},{"location":"release-notes/#internal_6","text":"\ud83d\udc65 Update FastAPI People. PR #3450 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #3319 by @github-actions[bot] . \u2b06 Upgrade docs development dependency on typer-cli to >=0.0.12 to fix conflicts. PR #3429 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0652","text":"","title":"0.65.2"},{"location":"release-notes/#security-fixes","text":"\ud83d\udd12 Check Content-Type request header before assuming JSON. Initial PR #2118 by @patrickkwang . This change fixes a CSRF security vulnerability when using cookies for authentication in path operations with JSON payloads sent by browsers. In versions lower than 0.65.2 , FastAPI would try to read the request payload as JSON even if the content-type header sent was not set to application/json or a compatible JSON media type (e.g. application/geo+json ). So, a request with a content type of text/plain containing JSON data would be accepted and the JSON data would be extracted. But requests with content type text/plain are exempt from CORS preflights, for being considered Simple requests . So, the browser would execute them right away including cookies, and the text content could be a JSON string that would be parsed and accepted by the FastAPI application. See CVE-2021-32677 for more details. Thanks to Dima Boger for the security report! \ud83d\ude47\ud83d\udd12","title":"Security fixes"},{"location":"release-notes/#internal_7","text":"\ud83d\udd27 Update sponsors badge, course bundle. PR #3340 by @tiangolo . \ud83d\udd27 Add new gold sponsor Jina \ud83c\udf89. PR #3291 by @tiangolo . \ud83d\udd27 Add new banner sponsor badge for FastAPI courses bundle. PR #3288 by @tiangolo . \ud83d\udc77 Upgrade Issue Manager GitHub Action. PR #3236 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0651","text":"","title":"0.65.1"},{"location":"release-notes/#security-fixes_1","text":"\ud83d\udccc Upgrade pydantic pin, to handle security vulnerability CVE-2021-29510 . PR #3213 by @tiangolo .","title":"Security fixes"},{"location":"release-notes/#0650","text":"","title":"0.65.0"},{"location":"release-notes/#breaking-changes-upgrade_2","text":"\u2b06\ufe0f Upgrade Starlette to 0.14.2 , including internal UJSONResponse migrated from Starlette. This includes several bug fixes and features from Starlette. PR #2335 by @hanneskuettner .","title":"Breaking Changes - Upgrade"},{"location":"release-notes/#translations_7","text":"\ud83c\udf10 Initialize new language Polish for translations. PR #3170 by @neternefer .","title":"Translations"},{"location":"release-notes/#internal_8","text":"\ud83d\udc77 Add GitHub Action cache to speed up CI installs. PR #3204 by @tiangolo . \u2b06\ufe0f Upgrade setup-python GitHub Action to v2. PR #3203 by @tiangolo . \ud83d\udc1b Fix docs script to generate a new translation language with overrides boilerplate. PR #3202 by @tiangolo . \u2728 Add new Deta banner badge with new sponsorship tier \ud83d\ude47. PR #3194 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #3189 by @github-actions[bot] . \ud83d\udd0a Update FastAPI People to allow better debugging. PR #3188 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0640","text":"","title":"0.64.0"},{"location":"release-notes/#features_5","text":"\u2728 Add support for adding multiple examples in request bodies and path, query, cookie, and header params. New docs: Declare Request Example Data . Initial PR #1267 by @austinorr .","title":"Features"},{"location":"release-notes/#fixes_2","text":"\ud83d\udccc Pin SQLAlchemy range for tests, as it doesn't use SemVer. PR #3001 by @tiangolo . \ud83c\udfa8 Add newly required type annotations for mypy. PR #2882 by @tiangolo . \ud83c\udfa8 Remove internal \"type: ignore\", now unnecessary. PR #2424 by @AsakuraMizu .","title":"Fixes"},{"location":"release-notes/#docs_4","text":"\ud83d\udcdd Add link to article in Russian \"FastAPI: \u0437\u043d\u0430\u043a\u043e\u043c\u0438\u043c\u0441\u044f \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c\". PR #2564 by @trkohler . \ud83d\udcdd Add external link to blog post \"Authenticate Your FastAPI App with Auth0\". PR #2172 by @dompatmore . \ud83d\udcdd Fix broken link to article: Machine learning model serving in Python using FastAPI and Streamlit. PR #2557 by @davidefiocco . \ud83d\udcdd Add FastAPI Medium Article: Deploy a dockerized FastAPI application to AWS. PR #2515 by @vjanz . \u270f Fix typo in Tutorial - Handling Errors. PR #2486 by @johnthagen . \u270f Fix typo in Security OAuth2 scopes. PR #2407 by @jugmac00 . \u270f Fix typo/clarify docs for SQL (Relational) Databases. PR #2393 by @kangni . \ud83d\udcdd Add external link to \"FastAPI for Flask Users\". PR #2280 by @amitness .","title":"Docs"},{"location":"release-notes/#translations_8","text":"\ud83c\udf10 Fix Chinese translation of Tutorial - Query Parameters, remove obsolete content. PR #3051 by @louis70109 . \ud83c\udf10 Add French translation for Tutorial - Background Tasks. PR #3098 by @Smlep . \ud83c\udf10 Fix Korean translation for docs/ko/docs/index.md. PR #3159 by @SueNaEunYang . \ud83c\udf10 Add Korean translation for Tutorial - Query Parameters. PR #2390 by @hard-coders . \ud83c\udf10 Add French translation for FastAPI People. PR #2232 by @JulianMaurin . \ud83c\udf10 Add Korean translation for Tutorial - Path Parameters. PR #2355 by @hard-coders . \ud83c\udf10 Add French translation for Features. PR #2157 by @Jefidev . \ud83d\udc65 Update FastAPI People. PR #3031 by @github-actions[bot] . \ud83c\udf10 Add Chinese translation for Tutorial - Debugging. PR #2737 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Security - OAuth2 with Password (and hashing), Bearer with JWT tokens. PR #2642 by @waynerv . \ud83c\udf10 Add Korean translation for Tutorial - Header Parameters. PR #2589 by @mode9 . \ud83c\udf10 Add Chinese translation for Tutorial - Metadata and Docs URLs. PR #2559 by @blt232018 . \ud83c\udf10 Add Korean translation for Tutorial - First Steps. PR #2323 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - CORS (Cross-Origin Resource Sharing). PR #2540 by @blt232018 . \ud83c\udf10 Add Chinese translation for Tutorial - Middleware. PR #2334 by @lpdswing . \ud83c\udf10 Add Korean translation for Tutorial - Intro. PR #2317 by @hard-coders . \ud83c\udf10 Add Chinese translation for Tutorial - Bigger Applications - Multiple Files. PR #2453 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Security Intro. PR #2443 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Header Parameters. PR #2412 by @maoyibo . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Data Types. PR #2410 by @maoyibo . \ud83c\udf10 Add Japanese translation for Deployment - Docker. PR #2312 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Versions. PR #2310 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Cookie Parameters. PR #2261 by @alicrazy1947 . \ud83c\udf10 Add Japanese translation for Tutorial - Static files. PR #2260 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Testing. PR #2259 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Debugging. PR #2256 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Middleware. PR #2255 by @tokusumi . \ud83c\udf10 Add Japanese translation for Concurrency and async / await. PR #2058 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Simple OAuth2 with Password and Bearer. PR #2514 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Deta. PR #2314 by @tokusumi . \ud83c\udf10 Add Chinese translation for Tutorial - Security - Get Current User. PR #2474 by @waynerv . \ud83c\udf10 Add Japanese translation for Deployment - Manually. PR #2313 by @tokusumi . \ud83c\udf10 Add Japanese translation for Deployment - Intro. PR #2309 by @tokusumi . \ud83c\udf10 Add Japanese translation for FastAPI People. PR #2254 by @tokusumi . \ud83c\udf10 Add Japanese translation for Advanced - Path Operation Advanced Configuration. PR #2124 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for External Links. PR #2070 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body - Updates. PR #1956 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Form Data. PR #1943 by @SwftAlpc . \ud83c\udf10 Add Japanese translation for Tutorial - Cookie Parameters. PR #1933 by @SwftAlpc .","title":"Translations"},{"location":"release-notes/#internal_9","text":"\ud83d\udd27 Update top banner, point to newsletter. PR #3003 by @tiangolo . \ud83d\udd27 Disable sponsor WeTransfer. PR #3002 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2880 by @github-actions[bot] . \ud83d\udc65 Update FastAPI People. PR #2739 by @github-actions[bot] . \ud83d\udd27 Add new Gold Sponsor Talk Python \ud83c\udf89. PR #2673 by @tiangolo . \ud83d\udd27 Add new Gold Sponsor vim.so \ud83c\udf89. PR #2669 by @tiangolo . \ud83d\udd27 Add FastAPI user survey banner. PR #2623 by @tiangolo . \ud83d\udd27 Add new Bronze Sponsor(s) \ud83e\udd49\ud83c\udf89. PR #2622 by @tiangolo . \ud83d\udcdd Update social links: add Discord, fix GitHub. PR #2621 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Sponsors order. PR #2620 by @tiangolo . \ud83d\udd27 Update InvestSuite sponsor data. PR #2608 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2590 by @github-actions[bot] .","title":"Internal"},{"location":"release-notes/#0630","text":"","title":"0.63.0"},{"location":"release-notes/#features_6","text":"\u2728 Improve type annotations, add support for mypy --strict, internally and for external packages. PR #2547 by @tiangolo .","title":"Features"},{"location":"release-notes/#breaking-changes","text":"\u2b06\ufe0f Upgrade Uvicorn when installing fastapi[all] to the latest version including uvloop , the new range is uvicorn[standard] >=0.12.0,<0.14.0 . PR #2548 by @tiangolo .","title":"Breaking changes"},{"location":"release-notes/#fixes_3","text":"\ud83d\udc1b PR #2547 (read above) also fixes some false-positive mypy errors with callbacks parameters and when using the OAuth2 class.","title":"Fixes"},{"location":"release-notes/#docs_5","text":"\ud83d\udcdd Update Uvicorn installation instructions to use uvicorn[standard] (includes uvloop). PR #2543 by @tiangolo . \ud83d\udcdd Update title for Deta tutorial. PR #2466 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2454 by @github-actions[bot] .","title":"Docs"},{"location":"release-notes/#translations_9","text":"\ud83c\udf10 Add docs lang selector widget. PR #2542 by @tiangolo . \ud83c\udf10 Add Chinese translation for Tutorial - Response Status Code. PR #2442 by @waynerv . \ud83c\udf10 Start translation of the documentation for the Albanian language. PR #2516 by @vjanz . \ud83c\udf10 Add Chinese translation for Tutorial - Extra Models. PR #2416 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Response Model. PR #2414 by @waynerv . \ud83c\udf10 Add Chinese translation for Tutorial - Schema Extra Example. PR #2411 by @maoyibo . \ud83c\udf10 Add Korean translation for Index. PR #2192 by @hard-coders . \ud83c\udf10 Add Japanese translation for Advanced User Guide - Additional Status Codes. PR #2145 by @Attsun1031 .","title":"Translations"},{"location":"release-notes/#internal_10","text":"\ud83d\udc1b Fix docs overrides directory for translations. PR #2541 by @tiangolo . \u2796 Remove Typer as a docs building dependency (covered by typer-cli) to fix pip resolver conflicts. PR #2539 by @tiangolo . \u2728 Add newsletter: FastAPI and friends. PR #2509 by @tiangolo . \u2728 Add new Gold Sponsor: InvestSuite \ud83c\udf89. PR #2508 by @tiangolo . \ud83d\udd27 Add issue template configs. PR #2476 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0620","text":"","title":"0.62.0"},{"location":"release-notes/#features_7","text":"\u2728 Add support for shared/top-level parameters (dependencies, tags, etc). PR #2434 by @tiangolo . Up to now, for several options, the only way to apply them to a group of path operations was in include_router . That works well, but the call to app.include_router() or router.include_router() is normally done in another file. That means that, for example, to apply authentication to all the path operations in a router it would end up being done in a different file, instead of keeping related logic together. Setting options in include_router still makes sense in some cases, for example, to override or increase configurations from a third party router included in an app. But in a router that is part of a bigger application, it would probably make more sense to add those settings when creating the APIRouter . In FastAPI This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . dependencies : to include \u2728 top-level dependencies \u2728 that apply to the whole application. E.g. to add global authentication. callbacks : OpenAPI callbacks that apply to all the path operations . deprecated : to mark all the path operations as deprecated. \ud83e\udd37 include_in_schema : to allow excluding all the path operations from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations . For example: from fastapi import FastAPI , Depends async def some_dependency (): return app = FastAPI ( dependencies = [ Depends ( some_dependency )]) In APIRouter This allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and include_router . For example, it's not needed to set it explicitly when creating callbacks . dependencies : to include \u2728 router-level dependencies \u2728 that apply to all the path operations in a router. Up to now, this was only possible with include_router . callbacks : OpenAPI callbacks that apply to all the path operations in this router. deprecated : to mark all the path operations in a router as deprecated. include_in_schema : to allow excluding all the path operations in a router from the OpenAPI schema. responses : OpenAPI responses that apply to all the path operations in a router. prefix : to set the path prefix for a router. Up to now, this was only possible when calling include_router . tags : OpenAPI tags to apply to all the path operations in this router. For example: from fastapi import APIRouter , Depends async def some_dependency (): return router = APIRouter ( prefix = \"/users\" , dependencies = [ Depends ( some_dependency )]) In include_router Most of these settings are now supported in APIRouter , which normally lives closer to the related code, so it is recommended to use APIRouter when possible. But include_router is still useful to, for example, adding options (like dependencies , prefix , and tags ) when including a third party router, or a generic router that is shared between several projects. This PR allows setting the (mostly new) parameters (additionally to the already existing parameters): default_response_class : updated to handle defaults in APIRouter and FastAPI . deprecated : to mark all the path operations in a router as deprecated in OpenAPI. include_in_schema : to allow disabling all the path operations from showing in the OpenAPI schema. callbacks : OpenAPI callbacks that apply to all the path operations in this router. Note: all the previous parameters are still there, so it's still possible to declare dependencies in include_router .","title":"Features"},{"location":"release-notes/#breaking-changes_1","text":"PR #2434 includes several improvements that shouldn't affect normal use cases, but could affect in advanced scenarios: If you are testing the generated OpenAPI (you shouldn't, FastAPI already tests it extensively for you): the order for tags in include_router and path operations was updated for consistency, but it's a simple order change. If you have advanced custom logic to access each route's route.response_class , or the router.default_response_class , or the app.default_response_class : the default value for response_class in APIRoute and for default_response_class in APIRouter and FastAPI is now a DefaultPlaceholder used internally to handle and solve default values and overrides. The actual response class inside the DefaultPlaceholder is available at route.response_class.value .","title":"Breaking Changes"},{"location":"release-notes/#docs_6","text":"PR #2434 (above) includes new or updated docs: Advanced User Guide - OpenAPI Callbacks . Tutorial - Bigger Applications . Tutorial - Dependencies - Dependencies in path operation decorators . Tutorial - Dependencies - Global Dependencies . \ud83d\udcdd Add FastAPI monitoring blog post to External Links. PR #2324 by @louisguitton . \u270f\ufe0f Fix typo in Deta tutorial. PR #2320 by @tiangolo . \u2728 Add Discord chat. PR #2322 by @tiangolo . \ud83d\udcdd Fix image links for sponsors. PR #2304 by @tiangolo .","title":"Docs"},{"location":"release-notes/#translations_10","text":"\ud83c\udf10 Add Japanese translation for Advanced - Custom Response. PR #2193 by @Attsun1031 . \ud83c\udf10 Add Chinese translation for Benchmarks. PR #2119 by @spaceack . \ud83c\udf10 Add Chinese translation for Tutorial - Body - Nested Models. PR #1609 by @waynerv . \ud83c\udf10 Add Chinese translation for Advanced - Custom Response. PR #1459 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Return a Response Directly. PR #1452 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Additional Status Codes. PR #1451 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced - Path Operation Advanced Configuration. PR #1447 by @RunningIkkyu . \ud83c\udf10 Add Chinese translation for Advanced User Guide - Intro. PR #1445 by @RunningIkkyu .","title":"Translations"},{"location":"release-notes/#internal_11","text":"\ud83d\udd27 Update TestDriven link to course in sponsors section. PR #2435 by @tiangolo . \ud83c\udf71 Update sponsor logos. PR #2418 by @tiangolo . \ud83d\udc9a Fix disabling install of Material for MkDocs Insiders in forks, strike 1 \u26be. PR #2340 by @tiangolo . \ud83d\udc1b Fix disabling Material for MkDocs Insiders install in forks. PR #2339 by @tiangolo . \u2728 Add silver sponsor WeTransfer. PR #2338 by @tiangolo . \u2728 Set up and enable Material for MkDocs Insiders for the docs. PR #2325 by @tiangolo .","title":"Internal"},{"location":"release-notes/#0612","text":"","title":"0.61.2"},{"location":"release-notes/#fixes_4","text":"\ud83d\udccc Relax Swagger UI version pin. PR #2089 by @jmriebold . \ud83d\udc1b Fix bug overriding custom HTTPException and RequestValidationError from exception_handlers. PR #1924 by @uriyyo . \u270f\ufe0f Fix typo on dependencies utils and cleanup unused variable. PR #1912 by @Kludex .","title":"Fixes"},{"location":"release-notes/#docs_7","text":"\u270f\ufe0f Fix typo in Tutorial - Path Parameters. PR #2231 by @mariacamilagl . \u270f Fix a stylistic error in docs. PR #2206 by @ddobrinskiy . \u270f Fix capitalizaiton typo in docs. PR #2204 by @imba-tjd . \u270f Fix typo in docs. PR #2179 by @ammarasmro . \ud83d\udcdd Update/fix links in docs to use HTTPS. PR #2165 by @imba-tjd . \u270f Fix typos and add rewording in docs. PR #2159 by @nukopy . \ud83d\udcdd Fix code consistency in examples for Tutorial - User Guide - Path Parameters. PR #2158 by @nukopy . \ud83d\udcdd Fix renamed parameter content_type typo. PR #2135 by @TeoZosa . \u270f Fix minor typos in docs. PR #2122 by @TeoZosa . \u270f Fix typos in docs and source examples. PR #2102 by @AdrianDeAnda . \u270f Fix incorrect Celery URLs in docs. PR #2100 by @CircleOnCircles . \ud83d\udcdd Simplify intro to Python Types, all currently supported Python versions include type hints \ud83c\udf89. PR #2085 by @ninjaaron . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 3. PR #2054 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models 2. PR #2053 by @hitrust . \ud83d\udcdd Fix example code with sets in Tutorial - Body - Nested Models. PR #2052 by @hitrust . \u270f Fix typo in Benchmarks. PR #1995 by @AlejoAsd . \ud83d\udcdd Add note in CORS tutorial about allow_origins with [\"*\"] and allow_credentials. PR #1895 by @dsmurrell . \ud83d\udcdd Add deployment to Deta, the first gold sponsor \ud83c\udf89. PR #2303 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2282 by @github-actions[bot] . \u270f\ufe0f Fix uppercase in Tutorial - Query parameters. PR #2245 by @mariacamilagl . \ud83d\udcdd Add articles to External Links. PR #2247 by @tiangolo . \u270f Fix typo in Spanish tutorial index. PR #2020 by @aviloncho .","title":"Docs"},{"location":"release-notes/#translations_11","text":"\ud83c\udf10 Add Japanese translation for Advanced Tutorial - Response Directly. PR #2191 by @Attsun1031 . \ud83d\udcdd Add Japanese translation for Tutorial - Security - First Steps. PR #2153 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Query Parameters and String Validations. PR #1901 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for External Links. PR #1443 by @Serrones . \ud83c\udf10 Add Japanese translation for Tutorial - CORS. PR #2125 by @tokusumi . \ud83c\udf10 Add Japanese translation for Contributing. PR #2067 by @komtaki . \ud83c\udf10 Add Japanese translation for Project Generation. PR #2050 by @tokusumi . \ud83c\udf10 Add Japanese translation for Alternatives. PR #2043 by @Attsun1031 . \ud83c\udf10 Add Japanese translation for History Design and Future. PR #2002 by @komtaki . \ud83c\udf10 Add Japanese translation for Benchmarks. PR #1992 by @komtaki . \ud83c\udf10 Add Japanese translation for Tutorial - Header Parameters. PR #1935 by @SwftAlpc . \ud83c\udf10 Add Portuguese translation for Tutorial - First Steps. PR #1861 by @jessicapaz . \ud83c\udf10 Add Portuguese translation for Python Types. PR #1796 by @izaguerreiro . \ud83c\udf10 Add Japanese translation for Help FastAPI. PR #1692 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Body. PR #1683 by @tokusumi . \ud83c\udf10 Add Japanese translation for Tutorial - Query Params. PR #1674 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/path-params.md. PR #1671 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/first-steps.md. PR #1658 by @tokusumi . \ud83c\udf10 Add Japanese translation for tutorial/index.md. PR #1656 by @tokusumi . \ud83c\udf10 Add translation to Portuguese for Project Generation. PR #1602 by @Serrones . \ud83c\udf10 Add Japanese translation for Features. PR #1625 by @tokusumi . \ud83c\udf10 Initialize new language Korean for translations. PR #2018 by @hard-coders . \ud83c\udf10 Add Portuguese translation of Deployment. PR #1374 by @Serrones .","title":"Translations"},{"location":"release-notes/#internal_12","text":"\ud83d\udd25 Cleanup after upgrade for Docs Previews GitHub Action. PR #2248 by @tiangolo . \ud83d\udc1b Fix CI docs preview, unzip docs. PR #2246 by @tiangolo . \u2728 Add instant docs deploy previews for PRs from forks. PR #2244 by @tiangolo . \u26a1\ufe0f Build docs for languages in parallel in subprocesses to speed up CI. PR #2242 by @tiangolo . \ud83d\udc1b Fix docs order generation for partial translations. PR #2238 by @tiangolo . \ud83d\udc65 Update FastAPI People. PR #2202 by @github-actions[bot] . \u267b\ufe0f Update FastAPI People GitHub Action to send the PR as github-actions. PR #2201 by @tiangolo . \ud83d\udd27 Update FastAPI People GitHub Action config, run monthly. PR #2199 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependency, strike 1 \u26be. PR #2198 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action Docker dependencies. PR #2197 by @tiangolo . \ud83d\udc1b Fix FastAPI People GitHub Action when there's nothing to change. PR #2196 by @tiangolo . \ud83d\udc65 Add new section FastAPI People. PR #2195 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Latest Changes. PR #2190 by @tiangolo . \u2b06\ufe0f Upgrade GitHub Action Label Approved. PR #2189 by @tiangolo . \ud83d\udd27 Update GitHub Action Label Approved, run at 12:00. PR #2185 by @tiangolo . \ud83d\udc77 Upgrade GitHub Action Latest Changes. PR #2184 by @tiangolo . \ud83d\udc77 Set GitHub Action Label Approved to run daily, not every minute. PR #2163 by @tiangolo . \ud83d\udd25 Remove pr-approvals GitHub Action as it's not compatible with forks. Use the new one. PR #2162 by @tiangolo . \ud83d\udc77 Add GitHub Action Latest Changes. PR #2160 . \ud83d\udc77 Add GitHub Action Label Approved. PR #2161 .","title":"Internal"},{"location":"release-notes/#0611","text":"","title":"0.61.1"},{"location":"release-notes/#fixes_5","text":"Fix issues using jsonable_encoder with SQLAlchemy models directly. PR #1987 .","title":"Fixes"},{"location":"release-notes/#docs_8","text":"Fix typo in NoSQL docs. PR #1980 by @facundojmaero .","title":"Docs"},{"location":"release-notes/#translations_12","text":"Add translation for main page to Japanese PR #1571 by @ryuckel . Initialize French translations. PR #1975 by @JulianMaurin-BM . Initialize Turkish translations. PR #1905 by @ycd .","title":"Translations"},{"location":"release-notes/#internal_13","text":"Improve docs maintainability by updating hl_lines syntax to use ranges. PR #1863 by @la-mar .","title":"Internal"},{"location":"release-notes/#0610","text":"","title":"0.61.0"},{"location":"release-notes/#features_8","text":"Add support for injecting HTTPConnection (as Request and WebSocket ). Useful for sharing app state in dependencies. PR #1827 by @nsidnev . Export WebSocketDisconnect and add example handling WebSocket disconnections to docs. PR #1822 by @rkbeatss .","title":"Features"},{"location":"release-notes/#breaking-changes_2","text":"Require Pydantic > 1.0.0 . Remove support for deprecated Pydantic 0.32.2 . This improves maintainability and allows new features. In FastAPI and APIRouter : Remove path operation decorators related/deprecated parameter response_model_skip_defaults (use response_model_exclude_unset instead). Change path operation decorators parameter default for response_model_exclude from set() to None (as is in Pydantic). In encoders.jsonable_encoder : Remove deprecated skip_defaults , use instead exclude_unset . Set default of exclude from set() to None (as is in Pydantic). PR #1862 . In encoders.jsonable_encoder remove parameter sqlalchemy_safe . It was an early hack to allow returning SQLAlchemy models, but it was never documented, and the recommended way is using Pydantic's orm_mode as described in the tutorial: SQL (Relational) Databases . PR #1864 .","title":"Breaking Changes"},{"location":"release-notes/#docs_9","text":"Add link to the course by TestDriven.io: Test-Driven Development with FastAPI and Docker . PR #1860 . Fix empty log message in docs example about handling errors. PR #1815 by @manlix . Reword text to reduce ambiguity while not being gender-specific. PR #1824 by @Mause .","title":"Docs"},{"location":"release-notes/#internal_14","text":"Add Flake8 linting. Original PR #1774 by @MashhadiNima . Disable Gitter bot, as it's currently broken, and Gitter's response doesn't show the problem. PR #1853 .","title":"Internal"},{"location":"release-notes/#0602","text":"Fix typo in docs for query parameters. PR #1832 by @ycd . Add docs about Async Tests . PR #1619 by @empicano . Raise an exception when using form data ( Form , File ) without having python-multipart installed. Up to now the application would run, and raise an exception only when receiving a request with form data, the new behavior, raising early, will prevent from deploying applications with broken dependencies. It also detects if the correct package python-multipart is installed instead of the incorrect multipart (both importable as multipart ). PR #1851 based on original PR #1627 by @chrisngyn , @YKo20010 , @kx-chen . Re-enable Gitter releases bot. PR #1831 . Add link to async SQL databases tutorial from main SQL tutorial. PR #1813 by @short2strings . Fix typo in tutorial about behind a proxy. PR #1807 by @toidi . Fix typo in Portuguese docs. PR #1795 by @izaguerreiro . Add translations setup for Ukrainian. PR #1830 . Add external link Build And Host Fast Data Science Applications Using FastAPI . PR #1786 by @Kludex . Fix encoding of Pydantic models that inherit from others models with custom json_encoders . PR #1769 by @henrybetts . Simplify and improve jsonable_encoder . PR #1754 by @MashhadiNima . Simplify internal code syntax in several points. PR #1753 by @uriyyo . Improve internal typing, declare Optional parameters. PR #1731 by @MashhadiNima . Add external link Deploy FastAPI on Azure App Service to docs. PR #1726 by @windson . Add link to Starlette docs about WebSocket testing. PR #1717 by @hellocoldworld . Refactor generating dependant, merge for loops. PR #1714 by @Bloodielie . Update example for templates with Jinja to include HTML media type. PR #1690 by @frafra . Fix typos in docs for security. PR #1678 by @nilslindemann . Fix typos in docs for dependencies. PR #1675 by @nilslindemann . Fix type annotation for **extra parameters in FastAPI . PR #1659 by @bharel . Bump MkDocs Material to fix docs in browsers with dark mode. PR #1789 by @adriencaccia . Remove docs preview comment from each commit. PR #1826 . Update GitHub context extraction for Gitter notification bot. PR #1766 .","title":"0.60.2"},{"location":"release-notes/#0601","text":"Add debugging logs for GitHub actions to introspect GitHub hidden context. PR #1764 . Use OS preference theme for online docs. PR #1760 by @adriencaccia . Upgrade Starlette to version 0.13.6 to handle a vulnerability when using static files in Windows. PR #1759 by @jamesag26 . Pin Swagger UI temporarily, waiting for a fix for swagger-api/swagger-ui#6249 . PR #1763 . Update GitHub Actions, use commit from PR for docs preview, not commit from pre-merge. PR #1761 . Update GitHub Actions, refactor Gitter bot. PR #1746 .","title":"0.60.1"},{"location":"release-notes/#0600","text":"Add GitHub Action to watch for missing preview docs and trigger a preview deploy. PR #1740 . Add custom GitHub Action to get artifact with docs preview. PR #1739 . Add new GitHub Actions to preview docs from PRs. PR #1738 . Add XML test coverage to support GitHub Actions. PR #1737 . Update badges and remove Travis now that GitHub Actions is the main CI. PR #1736 . Add GitHub Actions for CI, move from Travis. PR #1735 . Add support for adding OpenAPI schema for GET requests with a body. PR #1626 by @victorphoenix3 .","title":"0.60.0"},{"location":"release-notes/#0590","text":"Fix typo in docstring for OAuth2 utils. PR #1621 by @tomarv2 . Update JWT docs to use Python-jose instead of PyJWT. Initial PR #1610 by @asheux . Fix/re-enable search bar in docs. PR #1703 . Auto-generate a \"server\" in OpenAPI servers when there's a root_path instead of prefixing all the paths : Add a new parameter for FastAPI classes: root_path_in_servers to disable the auto-generation of servers . New docs about root_path and servers in Additional Servers . Update OAuth2 examples to use a relative URL for tokenUrl=\"token\" to make sure those examples keep working as-is even when behind a reverse proxy. Initial PR #1596 by @rkbeatss . Fix typo/link in External Links. PR #1702 . Update handling of External Links to use a data file and allow translating the headers without becoming obsolete quickly when new links are added. PR #https://github.com/tiangolo/fastapi/pull/1701 . Add external link Machine learning model serving in Python using FastAPI and Streamlit to docs. PR #1669 by @davidefiocco . Add note in docs on order in Pydantic Unions. PR #1591 by @kbanc . Improve support for tests in editor. PR #1699 . Pin dependencies. PR #1697 . Update isort to version 5.x.x. PR #1670 by @asheux .","title":"0.59.0"},{"location":"release-notes/#0581","text":"Add link in docs to Pydantic data types. PR #1612 by @tayoogunbiyi . Fix link in warning logs for openapi_prefix . PR #1611 by @bavaria95 . Fix bad link in docs. PR #1603 by @molto0504 . Add Vim temporary files to .gitignore for contributors using Vim. PR #1590 by @asheux . Fix typo in docs for sub-applications. PR #1578 by @schlpbch . Use Optional in all the examples in the docs. Original PR #1574 by @chrisngyn , @kx-chen , @YKo20010 . Updated and merged PR #1644 . Update tests and handling of response_model_by_alias . PR #1642 . Add translation to Chinese for Body - Fields - \u8bf7\u6c42\u4f53 - \u5b57\u6bb5 . PR #1569 by @waynerv . Update Chinese translation of main page. PR #1564 by @waynerv . Add translation to Chinese for Body - Multiple Parameters - \u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 . PR #1532 by @waynerv . Add translation to Chinese for Path Parameters and Numeric Validations - \u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c . PR #1506 by @waynerv . Add GitHub action to auto-label approved PRs (mainly for translations). PR #1638 .","title":"0.58.1"},{"location":"release-notes/#0580","text":"Deep merge OpenAPI responses to preserve all the additional metadata. PR #1577 . Mention in docs that only main app events are run (not sub-apps). PR #1554 by @amacfie . Fix body validation error response, do not include body variable when it is not embedded. PR #1553 by @amacfie . Fix testing OAuth2 security scopes when using dependency overrides. PR #1549 by @amacfie . Fix Model for JSON Schema keyword not as a JSON Schema instead of a list. PR #1548 by @v-do . Add support for OpenAPI servers . PR #1547 by @mikaello .","title":"0.58.0"},{"location":"release-notes/#0570","text":"Remove broken link from \"External Links\". PR #1565 by @victorphoenix3 . Update/fix docs for WebSockets with dependencies . Original PR #1540 by @ChihSeanHsu . Add support for Python's http.HTTPStatus in status_code parameters. PR #1534 by @retnikt . When using Pydantic models with __root__ , use the internal value in jsonable_encoder . PR #1524 by @patrickkwang . Update docs for path parameters. PR #1521 by @yankeexe . Update docs for first steps, links and rewording. PR #1518 by @yankeexe . Enable showCommonExtensions in Swagger UI to show additional validations like maxLength , etc. PR #1466 by @TiewKH . Make OAuth2PasswordRequestFormStrict importable directly from fastapi.security . PR #1462 by @RichardHoekstra . Add docs about Default response class . PR #1455 by @TezRomacH . Add note in docs about additional parameters response_model_exclude_defaults and response_model_exclude_none in Response Model . PR #1427 by @wshayes . Add note about PyCharm Pydantic plugin to docs. PR #1420 by @koxudaxi . Update and clarify testing function name. PR #1395 by @chenl . Fix duplicated headers created by indirect dependencies that use the request directly. PR #1386 by @obataku from tests by @scottsmith2gmail . Upgrade Starlette version to 0.13.4 . PR #1361 by @rushton . Improve error handling and feedback for requests with invalid JSON. PR #1354 by @aviramha . Add support for declaring metadata for tags in OpenAPI. New docs at Tutorial - Metadata and Docs URLs - Metadata for tags . PR #1348 by @thomas-maschler . Add basic setup for Russian translations. PR #1566 . Remove obsolete Chinese articles after adding official community translations. PR #1510 by @waynerv . Add __repr__ for path operation function parameter helpers (like Query , Depends , etc) to simplify debugging. PR #1560 by @rkbeatss and @victorphoenix3 .","title":"0.57.0"},{"location":"release-notes/#0561","text":"Add link to advanced docs from tutorial. PR #1512 by @kx-chen . Remove internal unnecessary f-strings. PR #1526 by @kotamatsuoka . Add translation to Chinese for Query Parameters and String Validations - \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c . PR #1500 by @waynerv . Add translation to Chinese for Request Body - \u8bf7\u6c42\u4f53 . PR #1492 by @waynerv . Add translation to Chinese for Help FastAPI - Get Help - \u5e2e\u52a9 FastAPI - \u83b7\u53d6\u5e2e\u52a9 . PR #1465 by @waynerv . Add translation to Chinese for Query Parameters - \u67e5\u8be2\u53c2\u6570 . PR #1454 by @waynerv . Add translation to Chinese for Contributing - \u5f00\u53d1 - \u8d21\u732e . PR #1460 by @waynerv . Add translation to Chinese for Path Parameters - \u8def\u5f84\u53c2\u6570 . PR #1453 by @waynerv . Add official Microsoft project generator for serving spaCy with FastAPI and Azure Cognitive Skills to Project Generators . PR #1390 by @kabirkhan . Update docs in Python Types Intro to include info about Optional . Original PR #1377 by @yaegassy . Fix support for callable class dependencies with yield . PR #1365 by @mrosales . Fix/remove incorrect error logging when a client sends invalid payloads. PR #1351 by @dbanty . Add translation to Chinese for First Steps - \u7b2c\u4e00\u6b65 . PR #1323 by @waynerv . Fix generating OpenAPI for apps using callbacks with routers including Pydantic models. PR #1322 by @nsidnev . Optimize internal regex performance in get_path_param_names() . PR #1243 by @heckad . Remove *, from functions in docs where it's not needed. PR #1239 by @pankaj-giri . Start translations for Italian. PR #1557 by @csr .","title":"0.56.1"},{"location":"release-notes/#0560","text":"Add support for ASGI root_path : Use root_path internally for mounted applications, so that OpenAPI and the docs UI works automatically without extra configurations and parameters. Add new root_path parameter for FastAPI applications to provide it in cases where it can be set with the command line (e.g. for Uvicorn and Hypercorn, with the parameter --root-path ). Deprecate openapi_prefix parameter in favor of the new root_path parameter. Add new/updated docs for Sub Applications - Mounts , without openapi_prefix (as it is now handled automatically). Add new/updated docs for Behind a Proxy , including how to setup a local testing proxy with Traefik and using root_path . Update docs for Extending OpenAPI with the new openapi_prefix parameter passed (internally generated from root_path ). Original PR #1199 by @iksteen . Update new issue templates and docs: Help FastAPI - Get Help . PR #1531 . Update GitHub action issue-manager. PR #1520 . Add new links: English articles : Real-time Notifications with Python and Postgres by Guillermo Cruz . Microservice in Python using FastAPI by Paurakh Sharma Humagain . Build simple API service with Python FastAPI \u2014 Part 1 by cuongld2 . FastAPI + Zeit.co = \ud83d\ude80 by Paul Sec . Build a web API from scratch with FastAPI - the workshop by Sebasti\u00e1n Ram\u00edrez (tiangolo) . Build a Secure Twilio Webhook with Python and FastAPI by Twilio . Using FastAPI with Django by Stavros Korokithakis . Introducing Dispatch by Netflix . Podcasts : Build The Next Generation Of Python Web Applications With FastAPI - Episode 259 - interview to Sebast\u00edan Ram\u00edrez (tiangolo) by Podcast. __init__ . Talks : PyConBY 2020: Serve ML models easily with FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . [VIRTUAL] Py.Amsterdam's flying Software Circus: Intro to FastAPI by Sebasti\u00e1n Ram\u00edrez (tiangolo) . PR #1467 . Add translation to Chinese for Python Types Intro - Python \u7c7b\u578b\u63d0\u793a\u7b80\u4ecb . PR #1197 by @waynerv .","title":"0.56.0"},{"location":"release-notes/#0551","text":"Fix handling of enums with their own schema in path parameters. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1463 .","title":"0.55.1"},{"location":"release-notes/#0550","text":"Allow enums to allow them to have their own schemas in OpenAPI. To support samuelcolvin/pydantic#1432 in FastAPI. PR #1461 . Add links for funding through GitHub sponsors . PR #1425 . Update issue template for for questions. PR #1344 by @retnikt . Update warning about storing passwords in docs. PR #1336 by @skorokithakis . Fix typo. PR #1326 by @chenl . Add translation to Portuguese for Alternatives, Inspiration and Comparisons - Alternativas, Inspira\u00e7\u00e3o e Compara\u00e7\u00f5es . PR #1325 by @Serrones . Fix 2 typos in docs. PR #1324 by @waynerv . Update CORS docs, fix correct default of max_age=600 . PR #1301 by @derekbekoe . Add translation of main page to Portuguese . PR #1300 by @Serrones . Re-word and clarify docs for extra info in fields. PR #1299 by @chris-allnutt . Make sure the * in short features in the docs is consistent (after . ) in all languages. PR #1424 . Update order of execution for get_db in SQLAlchemy tutorial. PR #1293 by @bcb . Fix typos in Async docs. PR #1423 .","title":"0.55.0"},{"location":"release-notes/#0542","text":"Add translation to Spanish for Concurrency and async / await - Concurrencia y async / await . PR #1290 by @alvaropernas . Remove obsolete vote link. PR #1289 by @donhui . Allow disabling docs UIs by just disabling OpenAPI with openapi_url=None . New example in docs: Advanced: Conditional OpenAPI . PR #1421 . Add translation to Portuguese for Benchmarks - Compara\u00e7\u00f5es . PR #1274 by @Serrones . Add translation to Portuguese for Tutorial - User Guide - Intro - Tutorial - Guia de Usu\u00e1rio - Introdu\u00e7\u00e3o . PR #1259 by @marcosmmb . Allow using Unicode in MkDocs for translations. PR #1419 . Add translation to Spanish for Advanced User Guide - Intro - Gu\u00eda de Usuario Avanzada - Introducci\u00f3n . PR #1250 by @jfunez . Add translation to Portuguese for History, Design and Future - Hist\u00f3ria, Design e Futuro . PR #1249 by @marcosmmb . Add translation to Portuguese for Features - Recursos . PR #1248 by @marcosmmb . Add translation to Spanish for Tutorial - User Guide - Intro - Tutorial - Gu\u00eda de Usuario - Introducci\u00f3n . PR #1244 by @MartinEliasQ . Add translation to Chinese for Deployment - \u90e8\u7f72 . PR #1203 by @RunningIkkyu . Add translation to Chinese for Tutorial - User Guide - Intro - \u6559\u7a0b - \u7528\u6237\u6307\u5357 - \u7b80\u4ecb . PR #1202 by @waynerv . Add translation to Chinese for Features - \u7279\u6027 . PR #1192 by @Dustyposa . Add translation for main page to Chinese PR #1191 by @waynerv . Update docs for project generation. PR #1287 . Add Spanish translation for Introducci\u00f3n a los Tipos de Python (Python Types Intro) . PR #1237 by @mariacamilagl . Add Spanish translation for Caracter\u00edsticas (Features) . PR #1220 by @mariacamilagl .","title":"0.54.2"},{"location":"release-notes/#0541","text":"Update database test setup. PR #1226 . Improve test debugging by showing response text in failing tests. PR #1222 by @samuelcolvin .","title":"0.54.1"},{"location":"release-notes/#0540","text":"Fix grammatical mistakes in async docs. PR #1188 by @mickeypash . Add support for response_model_exclude_defaults and response_model_exclude_none : Deprecate the parameter include_none in jsonable_encoder and add the inverted exclude_none , to keep in sync with Pydantic. PR #1166 by @voegtlel . Add example about Testing a Database . Initial PR #1144 by @duganchen . Update docs for Development - Contributing: Translations including note about reviewing translation PRs. #1215 . Update log style in README.md for GitHub Markdown compatibility. PR #1200 by #geekgao . Add Python venv env to .gitignore . PR #1212 by @cassiobotaro . Start Portuguese translations. PR #1210 by @cassiobotaro . Update docs for Pydantic's Settings using a dependency with @lru_cache() . PR #1214 . Add first translation to Spanish FastAPI . PR #1201 by @mariacamilagl . Add docs about Settings and Environment Variables . Initial PR 1118 by @alexmitelman .","title":"0.54.0"},{"location":"release-notes/#0532","text":"Fix automatic embedding of body fields for dependencies and sub-dependencies. Original PR #1079 by @Toad2186 . Fix dependency overrides in WebSocket testing. PR #1122 by @amitlissack . Fix docs script to ensure languages are always sorted. PR #1189 . Start translations for Chinese. PR #1187 by @RunningIkkyu . Add docs for Schema Extra - Example . PR #1185 .","title":"0.53.2"},{"location":"release-notes/#0531","text":"Fix included example after translations refactor. PR #1182 . Add docs example for example in Field . Docs at Body - Fields: JSON Schema extras . PR #1106 by @JohnPaton . Fix using recursive models in response_model . PR #1164 by @voegtlel . Add docs for Pycharm Debugging . PR #1096 by @youngquan . Fix typo in docs. PR #1148 by @PLNech . Update Windows development environment instructions. PR #1179 .","title":"0.53.1"},{"location":"release-notes/#0530","text":"Update test coverage badge. PR #1175 . Add orjson to pip install fastapi[all] . PR #1161 by @michael0liver . Fix included example for GZipMiddleware . PR #1138 by @arimbr . Fix class name in docstring for OAuth2PasswordRequestFormStrict . PR #1126 by @adg-mh . Clarify function name in example in docs. PR #1121 by @tmsick . Add external link Apache Kafka producer and consumer with FastAPI and aiokafka to docs. PR #1112 by @iwpnd . Fix serialization when using by_alias or exclude_unset and returning data with Pydantic models. PR #1074 by @juhovh-aiven . Add Gitter chat to docs. PR #1061 by @aakashnand . Update and simplify translations docs. PR #1171 . Update development of FastAPI docs, set address to 127.0.0.1 to improve Windows support. PR #1169 by @mariacamilagl . Add support for docs translations. New docs: Development - Contributing: Docs: Translations . PR #1168 . Update terminal styles in docs and add note about Typer , the FastAPI of CLIs . PR #1139 .","title":"0.53.0"},{"location":"release-notes/#0520","text":"Add new high-performance JSON response class using orjson . New docs: Custom Response - HTML, Stream, File, others: ORJSONResponse . PR #1065 .","title":"0.52.0"},{"location":"release-notes/#0510","text":"Re-export utils from Starlette: This allows using things like from fastapi.responses import JSONResponse instead of from starlette.responses import JSONResponse . It's mainly syntax sugar, a convenience for developer experience. Now Request , Response , WebSocket , status can be imported directly from fastapi as in from fastapi import Response . This is because those are frequently used, to use the request directly, to set headers and cookies, to get status codes, etc. Documentation changes in many places, but new docs and noticeable improvements: Custom Response - HTML, Stream, File, others . Advanced Middleware . Including WSGI - Flask, Django, others . PR #1064 .","title":"0.51.0"},{"location":"release-notes/#0500","text":"Add link to Release Notes from docs about pinning versions for deployment. PR #1058 . Upgrade code to use the latest version of Starlette, including: Several bug fixes. Optional redirects of slashes, with or without ending in / . Events for routers, \"startup\" , and \"shutdown\" . PR #1057 . Add docs about pinning FastAPI versions for deployment: Deployment: FastAPI versions . PR #1056 .","title":"0.50.0"},{"location":"release-notes/#0492","text":"Fix links in release notes. PR #1052 by @sattosan . Fix typo in release notes. PR #1051 by @sattosan . Refactor/clarify serialize_response parameter name to avoid confusion. PR #1031 by @patrickmckenna . Refactor calling each a path operation's handler function in an isolated function, to simplify profiling. PR #1027 by @sm-Fifteen . Add missing dependencies for testing. PR #1026 by @sm-Fifteen . Fix accepting valid types for response models, including Python types like List[int] . PR #1017 by @patrickmckenna . Fix format in SQL tutorial. PR #1015 by @vegarsti .","title":"0.49.2"},{"location":"release-notes/#0491","text":"Fix path operation duplicated parameters when used in dependencies and the path operation function. PR #994 by @merowinger92 . Update Netlify previews deployment GitHub action as the fix is already merged and there's a new release. PR #1047 . Move mypy configurations to config file. PR #987 by @hukkinj1 . Temporary fix to Netlify previews not deployable from PRs from forks. PR #1046 by @mariacamilagl .","title":"0.49.1"},{"location":"release-notes/#0490","text":"Fix encoding of pathlib paths in jsonable_encoder . PR #978 by @patrickmckenna . Add articles to External Links : Python\u306eWeb framework\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6bd4\u8f03 (Django, Flask, responder, FastAPI, japronto) and [FastAPI] Python\u88fd\u306eASGI Web \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af FastAPI\u306b\u5165\u9580\u3059\u308b . PR #974 by @tokusumi . Fix broken links in docs. PR #949 by @tsotnikov . Fix small typos. PR #941 by @NikitaKolesov . Update and clarify docs for dependencies with yield . PR #986 . Add Mermaid JS support for diagrams in docs. Add first diagrams to Dependencies: First Steps and Dependencies with yield and HTTPException . PR #985 . Update CI to run docs deployment in GitHub actions. PR #983 . Allow callable s in path operation functions , like functions modified with functools.partial . PR #977 .","title":"0.49.0"},{"location":"release-notes/#0480","text":"Run linters first in tests to error out faster. PR #948 . Log warning about email-validator only when used. PR #946 . Simplify Peewee docs with double dependency with yield . PR #947 . Add article External Links : Create and Deploy FastAPI app to Heroku . PR #942 by @windson . Update description of Sanic, as it is now ASGI too. PR #932 by @raphaelauv . Fix typo in main page. PR #920 by @mMarzeta . Fix parsing of possibly invalid bodies. PR #918 by @dmontagu . Fix typo #916 by @adursun . Allow Any type for enums in OpenAPI. PR #906 by @songzhi . Add article to External Links : How to continuously deploy a FastAPI to AWS Lambda with AWS SAM . PR #901 by @iwpnd . Add note about using Body parameters without Pydantic. PR #900 by @pawamoy . Fix Pydantic field clone logic. PR #899 by @deuce2367 . Fix link in middleware docs. PR #893 by @linchiwei123 . Rename default API title from \"Fast API\" to \"FastAPI\" for consistency. PR #890 .","title":"0.48.0"},{"location":"release-notes/#0471","text":"Fix model filtering in response_model , cloning sub-models. PR #889 . Fix FastAPI serialization of Pydantic models using ORM mode blocking the event loop. PR #888 .","title":"0.47.1"},{"location":"release-notes/#0470","text":"Refactor documentation to make a simpler and shorter Tutorial - User Guide and an additional Advanced User Guide with all the additional docs. PR #887 . Tweak external links, Markdown format, typos. PR #881 . Fix bug in tutorial handling HTTP Basic Auth username and password . PR #865 by @isaevpd . Fix handling form path operation parameters declared with pure classes like list , tuple , etc. PR #856 by @nsidnev . Add request body to RequestValidationError , new docs: Use the RequestValidationError body . Initial PR #853 by @aviramha . Update External Links with new links and dynamic GitHub projects with fastapi topic. PR #850 . Fix Peewee contextvars handling in docs: SQL (Relational) Databases with Peewee . PR #879 . Setup development environment with Python's Venv and Flit, instead of requiring the extra Pipenv duplicating dependencies. Updated docs: Development - Contributing . PR #877 . Update docs for HTTP Basic Auth to improve security against timing attacks. Initial PR #807 by @zwass .","title":"0.47.0"},{"location":"release-notes/#0460","text":"Fix typos and tweak configs. PR #837 . Add link to Chinese article in External Links . PR 810 by @wxq0309 . Implement OAuth2AuthorizationCodeBearer class. PR #797 by @kuwv . Update example upgrade in docs main page. PR #795 by @cdeil . Fix callback handling for sub-routers. PR #792 by @jekirl . Fix typos. PR #784 by @kkinder . Add 4 Japanese articles to External Links . PR #783 by @HymanZHAN . Add support for subtypes of main types in jsonable_encoder , e.g. asyncpg's UUIDs. PR #756 by @RmStorm . Fix usage of Pydantic's HttpUrl in docs. PR #832 by @Dustyposa . Fix Twitter links in docs. PR #813 by @justindujardin . Add docs for correctly using FastAPI with Peewee ORM . Including how to overwrite parts of Peewee to correctly handle async threads. PR #789 .","title":"0.46.0"},{"location":"release-notes/#0450","text":"Add support for OpenAPI Callbacks: New docs: OpenAPI Callbacks . Refactor generation of operationId s to be valid Python names (also valid variables in most languages). Add default_response_class parameter to APIRouter . Original PR #722 by @booooh . Refactor logging to use the same logger everywhere, update log strings and levels. PR #781 . Add article to External Links : \u041f\u043e\u0447\u0435\u043c\u0443 \u0412\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u043e\u043f\u0440\u043e\u0431\u043e\u0432\u0430\u0442\u044c FastAPI? . PR #766 by @prostomarkeloff . Remove gender bias in docs for handling errors. PR #780 . Original idea in PR #761 by @classywhetten . Rename docs and references to body-schema to body-fields to keep in line with Pydantic. PR #746 by @prostomarkeloff .","title":"0.45.0"},{"location":"release-notes/#0441","text":"Add GitHub social preview images to git. PR #752 . Update PyPI \"trove classifiers\". PR #751 . Add full support for Python 3.8. Enable Python 3.8 in full in Travis. PR 749 . Update \"new issue\" templates. PR #749 . Fix serialization of errors for exotic Pydantic types. PR #748 by @dmontagu .","title":"0.44.1"},{"location":"release-notes/#0440","text":"Add GitHub action Issue Manager . PR #742 . Fix typos in docs. PR 734 by @bundabrg . Fix usage of custom_encoder in jsonable_encoder . PR #715 by @matrixise . Fix invalid XML example. PR 710 by @OcasoProtal . Fix typos and update wording in deployment docs. PR #700 by @marier-nico . Add note about dependencies in APIRouter docs. PR #698 by @marier-nico . Add support for async class methods as dependencies #681 by @frankie567 . Add FastAPI with Swagger UI cheatsheet to external links. PR #671 by @euri10 . Fix typo in HTTP protocol in CORS example. PR #647 by @forestmonster . Add support for Pydantic versions 1.0.0 and above, with temporary (deprecated) backwards compatibility for Pydantic 0.32.2 . PR #646 by @dmontagu .","title":"0.44.0"},{"location":"release-notes/#0430","text":"Update docs to reduce gender bias. PR #645 by @ticosax . Add docs about overriding the operationId for all the path operations based on their function name. PR #642 by @SKalt . Fix validators in models generating an incorrect key order. PR #637 by @jaddison . Generate correct OpenAPI docs for responses with no content. PR #621 by @brotskydotcom . Remove $ from Bash code blocks in docs for consistency. PR #613 by @nstapelbroek . Add docs for self-serving docs' (Swagger UI) static assets , e.g. to use the docs offline, or without Internet. Initial PR #557 by @svalouch . Fix black linting after upgrade. PR #682 by @frankie567 .","title":"0.43.0"},{"location":"release-notes/#0420","text":"Add dependencies with yield , a.k.a. exit steps, context managers, cleanup, teardown, ... This allows adding extra code after a dependency is done. It can be used, for example, to close database connections. Dependencies with yield can be normal or async , FastAPI will run normal dependencies in a threadpool. They can be combined with normal dependencies. It's possible to have arbitrary trees/levels of dependencies with yield and exit steps are handled in the correct order automatically. It works by default in Python 3.7 or above. For Python 3.6, it requires the extra backport dependencies: async-exit-stack async-generator New docs at Dependencies with yield . Updated database docs SQL (Relational) Databases: Main FastAPI app . PR #595 . Fix sitemap.xml in website. PR #598 by @samuelcolvin .","title":"0.42.0"},{"location":"release-notes/#0410","text":"Upgrade required Starlette to 0.12.9 , the new range is >=0.12.9,<=0.12.9 . Add State to FastAPI apps at app.state . PR #593 . Improve handling of custom classes for Request s and APIRoute s. This helps to more easily solve use cases like: Reading a body before and/or after a request (equivalent to a middleware). Run middleware-like code only for a subset of path operations . Process a request before passing it to a path operation function . E.g. decompressing, deserializing, etc. Processing a response after being generated by path operation functions but before returning it. E.g. adding custom headers, logging, adding extra metadata. New docs section: Custom Request and APIRoute class . PR #589 by @dmontagu . Fix preserving custom route class in routers when including other sub-routers. PR #538 by @dmontagu .","title":"0.41.0"},{"location":"release-notes/#0400","text":"Add notes to docs about installing python-multipart when using forms. PR #574 by @sliptonic . Generate OpenAPI schemas in alphabetical order. PR #554 by @dmontagu . Add support for truncating docstrings from path operation functions . New docs at Advanced description from docstring . PR #556 by @svalouch . Fix DOCTYPE in HTML files generated for Swagger UI and ReDoc. PR #537 by @Trim21 . Fix handling 4XX responses overriding default 422 validation error responses. PR #517 by @tsouvarev . Fix typo in documentation for Simple HTTP Basic Auth . PR #514 by @prostomarkeloff . Fix incorrect documentation example in first steps . PR #511 by @IgnatovFedor . Add support for Swagger UI initOauth settings with the parameter swagger_ui_init_oauth . PR #499 by @zamiramir .","title":"0.40.0"},{"location":"release-notes/#0390","text":"Allow path parameters to have default values (e.g. None ) and discard them instead of raising an error. This allows declaring a parameter like user_id: str = None that can be taken from a query parameter, but the same path operation can be included in a router with a path /users/{user_id} , in which case will be taken from the path and will be required. PR #464 by @jonathanunderwood . Add support for setting a default_response_class in the FastAPI instance or in include_router . Initial PR #467 by @toppk . Add support for type annotations using strings and from __future__ import annotations . PR #451 by @dmontagu .","title":"0.39.0"},{"location":"release-notes/#0381","text":"Fix incorrect Request class import. PR #493 by @kamalgill .","title":"0.38.1"},{"location":"release-notes/#0380","text":"Add recent articles to External Links and recent opinions. PR #490 . Upgrade support range for Starlette to include 0.12.8 . The new range is >=0.11.1,<=0.12.8\" . PR #477 by @dmontagu . Upgrade support to Pydantic version 0.32.2 and update internal code to use it (breaking change). PR #463 by @dmontagu .","title":"0.38.0"},{"location":"release-notes/#0370","text":"Add support for custom route classes for advanced use cases. PR #468 by @dmontagu . Allow disabling Google fonts in ReDoc. PR #481 by @b1-luettje . Fix security issue: when returning a sub-class of a response model and using skip_defaults it could leak information. PR #485 by @dmontagu . Enable tests for Python 3.8-dev. PR #465 by @Jamim . Add support and tests for Pydantic dataclasses in response_model . PR #454 by @dconathan . Fix typo in OAuth2 JWT tutorial. PR #447 by @pablogamboa . Use the media_type parameter in Body() params to set the media type in OpenAPI for requestBody . PR #439 by @divums . Add article Deploying a scikit-learn model with ONNX and FastAPI by https://www.linkedin.com/in/nico-axtmann . PR #438 by @naxty . Allow setting custom 422 (validation error) response/schema in OpenAPI. And use media type from response class instead of fixed application/json (the default). PR #437 by @divums . Fix using \"default\" extra response with status codes at the same time. PR #489 . Allow additional responses to use status code ranges (like 5XX and 4XX ) and \"default\" . PR #435 by @divums .","title":"0.37.0"},{"location":"release-notes/#0360","text":"Fix implementation for skip_defaults when returning a Pydantic model. PR #422 by @dmontagu . Fix OpenAPI generation when using the same dependency in multiple places for the same path operation . PR #417 by @dmontagu . Allow having empty paths in path operations used with include_router and a prefix . This allows having a router for /cats and all its path operations , while having one of them for /cats . Now it doesn't have to be only /cats/ (with a trailing slash). To use it, declare the path in the path operation as the empty string ( \"\" ). PR #415 by @vitalik . Fix mypy error after merging PR #415. PR #462 .","title":"0.36.0"},{"location":"release-notes/#0350","text":"Fix typo in routing assert . PR #419 by @pablogamboa . Fix typo in docs. PR #411 by @bronsen . Fix parsing a body type declared with Union . PR #400 by @koxudaxi .","title":"0.35.0"},{"location":"release-notes/#0340","text":"Upgrade Starlette supported range to include the latest 0.12.7 . The new range is 0.11.1,<=0.12.7 . PR #367 by @dedsm . Add test for OpenAPI schema with duplicate models from PR #333 by @dmontagu . PR #385 .","title":"0.34.0"},{"location":"release-notes/#0330","text":"Upgrade Pydantic version to 0.30.0 . PR #384 by @jekirl .","title":"0.33.0"},{"location":"release-notes/#0320","text":"Fix typo in docs for features. PR #380 by @MartinoMensio . Fix source code limit for example in Query Parameters . PR #366 by @Smashman . Update wording in docs about OAuth2 scopes . PR #371 by @cjw296 . Update docs for Enum s to inherit from str and improve Swagger UI rendering. PR #351 . Fix regression, add Swagger UI deep linking again. PR #350 . Add test for having path templates in prefix of .include_router . PR #349 . Add note to docs: Include the same router multiple times with different prefix . PR #348 . Fix OpenAPI/JSON Schema generation for two functions with the same name (in different modules) with the same composite bodies. Composite bodies' IDs are now based on path, not only on route name, as the auto-generated name uses the function names, that can be duplicated in different modules. The same new ID generation applies to response models. This also changes the generated title for those models. Only composite bodies and response models are affected because those are generated dynamically, they don't have a module (a Python file). This also adds the possibility of using .include_router() with the same APIRouter multiple times, with different prefixes, e.g. /api/v2 and /api/latest , and it will now work correctly. PR #347 .","title":"0.32.0"},{"location":"release-notes/#0310","text":"Upgrade Pydantic supported version to 0.29.0 . New supported version range is \"pydantic >=0.28,<=0.29.0\" . This adds support for Pydantic Generic Models , kudos to @dmontagu . PR #344 .","title":"0.31.0"},{"location":"release-notes/#0301","text":"Add section in docs about External Links and Articles . PR #341 . Remove Pipfile.lock from the repository as it is only used by FastAPI contributors (developers of FastAPI itself). See the PR for more details. PR #340 . Update section about Help FastAPI - Get Help . PR #339 . Refine internal type declarations to improve/remove Mypy errors in users' code. PR #338 . Update and clarify SQL tutorial with SQLAlchemy . PR #331 by @mariacamilagl . Add SQLite online viewers to the docs . PR #330 by @cyrilbois .","title":"0.30.1"},{"location":"release-notes/#0300","text":"Add support for Pydantic's ORM mode: Updated documentation about SQL with SQLAlchemy, using Pydantic models with ORM mode, SQLAlchemy models with relations, separation of files, simplification of code and other changes. New docs: SQL (Relational) Databases . The new support for ORM mode fixes issues/adds features related to ORMs with lazy-loading, hybrid properties, dynamic/getters (using @property decorators) and several other use cases. This applies to ORMs like SQLAlchemy, Peewee, Tortoise ORM, GINO ORM and virtually any other. If your path operations return an arbitrary object with attributes (e.g. my_item.name instead of my_item[\"name\"] ) AND you use a response_model , make sure to update the Pydantic models with orm_mode = True as described in the docs (link above). New documentation about receiving plain dict s as request bodies: Bodies of arbitrary dict s . New documentation about returning arbitrary dict s in responses: Response with arbitrary dict . Technical Details : When declaring a response_model it is used directly to generate the response content, from whatever was returned from the path operation function . Before this, the return content was first passed through jsonable_encoder to ensure it was a \"jsonable\" object, like a dict , instead of an arbitrary object with attributes (like an ORM model). That's why you should make sure to update your Pydantic models for objects with attributes to use orm_mode = True . If you don't have a response_model , the return object will still be passed through jsonable_encoder first. When a response_model is declared, the same response_model type declaration won't be used as is, it will be \"cloned\" to create an new one (a cloned Pydantic Field with all the submodels cloned as well). This avoids/fixes a potential security issue: as the returned object is passed directly to Pydantic, if the returned object was a subclass of the response_model (e.g. you return a UserInDB that inherits from User but contains extra fields, like hashed_password , and User is used in the response_model ), it would still pass the validation (because UserInDB is a subclass of User ) and the object would be returned as-is, including the hashed_password . To fix this, the declared response_model is cloned, if it is a Pydantic model class (or contains Pydantic model classes in it, e.g. in a List[Item] ), the Pydantic model class(es) will be a different one (the \"cloned\" one). So, an object that is a subclass won't simply pass the validation and returned as-is, because it is no longer a sub-class of the cloned response_model . Instead, a new Pydantic model object will be created with the contents of the returned object. So, it will be a new object (made with the data from the returned one), and will be filtered by the cloned response_model , containing only the declared fields as normally. PR #322 . Remove/clean unused RegEx code in routing. PR #314 by @dmontagu . Use default response status code descriptions for additional responses. PR #313 by @duxiaoyao . Upgrade Pydantic support to 0.28 . PR #320 by @jekirl .","title":"0.30.0"},{"location":"release-notes/#0291","text":"Fix handling an empty-body request with a required body param. PR #311 . Fix broken link in docs: Return a Response directly . PR #306 by @dmontagu . Fix docs discrepancy in docs for Response Model . PR #288 by @awiddersheim .","title":"0.29.1"},{"location":"release-notes/#0290","text":"Add support for declaring a Response parameter: This allows declaring: Response Cookies . Response Headers . An HTTP Status Code different than the default: Response - Change Status Code . All of this while still being able to return arbitrary objects ( dict , DB model, etc). Update attribution to Hug, for inspiring the response parameter pattern. PR #294 .","title":"0.29.0"},{"location":"release-notes/#0280","text":"Implement dependency cache per request. This avoids calling each dependency multiple times for the same request. This is useful while calling external services, performing costly computation, etc. This also means that if a dependency was declared as a path operation decorator dependency, possibly at the router level (with .include_router() ) and then it is declared again in a specific path operation , the dependency will be called only once. The cache can be disabled per dependency declaration, using use_cache=False as in Depends(your_dependency, use_cache=False) . Updated docs at: Using the same dependency multiple times . PR #292 . Implement dependency overrides for testing. This allows using overrides/mocks of dependencies during tests. New docs: Testing Dependencies with Overrides . PR #291 .","title":"0.28.0"},{"location":"release-notes/#0272","text":"Fix path and query parameters receiving dict as a valid type. It should be mapped to a body payload. PR #287 . Updated docs at: Query parameter list / multiple values with defaults: Using list .","title":"0.27.2"},{"location":"release-notes/#0271","text":"Fix auto_error=False handling in HTTPBearer security scheme. Do not raise when there's an incorrect Authorization header if auto_error=False . PR #282 . Fix type declaration of HTTPException . PR #279 .","title":"0.27.1"},{"location":"release-notes/#0270","text":"Fix broken link in docs about OAuth 2.0 with scopes. PR #275 by @dmontagu . Refactor param extraction using Pydantic Field : Large refactor, improvement, and simplification of param extraction from path operations . Fix/add support for list query parameters with list defaults. New documentation: Query parameter list / multiple values with defaults . Add support for enumerations in path operation parameters. New documentation: Path Parameters: Predefined values . Add support for type annotations using Optional as in param: Optional[str] = None . New documentation: Optional type declarations . PR #278 .","title":"0.27.0"},{"location":"release-notes/#0260","text":"Separate error handling for validation errors. This will allow developers to customize the exception handlers. Document better how to handle exceptions and use error handlers. Include RequestValidationError and WebSocketRequestValidationError (this last one will be useful once encode/starlette#527 or equivalent is merged). New documentation about exceptions handlers: Install custom exception handlers . Override the default exception handlers . Re-use FastAPI's exception handlers . PR #273 . Fix support for paths in path parameters without needing explicit Path(...) . PR #256 . Documented in PR #272 by @wshayes . New documentation at: Path Parameters containing paths . Update docs for testing FastAPI. Include using POST , sending JSON, testing headers, etc. New documentation: Testing . PR #271 . Fix type declaration of response_model to allow generic Python types as List[Model] . Mainly to fix mypy for users. PR #266 .","title":"0.26.0"},{"location":"release-notes/#0250","text":"Add support for Pydantic's include , exclude , by_alias . Update documentation: Response Model . Add docs for: Body - updates , using Pydantic's skip_defaults . Add method consistency tests. PR #264 . Add CONTRIBUTING.md file to GitHub, to help new contributors. PR #255 by @wshayes . Add support for Pydantic's skip_defaults : There's a new path operation decorator parameter response_model_skip_defaults . The name of the parameter will most probably change in a future version to response_skip_defaults , model_skip_defaults or something similar. New documentation section about using response_model_skip_defaults . PR #248 by @wshayes .","title":"0.25.0"},{"location":"release-notes/#0240","text":"Add support for WebSockets with dependencies and parameters. Support included for: Depends Security Cookie Header Path Query ...as these are compatible with the WebSockets protocol (e.g. Body is not). Updated documentation for WebSockets . PR #178 by @jekirl . Upgrade the compatible version of Pydantic to 0.26.0 . This includes JSON Schema support for IP address and network objects, bug fixes, and other features. PR #247 by @euri10 .","title":"0.24.0"},{"location":"release-notes/#0230","text":"Upgrade the compatible version of Starlette to 0.12.0 . This includes support for ASGI 3 (the latest version of the standard). It's now possible to use Starlette's StreamingResponse with iterators, like file-like objects (as those returned by open() ). It's now possible to use the low level utility iterate_in_threadpool from starlette.concurrency (for advanced scenarios). PR #243 . Add OAuth2 redirect page for Swagger UI. This allows having delegated authentication in the Swagger UI docs. For this to work, you need to add {your_origin}/docs/oauth2-redirect to the allowed callbacks in your OAuth2 provider (in Auth0, Facebook, Google, etc). For example, during development, it could be http://localhost:8000/docs/oauth2-redirect . Have in mind that this callback URL is independent of whichever one is used by your frontend. You might also have another callback at https://yourdomain.com/login/callback . This is only to allow delegated authentication in the API docs with Swagger UI. PR #198 by @steinitzu . Make Swagger UI and ReDoc route handlers ( path operations ) be async functions instead of lambdas to improve performance. PR #241 by @Trim21 . Make Swagger UI and ReDoc URLs parameterizable, allowing to host and serve local versions of them and have offline docs. PR #112 by @euri10 .","title":"0.23.0"},{"location":"release-notes/#0220","text":"Add support for dependencies parameter: A parameter in path operation decorators , for dependencies that should be executed but the return value is not important or not used in the path operation function . A parameter in the .include_router() method of FastAPI applications and routers, to include dependencies that should be executed in each path operation in a router. This is useful, for example, to require authentication or permissions in specific group of path operations . Different dependencies can be applied to different routers. These dependencies are run before the normal parameter dependencies. And normal dependencies are run too. They can be combined. Dependencies declared in a router are executed first, then the ones defined in path operation decorators , and then the ones declared in normal parameters. They are all combined and executed. All this also supports using Security with scopes in those dependencies parameters, for more advanced OAuth 2.0 security scenarios with scopes. New documentation about dependencies in path operation decorators . New documentation about dependencies in the include_router() method . PR #235 . Fix OpenAPI documentation of Starlette URL convertors. Specially useful when using path convertors, to take a whole path as a parameter, like /some/url/{p:path} . PR #234 by @euri10 . Make default parameter utilities exported from fastapi be functions instead of classes (the new functions return instances of those classes). To be able to override the return types and fix mypy errors in FastAPI's users' code. Applies to Path , Query , Header , Cookie , Body , Form , File , Depends , and Security . PR #226 and PR #231 . Separate development scripts test.sh , lint.sh , and format.sh . PR #232 . Re-enable black formatting checks for Python 3.7. PR #229 by @zamiramir .","title":"0.22.0"},{"location":"release-notes/#0210","text":"On body parsing errors, raise from previous exception, to allow better introspection in logging code. PR #192 by @ricardomomm . Use Python logger named \" fastapi \" instead of root logger. PR #222 by @euri10 . Upgrade Pydantic to version 0.25. PR #225 by @euri10 . Fix typo in routing. PR #221 by @djlambert .","title":"0.21.0"},{"location":"release-notes/#0201","text":"Add typing information to package including file py.typed . PR #209 by @meadsteve . Add FastAPI bot for Gitter. To automatically announce new releases. PR #189 .","title":"0.20.1"},{"location":"release-notes/#0200","text":"Upgrade OAuth2: Upgrade Password flow using Bearer tokens to use the correct HTTP status code 401 UNAUTHORIZED , with WWW-Authenticate headers. Update, simplify, and improve all the security docs . Add new scope_str to SecurityScopes and update docs: OAuth2 scopes . Update docs, images, tests. PR #188 . Include Hypercorn as an alternative ASGI server in the docs. PR #187 . Add docs for Static Files and Templates . PR #186 . Add docs for handling Response Cookies and Response Headers . PR #185 . Fix typos in docs. PR #176 by @chdsbd .","title":"0.20.0"},{"location":"release-notes/#0190","text":"Rename path operation decorator parameter content_type to response_class . PR #183 . Add docs: How to use the jsonable_encoder in JSON compatible encoder . How to Return a Response directly . Update how to use a Custom Response Class . PR #184 .","title":"0.19.0"},{"location":"release-notes/#0180","text":"Add docs for HTTP Basic Auth . PR #177 . Upgrade HTTP Basic Auth handling with automatic headers (automatic browser login prompt). PR #175 . Update dependencies for security. PR #174 . Add docs for Middleware . PR #173 .","title":"0.18.0"},{"location":"release-notes/#0170","text":"Make Flit publish from CI. PR #170 . Add documentation about handling CORS (Cross-Origin Resource Sharing) . PR #169 . By default, encode by alias. This allows using Pydantic alias parameters working by default. PR #168 .","title":"0.17.0"},{"location":"release-notes/#0160","text":"Upgrade path operation docstring parsing to support proper Markdown descriptions. New documentation at Path Operation Configuration . PR #163 . Refactor internal usage of Pydantic to use correct data types. PR #164 . Upgrade Pydantic to version 0.23 . PR #160 by @euri10 . Fix typo in Tutorial about Extra Models. PR #159 by @danielmichaels . Fix Query Parameters URL examples in docs. PR #157 by @hayata-yamamoto .","title":"0.16.0"},{"location":"release-notes/#0150","text":"Add support for multiple file uploads (as a single form field). New docs at: Multiple file uploads . PR #158 . Add docs for: Additional Status Codes . PR #156 .","title":"0.15.0"},{"location":"release-notes/#0140","text":"Improve automatically generated names of path operations in OpenAPI (in API docs). A function read_items instead of having a generated name \"Read Items Get\" will have \"Read Items\". PR #155 . Add docs for: Testing FastAPI . PR #151 . Update /docs Swagger UI to enable deep linking. This allows sharing the URL pointing directly to the path operation documentation in the docs. PR #148 by @wshayes . Update development dependencies, Pipfile.lock . PR #150 . Include Falcon and Hug in: Alternatives, Inspiration and Comparisons .","title":"0.14.0"},{"location":"release-notes/#0130","text":"Improve/upgrade OAuth2 scopes support with SecurityScopes : SecurityScopes can be declared as a parameter like Request , to get the scopes of all super-dependencies/dependants. Improve Security handling, merging scopes when declaring SecurityScopes . Allow using SecurityBase (like OAuth2 ) classes with Depends and still document them. Security now is needed only to declare scopes . Updated docs about: OAuth2 with Password (and hashing), Bearer with JWT tokens . New docs about: OAuth2 scopes . PR #141 .","title":"0.13.0"},{"location":"release-notes/#0121","text":"Fix bug: handling additional responses in APIRouter.include_router() . PR #140 . Fix typo in SQL tutorial. PR #138 by @mostaphaRoudsari . Fix typos in section about nested models and OAuth2 with JWT. PR #127 by @mmcloud .","title":"0.12.1"},{"location":"release-notes/#0120","text":"Add additional responses parameter to path operation decorators to extend responses in OpenAPI (and API docs). It also allows extending existing responses generated from response_model , declare other media types (like images), etc. The new documentation is here: Additional Responses . responses can also be added to .include_router() , the updated docs are here: Bigger Applications . PR #97 originally initiated by @barsi . Update scripts/test-cov-html.sh to allow passing extra parameters like -vv , for development.","title":"0.12.0"},{"location":"release-notes/#0110","text":"Add auto_error parameter to security utility functions. Allowing them to be optional. Also allowing to have multiple alternative security schemes that are then checked in a single dependency instead of each one verifying and returning the error to the client automatically when not satisfied. PR #134 . Update SQL Tutorial to close database sessions even when there are exceptions. PR #89 by @alexiri . Fix duplicate dependency in pyproject.toml . PR #128 by @zxalif .","title":"0.11.0"},{"location":"release-notes/#0103","text":"Add Gitter chat, badge, links, etc. https://gitter.im/tiangolo/fastapi . PR #117 . Add docs about Extending OpenAPI . PR #126 . Make Travis run Ubuntu Xenial (newer version) and Python 3.7 instead of Python 3.7-dev. PR #92 by @blueyed . Fix duplicated param variable creation. PR #123 by @yihuang . Add note in Response Model docs about why using a function parameter instead of a function return type annotation. PR #109 by @JHSaunders . Fix event docs (startup/shutdown) function name. PR #105 by @stratosgear .","title":"0.10.3"},{"location":"release-notes/#0102","text":"Fix OpenAPI (JSON Schema) for declarations of Python Union (JSON Schema additionalProperties ). PR #121 . Update Background Tasks with a note on Celery. Document response models using unions and lists, updated at: Extra Models . PR #108 .","title":"0.10.2"},{"location":"release-notes/#0101","text":"Add docs and tests for encode/databases . New docs at: Async SQL (Relational) Databases . PR #107 .","title":"0.10.1"},{"location":"release-notes/#0100","text":"Add support for Background Tasks in path operation functions and dependencies. New documentation about Background Tasks is here . PR #103 . Add support for .websocket_route() in APIRouter . PR #100 by @euri10 . New docs section about Events: startup - shutdown . PR #99 .","title":"0.10.0"},{"location":"release-notes/#091","text":"Document receiving Multiple values with the same query parameter and Duplicate headers . PR #95 .","title":"0.9.1"},{"location":"release-notes/#090","text":"Upgrade compatible Pydantic version to 0.21.0 . PR #90 . Add documentation for: Application Configuration . Fix typo in docs. PR #76 by @matthewhegarty . Fix link in \"Deployment\" to \"Bigger Applications\".","title":"0.9.0"},{"location":"release-notes/#080","text":"Make development scripts executable. PR #76 by @euri10 . Add support for adding tags in app.include_router() . PR #55 by @euri10 . Documentation updated in the section: Bigger Applications . Update docs related to Uvicorn to use new --reload option from version 0.5.x . PR #74 . Update isort imports and scripts to be compatible with newer versions. PR #75 .","title":"0.8.0"},{"location":"release-notes/#071","text":"Update technical details about async def handling with respect to previous frameworks. PR #64 by @haizaar . Add deployment documentation for Docker in Raspberry Pi and other architectures. Trigger Docker images build on Travis CI automatically. PR #65 .","title":"0.7.1"},{"location":"release-notes/#070","text":"Add support for UploadFile in File parameter annotations. This includes a file-like interface. Here's the updated documentation for declaring File parameters with UploadFile . And here's the updated documentation for using Form parameters mixed with File parameters, supporting bytes and UploadFile at the same time. PR #63 .","title":"0.7.0"},{"location":"release-notes/#064","text":"Add technical details about async def handling to docs . PR #61 . Add docs for Debugging FastAPI applications in editors . Clarify Bigger Applications deployed with Docker . Fix typos in docs. Add section about History, Design and Future . Add docs for using WebSockets with FastAPI . PR #62 .","title":"0.6.4"},{"location":"release-notes/#063","text":"Add Favicons to docs. PR #53 .","title":"0.6.3"},{"location":"release-notes/#062","text":"Introduce new project generator based on FastAPI and PostgreSQL: https://github.com/tiangolo/full-stack-fastapi-postgresql . PR #52 . Update SQL tutorial with SQLAlchemy, using Depends to improve editor support and reduce code repetition . PR #52 . Improve middleware naming in tutorial for SQL with SQLAlchemy https://fastapi.tiangolo.com/tutorial/sql-databases/ .","title":"0.6.2"},{"location":"release-notes/#061","text":"Add docs for GraphQL: https://fastapi.tiangolo.com/advanced/graphql/ . PR #48 .","title":"0.6.1"},{"location":"release-notes/#060","text":"Update SQL with SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using the new official request.state . PR #45 . Upgrade Starlette to version 0.11.1 and add required compatibility changes. PR #44 .","title":"0.6.0"},{"location":"release-notes/#051","text":"Add section about helping and getting help with FastAPI . Add note about path operations order in docs . Update section about error handling with more information and make relation with Starlette error handling utilities more explicit. PR #41 . Add Development - Contributing section to the docs . PR #42 .","title":"0.5.1"},{"location":"release-notes/#050","text":"Add new HTTPException with support for custom headers. With new documentation for handling errors at: https://fastapi.tiangolo.com/tutorial/handling-errors/ . PR #35 . Add documentation to use Starlette Request object directly. Check #25 by @euri10 . Add issue templates to simplify reporting bugs, getting help, etc: #34 . Update example for the SQLAlchemy tutorial at https://fastapi.tiangolo.com/tutorial/sql-databases/ using middleware and database session attached to request.","title":"0.5.0"},{"location":"release-notes/#040","text":"Add openapi_prefix , support for reverse proxy and mounting sub-applications. See the docs at https://fastapi.tiangolo.com/advanced/sub-applications-proxy/ : #26 by @kabirkhan . Update docs/tutorial for SQLAlchemy including note about DB Browser for SQLite .","title":"0.4.0"},{"location":"release-notes/#030","text":"Fix/add SQLAlchemy support, including ORM, and update docs for SQLAlchemy : #30 .","title":"0.3.0"},{"location":"release-notes/#021","text":"Fix jsonable_encoder for Pydantic models with Config but without json_encoders : #29 .","title":"0.2.1"},{"location":"release-notes/#020","text":"Fix typos in Security section: #24 by @kkinder . Add support for Pydantic custom JSON encoders: #21 by @euri10 .","title":"0.2.0"},{"location":"release-notes/#0119","text":"Upgrade Starlette version to the current latest 0.10.1 : #17 by @euri10 .","title":"0.1.19"},{"location":"advanced/","text":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 - \u7b80\u4ecb \u00b6 \u66f4\u591a\u529f\u80fd \u00b6 \u7528\u6237\u6307\u5357 \u8db3\u4ee5\u8ba9\u60a8\u4e86\u89e3 FastAPI \u7684\u6240\u6709\u4e3b\u8981\u529f\u80fd\u3002 \u540e\u7eed\u7ae0\u8282\u5c06\u4ecb\u7ecd\u66f4\u591a FastAPI \u7684\u9009\u9879\u3001\u914d\u7f6e\u53ca\u529f\u80fd\u3002 \u63d0\u793a \u540e\u7eed\u7ae0\u8282\u4e0d\u4e00\u5b9a \u591a\u9ad8\u6df1 \u3002 \u4f46\u53ef\u80fd\u4f1a\u7ed9\u60a8\u7684\u7528\u4f8b\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u3002 \u8bf7\u5148\u9605\u8bfb\u7528\u6237\u6307\u5357 \u00b6 \u60a8\u4ecd\u4f1a\u4f7f\u7528 \u7528\u6237\u6307\u5357 \u4e2d\u4ecb\u7ecd\u7684\u7edd\u5927\u591a\u6570 FastAPI \u529f\u80fd\u3002 \u540e\u7eed\u7ae0\u8282\u5047\u8bbe\u60a8\u5df2\u9605\u8bfb\u8fc7 \u7528\u6237\u6307\u5357 \uff0c\u5e76\u5047\u8bbe\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u5176\u4e2d\u7684\u6838\u5fc3\u601d\u60f3\u3002 TestDriven.io \u6559\u7a0b \u00b6 \u5982\u679c\u60a8\u60f3\u5b66\u4e60\u9ad8\u7ea7\u5165\u95e8\u6559\u7a0b\uff0c\u586b\u8865\u672c\u6587\u6863\u7684\u77e5\u8bc6\u7a7a\u7f3a\uff0c\u8bf7\u53c2\u9605 TestDriven.io \u63a8\u51fa\u7684 Test-Driven\uff1aFastAPI \u4e0e Docker \u5f00\u53d1\u6559\u7a0b \u3002 \u4ed6\u4eec\u628a\u6240\u6709\u5229\u6da6\u7684 10% \u6350\u8d60\u7ed9\u4e86 FastAPI \u3002 \ud83c\udf89 \ud83d\ude04","title":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"advanced/#-","text":"","title":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"advanced/#_1","text":"\u7528\u6237\u6307\u5357 \u8db3\u4ee5\u8ba9\u60a8\u4e86\u89e3 FastAPI \u7684\u6240\u6709\u4e3b\u8981\u529f\u80fd\u3002 \u540e\u7eed\u7ae0\u8282\u5c06\u4ecb\u7ecd\u66f4\u591a FastAPI \u7684\u9009\u9879\u3001\u914d\u7f6e\u53ca\u529f\u80fd\u3002 \u63d0\u793a \u540e\u7eed\u7ae0\u8282\u4e0d\u4e00\u5b9a \u591a\u9ad8\u6df1 \u3002 \u4f46\u53ef\u80fd\u4f1a\u7ed9\u60a8\u7684\u7528\u4f8b\u63d0\u4f9b\u89e3\u51b3\u65b9\u6848\u3002","title":"\u66f4\u591a\u529f\u80fd"},{"location":"advanced/#_2","text":"\u60a8\u4ecd\u4f1a\u4f7f\u7528 \u7528\u6237\u6307\u5357 \u4e2d\u4ecb\u7ecd\u7684\u7edd\u5927\u591a\u6570 FastAPI \u529f\u80fd\u3002 \u540e\u7eed\u7ae0\u8282\u5047\u8bbe\u60a8\u5df2\u9605\u8bfb\u8fc7 \u7528\u6237\u6307\u5357 \uff0c\u5e76\u5047\u8bbe\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u5176\u4e2d\u7684\u6838\u5fc3\u601d\u60f3\u3002","title":"\u8bf7\u5148\u9605\u8bfb\u7528\u6237\u6307\u5357"},{"location":"advanced/#testdrivenio","text":"\u5982\u679c\u60a8\u60f3\u5b66\u4e60\u9ad8\u7ea7\u5165\u95e8\u6559\u7a0b\uff0c\u586b\u8865\u672c\u6587\u6863\u7684\u77e5\u8bc6\u7a7a\u7f3a\uff0c\u8bf7\u53c2\u9605 TestDriven.io \u63a8\u51fa\u7684 Test-Driven\uff1aFastAPI \u4e0e Docker \u5f00\u53d1\u6559\u7a0b \u3002 \u4ed6\u4eec\u628a\u6240\u6709\u5229\u6da6\u7684 10% \u6350\u8d60\u7ed9\u4e86 FastAPI \u3002 \ud83c\udf89 \ud83d\ude04","title":"TestDriven.io \u6559\u7a0b"},{"location":"advanced/additional-responses/","text":"OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u00b6 \u8b66\u544a \u672c\u7ae0\u8f83\u96be\u3002 FastAPI \u65b0\u624b\u53ef\u8df3\u8fc7\u672c\u7ae0\u3002 \u672c\u7ae0\u5b66\u4e60\u4f7f\u7528\u9644\u52a0\u72b6\u6001\u7801\u3001\u5a92\u4f53\u7c7b\u578b\u3001\u63cf\u8ff0\u7b49\u58f0\u660e\u54cd\u5e94\u3002 \u8fd9\u4e9b\u54cd\u5e94\u4f1a\u5305\u542b\u5728 OpenAPI \u6982\u56fe\u91cc\uff0c\u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u3002 \u4f46\u5fc5\u987b\u8981\u786e\u4fdd\u8fd9\u4e9b\u54cd\u5e94\u4e0e\u72b6\u6001\u7801\u548c content \u4e00\u8d77\u76f4\u63a5\u4ee5 JSONResponse \u7b49\u65b9\u5f0f\u8fd4\u56de\u3002 \u4f7f\u7528 model \u7684\u54cd\u5e94 \u00b6 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301 response \u53c2\u6570\u3002 response \u53c2\u6570\u53ef\u4ee5\u63a5\u6536\u952e\u662f\u54cd\u5e94\u7684\u72b6\u6001\u7801\uff0c\u5982 200 \uff0c\u503c\u662f\u54cd\u5e94\u4fe1\u606f\u7684\u5b57\u5178\u3002 \u54cd\u5e94\u5b57\u5178\u53ef\u4ee5\u5305\u542b Pydantic \u6a21\u578b\u7684\u952e model \uff0c\u5982 response_model \u3002 FastAPI \u63a5\u6536\u8be5\u6a21\u578b\uff0c\u751f\u6210 JSON \u6982\u56fe\uff0c\u5e76\u4fdd\u5b58\u5728 OpenAPI \u6307\u5b9a\u7684\u4f4d\u7f6e\u3002 \u4f8b\u5982\uff0c\u58f0\u660e\u5305\u542b\u72b6\u6001\u7801 404 \u53ca Pydantic \u6a21\u578b Message \u7684\u54cd\u5e94\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message }}) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5fc5\u987b\u76f4\u63a5\u8fd4\u56de JSONResponse \u3002 \u8bf4\u660e model \u952e\u4e0d\u662f OpenAPI \u7684\u7ec4\u4ef6\u3002 FastAPI \u5728\u6b64\u63a5\u6536 Pydantic \u6a21\u578b\uff0c\u751f\u6210 JSON Schema \uff0c\u5e76\u628a\u5b83\u63a8\u9001\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u6b63\u786e\u7684\u4f4d\u7f6e\u662f\uff1a content \u952e\u4e2d\u7684 JSON \u5bf9\u8c61\uff08\u5b57\u5178\uff09\uff0c\u8be5\u5bf9\u8c61\u5305\u542b\uff1a application/json \u7b49\u5a92\u4f53\u7c7b\u578b\u7684\u952e\uff0c\u6b64\u952e\u4e2d\u7684 JSON \u5bf9\u8c61\u4e2d\u5305\u542b\uff1a schema \u952e\uff0c\u5305\u542b\u4e86\u6a21\u578b\u4e2d\u7684 JSON \u6982\u56fe\uff0c\u8fd9\u91cc\u5c31\u662f\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 FastAPI \u5728\u6b64\u6dfb\u52a0 OpenAPI \u7684\u5176\u4ed6\u4f4d\u7f6e\u8981\u5f15\u7528\u7684\u5168\u5c40 JSON \u6982\u56fe\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u6b64\u6982\u56fe\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5176\u4ed6\u5e94\u7528\u548c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b JSON \u6982\u56fe\uff0c\u4e3a\u4ee3\u7801\u751f\u6210\u5de5\u5177\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u3002 OpenAPI \u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u751f\u6210\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"responses\" : { \"404\" : { \"description\" : \"Additional Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Message\" } } } }, \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Item\" } } } }, \"422\" : { \"description\" : \"Validation Error\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/HTTPValidationError\" } } } } } } OpenAPI \u6982\u56fe\u5728\u5185\u90e8\u5176\u4ed6\u4f4d\u7f6e\u5f15\u7528\u8fd9\u4e2a\u6982\u56fe\uff1a { \"components\" : { \"schemas\" : { \"Message\" : { \"title\" : \"Message\" , \"required\" : [ \"message\" ], \"type\" : \"object\" , \"properties\" : { \"message\" : { \"title\" : \"Message\" , \"type\" : \"string\" } } }, \"Item\" : { \"title\" : \"Item\" , \"required\" : [ \"id\" , \"value\" ], \"type\" : \"object\" , \"properties\" : { \"id\" : { \"title\" : \"Id\" , \"type\" : \"string\" }, \"value\" : { \"title\" : \"Value\" , \"type\" : \"string\" } } }, \"ValidationError\" : { \"title\" : \"ValidationError\" , \"required\" : [ \"loc\" , \"msg\" , \"type\" ], \"type\" : \"object\" , \"properties\" : { \"loc\" : { \"title\" : \"Location\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } }, \"msg\" : { \"title\" : \"Message\" , \"type\" : \"string\" }, \"type\" : { \"title\" : \"Error Type\" , \"type\" : \"string\" } } }, \"HTTPValidationError\" : { \"title\" : \"HTTPValidationError\" , \"type\" : \"object\" , \"properties\" : { \"detail\" : { \"title\" : \"Detail\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" } } } } } } } \u4e3b\u54cd\u5e94\u7684\u9644\u52a0\u5a92\u4f53\u7c7b\u578b \u00b6 response \u53c2\u6570\u8fd8\u53ef\u4ee5\u4e3a\u4e3b\u54cd\u5e94\u6dfb\u52a0\u5a92\u4f53\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u6dfb\u52a0 image/png \u5a92\u4f53\u7c7b\u578b\uff0c\u58f0\u660e\u8fd4\u56de JSON \u5bf9\u8c61\uff08\u4f7f\u7528 application/json \uff09\u6216 PNG \u56fe\u50cf\u7684 \u8def\u5f84\u64cd\u4f5c \uff1a from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 200 : { \"content\" : { \"image/png\" : {}}, \"description\" : \"Return the JSON item or an image.\" , } }, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5fc5\u987b\u76f4\u63a5\u4f7f\u7528 FileResponse \u8fd4\u56de\u56fe\u50cf\u3002 \u8bf4\u660e \u9664\u975e\u5728 response \u53c2\u6570\u4e2d\u663e\u5f0f\u6307\u5b9a\u5176\u4ed6\u5a92\u4f53\u7c7b\u578b\uff0c\u5426\u5219\uff0cFastAPI \u5047\u8bbe\u8be5\u54cd\u5e94\u548c\u4e3b\u54cd\u5e94\u7c7b\u7684\u5a92\u4f53\u7c7b\u578b\u4e00\u6837\uff08\u9ed8\u8ba4\u4e3a application/json \uff09\u3002 \u4f7f\u7528 None \u6307\u5b9a\u81ea\u5b9a\u4e49\u54cd\u5e94\u7c7b\u7684\u5a92\u4f53\u7c7b\u578b\u65f6\uff0cFastAPI \u4f1a\u4e3a\u5305\u542b\u5173\u8054\u6a21\u578b\u7684\u54cd\u5e94\u4f7f\u7528 application/json \u3002 \u5408\u5e76\u4fe1\u606f \u00b6 FastAPI \u652f\u6301\u5408\u5e76 response_model \u3001 status_code \u3001 responses \u53c2\u6570\u7b49\u591a\u4e2a\u4f4d\u7f6e\u7684\u54cd\u5e94\u4fe1\u606f\u3002 \u4f7f\u7528\u9ed8\u8ba4\u72b6\u6001\u7801 200 \uff08\u6216\u81ea\u5b9a\u4e49\u72b6\u6001\u7801\uff09\uff0c\u58f0\u660e response_model \u3002\u7136\u540e\uff0c\u76f4\u63a5\u5728 OpenAPI \u6982\u56fe\u4e2d\uff0c\u4e3a responses \u4e2d\u7684\u540c\u4e00\u54cd\u5e94\u58f0\u660e\u66f4\u591a\u4fe1\u606f\u3002 FastAPI \u4fdd\u7559 responses \u4e2d\u7684\u4fe1\u606f\uff0c\u5e76\u628a\u5b83\u4e0e\u6a21\u578b\u7684 JSON \u6982\u56fe\u5408\u5e76\u5728\u4e00\u8d77\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e\u5305\u542b\u72b6\u6001\u7801 404 \u7684\u54cd\u5e94\uff0c\u5e76\u5305\u542b\u81ea\u5b9a\u4e49 description \u3002 \u5e26\u72b6\u6001\u7801 200 \u7684\u54cd\u5e94\u4e0d\u4ec5\u4f7f\u7528 response_model \uff0c\u8fd8\u5305\u542b\u4e86\u81ea\u5b9a\u4e49 example \uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message , \"description\" : \"The item was not found\" }, 200 : { \"description\" : \"Item requested by ID\" , \"content\" : { \"application/json\" : { \"example\" : { \"id\" : \"bar\" , \"value\" : \"The bar tenders\" } } }, }, }, ) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) OpenAPI \u4f1a\u5408\u5e76\u3001\u5305\u542b\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a\uff1a \u5408\u5e76\u9884\u5b9a\u4e49\u54cd\u5e94\u4e0e\u81ea\u5b9a\u4e49\u54cd\u5e94 \u00b6 FastAPI \u8fd8\u53ef\u4ee5\u5408\u5e76 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u9884\u5b9a\u4e49\u54cd\u5e94\u548c\u81ea\u5b9a\u4e49\u54cd\u5e94\u3002 \u6b64\u5904\u4f7f\u7528 Python \u5b57\u5178\u89e3\u5305 \uff0c\u5373 **dict_to_unpack \uff1a old_dict = { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , } new_dict = { ** old_dict , \"new key\" : \"new value\" } \u5728\u6b64\uff0c new_dict \u5305\u542b old_dict \u4e2d\u7684\u6240\u6709\u952e\u503c\u5bf9\uff0c\u4ee5\u53ca\u65b0\u7684\u952e\u503c\u5bf9\uff1a { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , \"new key\" : \"new value\" , } \u8fd9\u79cd\u6280\u5de7\u65e2\u53ef\u4ee5\u590d\u7528 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u9884\u5b9a\u4e49\u54cd\u5e94\uff0c\u8fd8\u53ef\u4ee5\u5408\u5e76\u9884\u5b9a\u4e49\u54cd\u5e94\u548c\u81ea\u5b9a\u4e49\u54cd\u5e94\u3002 \u4f8b\u5982\uff1a from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str responses = { 404 : { \"description\" : \"Item not found\" }, 302 : { \"description\" : \"The item was moved\" }, 403 : { \"description\" : \"Not enough privileges\" }, } app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { ** responses , 200 : { \"content\" : { \"image/png\" : {}}}}, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } OpenAPI \u54cd\u5e94\u7684\u66f4\u591a\u8bf4\u660e \u00b6 \u8981\u4e86\u89e3\u54cd\u5e94\u4e2d\u90fd\u5305\u542b\u4e86\u54ea\u4e9b\u5185\u5bb9\uff0c\u8bf7\u53c2\u9605 OpenAPI \u89c4\u8303\u7684\u76f8\u5173\u7ae0\u8282\uff1a OpenAPI \u7684 Responses \u5bf9\u8c61 \uff0c\u8be5\u5bf9\u8c61\u5305\u62ec Response \u5bf9\u8c61\uff1b OpenAPI \u7684 Response \u5bf9\u8c61 \uff0c\u4e3a responses \u53c2\u6570\u5185\u7684\u6bcf\u4e2a\u54cd\u5e94\u76f4\u63a5\u6dfb\u52a0\u5404\u79cd\u5185\u5bb9\uff0c\u5305\u62ec description \u3001 headers \u3001 content \uff08\u6b64\u9879\u4e0b\u53ef\u58f0\u660e\u5a92\u4f53\u7c7b\u578b\u548c JSON \u6982\u56fe\uff09\u3001 links \u7b49\u3002","title":"OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94"},{"location":"advanced/additional-responses/#openapi","text":"\u8b66\u544a \u672c\u7ae0\u8f83\u96be\u3002 FastAPI \u65b0\u624b\u53ef\u8df3\u8fc7\u672c\u7ae0\u3002 \u672c\u7ae0\u5b66\u4e60\u4f7f\u7528\u9644\u52a0\u72b6\u6001\u7801\u3001\u5a92\u4f53\u7c7b\u578b\u3001\u63cf\u8ff0\u7b49\u58f0\u660e\u54cd\u5e94\u3002 \u8fd9\u4e9b\u54cd\u5e94\u4f1a\u5305\u542b\u5728 OpenAPI \u6982\u56fe\u91cc\uff0c\u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u3002 \u4f46\u5fc5\u987b\u8981\u786e\u4fdd\u8fd9\u4e9b\u54cd\u5e94\u4e0e\u72b6\u6001\u7801\u548c content \u4e00\u8d77\u76f4\u63a5\u4ee5 JSONResponse \u7b49\u65b9\u5f0f\u8fd4\u56de\u3002","title":"OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94"},{"location":"advanced/additional-responses/#model","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301 response \u53c2\u6570\u3002 response \u53c2\u6570\u53ef\u4ee5\u63a5\u6536\u952e\u662f\u54cd\u5e94\u7684\u72b6\u6001\u7801\uff0c\u5982 200 \uff0c\u503c\u662f\u54cd\u5e94\u4fe1\u606f\u7684\u5b57\u5178\u3002 \u54cd\u5e94\u5b57\u5178\u53ef\u4ee5\u5305\u542b Pydantic \u6a21\u578b\u7684\u952e model \uff0c\u5982 response_model \u3002 FastAPI \u63a5\u6536\u8be5\u6a21\u578b\uff0c\u751f\u6210 JSON \u6982\u56fe\uff0c\u5e76\u4fdd\u5b58\u5728 OpenAPI \u6307\u5b9a\u7684\u4f4d\u7f6e\u3002 \u4f8b\u5982\uff0c\u58f0\u660e\u5305\u542b\u72b6\u6001\u7801 404 \u53ca Pydantic \u6a21\u578b Message \u7684\u54cd\u5e94\uff0c\u4ee3\u7801\u5982\u4e0b\uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message }}) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5fc5\u987b\u76f4\u63a5\u8fd4\u56de JSONResponse \u3002 \u8bf4\u660e model \u952e\u4e0d\u662f OpenAPI \u7684\u7ec4\u4ef6\u3002 FastAPI \u5728\u6b64\u63a5\u6536 Pydantic \u6a21\u578b\uff0c\u751f\u6210 JSON Schema \uff0c\u5e76\u628a\u5b83\u63a8\u9001\u5230\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u6b63\u786e\u7684\u4f4d\u7f6e\u662f\uff1a content \u952e\u4e2d\u7684 JSON \u5bf9\u8c61\uff08\u5b57\u5178\uff09\uff0c\u8be5\u5bf9\u8c61\u5305\u542b\uff1a application/json \u7b49\u5a92\u4f53\u7c7b\u578b\u7684\u952e\uff0c\u6b64\u952e\u4e2d\u7684 JSON \u5bf9\u8c61\u4e2d\u5305\u542b\uff1a schema \u952e\uff0c\u5305\u542b\u4e86\u6a21\u578b\u4e2d\u7684 JSON \u6982\u56fe\uff0c\u8fd9\u91cc\u5c31\u662f\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 FastAPI \u5728\u6b64\u6dfb\u52a0 OpenAPI \u7684\u5176\u4ed6\u4f4d\u7f6e\u8981\u5f15\u7528\u7684\u5168\u5c40 JSON \u6982\u56fe\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u6b64\u6982\u56fe\u3002\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u5176\u4ed6\u5e94\u7528\u548c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b JSON \u6982\u56fe\uff0c\u4e3a\u4ee3\u7801\u751f\u6210\u5de5\u5177\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\u3002 OpenAPI \u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u751f\u6210\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"responses\" : { \"404\" : { \"description\" : \"Additional Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Message\" } } } }, \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/Item\" } } } }, \"422\" : { \"description\" : \"Validation Error\" , \"content\" : { \"application/json\" : { \"schema\" : { \"$ref\" : \"#/components/schemas/HTTPValidationError\" } } } } } } OpenAPI \u6982\u56fe\u5728\u5185\u90e8\u5176\u4ed6\u4f4d\u7f6e\u5f15\u7528\u8fd9\u4e2a\u6982\u56fe\uff1a { \"components\" : { \"schemas\" : { \"Message\" : { \"title\" : \"Message\" , \"required\" : [ \"message\" ], \"type\" : \"object\" , \"properties\" : { \"message\" : { \"title\" : \"Message\" , \"type\" : \"string\" } } }, \"Item\" : { \"title\" : \"Item\" , \"required\" : [ \"id\" , \"value\" ], \"type\" : \"object\" , \"properties\" : { \"id\" : { \"title\" : \"Id\" , \"type\" : \"string\" }, \"value\" : { \"title\" : \"Value\" , \"type\" : \"string\" } } }, \"ValidationError\" : { \"title\" : \"ValidationError\" , \"required\" : [ \"loc\" , \"msg\" , \"type\" ], \"type\" : \"object\" , \"properties\" : { \"loc\" : { \"title\" : \"Location\" , \"type\" : \"array\" , \"items\" : { \"type\" : \"string\" } }, \"msg\" : { \"title\" : \"Message\" , \"type\" : \"string\" }, \"type\" : { \"title\" : \"Error Type\" , \"type\" : \"string\" } } }, \"HTTPValidationError\" : { \"title\" : \"HTTPValidationError\" , \"type\" : \"object\" , \"properties\" : { \"detail\" : { \"title\" : \"Detail\" , \"type\" : \"array\" , \"items\" : { \"$ref\" : \"#/components/schemas/ValidationError\" } } } } } } }","title":"\u4f7f\u7528 model \u7684\u54cd\u5e94"},{"location":"advanced/additional-responses/#_1","text":"response \u53c2\u6570\u8fd8\u53ef\u4ee5\u4e3a\u4e3b\u54cd\u5e94\u6dfb\u52a0\u5a92\u4f53\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u6dfb\u52a0 image/png \u5a92\u4f53\u7c7b\u578b\uff0c\u58f0\u660e\u8fd4\u56de JSON \u5bf9\u8c61\uff08\u4f7f\u7528 application/json \uff09\u6216 PNG \u56fe\u50cf\u7684 \u8def\u5f84\u64cd\u4f5c \uff1a from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 200 : { \"content\" : { \"image/png\" : {}}, \"description\" : \"Return the JSON item or an image.\" , } }, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5fc5\u987b\u76f4\u63a5\u4f7f\u7528 FileResponse \u8fd4\u56de\u56fe\u50cf\u3002 \u8bf4\u660e \u9664\u975e\u5728 response \u53c2\u6570\u4e2d\u663e\u5f0f\u6307\u5b9a\u5176\u4ed6\u5a92\u4f53\u7c7b\u578b\uff0c\u5426\u5219\uff0cFastAPI \u5047\u8bbe\u8be5\u54cd\u5e94\u548c\u4e3b\u54cd\u5e94\u7c7b\u7684\u5a92\u4f53\u7c7b\u578b\u4e00\u6837\uff08\u9ed8\u8ba4\u4e3a application/json \uff09\u3002 \u4f7f\u7528 None \u6307\u5b9a\u81ea\u5b9a\u4e49\u54cd\u5e94\u7c7b\u7684\u5a92\u4f53\u7c7b\u578b\u65f6\uff0cFastAPI \u4f1a\u4e3a\u5305\u542b\u5173\u8054\u6a21\u578b\u7684\u54cd\u5e94\u4f7f\u7528 application/json \u3002","title":"\u4e3b\u54cd\u5e94\u7684\u9644\u52a0\u5a92\u4f53\u7c7b\u578b"},{"location":"advanced/additional-responses/#_2","text":"FastAPI \u652f\u6301\u5408\u5e76 response_model \u3001 status_code \u3001 responses \u53c2\u6570\u7b49\u591a\u4e2a\u4f4d\u7f6e\u7684\u54cd\u5e94\u4fe1\u606f\u3002 \u4f7f\u7528\u9ed8\u8ba4\u72b6\u6001\u7801 200 \uff08\u6216\u81ea\u5b9a\u4e49\u72b6\u6001\u7801\uff09\uff0c\u58f0\u660e response_model \u3002\u7136\u540e\uff0c\u76f4\u63a5\u5728 OpenAPI \u6982\u56fe\u4e2d\uff0c\u4e3a responses \u4e2d\u7684\u540c\u4e00\u54cd\u5e94\u58f0\u660e\u66f4\u591a\u4fe1\u606f\u3002 FastAPI \u4fdd\u7559 responses \u4e2d\u7684\u4fe1\u606f\uff0c\u5e76\u628a\u5b83\u4e0e\u6a21\u578b\u7684 JSON \u6982\u56fe\u5408\u5e76\u5728\u4e00\u8d77\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e\u5305\u542b\u72b6\u6001\u7801 404 \u7684\u54cd\u5e94\uff0c\u5e76\u5305\u542b\u81ea\u5b9a\u4e49 description \u3002 \u5e26\u72b6\u6001\u7801 200 \u7684\u54cd\u5e94\u4e0d\u4ec5\u4f7f\u7528 response_model \uff0c\u8fd8\u5305\u542b\u4e86\u81ea\u5b9a\u4e49 example \uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str class Message ( BaseModel ): message : str app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { 404 : { \"model\" : Message , \"description\" : \"The item was not found\" }, 200 : { \"description\" : \"Item requested by ID\" , \"content\" : { \"application/json\" : { \"example\" : { \"id\" : \"bar\" , \"value\" : \"The bar tenders\" } } }, }, }, ) async def read_item ( item_id : str ): if item_id == \"foo\" : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" } else : return JSONResponse ( status_code = 404 , content = { \"message\" : \"Item not found\" }) OpenAPI \u4f1a\u5408\u5e76\u3001\u5305\u542b\u8fd9\u4e9b\u5185\u5bb9\uff0c\u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a\uff1a","title":"\u5408\u5e76\u4fe1\u606f"},{"location":"advanced/additional-responses/#_3","text":"FastAPI \u8fd8\u53ef\u4ee5\u5408\u5e76 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u9884\u5b9a\u4e49\u54cd\u5e94\u548c\u81ea\u5b9a\u4e49\u54cd\u5e94\u3002 \u6b64\u5904\u4f7f\u7528 Python \u5b57\u5178\u89e3\u5305 \uff0c\u5373 **dict_to_unpack \uff1a old_dict = { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , } new_dict = { ** old_dict , \"new key\" : \"new value\" } \u5728\u6b64\uff0c new_dict \u5305\u542b old_dict \u4e2d\u7684\u6240\u6709\u952e\u503c\u5bf9\uff0c\u4ee5\u53ca\u65b0\u7684\u952e\u503c\u5bf9\uff1a { \"old key\" : \"old value\" , \"second old key\" : \"second old value\" , \"new key\" : \"new value\" , } \u8fd9\u79cd\u6280\u5de7\u65e2\u53ef\u4ee5\u590d\u7528 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u9884\u5b9a\u4e49\u54cd\u5e94\uff0c\u8fd8\u53ef\u4ee5\u5408\u5e76\u9884\u5b9a\u4e49\u54cd\u5e94\u548c\u81ea\u5b9a\u4e49\u54cd\u5e94\u3002 \u4f8b\u5982\uff1a from typing import Union from fastapi import FastAPI from fastapi.responses import FileResponse from pydantic import BaseModel class Item ( BaseModel ): id : str value : str responses = { 404 : { \"description\" : \"Item not found\" }, 302 : { \"description\" : \"The item was moved\" }, 403 : { \"description\" : \"Not enough privileges\" }, } app = FastAPI () @app . get ( \"/items/ {item_id} \" , response_model = Item , responses = { ** responses , 200 : { \"content\" : { \"image/png\" : {}}}}, ) async def read_item ( item_id : str , img : Union [ bool , None ] = None ): if img : return FileResponse ( \"image.png\" , media_type = \"image/png\" ) else : return { \"id\" : \"foo\" , \"value\" : \"there goes my hero\" }","title":"\u5408\u5e76\u9884\u5b9a\u4e49\u54cd\u5e94\u4e0e\u81ea\u5b9a\u4e49\u54cd\u5e94"},{"location":"advanced/additional-responses/#openapi_1","text":"\u8981\u4e86\u89e3\u54cd\u5e94\u4e2d\u90fd\u5305\u542b\u4e86\u54ea\u4e9b\u5185\u5bb9\uff0c\u8bf7\u53c2\u9605 OpenAPI \u89c4\u8303\u7684\u76f8\u5173\u7ae0\u8282\uff1a OpenAPI \u7684 Responses \u5bf9\u8c61 \uff0c\u8be5\u5bf9\u8c61\u5305\u62ec Response \u5bf9\u8c61\uff1b OpenAPI \u7684 Response \u5bf9\u8c61 \uff0c\u4e3a responses \u53c2\u6570\u5185\u7684\u6bcf\u4e2a\u54cd\u5e94\u76f4\u63a5\u6dfb\u52a0\u5404\u79cd\u5185\u5bb9\uff0c\u5305\u62ec description \u3001 headers \u3001 content \uff08\u6b64\u9879\u4e0b\u53ef\u58f0\u660e\u5a92\u4f53\u7c7b\u578b\u548c JSON \u6982\u56fe\uff09\u3001 links \u7b49\u3002","title":"OpenAPI \u54cd\u5e94\u7684\u66f4\u591a\u8bf4\u660e"},{"location":"advanced/additional-status-codes/","text":"\u9644\u52a0\u72b6\u6001\u7801 \u00b6 FastAPI \u9ed8\u8ba4\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\uff0c \u8def\u5f84\u64cd\u4f5c \u8fd4\u56de\u7684\u5185\u5bb9\u4f1a\u653e\u5728 JSONResponse \u91cc\u3002 \u5e76\u4f7f\u7528\u9ed8\u8ba4\u72b6\u6001\u7801\u6216\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8bbe\u7f6e\u7684\u72b6\u6001\u7801\u3002 \u9644\u52a0\u72b6\u6001\u7801 \u00b6 \u8fd4\u56de\u4e3b\u72b6\u6001\u7801\u4e4b\u5916\u7684\u9644\u52a0\u72b6\u6001\u7801\u65f6\uff0c\u8981\u76f4\u63a5\u8fd4\u56de JSONResponse \u7b49 Response \uff0c\u5e76\u76f4\u63a5\u8bbe\u7f6e\u72b6\u6001\u7801\u3002 \u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u66f4\u65b0\u5546\u54c1\uff08 item \uff09\u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u66f4\u65b0\u6210\u529f\u65f6\u8981\u8fd4\u56de HTTP \u72b6\u6001\u7801 - 200 OK \u3002 \u4f46\u8be5\u8def\u5f84\u64cd\u4f5c\u8981\u80fd\u63a5\u53d7\u65b0\u7684\u5546\u54c1\u3002\u5546\u54c1\u4e0d\u5b58\u5728\u65f6\uff0c\u8fd8\u8981\u80fd\u81ea\u52a8\u521b\u5efa\u65b0\u5546\u54c1\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u7801 - 201 Created \u3002 \u4e3a\u6b64\uff0c\u8981\u5bfc\u5165 JSONResponse \uff0c\u7136\u540e\u76f4\u63a5\u8fd4\u56de content \uff0c\u5e76\u8bbe\u7f6e status_code \u3002 from typing import Union from fastapi import Body , FastAPI , status from fastapi.responses import JSONResponse app = FastAPI () items = { \"foo\" : { \"name\" : \"Fighters\" , \"size\" : 6 }, \"bar\" : { \"name\" : \"Tenders\" , \"size\" : 3 }} @app . put ( \"/items/ {item_id} \" ) async def upsert_item ( item_id : str , name : Union [ str , None ] = Body ( default = None ), size : Union [ int , None ] = Body ( default = None ), ): if item_id in items : item = items [ item_id ] item [ \"name\" ] = name item [ \"size\" ] = size return item else : item = { \"name\" : name , \"size\" : size } items [ item_id ] = item return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) \u8b66\u544a \u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u5982\u4e0a\u4f8b\u4f1a\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u3002 FastAPI \u4e0d\u4f7f\u7528\u6a21\u578b\u5e8f\u5217\u5316\u8be5\u54cd\u5e94\u3002 \u6b64\u65f6\uff0c\u8981\u786e\u4fdd\u6570\u636e\u5b8c\u6574\uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f JSONResponse \uff0c\u8fd8\u8981\u786e\u4fdd\u8fd4\u56de\u503c\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002\u3000 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c\u4f46\u7edd\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 status \u4e5f\u4e00\u6837\u3002 OpenAPI \u548c API \u6587\u6863 \u00b6 OpenAPI \u6982\u56fe\uff08API \u6587\u6863\uff09\u4e0d\u5305\u542b\u76f4\u63a5\u8fd4\u56de\u7684\u72b6\u6001\u7801\u548c\u54cd\u5e94\uff0c\u56e0\u4e3a FastAPI \u65e0\u6cd5\u9884\u5224\u8fd4\u56de\u7684\u5185\u5bb9\u3002 \u4f46 \u9644\u52a0\u54cd\u5e94 \u53ef\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u5b58\u6863\u64cd\u4f5c\u3002","title":"\u9644\u52a0\u72b6\u6001\u7801"},{"location":"advanced/additional-status-codes/#_1","text":"FastAPI \u9ed8\u8ba4\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\uff0c \u8def\u5f84\u64cd\u4f5c \u8fd4\u56de\u7684\u5185\u5bb9\u4f1a\u653e\u5728 JSONResponse \u91cc\u3002 \u5e76\u4f7f\u7528\u9ed8\u8ba4\u72b6\u6001\u7801\u6216\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8bbe\u7f6e\u7684\u72b6\u6001\u7801\u3002","title":"\u9644\u52a0\u72b6\u6001\u7801"},{"location":"advanced/additional-status-codes/#_2","text":"\u8fd4\u56de\u4e3b\u72b6\u6001\u7801\u4e4b\u5916\u7684\u9644\u52a0\u72b6\u6001\u7801\u65f6\uff0c\u8981\u76f4\u63a5\u8fd4\u56de JSONResponse \u7b49 Response \uff0c\u5e76\u76f4\u63a5\u8bbe\u7f6e\u72b6\u6001\u7801\u3002 \u4f8b\u5982\uff0c\u6709\u4e00\u4e2a\u66f4\u65b0\u5546\u54c1\uff08 item \uff09\u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u66f4\u65b0\u6210\u529f\u65f6\u8981\u8fd4\u56de HTTP \u72b6\u6001\u7801 - 200 OK \u3002 \u4f46\u8be5\u8def\u5f84\u64cd\u4f5c\u8981\u80fd\u63a5\u53d7\u65b0\u7684\u5546\u54c1\u3002\u5546\u54c1\u4e0d\u5b58\u5728\u65f6\uff0c\u8fd8\u8981\u80fd\u81ea\u52a8\u521b\u5efa\u65b0\u5546\u54c1\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u7801 - 201 Created \u3002 \u4e3a\u6b64\uff0c\u8981\u5bfc\u5165 JSONResponse \uff0c\u7136\u540e\u76f4\u63a5\u8fd4\u56de content \uff0c\u5e76\u8bbe\u7f6e status_code \u3002 from typing import Union from fastapi import Body , FastAPI , status from fastapi.responses import JSONResponse app = FastAPI () items = { \"foo\" : { \"name\" : \"Fighters\" , \"size\" : 6 }, \"bar\" : { \"name\" : \"Tenders\" , \"size\" : 3 }} @app . put ( \"/items/ {item_id} \" ) async def upsert_item ( item_id : str , name : Union [ str , None ] = Body ( default = None ), size : Union [ int , None ] = Body ( default = None ), ): if item_id in items : item = items [ item_id ] item [ \"name\" ] = name item [ \"size\" ] = size return item else : item = { \"name\" : name , \"size\" : size } items [ item_id ] = item return JSONResponse ( status_code = status . HTTP_201_CREATED , content = item ) \u8b66\u544a \u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u5982\u4e0a\u4f8b\u4f1a\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u3002 FastAPI \u4e0d\u4f7f\u7528\u6a21\u578b\u5e8f\u5217\u5316\u8be5\u54cd\u5e94\u3002 \u6b64\u65f6\uff0c\u8981\u786e\u4fdd\u6570\u636e\u5b8c\u6574\uff0c\u5982\u679c\u4f7f\u7528\u7684\u662f JSONResponse \uff0c\u8fd8\u8981\u786e\u4fdd\u8fd4\u56de\u503c\u662f\u6709\u6548\u7684 JSON \u6570\u636e\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002\u3000 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c\u4f46\u7edd\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 status \u4e5f\u4e00\u6837\u3002","title":"\u9644\u52a0\u72b6\u6001\u7801"},{"location":"advanced/additional-status-codes/#openapi-api","text":"OpenAPI \u6982\u56fe\uff08API \u6587\u6863\uff09\u4e0d\u5305\u542b\u76f4\u63a5\u8fd4\u56de\u7684\u72b6\u6001\u7801\u548c\u54cd\u5e94\uff0c\u56e0\u4e3a FastAPI \u65e0\u6cd5\u9884\u5224\u8fd4\u56de\u7684\u5185\u5bb9\u3002 \u4f46 \u9644\u52a0\u54cd\u5e94 \u53ef\u5728\u4ee3\u7801\u4e2d\u5b9e\u73b0\u5b58\u6863\u64cd\u4f5c\u3002","title":"OpenAPI \u548c API \u6587\u6863"},{"location":"advanced/advanced-dependencies/","text":"\u9ad8\u7ea7\u4f9d\u8d56\u9879 \u00b6 \u53c2\u6570\u5316\u7684\u4f9d\u8d56\u9879 \u00b6 \u6211\u4eec\u4e4b\u524d\u770b\u5230\u7684\u6240\u6709\u4f9d\u8d56\u9879\u90fd\u662f\u5199\u6b7b\u7684\u51fd\u6570\u6216\u7c7b\u3002 \u4f46\u4e5f\u53ef\u4ee5\u4e3a\u4f9d\u8d56\u9879\u8bbe\u7f6e\u53c2\u6570\uff0c\u907f\u514d\u58f0\u660e\u591a\u4e2a\u4e0d\u540c\u7684\u51fd\u6570\u6216\u7c7b\u3002 \u5047\u8bbe\u8981\u521b\u5efa\u6821\u9a8c\u67e5\u8be2\u53c2\u6570 q \u662f\u5426\u5305\u542b\u56fa\u5b9a\u5185\u5bb9\u7684\u4f9d\u8d56\u9879\u3002 \u4f46\u6b64\u5904\u8981\u628a\u5f85\u68c0\u9a8c\u7684\u56fa\u5b9a\u5185\u5bb9\u5b9a\u4e49\u4e3a\u53c2\u6570\u3002 \u53ef\u8c03\u7528 \u5b9e\u4f8b \u00b6 Python \u53ef\u4ee5\u628a\u7c7b\u5b9e\u4f8b\u53d8\u4e3a \u53ef\u8c03\u7528\u9879 \u3002 \u8fd9\u91cc\u8bf4\u7684\u4e0d\u662f\u7c7b\u672c\u8eab\uff08\u7c7b\u672c\u5c31\u662f\u53ef\u8c03\u7528\u9879\uff09\uff0c\u800c\u662f\u7c7b\u5b9e\u4f8b\u3002 \u4e3a\u6b64\uff0c\u9700\u8981\u58f0\u660e __call__ \u65b9\u6cd5\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u672c\u4f8b\u4e2d\uff0c FastAPI \u4f7f\u7528 __call__ \u68c0\u67e5\u9644\u52a0\u53c2\u6570\u53ca\u5b50\u4f9d\u8d56\u9879\uff0c\u7a0d\u540e\uff0c\u8fd8\u8981\u8c03\u7528\u5b83\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f20\u9012\u503c\u3002 \u53c2\u6570\u5316\u5b9e\u4f8b \u00b6 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 __init__ \u58f0\u660e\u7528\u4e8e \u53c2\u6570\u5316 \u4f9d\u8d56\u9879\u7684\u5b9e\u4f8b\u53c2\u6570\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u672c\u4f8b\u4e2d\uff0c FastAPI \u4e0d\u4f7f\u7528 __init__ \uff0c\u6211\u4eec\u8981\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002 \u521b\u5efa\u5b9e\u4f8b \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u7c7b\u5b9e\u4f8b\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u8fd9\u6837\u5c31\u53ef\u4ee5 \u53c2\u6570\u5316 \u4f9d\u8d56\u9879\uff0c\u5b83\u5305\u542b checker.fixed_content \u7684\u5c5e\u6027 - \"bar\" \u3002 \u628a\u5b9e\u4f8b\u4f5c\u4e3a\u4f9d\u8d56\u9879 \u00b6 \u7136\u540e\uff0c\u4e0d\u8981\u518d\u5728 Depends(checker) \u4e2d\u4f7f\u7528 Depends(FixedContentQueryChecker) \uff0c \u800c\u662f\u8981\u4f7f\u7528 checker \uff0c\u56e0\u4e3a\u4f9d\u8d56\u9879\u662f\u7c7b\u5b9e\u4f8b - checker \uff0c\u4e0d\u662f\u7c7b\u3002 \u5904\u7406\u4f9d\u8d56\u9879\u65f6\uff0c FastAPI \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 checker \uff1a checker ( q = \"somequery\" ) \u2026\u2026\u5e76\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 fixed_content_included \u8fd4\u56de\u4f9d\u8d56\u9879\u7684\u503c\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u63d0\u793a \u672c\u7ae0\u793a\u4f8b\u6709\u4e9b\u523b\u610f\uff0c\u4e5f\u770b\u4e0d\u51fa\u6709\u4ec0\u4e48\u7528\u5904\u3002 \u8fd9\u4e2a\u7b80\u4f8b\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e\u9ad8\u7ea7\u4f9d\u8d56\u9879\u7684\u8fd0\u4f5c\u673a\u5236\u3002 \u5728\u6709\u5173\u5b89\u5168\u7684\u7ae0\u8282\u4e2d\uff0c\u5de5\u5177\u51fd\u6570\u5c06\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002 \u53ea\u8981\u80fd\u7406\u89e3\u672c\u7ae0\u5185\u5bb9\uff0c\u5c31\u80fd\u7406\u89e3\u5b89\u5168\u5de5\u5177\u80cc\u540e\u7684\u8fd0\u884c\u673a\u5236\u3002","title":"\u9ad8\u7ea7\u4f9d\u8d56\u9879"},{"location":"advanced/advanced-dependencies/#_1","text":"","title":"\u9ad8\u7ea7\u4f9d\u8d56\u9879"},{"location":"advanced/advanced-dependencies/#_2","text":"\u6211\u4eec\u4e4b\u524d\u770b\u5230\u7684\u6240\u6709\u4f9d\u8d56\u9879\u90fd\u662f\u5199\u6b7b\u7684\u51fd\u6570\u6216\u7c7b\u3002 \u4f46\u4e5f\u53ef\u4ee5\u4e3a\u4f9d\u8d56\u9879\u8bbe\u7f6e\u53c2\u6570\uff0c\u907f\u514d\u58f0\u660e\u591a\u4e2a\u4e0d\u540c\u7684\u51fd\u6570\u6216\u7c7b\u3002 \u5047\u8bbe\u8981\u521b\u5efa\u6821\u9a8c\u67e5\u8be2\u53c2\u6570 q \u662f\u5426\u5305\u542b\u56fa\u5b9a\u5185\u5bb9\u7684\u4f9d\u8d56\u9879\u3002 \u4f46\u6b64\u5904\u8981\u628a\u5f85\u68c0\u9a8c\u7684\u56fa\u5b9a\u5185\u5bb9\u5b9a\u4e49\u4e3a\u53c2\u6570\u3002","title":"\u53c2\u6570\u5316\u7684\u4f9d\u8d56\u9879"},{"location":"advanced/advanced-dependencies/#_3","text":"Python \u53ef\u4ee5\u628a\u7c7b\u5b9e\u4f8b\u53d8\u4e3a \u53ef\u8c03\u7528\u9879 \u3002 \u8fd9\u91cc\u8bf4\u7684\u4e0d\u662f\u7c7b\u672c\u8eab\uff08\u7c7b\u672c\u5c31\u662f\u53ef\u8c03\u7528\u9879\uff09\uff0c\u800c\u662f\u7c7b\u5b9e\u4f8b\u3002 \u4e3a\u6b64\uff0c\u9700\u8981\u58f0\u660e __call__ \u65b9\u6cd5\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u672c\u4f8b\u4e2d\uff0c FastAPI \u4f7f\u7528 __call__ \u68c0\u67e5\u9644\u52a0\u53c2\u6570\u53ca\u5b50\u4f9d\u8d56\u9879\uff0c\u7a0d\u540e\uff0c\u8fd8\u8981\u8c03\u7528\u5b83\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f20\u9012\u503c\u3002","title":"\u53ef\u8c03\u7528\u5b9e\u4f8b"},{"location":"advanced/advanced-dependencies/#_4","text":"\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 __init__ \u58f0\u660e\u7528\u4e8e \u53c2\u6570\u5316 \u4f9d\u8d56\u9879\u7684\u5b9e\u4f8b\u53c2\u6570\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u672c\u4f8b\u4e2d\uff0c FastAPI \u4e0d\u4f7f\u7528 __init__ \uff0c\u6211\u4eec\u8981\u76f4\u63a5\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u3002","title":"\u53c2\u6570\u5316\u5b9e\u4f8b"},{"location":"advanced/advanced-dependencies/#_5","text":"\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u7c7b\u5b9e\u4f8b\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u8fd9\u6837\u5c31\u53ef\u4ee5 \u53c2\u6570\u5316 \u4f9d\u8d56\u9879\uff0c\u5b83\u5305\u542b checker.fixed_content \u7684\u5c5e\u6027 - \"bar\" \u3002","title":"\u521b\u5efa\u5b9e\u4f8b"},{"location":"advanced/advanced-dependencies/#_6","text":"\u7136\u540e\uff0c\u4e0d\u8981\u518d\u5728 Depends(checker) \u4e2d\u4f7f\u7528 Depends(FixedContentQueryChecker) \uff0c \u800c\u662f\u8981\u4f7f\u7528 checker \uff0c\u56e0\u4e3a\u4f9d\u8d56\u9879\u662f\u7c7b\u5b9e\u4f8b - checker \uff0c\u4e0d\u662f\u7c7b\u3002 \u5904\u7406\u4f9d\u8d56\u9879\u65f6\uff0c FastAPI \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 checker \uff1a checker ( q = \"somequery\" ) \u2026\u2026\u5e76\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 fixed_content_included \u8fd4\u56de\u4f9d\u8d56\u9879\u7684\u503c\uff1a from fastapi import Depends , FastAPI app = FastAPI () class FixedContentQueryChecker : def __init__ ( self , fixed_content : str ): self . fixed_content = fixed_content def __call__ ( self , q : str = \"\" ): if q : return self . fixed_content in q return False checker = FixedContentQueryChecker ( \"bar\" ) @app . get ( \"/query-checker/\" ) async def read_query_check ( fixed_content_included : bool = Depends ( checker )): return { \"fixed_content_in_query\" : fixed_content_included } \u63d0\u793a \u672c\u7ae0\u793a\u4f8b\u6709\u4e9b\u523b\u610f\uff0c\u4e5f\u770b\u4e0d\u51fa\u6709\u4ec0\u4e48\u7528\u5904\u3002 \u8fd9\u4e2a\u7b80\u4f8b\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e\u9ad8\u7ea7\u4f9d\u8d56\u9879\u7684\u8fd0\u4f5c\u673a\u5236\u3002 \u5728\u6709\u5173\u5b89\u5168\u7684\u7ae0\u8282\u4e2d\uff0c\u5de5\u5177\u51fd\u6570\u5c06\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u5b9e\u73b0\u3002 \u53ea\u8981\u80fd\u7406\u89e3\u672c\u7ae0\u5185\u5bb9\uff0c\u5c31\u80fd\u7406\u89e3\u5b89\u5168\u5de5\u5177\u80cc\u540e\u7684\u8fd0\u884c\u673a\u5236\u3002","title":"\u628a\u5b9e\u4f8b\u4f5c\u4e3a\u4f9d\u8d56\u9879"},{"location":"advanced/async-sql-databases/","text":"\u5f02\u6b65 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u00b6 FastAPI \u4f7f\u7528 encode/databases \u4e3a\u8fde\u63a5\u6570\u636e\u5e93\u63d0\u4f9b\u5f02\u6b65\u652f\u6301\uff08 async \u4e0e await \uff09\u3002 databases \u517c\u5bb9\u4ee5\u4e0b\u6570\u636e\u5e93\uff1a PostgreSQL MySQL SQLite \u672c\u7ae0\u793a\u4f8b\u4f7f\u7528 SQLite \uff0c\u5b83\u4f7f\u7528\u7684\u662f\u5355\u6587\u4ef6\uff0c\u4e14 Python \u5185\u7f6e\u96c6\u6210\u4e86 SQLite\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5e76\u8fd0\u884c\u672c\u7ae0\u793a\u4f8b\u3002 \u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u5219\u8981\u4f7f\u7528 PostgreSQL \u7b49\u6570\u636e\u5e93\u670d\u52a1\u5668\u3002 \u63d0\u793a \u60a8\u53ef\u4ee5\u4f7f\u7528 SQLAlchemy ORM\uff08 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e00\u7ae0 \uff09\u4e2d\u7684\u601d\u8def\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528\u5de5\u5177\u51fd\u6570\u5728\u6570\u636e\u5e93\u4e2d\u6267\u884c\u64cd\u4f5c\uff0c\u72ec\u7acb\u4e8e FastAPI \u4ee3\u7801\u3002 \u672c\u7ae0\u4e0d\u5e94\u7528\u8fd9\u4e9b\u601d\u8def\uff0c\u7b49\u6548\u4e8e Starlette \u7684\u5bf9\u5e94\u5185\u5bb9\u3002 \u5bfc\u5165\u4e0e\u8bbe\u7f6e SQLAlchemy \u00b6 \u5bfc\u5165 SQLAlchemy \u521b\u5efa metadata \u5bf9\u8c61 \u4f7f\u7528 metadata \u5bf9\u8c61\u521b\u5efa notes \u8868 from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u63d0\u793a \u6ce8\u610f\uff0c\u4e0a\u4f8b\u662f\u90fd\u662f\u7eaf SQLAlchemy Core \u4ee3\u7801\u3002 databases \u8fd8\u6ca1\u6709\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002 \u5bfc\u5165\u5e76\u8bbe\u7f6e databases \u00b6 \u5bfc\u5165 databases \u521b\u5efa DATABASE_URL \u521b\u5efa database from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u63d0\u793a \u8fde\u63a5 PostgreSQL \u7b49\u6570\u636e\u5e93\u65f6\uff0c\u9700\u8981\u4fee\u6539 DATABASE_URL \u3002 \u521b\u5efa\u8868 \u00b6 \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 Python \u6587\u4ef6\u521b\u5efa\u8868\uff0c\u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u5e94\u4f7f\u7528\u96c6\u6210\u8fc1\u79fb\u7b49\u529f\u80fd\u7684 Alembic \u521b\u5efa\u8868\u3002 \u672c\u4f8b\u5728\u542f\u52a8 FastAPI \u5e94\u7528\u524d\uff0c\u76f4\u63a5\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u521b\u5efa engine \u4f7f\u7528 metadata \u5bf9\u8c61\u521b\u5efa\u6240\u6709\u8868 from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u521b\u5efa\u6a21\u578b \u00b6 \u521b\u5efa\u4ee5\u4e0b Pydantic \u6a21\u578b\uff1a \u521b\u5efa\u7b14\u8bb0\u7684\u6a21\u578b\uff08 NoteIn \uff09 \u8fd4\u56de\u7b14\u8bb0\u7684\u6a21\u578b\uff08 Note \uff09 from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u8fd9\u4e24\u4e2a Pydantic \u6a21\u578b\u90fd\u53ef\u4ee5\u8f85\u52a9\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\uff08\u8f6c\u6362\uff09\u5e76\u6ce8\u91ca\uff08\u5b58\u6863\uff09\u8f93\u5165\u7684\u6570\u636e\u3002 \u56e0\u6b64\uff0cAPI \u6587\u6863\u4f1a\u663e\u793a\u8fd9\u4e9b\u6570\u636e\u3002 \u8fde\u63a5\u4e0e\u65ad\u5f00 \u00b6 \u521b\u5efa FastAPI \u5e94\u7528 \u521b\u5efa\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u6267\u884c\u6570\u636e\u5e93\u8fde\u63a5\u4e0e\u65ad\u5f00\u64cd\u4f5c from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u8bfb\u53d6\u7b14\u8bb0 \u00b6 \u521b\u5efa\u8bfb\u53d6\u7b14\u8bb0\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff1a from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u4f8b\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u65f6\u4f7f\u7528 await \uff0c\u56e0\u6b64 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8981\u58f0\u660e\u4e3a\u5f02\u6b65\u51fd\u6570\uff08 asnyc \uff09\u3002 \u6ce8\u610f response_model=List[Note] \u00b6 response_model=List[Note] \u4f7f\u7528\u7684\u662f typing.List \u3002 \u5b83\u4ee5\u7b14\u8bb0\uff08 Note \uff09\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u6863\uff08\u53ca\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u3001\u7b5b\u9009\uff09\u8f93\u51fa\u7684\u6570\u636e\u3002 \u521b\u5efa\u7b14\u8bb0 \u00b6 \u521b\u5efa\u65b0\u5efa\u7b14\u8bb0\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff1a from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u4f8b\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u65f6\u4f7f\u7528 await \uff0c\u56e0\u6b64\u8981\u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u58f0\u660e\u4e3a\u5f02\u6b65\u51fd\u6570\uff08 asnyc \uff09\u3002 \u5173\u4e8e {**note.dict(), \"id\": last_record_id} \u00b6 note \u662f Pydantic Note \u5bf9\u8c61\uff1a note.dict() \u8fd4\u56de\u5305\u542b\u5982\u4e0b\u6570\u636e\u7684 \u5b57\u5178 \uff1a { \"text\" : \"Some note\" , \"completed\" : False , } \u4f46\u5b83\u4e0d\u5305\u542b id \u5b57\u6bb5\u3002 \u56e0\u6b64\u8981\u65b0\u5efa\u4e00\u4e2a\u5305\u542b note.dict() \u952e\u503c\u5bf9\u7684 \u5b57\u5178 \uff1a { ** note . dict ()} **note.dict() \u76f4\u63a5 \u89e3\u5305 \u952e\u503c\u5bf9\uff0c \u56e0\u6b64\uff0c {**note.dict()} \u662f note.dict() \u7684\u526f\u672c\u3002 \u7136\u540e\uff0c\u6269\u5c55 dict \u526f\u672c\uff0c\u6dfb\u52a0\u952e\u503c\u5bf9 \"id\": last_record_id \uff1a { ** note . dict (), \"id\" : last_record_id } \u6700\u7ec8\u8fd4\u56de\u7684\u7ed3\u679c\u5982\u4e0b\uff1a { \"id\" : 1 , \"text\" : \"Some note\" , \"completed\" : False , } \u67e5\u770b\u6587\u6863 \u00b6 \u590d\u5236\u8fd9\u4e9b\u4ee3\u7801\uff0c\u67e5\u770b\u6587\u6863 http://127.0.0.1:8000/docs\u3002 API \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a \u66f4\u591a\u8bf4\u660e \u00b6 \u8be6\u89c1 Github \u4e0a\u7684 encode/databases \u3002","title":"\u5f02\u6b65 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"advanced/async-sql-databases/#sql","text":"FastAPI \u4f7f\u7528 encode/databases \u4e3a\u8fde\u63a5\u6570\u636e\u5e93\u63d0\u4f9b\u5f02\u6b65\u652f\u6301\uff08 async \u4e0e await \uff09\u3002 databases \u517c\u5bb9\u4ee5\u4e0b\u6570\u636e\u5e93\uff1a PostgreSQL MySQL SQLite \u672c\u7ae0\u793a\u4f8b\u4f7f\u7528 SQLite \uff0c\u5b83\u4f7f\u7528\u7684\u662f\u5355\u6587\u4ef6\uff0c\u4e14 Python \u5185\u7f6e\u96c6\u6210\u4e86 SQLite\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u76f4\u63a5\u590d\u5236\u5e76\u8fd0\u884c\u672c\u7ae0\u793a\u4f8b\u3002 \u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u5219\u8981\u4f7f\u7528 PostgreSQL \u7b49\u6570\u636e\u5e93\u670d\u52a1\u5668\u3002 \u63d0\u793a \u60a8\u53ef\u4ee5\u4f7f\u7528 SQLAlchemy ORM\uff08 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93\u4e00\u7ae0 \uff09\u4e2d\u7684\u601d\u8def\uff0c\u6bd4\u5982\uff0c\u4f7f\u7528\u5de5\u5177\u51fd\u6570\u5728\u6570\u636e\u5e93\u4e2d\u6267\u884c\u64cd\u4f5c\uff0c\u72ec\u7acb\u4e8e FastAPI \u4ee3\u7801\u3002 \u672c\u7ae0\u4e0d\u5e94\u7528\u8fd9\u4e9b\u601d\u8def\uff0c\u7b49\u6548\u4e8e Starlette \u7684\u5bf9\u5e94\u5185\u5bb9\u3002","title":"\u5f02\u6b65 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"advanced/async-sql-databases/#sqlalchemy","text":"\u5bfc\u5165 SQLAlchemy \u521b\u5efa metadata \u5bf9\u8c61 \u4f7f\u7528 metadata \u5bf9\u8c61\u521b\u5efa notes \u8868 from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u63d0\u793a \u6ce8\u610f\uff0c\u4e0a\u4f8b\u662f\u90fd\u662f\u7eaf SQLAlchemy Core \u4ee3\u7801\u3002 databases \u8fd8\u6ca1\u6709\u8fdb\u884c\u4efb\u4f55\u64cd\u4f5c\u3002","title":"\u5bfc\u5165\u4e0e\u8bbe\u7f6e SQLAlchemy"},{"location":"advanced/async-sql-databases/#databases","text":"\u5bfc\u5165 databases \u521b\u5efa DATABASE_URL \u521b\u5efa database from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u63d0\u793a \u8fde\u63a5 PostgreSQL \u7b49\u6570\u636e\u5e93\u65f6\uff0c\u9700\u8981\u4fee\u6539 DATABASE_URL \u3002","title":"\u5bfc\u5165\u5e76\u8bbe\u7f6e databases"},{"location":"advanced/async-sql-databases/#_1","text":"\u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 Python \u6587\u4ef6\u521b\u5efa\u8868\uff0c\u4f46\u5728\u751f\u4ea7\u73af\u5883\u4e2d\uff0c\u5e94\u4f7f\u7528\u96c6\u6210\u8fc1\u79fb\u7b49\u529f\u80fd\u7684 Alembic \u521b\u5efa\u8868\u3002 \u672c\u4f8b\u5728\u542f\u52a8 FastAPI \u5e94\u7528\u524d\uff0c\u76f4\u63a5\u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u521b\u5efa engine \u4f7f\u7528 metadata \u5bf9\u8c61\u521b\u5efa\u6240\u6709\u8868 from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id }","title":"\u521b\u5efa\u8868"},{"location":"advanced/async-sql-databases/#_2","text":"\u521b\u5efa\u4ee5\u4e0b Pydantic \u6a21\u578b\uff1a \u521b\u5efa\u7b14\u8bb0\u7684\u6a21\u578b\uff08 NoteIn \uff09 \u8fd4\u56de\u7b14\u8bb0\u7684\u6a21\u578b\uff08 Note \uff09 from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u8fd9\u4e24\u4e2a Pydantic \u6a21\u578b\u90fd\u53ef\u4ee5\u8f85\u52a9\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\uff08\u8f6c\u6362\uff09\u5e76\u6ce8\u91ca\uff08\u5b58\u6863\uff09\u8f93\u5165\u7684\u6570\u636e\u3002 \u56e0\u6b64\uff0cAPI \u6587\u6863\u4f1a\u663e\u793a\u8fd9\u4e9b\u6570\u636e\u3002","title":"\u521b\u5efa\u6a21\u578b"},{"location":"advanced/async-sql-databases/#_3","text":"\u521b\u5efa FastAPI \u5e94\u7528 \u521b\u5efa\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u6267\u884c\u6570\u636e\u5e93\u8fde\u63a5\u4e0e\u65ad\u5f00\u64cd\u4f5c from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id }","title":"\u8fde\u63a5\u4e0e\u65ad\u5f00"},{"location":"advanced/async-sql-databases/#_4","text":"\u521b\u5efa\u8bfb\u53d6\u7b14\u8bb0\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff1a from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u4f8b\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u65f6\u4f7f\u7528 await \uff0c\u56e0\u6b64 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8981\u58f0\u660e\u4e3a\u5f02\u6b65\u51fd\u6570\uff08 asnyc \uff09\u3002","title":"\u8bfb\u53d6\u7b14\u8bb0"},{"location":"advanced/async-sql-databases/#response_modellistnote","text":"response_model=List[Note] \u4f7f\u7528\u7684\u662f typing.List \u3002 \u5b83\u4ee5\u7b14\u8bb0\uff08 Note \uff09\u5217\u8868\u7684\u5f62\u5f0f\u5b58\u6863\uff08\u53ca\u9a8c\u8bc1\u3001\u5e8f\u5217\u5316\u3001\u7b5b\u9009\uff09\u8f93\u51fa\u7684\u6570\u636e\u3002","title":"\u6ce8\u610f response_model=List[Note]"},{"location":"advanced/async-sql-databases/#_5","text":"\u521b\u5efa\u65b0\u5efa\u7b14\u8bb0\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff1a from typing import List import databases import sqlalchemy from fastapi import FastAPI from pydantic import BaseModel # SQLAlchemy specific code, as with any other app DATABASE_URL = \"sqlite:///./test.db\" # DATABASE_URL = \"postgresql://user:password@postgresserver/db\" database = databases . Database ( DATABASE_URL ) metadata = sqlalchemy . MetaData () notes = sqlalchemy . Table ( \"notes\" , metadata , sqlalchemy . Column ( \"id\" , sqlalchemy . Integer , primary_key = True ), sqlalchemy . Column ( \"text\" , sqlalchemy . String ), sqlalchemy . Column ( \"completed\" , sqlalchemy . Boolean ), ) engine = sqlalchemy . create_engine ( DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) metadata . create_all ( engine ) class NoteIn ( BaseModel ): text : str completed : bool class Note ( BaseModel ): id : int text : str completed : bool app = FastAPI () @app . on_event ( \"startup\" ) async def startup (): await database . connect () @app . on_event ( \"shutdown\" ) async def shutdown (): await database . disconnect () @app . get ( \"/notes/\" , response_model = List [ Note ]) async def read_notes (): query = notes . select () return await database . fetch_all ( query ) @app . post ( \"/notes/\" , response_model = Note ) async def create_note ( note : NoteIn ): query = notes . insert () . values ( text = note . text , completed = note . completed ) last_record_id = await database . execute ( query ) return { ** note . dict (), \"id\" : last_record_id } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u4f8b\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u65f6\u4f7f\u7528 await \uff0c\u56e0\u6b64\u8981\u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u58f0\u660e\u4e3a\u5f02\u6b65\u51fd\u6570\uff08 asnyc \uff09\u3002","title":"\u521b\u5efa\u7b14\u8bb0"},{"location":"advanced/async-sql-databases/#notedict-id-last_record_id","text":"note \u662f Pydantic Note \u5bf9\u8c61\uff1a note.dict() \u8fd4\u56de\u5305\u542b\u5982\u4e0b\u6570\u636e\u7684 \u5b57\u5178 \uff1a { \"text\" : \"Some note\" , \"completed\" : False , } \u4f46\u5b83\u4e0d\u5305\u542b id \u5b57\u6bb5\u3002 \u56e0\u6b64\u8981\u65b0\u5efa\u4e00\u4e2a\u5305\u542b note.dict() \u952e\u503c\u5bf9\u7684 \u5b57\u5178 \uff1a { ** note . dict ()} **note.dict() \u76f4\u63a5 \u89e3\u5305 \u952e\u503c\u5bf9\uff0c \u56e0\u6b64\uff0c {**note.dict()} \u662f note.dict() \u7684\u526f\u672c\u3002 \u7136\u540e\uff0c\u6269\u5c55 dict \u526f\u672c\uff0c\u6dfb\u52a0\u952e\u503c\u5bf9 \"id\": last_record_id \uff1a { ** note . dict (), \"id\" : last_record_id } \u6700\u7ec8\u8fd4\u56de\u7684\u7ed3\u679c\u5982\u4e0b\uff1a { \"id\" : 1 , \"text\" : \"Some note\" , \"completed\" : False , }","title":"\u5173\u4e8e {**note.dict(), \"id\": last_record_id}"},{"location":"advanced/async-sql-databases/#_6","text":"\u590d\u5236\u8fd9\u4e9b\u4ee3\u7801\uff0c\u67e5\u770b\u6587\u6863 http://127.0.0.1:8000/docs\u3002 API \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/async-sql-databases/#_7","text":"\u8be6\u89c1 Github \u4e0a\u7684 encode/databases \u3002","title":"\u66f4\u591a\u8bf4\u660e"},{"location":"advanced/async-tests/","text":"\u5f02\u6b65\u6d4b\u8bd5 \u00b6 \u524d\u51e0\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 TestClient \u6d4b\u8bd5 FastAPI \u5e94\u7528\uff0c\u4f46 TestClient \u4e0d\u80fd\u5728\uff08\u540c\u6b65\u7684\uff09Pytest \u51fd\u6570\u4e2d\u6d4b\u8bd5\u6216\u8fd0\u884c\u4efb\u4f55\u5f02\u6b65\uff08 async \uff09\u51fd\u6570\u3002 \u6d4b\u8bd5\u5f02\u6b65\u51fd\u6570\u662f\u975e\u5e38\u5fc5\u8981\u7684\uff0c\u4f8b\u5982\uff0c\u5f02\u6b65\u67e5\u8be2\u6570\u636e\u5e93\u3002\u5047\u8bbe\u5411 FastAPI \u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u6d4b\u8bd5\u540e\u7aef\u80fd\u5426\u4f7f\u7528\u5f02\u6b65\u6570\u636e\u5e93\u652f\u6301\u5e93\u628a\u6570\u636e\u5199\u5165\u6570\u636e\u5e93\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fdb\u884c\u5f02\u6b65\u6d4b\u8bd5\u3002 pytest-asyncio \u00b6 \u6d4b\u8bd5\u65f6\u5982\u9700\u8c03\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u652f\u6301\u5f02\u6b65\u3002Pytest \u7684 pytest-asyncio \u652f\u6301\u5e93\u5141\u8bb8\u5f02\u6b65\u8c03\u7528\u6307\u5b9a\u7684\u6d4b\u8bd5\u51fd\u6570\u3002 \u5b89\u88c5\u547d\u4ee4\uff1a $ pip install pytest-asyncio ---> 100% HTTPX \u00b6 \u5373\u4fbf FastAPI \u5e94\u7528\u4f7f\u7528\u666e\u901a\u51fd\u6570\uff08 def \uff09\u4ee3\u66ff\u4e86\u5f02\u6b65\u51fd\u6570\uff08 async def \uff09\uff0c\u4f46\u5b83\u5728\u5e95\u5c42\u4ecd\u662f\u5f02\u6b65\u5e94\u7528\u3002 TestClient \u4f7f\u7528\u6807\u51c6 pytest \u5728\u666e\u901a\u6d4b\u8bd5\u51fd\u6570\u4e2d\u8c03\u7528\u5f02\u6b65 FastAPI \u5e94\u7528\u3002\u4f46\u5728\u5f02\u6b65\u51fd\u6570\u5185\u90e8\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5c31\u4e0d\u8d77\u4f5c\u7528\u4e86\u3002\u8981\u8fd0\u884c\u5f02\u6b65\u6d4b\u8bd5\uff0c\u4e0d\u80fd\u518d\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u4f7f\u7528 TestClient \u3002 \u597d\u5728\u8fd8\u6709\u4e00\u4e2a\u4e0d\u9519\u7684\u5907\u9009\u65b9\u6848 - HTTPX \u3002 HTTPX \u662f\u652f\u6301 Python 3 \u7684 HTTP \u5ba2\u6237\u7aef\uff0c\u4e0e TestClient \u7c7b\u4f3c\uff0c\u5b83\u4e5f\u53ef\u4ee5\u67e5\u8be2 FastAPI \u5e94\u7528\u3002 \u5982\u679c\u60a8\u4e86\u89e3 Requests \u652f\u6301\u5e93\uff0c\u5c31\u4f1a\u53d1\u73b0 HTTPX \u4e0e Request \u7684 API \u51e0\u4e4e\u4e00\u6837\u3002 Request \u4e0e HTTPX \u6700\u5927\u7684\u533a\u522b\u5c31\u662f HTTPX \u4e0d\u5c40\u9650\u4e8e\u540c\u6b65\uff0c\u8fd8\u80fd\u4f7f\u7528\u5f02\u6b65\u8bf7\u6c42\u3002 \u793a\u4f8b \u00b6 main.py \u6a21\u5757\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Tomato\" } test_main.py \u6a21\u5757\u7528\u4e8e\u6d4b\u8bd5 main.py \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } \u8fd0\u884c \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\uff1a $ pytest ---> 100% \u6280\u672f\u7ec6\u8282 \u00b6 @pytest.mark.asyncio \u6807\u8bb0\u544a\u8bc9 pytest \u8fd9\u4e2a\u6d4b\u8bd5\u51fd\u6570\u4ee5\u5f02\u6b65\u65b9\u5f0f\u8c03\u7528\uff1a import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } \u63d0\u793a \u6ce8\u610f\uff0c\u6d4b\u8bd5\u51fd\u6570\u73b0\u5728\u4f7f\u7528 async def \u53d6\u4ee3\u4e86\u4e4b\u524d\u4f7f\u7528 TestClient \u65f6\u7684 def \u3002 \u7136\u540e\uff0c\u7528 app \u521b\u5efa AsyncClient \uff0c\u5e76\u4f7f\u7528 await \u5411\u5b83\u53d1\u9001\u5f02\u6b65\u8bf7\u6c42\u3002 import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } \u7b49\u6548\u4e8e\uff1a response = client . get ( '/' ) \u2026\u2026\u4f7f\u7528 TestClient \u65f6\u7528\u4e8e\u751f\u6210\u8bf7\u6c42\u7684\u8fd9\u6bb5\u4ee3\u7801\u3002 \u63d0\u793a \u6ce8\u610f\uff0c asnyc/await \u8981\u4e0e\u65b0\u7684 AsyncClient \u4e00\u8d77\u4f7f\u7528 - \u56e0\u4e3a\u8bf7\u6c42\u662f\u5f02\u6b65\u7684\u3002 \u5176\u4ed6\u5f02\u6b65\u51fd\u6570\u8c03\u7528 \u00b6 \u56e0\u4e3a\u6d4b\u8bd5\u51fd\u6570\u662f\u5f02\u6b65\u7684\uff0c\u4e0e\u5728\u4ee3\u7801\u4e2d\u8c03\u7528\u5176\u4ed6\u5f02\u6b65\u51fd\u6570\u4e00\u6837\uff0c\u9664\u4e86\u80fd\u5728\u6d4b\u8bd5\u4e2d\u5411 FastAPI \u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u5916\uff0c\u8fd8\u53ef\u4ee5\u8c03\u7528\uff08\u5e76\u7b49\u5f85 await \uff09\u5176\u4ed6 \u5f02\u6b65 \u51fd\u6570\u3002 \u63d0\u793a \u6d4b\u8bd5\u8c03\u7528\u7684\u5f02\u6b65\u51fd\u6570\u65f6\uff0c\u5982\u679c\u9047\u5230 RuntimeError: Task attached to a different loop \uff08\u4f8b\u5982\uff0c\u4f7f\u7528 MongoDB \u7684 MotorClient \uff09\uff0c\u8bf7\u53c2\u9605 pytest-asyncio \u4ed3\u5e93\u4e2d\u7684 \u8fd9\u4e2a Issue \u3002","title":"\u5f02\u6b65\u6d4b\u8bd5"},{"location":"advanced/async-tests/#_1","text":"\u524d\u51e0\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 TestClient \u6d4b\u8bd5 FastAPI \u5e94\u7528\uff0c\u4f46 TestClient \u4e0d\u80fd\u5728\uff08\u540c\u6b65\u7684\uff09Pytest \u51fd\u6570\u4e2d\u6d4b\u8bd5\u6216\u8fd0\u884c\u4efb\u4f55\u5f02\u6b65\uff08 async \uff09\u51fd\u6570\u3002 \u6d4b\u8bd5\u5f02\u6b65\u51fd\u6570\u662f\u975e\u5e38\u5fc5\u8981\u7684\uff0c\u4f8b\u5982\uff0c\u5f02\u6b65\u67e5\u8be2\u6570\u636e\u5e93\u3002\u5047\u8bbe\u5411 FastAPI \u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u65f6\uff0c\u6d4b\u8bd5\u540e\u7aef\u80fd\u5426\u4f7f\u7528\u5f02\u6b65\u6570\u636e\u5e93\u652f\u6301\u5e93\u628a\u6570\u636e\u5199\u5165\u6570\u636e\u5e93\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fdb\u884c\u5f02\u6b65\u6d4b\u8bd5\u3002","title":"\u5f02\u6b65\u6d4b\u8bd5"},{"location":"advanced/async-tests/#pytest-asyncio","text":"\u6d4b\u8bd5\u65f6\u5982\u9700\u8c03\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u6d4b\u8bd5\u51fd\u6570\u5fc5\u987b\u652f\u6301\u5f02\u6b65\u3002Pytest \u7684 pytest-asyncio \u652f\u6301\u5e93\u5141\u8bb8\u5f02\u6b65\u8c03\u7528\u6307\u5b9a\u7684\u6d4b\u8bd5\u51fd\u6570\u3002 \u5b89\u88c5\u547d\u4ee4\uff1a $ pip install pytest-asyncio ---> 100%","title":"pytest-asyncio"},{"location":"advanced/async-tests/#httpx","text":"\u5373\u4fbf FastAPI \u5e94\u7528\u4f7f\u7528\u666e\u901a\u51fd\u6570\uff08 def \uff09\u4ee3\u66ff\u4e86\u5f02\u6b65\u51fd\u6570\uff08 async def \uff09\uff0c\u4f46\u5b83\u5728\u5e95\u5c42\u4ecd\u662f\u5f02\u6b65\u5e94\u7528\u3002 TestClient \u4f7f\u7528\u6807\u51c6 pytest \u5728\u666e\u901a\u6d4b\u8bd5\u51fd\u6570\u4e2d\u8c03\u7528\u5f02\u6b65 FastAPI \u5e94\u7528\u3002\u4f46\u5728\u5f02\u6b65\u51fd\u6570\u5185\u90e8\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5c31\u4e0d\u8d77\u4f5c\u7528\u4e86\u3002\u8981\u8fd0\u884c\u5f02\u6b65\u6d4b\u8bd5\uff0c\u4e0d\u80fd\u518d\u5728\u6d4b\u8bd5\u51fd\u6570\u4e2d\u4f7f\u7528 TestClient \u3002 \u597d\u5728\u8fd8\u6709\u4e00\u4e2a\u4e0d\u9519\u7684\u5907\u9009\u65b9\u6848 - HTTPX \u3002 HTTPX \u662f\u652f\u6301 Python 3 \u7684 HTTP \u5ba2\u6237\u7aef\uff0c\u4e0e TestClient \u7c7b\u4f3c\uff0c\u5b83\u4e5f\u53ef\u4ee5\u67e5\u8be2 FastAPI \u5e94\u7528\u3002 \u5982\u679c\u60a8\u4e86\u89e3 Requests \u652f\u6301\u5e93\uff0c\u5c31\u4f1a\u53d1\u73b0 HTTPX \u4e0e Request \u7684 API \u51e0\u4e4e\u4e00\u6837\u3002 Request \u4e0e HTTPX \u6700\u5927\u7684\u533a\u522b\u5c31\u662f HTTPX \u4e0d\u5c40\u9650\u4e8e\u540c\u6b65\uff0c\u8fd8\u80fd\u4f7f\u7528\u5f02\u6b65\u8bf7\u6c42\u3002","title":"HTTPX"},{"location":"advanced/async-tests/#_2","text":"main.py \u6a21\u5757\u7684\u793a\u4f8b\u4ee3\u7801\u5982\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Tomato\" } test_main.py \u6a21\u5757\u7528\u4e8e\u6d4b\u8bd5 main.py \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" }","title":"\u793a\u4f8b"},{"location":"advanced/async-tests/#_3","text":"\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fd0\u884c\u6d4b\u8bd5\uff1a $ pytest ---> 100%","title":"\u8fd0\u884c"},{"location":"advanced/async-tests/#_4","text":"@pytest.mark.asyncio \u6807\u8bb0\u544a\u8bc9 pytest \u8fd9\u4e2a\u6d4b\u8bd5\u51fd\u6570\u4ee5\u5f02\u6b65\u65b9\u5f0f\u8c03\u7528\uff1a import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } \u63d0\u793a \u6ce8\u610f\uff0c\u6d4b\u8bd5\u51fd\u6570\u73b0\u5728\u4f7f\u7528 async def \u53d6\u4ee3\u4e86\u4e4b\u524d\u4f7f\u7528 TestClient \u65f6\u7684 def \u3002 \u7136\u540e\uff0c\u7528 app \u521b\u5efa AsyncClient \uff0c\u5e76\u4f7f\u7528 await \u5411\u5b83\u53d1\u9001\u5f02\u6b65\u8bf7\u6c42\u3002 import pytest from httpx import AsyncClient from .main import app @pytest . mark . anyio async def test_root (): async with AsyncClient ( app = app , base_url = \"http://test\" ) as ac : response = await ac . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Tomato\" } \u7b49\u6548\u4e8e\uff1a response = client . get ( '/' ) \u2026\u2026\u4f7f\u7528 TestClient \u65f6\u7528\u4e8e\u751f\u6210\u8bf7\u6c42\u7684\u8fd9\u6bb5\u4ee3\u7801\u3002 \u63d0\u793a \u6ce8\u610f\uff0c asnyc/await \u8981\u4e0e\u65b0\u7684 AsyncClient \u4e00\u8d77\u4f7f\u7528 - \u56e0\u4e3a\u8bf7\u6c42\u662f\u5f02\u6b65\u7684\u3002","title":"\u6280\u672f\u7ec6\u8282"},{"location":"advanced/async-tests/#_5","text":"\u56e0\u4e3a\u6d4b\u8bd5\u51fd\u6570\u662f\u5f02\u6b65\u7684\uff0c\u4e0e\u5728\u4ee3\u7801\u4e2d\u8c03\u7528\u5176\u4ed6\u5f02\u6b65\u51fd\u6570\u4e00\u6837\uff0c\u9664\u4e86\u80fd\u5728\u6d4b\u8bd5\u4e2d\u5411 FastAPI \u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u5916\uff0c\u8fd8\u53ef\u4ee5\u8c03\u7528\uff08\u5e76\u7b49\u5f85 await \uff09\u5176\u4ed6 \u5f02\u6b65 \u51fd\u6570\u3002 \u63d0\u793a \u6d4b\u8bd5\u8c03\u7528\u7684\u5f02\u6b65\u51fd\u6570\u65f6\uff0c\u5982\u679c\u9047\u5230 RuntimeError: Task attached to a different loop \uff08\u4f8b\u5982\uff0c\u4f7f\u7528 MongoDB \u7684 MotorClient \uff09\uff0c\u8bf7\u53c2\u9605 pytest-asyncio \u4ed3\u5e93\u4e2d\u7684 \u8fd9\u4e2a Issue \u3002","title":"\u5176\u4ed6\u5f02\u6b65\u51fd\u6570\u8c03\u7528"},{"location":"advanced/behind-a-proxy/","text":"\u4f7f\u7528\u4ee3\u7406 \u00b6 \u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u8981\u4f7f\u7528 Traefik \u6216 Nginx \u7b49 \u4ee3\u7406 \u670d\u52a1\u5668\uff0c\u5e76\u6dfb\u52a0\u5e94\u7528\u4e0d\u80fd\u8bc6\u522b\u7684\u9644\u52a0\u8def\u5f84\u524d\u7f00\u914d\u7f6e\u3002 \u6b64\u65f6\uff0c\u8981\u4f7f\u7528 root_path \u914d\u7f6e\u5e94\u7528\u3002 root_path \u662f ASGI \u89c4\u8303\u4e2d\u7684\u65b9\u6cd5\uff0cFastAPI \u5c31\u662f\u57fa\u4e8e\u6b64\u89c4\u8303\u5f00\u53d1\u7684\uff08\u901a\u8fc7 Starlette\uff09\u3002 root_path \u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u7279\u5b9a\u60c5\u51b5\u3002 \u5728\u6302\u8f7d\u5b50\u5e94\u7528\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u5185\u90e8\u4f7f\u7528\u3002 \u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406 \u00b6 \u672c\u4f8b\u4e2d\uff0c\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\u662f\u6307\u5728\u4ee3\u7801\u4e2d\u58f0\u660e\u8def\u5f84 /app \uff0c\u7136\u540e\u5728\u5e94\u7528\u9876\u5c42\u6dfb\u52a0\u4ee3\u7406\uff0c\u628a FastAPI \u5e94\u7528\u653e\u5728 /api/v1 \u8def\u5f84\u4e0b\u3002 \u672c\u4f8b\u7684\u539f\u59cb\u8def\u5f84 /app \u5b9e\u9645\u4e0a\u662f\u5728 /api/v1/app \u63d0\u4f9b\u670d\u52a1\u3002 \u54ea\u6015\u6240\u6709\u4ee3\u7801\u90fd\u5047\u8bbe\u53ea\u6709 /app \u3002 \u4ee3\u7406\u53ea\u5728\u628a\u8bf7\u6c42\u4f20\u9001\u7ed9 Uvicorn \u4e4b\u524d\u624d\u4f1a \u79fb\u9664\u8def\u5f84\u524d\u7f00 \uff0c\u8ba9\u5e94\u7528\u4ee5\u4e3a\u5b83\u662f\u5728 /app \u63d0\u4f9b\u670d\u52a1\uff0c\u56e0\u6b64\u4e0d\u5fc5\u5728\u4ee3\u7801\u4e2d\u52a0\u5165\u524d\u7f00 /api/v1 \u3002 \u4f46\u4e4b\u540e\uff0c\u5728\uff08\u524d\u7aef\uff09\u6253\u5f00 API \u6587\u6863\u65f6\uff0c\u4ee3\u7406\u4f1a\u8981\u6c42\u5728 /openapi.json \uff0c\u800c\u4e0d\u662f /api/v1/openapi.json \u4e2d\u63d0\u53d6 OpenAPI \u6982\u56fe\u3002 \u56e0\u6b64\uff0c\uff08\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u4e2d\u7684\uff09\u524d\u7aef\u4f1a\u5c1d\u8bd5\u8bbf\u95ee /openapi.json \uff0c\u4f46\u6ca1\u6709\u529e\u6cd5\u83b7\u53d6 OpenAPI \u6982\u56fe\u3002 \u8fd9\u662f\u56e0\u4e3a\u5e94\u7528\u4f7f\u7528\u4e86\u4ee5 /api/v1 \u4e3a\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\uff0c\u524d\u7aef\u8981\u4ece /api/v1/openapi.json \u4e2d\u63d0\u53d6 OpenAPI \u6982\u56fe\u3002 graph LR browser(\"Browser\") proxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"] server[\"Server on http://127.0.0.1:8000/app\"] browser --> proxy proxy --> server \u63d0\u793a IP 0.0.0.0 \u5e38\u7528\u4e8e\u8ba9\u7a0b\u5e8f\u76d1\u542c\u672c\u673a\u6216\u670d\u52a1\u5668\u4e0a\u7684\u6240\u6709\u6709\u6548 IP\u3002 API \u6587\u6863\u8fd8\u9700\u8981 OpenAPI \u6982\u56fe\u58f0\u660e API server \u7684\u4f4d\u7f6e\u662f /api/v1 \uff08\u4f7f\u7528\u4ee3\u7406\u65f6\u7684 URL\uff09\u3002\u4f8b\u5982\uff1a { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" } ], \"paths\" : { // More stuff here } } \u672c\u4f8b\u4e2d\u7684 Proxy \u662f Traefik \uff0c server \u662f\u8fd0\u884c FastAPI \u5e94\u7528\u7684 Uvicorn \u3002 \u63d0\u4f9b root_path \u00b6 \u4e3a\u6b64\uff0c\u8981\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879 --root-path \uff1a $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Hypercorn \u4e5f\u652f\u6301 --root-path \u9009\u9879\u3002 \u6280\u672f\u7ec6\u8282 ASGI \u89c4\u8303\u5b9a\u4e49\u7684 root_path \u5c31\u662f\u4e3a\u4e86\u8fd9\u79cd\u7528\u4f8b\u3002 \u5e76\u4e14 --root-path \u547d\u4ee4\u884c\u9009\u9879\u652f\u6301 root_path \u3002 \u67e5\u770b\u5f53\u524d root_path \u00b6 \u83b7\u53d6\u5e94\u7528\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f7f\u7528\u7684\u5f53\u524d root_path \uff0c\u8fd9\u662f scope \u5b57\u5178\u7684\u5185\u5bb9\uff08\u4e5f\u662f ASGI \u89c4\u8303\u7684\u5185\u5bb9\uff09\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u7684\u4fe1\u606f\u91cc\u5305\u542b roo_path \u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u3002 from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u7136\u540e\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 Uvicorn\uff1a $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u5728 FastAPI \u5e94\u7528\u91cc\u8bbe\u7f6e root_path \u00b6 \u8fd8\u6709\u4e00\u79cd\u65b9\u6848\uff0c\u5982\u679c\u4e0d\u80fd\u63d0\u4f9b --root-path \u6216\u7b49\u6548\u7684\u547d\u4ee4\u884c\u9009\u9879\uff0c\u5219\u5728\u521b\u5efa FastAPI \u5e94\u7528\u65f6\u8981\u8bbe\u7f6e root_path \u53c2\u6570\u3002 from fastapi import FastAPI , Request app = FastAPI ( root_path = \"/api/v1\" ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u4f20\u9012 root_path \u7ed9 FastAPI \u4e0e\u4f20\u9012 --root-path \u547d\u4ee4\u884c\u9009\u9879\u7ed9 Uvicorn \u6216 Hypercorn \u4e00\u6837\u3002 \u5173\u4e8e root_path \u00b6 \u6ce8\u610f\uff0c\u670d\u52a1\u5668\uff08Uvicorn\uff09\u53ea\u662f\u628a root_path \u4f20\u9012\u7ed9\u5e94\u7528\u3002 \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8000/app \u65f6\u80fd\u770b\u5230\u6807\u51c6\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u5b83\u4e0d\u8981\u6c42\u8bbf\u95ee http://127.0.0.1:800/api/v1/app \u3002 Uvicorn \u9884\u671f\u4ee3\u7406\u5728 http://127.0.0.1:8000/app \u8bbf\u95ee Uvicorn\uff0c\u800c\u5728\u9876\u90e8\u6dfb\u52a0 /api/v1 \u524d\u7f00\u662f\u4ee3\u7406\u8981\u505a\u7684\u4e8b\u60c5\u3002 \u5173\u4e8e\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406 \u00b6 \u6ce8\u610f\uff0c\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\u53ea\u662f\u914d\u7f6e\u4ee3\u7406\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7406\u9ed8\u8ba4\u90fd\u4e0d\u4f1a\u79fb\u9664\u8def\u5f84\u524d\u7f00\u3002 \uff08\u672a\u79fb\u9664\u8def\u5f84\u524d\u7f00\u65f6\uff09\u4ee3\u7406\u76d1\u542c https://myawesomeapp.com \u7b49\u5bf9\u8c61\uff0c\u5982\u679c\u6d4f\u89c8\u5668\u8df3\u8f6c\u5230 https://myawesomeapp.com/api/v1/app \uff0c\u4e14\u670d\u52a1\u5668\uff08\u4f8b\u5982 Uvicorn\uff09\u76d1\u542c http://127.0.0.1:8000 \u4ee3\u7406\uff08\u672a\u79fb\u9664\u8def\u5f84\u524d\u7f00\uff09 \u4f1a\u5728\u540c\u6837\u7684\u8def\u5f84\uff1a http://127.0.0.1:8000/api/v1/app \u8bbf\u95ee Uvicorn\u3002 \u672c\u5730\u6d4b\u8bd5 Traefik \u00b6 \u60a8\u53ef\u4ee5\u8f7b\u6613\u5730\u5728\u672c\u5730\u5c1d\u8bd5\u4f7f\u7528 Traefik \u8fd0\u884c\u79fb\u9664\u8def\u5f84\u524d\u7f00\u3002 \u4e0b\u8f7d Traefik \uff0c\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u9700\u8981\u89e3\u538b\u6587\u4ef6\uff0c\u5e76\u5728 Terminal \u4e2d\u76f4\u63a5\u8fd0\u884c\u3002 \u7136\u540e\u521b\u5efa\u5305\u542b\u5982\u4e0b\u5185\u5bb9\u7684 traefik.toml \u6587\u4ef6\uff1a [entryPoints] [entryPoints.http] address = \":9999\" [providers] [providers.file] filename = \"routes.toml\" \u8fd9\u4e2a\u6587\u4ef6\u628a Traefik \u76d1\u542c\u7aef\u53e3\u8bbe\u7f6e\u4e3a 9999 \uff0c\u5e76\u8bbe\u7f6e\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u6587\u4ef6 routes.toml \u3002 \u63d0\u793a \u4f7f\u7528\u7aef\u53e3 9999 \u4ee3\u66ff\u6807\u51c6\u7684 HTTP \u7aef\u53e3 80\uff0c\u8fd9\u6837\u5c31\u4e0d\u5fc5\u4f7f\u7528\u7ba1\u7406\u5458\u6743\u9650\u8fd0\u884c\uff08 sudo \uff09\u3002 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa routes.toml \uff1a [http] [http.middlewares] [http.middlewares.api-stripprefix.stripPrefix] prefixes = [ \"/api/v1\" ] [http.routers] [http.routers.app-http] entryPoints = [ \"http\" ] service = \"app\" rule = \"PathPrefix(`/api/v1`)\" middlewares = [ \"api-stripprefix\" ] [http.services] [http.services.app] [http.services.app.loadBalancer] [[http.services.app.loadBalancer.servers]] url = \"http://127.0.0.1:8000\" \u8fd9\u4e2a\u6587\u4ef6\u914d\u7f6e Traefik \u4f7f\u7528\u8def\u5f84\u524d\u7f00 /api/v1 \u3002 \u7136\u540e\uff0c\u5b83\u628a\u8bf7\u6c42\u91cd\u5b9a\u4f4d\u5230\u8fd0\u884c\u5728 http://127.0.0.1:8000 \u4e0a\u7684 Uvicorn\u3002 \u73b0\u5728\uff0c\u542f\u52a8 Traefik\uff1a $ ./traefik --configFile = traefik.toml INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Uvicorn \u542f\u52a8\u5e94\u7528\uff0c\u5e76\u4f7f\u7528 --root-path \u9009\u9879\uff1a $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u67e5\u770b\u54cd\u5e94 \u00b6 \u8bbf\u95ee\u542b Uvicorn \u7aef\u53e3\u7684 URL\uff1a http://127.0.0.1:8000/app \uff0c\u5c31\u80fd\u770b\u5230\u6807\u51c6\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u63d0\u793a \u6ce8\u610f\uff0c\u5c31\u7b97\u8bbf\u95ee http://127.0.0.1:8000/app \uff0c\u4e5f\u663e\u793a\u4ece\u9009\u9879 --root-path \u4e2d\u63d0\u53d6\u7684 /api/v1 \uff0c\u8fd9\u662f root_path \u7684\u503c\u3002 \u6253\u5f00\u542b Traefik \u7aef\u53e3\u7684 URL\uff0c\u5305\u542b\u8def\u5f84\u524d\u7f00\uff1a http://127.0.0.1:9999/api/v1/app \u3002 \u8fd4\u56de\u76f8\u540c\u7684\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u4f46\u8fd9\u4e00\u6b21 URL \u5305\u542b\u4e86\u4ee3\u7406\u7684\u8def\u5f84\u524d\u7f00\uff1a /api/v1 \u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u901a\u8fc7\u4ee3\u7406\u8bbf\u95ee\u5e94\u7528\u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\uff0c\u8def\u5f84\u524d\u7f00 /app/v1 \u7248\u672c\u624d\u662f \u6b63\u786e \u7684\u3002 \u800c\u4e0d\u5e26\u8def\u5f84\u524d\u7f00\u7684\u7248\u672c\uff08 http://127.0.0.1:8000/app \uff09\uff0c\u5219\u7531 Uvicorn \u76f4\u63a5\u63d0\u4f9b\uff0c\u4e13\u4f9b \u4ee3\u7406 \uff08Traefik\uff09\u8bbf\u95ee\u3002 \u8fd9\u6f14\u793a\u4e86\u4ee3\u7406\uff08Traefik\uff09\u5982\u4f55\u4f7f\u7528\u8def\u5f84\u524d\u7f00\uff0c\u4ee5\u53ca\u670d\u52a1\u5668\uff08Uvicorn\uff09\u5982\u4f55\u4f7f\u7528 --root-path \u9009\u9879\u4e2d\u7684 root_path \u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u8fd9\u624d\u662f\u6709\u8da3\u7684\u5730\u65b9 \u2728 \u8bbf\u95ee\u5e94\u7528\u7684 \u5b98\u65b9 \u65b9\u5f0f\u662f\u901a\u8fc7\u542b\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\u3002\u56e0\u6b64\uff0c\u4e0d\u51fa\u6240\u6599\uff0c\u5982\u679c\u6ca1\u6709\u5728 URL \u4e2d\u6dfb\u52a0\u8def\u5f84\u524d\u7f00\uff0c\u5c31\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u901a\u8fc7 Uvicorn \u8fd0\u884c\u7684 API \u6587\u6863\uff0c\u9700\u8981\u901a\u8fc7\u4ee3\u7406\u624d\u80fd\u8bbf\u95ee\u3002 \u8f93\u5165 http://127.0.0.1:8000/docs \u67e5\u770b API \u6587\u6863\uff1a \u4f46\u8f93\u5165 \u5b98\u65b9 \u94fe\u63a5 /api/v1/docs \uff0c\u5e76\u4f7f\u7528\u7aef\u53e3 9999 \u8bbf\u95ee API \u6587\u6863\uff0c\u5c31\u80fd\u6b63\u5e38\u8fd0\u884c\u4e86\uff01\ud83c\udf89 \u8f93\u5165 http://127.0.0.1:9999/api/v1/docs \u67e5\u770b\u6587\u6863\uff1a \u4e00\u5207\u6b63\u5e38\u3002 \u2714\ufe0f \u8fd9\u662f\u56e0\u4e3a FastAPI \u5728 OpenAPI \u91cc\u4f7f\u7528 root_path \u7684 URL \u521b\u5efa\u9ed8\u8ba4 server \u3002 \u9644\u52a0\u7684\u670d\u52a1\u5668 \u00b6 \u8b66\u544a \u6b64\u7528\u4f8b\u8f83\u96be\uff0c\u53ef\u4ee5\u8df3\u8fc7\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u4f7f\u7528 root_path \u7684\u94fe\u63a5\u5728 OpenAPI \u6982\u56fe\u4e2d\u521b\u5efa server \u3002 \u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5907\u9009 servers \uff0c\u4f8b\u5982\uff0c\u9700\u8981\u540c\u4e00\u4e2a API \u6587\u6863\u4e0e\u5f00\u53d1\u548c\u751f\u4ea7\u73af\u5883\u4ea4\u4e92\u3002 \u5982\u679c\u4f20\u9012\u81ea\u5b9a\u4e49 servers \u5217\u8868\uff0c\u5e76\u6709 root_path \uff08 \u56e0\u4e3a API \u4f7f\u7528\u4e86\u4ee3\u7406\uff09\uff0c FastAPI \u4f1a\u5728\u5217\u8868\u5f00\u5934\u4f7f\u7528\u8fd9\u4e2a root_path \u63d2\u5165 \u670d\u52a1\u5668 \u3002 \u4f8b\u5982\uff1a from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u8fd9\u6bb5\u4ee3\u7801\u751f\u6210\u5982\u4e0b OpenAPI \u6982\u56fe\uff1a { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" }, { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" } ], \"paths\" : { // More stuff here } } \u63d0\u793a \u6ce8\u610f\uff0c\u81ea\u52a8\u751f\u6210\u670d\u52a1\u5668\u65f6\uff0c url \u7684\u503c /api/v1 \u63d0\u53d6\u81ea root_path \u3002 http://127.0.0.1:9999/api/v1/docs \u7684 API \u6587\u6863\u6240\u793a\u5982\u4e0b\uff1a \u63d0\u793a API \u6587\u6863\u4e0e\u6240\u9009\u7684\u670d\u52a1\u5668\u8fdb\u884c\u4ea4\u4e92\u3002 \u4ece root_path \u7981\u7528\u81ea\u52a8\u670d\u52a1\u5668 \u00b6 \u5982\u679c\u4e0d\u60f3\u8ba9 FastAPI \u5305\u542b\u4f7f\u7528 root_path \u7684\u81ea\u52a8\u670d\u52a1\u5668\uff0c\u5219\u8981\u4f7f\u7528\u53c2\u6570 root_path_in_servers=False \uff1a from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , root_path_in_servers = False , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u8fd9\u6837\uff0c\u5728 OpenAPI \u6982\u56fe\u4e2d\u5c31\u4e0d\u4f1a\u5305\u542b\u670d\u52a1\u5668\u4e86\u3002 \u6302\u8f7d\u5b50\u5e94\u7528 \u00b6 \u5982\u9700\u6302\u8f7d\u5b50\u5e94\u7528\uff08\u8be6\u89c1 \u5b50\u5e94\u7528 - \u6302\u8f7d \uff09\uff0c\u4e5f\u8981\u901a\u8fc7 root_path \u4f7f\u7528\u4ee3\u7406\uff0c\u8fd9\u4e0e\u6b63\u5e38\u5e94\u7528\u4e00\u6837\uff0c\u522b\u65e0\u4e8c\u81f4\u3002 FastAPI \u5728\u5185\u90e8\u4f7f\u7528 root_path \uff0c\u56e0\u6b64\u5b50\u5e94\u7528\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u2728","title":"\u4f7f\u7528\u4ee3\u7406"},{"location":"advanced/behind-a-proxy/#_1","text":"\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u80fd\u8981\u4f7f\u7528 Traefik \u6216 Nginx \u7b49 \u4ee3\u7406 \u670d\u52a1\u5668\uff0c\u5e76\u6dfb\u52a0\u5e94\u7528\u4e0d\u80fd\u8bc6\u522b\u7684\u9644\u52a0\u8def\u5f84\u524d\u7f00\u914d\u7f6e\u3002 \u6b64\u65f6\uff0c\u8981\u4f7f\u7528 root_path \u914d\u7f6e\u5e94\u7528\u3002 root_path \u662f ASGI \u89c4\u8303\u4e2d\u7684\u65b9\u6cd5\uff0cFastAPI \u5c31\u662f\u57fa\u4e8e\u6b64\u89c4\u8303\u5f00\u53d1\u7684\uff08\u901a\u8fc7 Starlette\uff09\u3002 root_path \u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u7279\u5b9a\u60c5\u51b5\u3002 \u5728\u6302\u8f7d\u5b50\u5e94\u7528\u65f6\uff0c\u4e5f\u53ef\u4ee5\u5728\u5185\u90e8\u4f7f\u7528\u3002","title":"\u4f7f\u7528\u4ee3\u7406"},{"location":"advanced/behind-a-proxy/#_2","text":"\u672c\u4f8b\u4e2d\uff0c\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\u662f\u6307\u5728\u4ee3\u7801\u4e2d\u58f0\u660e\u8def\u5f84 /app \uff0c\u7136\u540e\u5728\u5e94\u7528\u9876\u5c42\u6dfb\u52a0\u4ee3\u7406\uff0c\u628a FastAPI \u5e94\u7528\u653e\u5728 /api/v1 \u8def\u5f84\u4e0b\u3002 \u672c\u4f8b\u7684\u539f\u59cb\u8def\u5f84 /app \u5b9e\u9645\u4e0a\u662f\u5728 /api/v1/app \u63d0\u4f9b\u670d\u52a1\u3002 \u54ea\u6015\u6240\u6709\u4ee3\u7801\u90fd\u5047\u8bbe\u53ea\u6709 /app \u3002 \u4ee3\u7406\u53ea\u5728\u628a\u8bf7\u6c42\u4f20\u9001\u7ed9 Uvicorn \u4e4b\u524d\u624d\u4f1a \u79fb\u9664\u8def\u5f84\u524d\u7f00 \uff0c\u8ba9\u5e94\u7528\u4ee5\u4e3a\u5b83\u662f\u5728 /app \u63d0\u4f9b\u670d\u52a1\uff0c\u56e0\u6b64\u4e0d\u5fc5\u5728\u4ee3\u7801\u4e2d\u52a0\u5165\u524d\u7f00 /api/v1 \u3002 \u4f46\u4e4b\u540e\uff0c\u5728\uff08\u524d\u7aef\uff09\u6253\u5f00 API \u6587\u6863\u65f6\uff0c\u4ee3\u7406\u4f1a\u8981\u6c42\u5728 /openapi.json \uff0c\u800c\u4e0d\u662f /api/v1/openapi.json \u4e2d\u63d0\u53d6 OpenAPI \u6982\u56fe\u3002 \u56e0\u6b64\uff0c\uff08\u8fd0\u884c\u5728\u6d4f\u89c8\u5668\u4e2d\u7684\uff09\u524d\u7aef\u4f1a\u5c1d\u8bd5\u8bbf\u95ee /openapi.json \uff0c\u4f46\u6ca1\u6709\u529e\u6cd5\u83b7\u53d6 OpenAPI \u6982\u56fe\u3002 \u8fd9\u662f\u56e0\u4e3a\u5e94\u7528\u4f7f\u7528\u4e86\u4ee5 /api/v1 \u4e3a\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\uff0c\u524d\u7aef\u8981\u4ece /api/v1/openapi.json \u4e2d\u63d0\u53d6 OpenAPI \u6982\u56fe\u3002 graph LR browser(\"Browser\") proxy[\"Proxy on http://0.0.0.0:9999/api/v1/app\"] server[\"Server on http://127.0.0.1:8000/app\"] browser --> proxy proxy --> server \u63d0\u793a IP 0.0.0.0 \u5e38\u7528\u4e8e\u8ba9\u7a0b\u5e8f\u76d1\u542c\u672c\u673a\u6216\u670d\u52a1\u5668\u4e0a\u7684\u6240\u6709\u6709\u6548 IP\u3002 API \u6587\u6863\u8fd8\u9700\u8981 OpenAPI \u6982\u56fe\u58f0\u660e API server \u7684\u4f4d\u7f6e\u662f /api/v1 \uff08\u4f7f\u7528\u4ee3\u7406\u65f6\u7684 URL\uff09\u3002\u4f8b\u5982\uff1a { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" } ], \"paths\" : { // More stuff here } } \u672c\u4f8b\u4e2d\u7684 Proxy \u662f Traefik \uff0c server \u662f\u8fd0\u884c FastAPI \u5e94\u7528\u7684 Uvicorn \u3002","title":"\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406"},{"location":"advanced/behind-a-proxy/#root_path","text":"\u4e3a\u6b64\uff0c\u8981\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879 --root-path \uff1a $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Hypercorn \u4e5f\u652f\u6301 --root-path \u9009\u9879\u3002 \u6280\u672f\u7ec6\u8282 ASGI \u89c4\u8303\u5b9a\u4e49\u7684 root_path \u5c31\u662f\u4e3a\u4e86\u8fd9\u79cd\u7528\u4f8b\u3002 \u5e76\u4e14 --root-path \u547d\u4ee4\u884c\u9009\u9879\u652f\u6301 root_path \u3002","title":"\u63d0\u4f9b root_path"},{"location":"advanced/behind-a-proxy/#root_path_1","text":"\u83b7\u53d6\u5e94\u7528\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u4f7f\u7528\u7684\u5f53\u524d root_path \uff0c\u8fd9\u662f scope \u5b57\u5178\u7684\u5185\u5bb9\uff08\u4e5f\u662f ASGI \u89c4\u8303\u7684\u5185\u5bb9\uff09\u3002 \u6211\u4eec\u5728\u8fd9\u91cc\u7684\u4fe1\u606f\u91cc\u5305\u542b roo_path \u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u3002 from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u7136\u540e\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 Uvicorn\uff1a $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" }","title":"\u67e5\u770b\u5f53\u524d root_path"},{"location":"advanced/behind-a-proxy/#fastapi-root_path","text":"\u8fd8\u6709\u4e00\u79cd\u65b9\u6848\uff0c\u5982\u679c\u4e0d\u80fd\u63d0\u4f9b --root-path \u6216\u7b49\u6548\u7684\u547d\u4ee4\u884c\u9009\u9879\uff0c\u5219\u5728\u521b\u5efa FastAPI \u5e94\u7528\u65f6\u8981\u8bbe\u7f6e root_path \u53c2\u6570\u3002 from fastapi import FastAPI , Request app = FastAPI ( root_path = \"/api/v1\" ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u4f20\u9012 root_path \u7ed9 FastAPI \u4e0e\u4f20\u9012 --root-path \u547d\u4ee4\u884c\u9009\u9879\u7ed9 Uvicorn \u6216 Hypercorn \u4e00\u6837\u3002","title":"\u5728 FastAPI \u5e94\u7528\u91cc\u8bbe\u7f6e root_path"},{"location":"advanced/behind-a-proxy/#root_path_2","text":"\u6ce8\u610f\uff0c\u670d\u52a1\u5668\uff08Uvicorn\uff09\u53ea\u662f\u628a root_path \u4f20\u9012\u7ed9\u5e94\u7528\u3002 \u5728\u6d4f\u89c8\u5668\u4e2d\u8f93\u5165 http://127.0.0.1:8000/app \u65f6\u80fd\u770b\u5230\u6807\u51c6\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u5b83\u4e0d\u8981\u6c42\u8bbf\u95ee http://127.0.0.1:800/api/v1/app \u3002 Uvicorn \u9884\u671f\u4ee3\u7406\u5728 http://127.0.0.1:8000/app \u8bbf\u95ee Uvicorn\uff0c\u800c\u5728\u9876\u90e8\u6dfb\u52a0 /api/v1 \u524d\u7f00\u662f\u4ee3\u7406\u8981\u505a\u7684\u4e8b\u60c5\u3002","title":"\u5173\u4e8e root_path"},{"location":"advanced/behind-a-proxy/#_3","text":"\u6ce8\u610f\uff0c\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\u53ea\u662f\u914d\u7f6e\u4ee3\u7406\u7684\u65b9\u5f0f\u4e4b\u4e00\u3002 \u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4ee3\u7406\u9ed8\u8ba4\u90fd\u4e0d\u4f1a\u79fb\u9664\u8def\u5f84\u524d\u7f00\u3002 \uff08\u672a\u79fb\u9664\u8def\u5f84\u524d\u7f00\u65f6\uff09\u4ee3\u7406\u76d1\u542c https://myawesomeapp.com \u7b49\u5bf9\u8c61\uff0c\u5982\u679c\u6d4f\u89c8\u5668\u8df3\u8f6c\u5230 https://myawesomeapp.com/api/v1/app \uff0c\u4e14\u670d\u52a1\u5668\uff08\u4f8b\u5982 Uvicorn\uff09\u76d1\u542c http://127.0.0.1:8000 \u4ee3\u7406\uff08\u672a\u79fb\u9664\u8def\u5f84\u524d\u7f00\uff09 \u4f1a\u5728\u540c\u6837\u7684\u8def\u5f84\uff1a http://127.0.0.1:8000/api/v1/app \u8bbf\u95ee Uvicorn\u3002","title":"\u5173\u4e8e\u79fb\u9664\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406"},{"location":"advanced/behind-a-proxy/#traefik","text":"\u60a8\u53ef\u4ee5\u8f7b\u6613\u5730\u5728\u672c\u5730\u5c1d\u8bd5\u4f7f\u7528 Traefik \u8fd0\u884c\u79fb\u9664\u8def\u5f84\u524d\u7f00\u3002 \u4e0b\u8f7d Traefik \uff0c\u8fd9\u662f\u4e00\u4e2a\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u9700\u8981\u89e3\u538b\u6587\u4ef6\uff0c\u5e76\u5728 Terminal \u4e2d\u76f4\u63a5\u8fd0\u884c\u3002 \u7136\u540e\u521b\u5efa\u5305\u542b\u5982\u4e0b\u5185\u5bb9\u7684 traefik.toml \u6587\u4ef6\uff1a [entryPoints] [entryPoints.http] address = \":9999\" [providers] [providers.file] filename = \"routes.toml\" \u8fd9\u4e2a\u6587\u4ef6\u628a Traefik \u76d1\u542c\u7aef\u53e3\u8bbe\u7f6e\u4e3a 9999 \uff0c\u5e76\u8bbe\u7f6e\u8981\u4f7f\u7528\u53e6\u4e00\u4e2a\u6587\u4ef6 routes.toml \u3002 \u63d0\u793a \u4f7f\u7528\u7aef\u53e3 9999 \u4ee3\u66ff\u6807\u51c6\u7684 HTTP \u7aef\u53e3 80\uff0c\u8fd9\u6837\u5c31\u4e0d\u5fc5\u4f7f\u7528\u7ba1\u7406\u5458\u6743\u9650\u8fd0\u884c\uff08 sudo \uff09\u3002 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa routes.toml \uff1a [http] [http.middlewares] [http.middlewares.api-stripprefix.stripPrefix] prefixes = [ \"/api/v1\" ] [http.routers] [http.routers.app-http] entryPoints = [ \"http\" ] service = \"app\" rule = \"PathPrefix(`/api/v1`)\" middlewares = [ \"api-stripprefix\" ] [http.services] [http.services.app] [http.services.app.loadBalancer] [[http.services.app.loadBalancer.servers]] url = \"http://127.0.0.1:8000\" \u8fd9\u4e2a\u6587\u4ef6\u914d\u7f6e Traefik \u4f7f\u7528\u8def\u5f84\u524d\u7f00 /api/v1 \u3002 \u7136\u540e\uff0c\u5b83\u628a\u8bf7\u6c42\u91cd\u5b9a\u4f4d\u5230\u8fd0\u884c\u5728 http://127.0.0.1:8000 \u4e0a\u7684 Uvicorn\u3002 \u73b0\u5728\uff0c\u542f\u52a8 Traefik\uff1a $ ./traefik --configFile = traefik.toml INFO[0000] Configuration loaded from file: /home/user/awesomeapi/traefik.toml \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Uvicorn \u542f\u52a8\u5e94\u7528\uff0c\u5e76\u4f7f\u7528 --root-path \u9009\u9879\uff1a $ uvicorn main:app --root-path /api/v1 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"\u672c\u5730\u6d4b\u8bd5 Traefik"},{"location":"advanced/behind-a-proxy/#_4","text":"\u8bbf\u95ee\u542b Uvicorn \u7aef\u53e3\u7684 URL\uff1a http://127.0.0.1:8000/app \uff0c\u5c31\u80fd\u770b\u5230\u6807\u51c6\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u63d0\u793a \u6ce8\u610f\uff0c\u5c31\u7b97\u8bbf\u95ee http://127.0.0.1:8000/app \uff0c\u4e5f\u663e\u793a\u4ece\u9009\u9879 --root-path \u4e2d\u63d0\u53d6\u7684 /api/v1 \uff0c\u8fd9\u662f root_path \u7684\u503c\u3002 \u6253\u5f00\u542b Traefik \u7aef\u53e3\u7684 URL\uff0c\u5305\u542b\u8def\u5f84\u524d\u7f00\uff1a http://127.0.0.1:9999/api/v1/app \u3002 \u8fd4\u56de\u76f8\u540c\u7684\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" , \"root_path\" : \"/api/v1\" } \u4f46\u8fd9\u4e00\u6b21 URL \u5305\u542b\u4e86\u4ee3\u7406\u7684\u8def\u5f84\u524d\u7f00\uff1a /api/v1 \u3002 \u5f53\u7136\uff0c\u8fd9\u662f\u901a\u8fc7\u4ee3\u7406\u8bbf\u95ee\u5e94\u7528\u7684\u65b9\u5f0f\uff0c\u56e0\u6b64\uff0c\u8def\u5f84\u524d\u7f00 /app/v1 \u7248\u672c\u624d\u662f \u6b63\u786e \u7684\u3002 \u800c\u4e0d\u5e26\u8def\u5f84\u524d\u7f00\u7684\u7248\u672c\uff08 http://127.0.0.1:8000/app \uff09\uff0c\u5219\u7531 Uvicorn \u76f4\u63a5\u63d0\u4f9b\uff0c\u4e13\u4f9b \u4ee3\u7406 \uff08Traefik\uff09\u8bbf\u95ee\u3002 \u8fd9\u6f14\u793a\u4e86\u4ee3\u7406\uff08Traefik\uff09\u5982\u4f55\u4f7f\u7528\u8def\u5f84\u524d\u7f00\uff0c\u4ee5\u53ca\u670d\u52a1\u5668\uff08Uvicorn\uff09\u5982\u4f55\u4f7f\u7528 --root-path \u9009\u9879\u4e2d\u7684 root_path \u3002","title":"\u67e5\u770b\u54cd\u5e94"},{"location":"advanced/behind-a-proxy/#_5","text":"\u8fd9\u624d\u662f\u6709\u8da3\u7684\u5730\u65b9 \u2728 \u8bbf\u95ee\u5e94\u7528\u7684 \u5b98\u65b9 \u65b9\u5f0f\u662f\u901a\u8fc7\u542b\u8def\u5f84\u524d\u7f00\u7684\u4ee3\u7406\u3002\u56e0\u6b64\uff0c\u4e0d\u51fa\u6240\u6599\uff0c\u5982\u679c\u6ca1\u6709\u5728 URL \u4e2d\u6dfb\u52a0\u8def\u5f84\u524d\u7f00\uff0c\u5c31\u4e0d\u80fd\u76f4\u63a5\u8bbf\u95ee\u901a\u8fc7 Uvicorn \u8fd0\u884c\u7684 API \u6587\u6863\uff0c\u9700\u8981\u901a\u8fc7\u4ee3\u7406\u624d\u80fd\u8bbf\u95ee\u3002 \u8f93\u5165 http://127.0.0.1:8000/docs \u67e5\u770b API \u6587\u6863\uff1a \u4f46\u8f93\u5165 \u5b98\u65b9 \u94fe\u63a5 /api/v1/docs \uff0c\u5e76\u4f7f\u7528\u7aef\u53e3 9999 \u8bbf\u95ee API \u6587\u6863\uff0c\u5c31\u80fd\u6b63\u5e38\u8fd0\u884c\u4e86\uff01\ud83c\udf89 \u8f93\u5165 http://127.0.0.1:9999/api/v1/docs \u67e5\u770b\u6587\u6863\uff1a \u4e00\u5207\u6b63\u5e38\u3002 \u2714\ufe0f \u8fd9\u662f\u56e0\u4e3a FastAPI \u5728 OpenAPI \u91cc\u4f7f\u7528 root_path \u7684 URL \u521b\u5efa\u9ed8\u8ba4 server \u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/behind-a-proxy/#_6","text":"\u8b66\u544a \u6b64\u7528\u4f8b\u8f83\u96be\uff0c\u53ef\u4ee5\u8df3\u8fc7\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u4f7f\u7528 root_path \u7684\u94fe\u63a5\u5728 OpenAPI \u6982\u56fe\u4e2d\u521b\u5efa server \u3002 \u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u5907\u9009 servers \uff0c\u4f8b\u5982\uff0c\u9700\u8981\u540c\u4e00\u4e2a API \u6587\u6863\u4e0e\u5f00\u53d1\u548c\u751f\u4ea7\u73af\u5883\u4ea4\u4e92\u3002 \u5982\u679c\u4f20\u9012\u81ea\u5b9a\u4e49 servers \u5217\u8868\uff0c\u5e76\u6709 root_path \uff08 \u56e0\u4e3a API \u4f7f\u7528\u4e86\u4ee3\u7406\uff09\uff0c FastAPI \u4f1a\u5728\u5217\u8868\u5f00\u5934\u4f7f\u7528\u8fd9\u4e2a root_path \u63d2\u5165 \u670d\u52a1\u5668 \u3002 \u4f8b\u5982\uff1a from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u8fd9\u6bb5\u4ee3\u7801\u751f\u6210\u5982\u4e0b OpenAPI \u6982\u56fe\uff1a { \"openapi\" : \"3.0.2\" , // More stuff here \"servers\" : [ { \"url\" : \"/api/v1\" }, { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" } ], \"paths\" : { // More stuff here } } \u63d0\u793a \u6ce8\u610f\uff0c\u81ea\u52a8\u751f\u6210\u670d\u52a1\u5668\u65f6\uff0c url \u7684\u503c /api/v1 \u63d0\u53d6\u81ea root_path \u3002 http://127.0.0.1:9999/api/v1/docs \u7684 API \u6587\u6863\u6240\u793a\u5982\u4e0b\uff1a \u63d0\u793a API \u6587\u6863\u4e0e\u6240\u9009\u7684\u670d\u52a1\u5668\u8fdb\u884c\u4ea4\u4e92\u3002","title":"\u9644\u52a0\u7684\u670d\u52a1\u5668"},{"location":"advanced/behind-a-proxy/#root_path_3","text":"\u5982\u679c\u4e0d\u60f3\u8ba9 FastAPI \u5305\u542b\u4f7f\u7528 root_path \u7684\u81ea\u52a8\u670d\u52a1\u5668\uff0c\u5219\u8981\u4f7f\u7528\u53c2\u6570 root_path_in_servers=False \uff1a from fastapi import FastAPI , Request app = FastAPI ( servers = [ { \"url\" : \"https://stag.example.com\" , \"description\" : \"Staging environment\" }, { \"url\" : \"https://prod.example.com\" , \"description\" : \"Production environment\" }, ], root_path = \"/api/v1\" , root_path_in_servers = False , ) @app . get ( \"/app\" ) def read_main ( request : Request ): return { \"message\" : \"Hello World\" , \"root_path\" : request . scope . get ( \"root_path\" )} \u8fd9\u6837\uff0c\u5728 OpenAPI \u6982\u56fe\u4e2d\u5c31\u4e0d\u4f1a\u5305\u542b\u670d\u52a1\u5668\u4e86\u3002","title":"\u4ece root_path \u7981\u7528\u81ea\u52a8\u670d\u52a1\u5668"},{"location":"advanced/behind-a-proxy/#_7","text":"\u5982\u9700\u6302\u8f7d\u5b50\u5e94\u7528\uff08\u8be6\u89c1 \u5b50\u5e94\u7528 - \u6302\u8f7d \uff09\uff0c\u4e5f\u8981\u901a\u8fc7 root_path \u4f7f\u7528\u4ee3\u7406\uff0c\u8fd9\u4e0e\u6b63\u5e38\u5e94\u7528\u4e00\u6837\uff0c\u522b\u65e0\u4e8c\u81f4\u3002 FastAPI \u5728\u5185\u90e8\u4f7f\u7528 root_path \uff0c\u56e0\u6b64\u5b50\u5e94\u7528\u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\u3002\u2728","title":"\u6302\u8f7d\u5b50\u5e94\u7528"},{"location":"advanced/conditional-openapi/","text":"\u914d\u7f6e OpenAPI \u00b6 \u4f7f\u7528\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf\u57fa\u4e8e\u73af\u5883\u5b9e\u73b0\u6309\u6761\u4ef6\u914d\u7f6e OpenAPI\uff0c\u751a\u81f3\u5b8c\u5168\u7981\u7528 OpenAPI\u3002 \u5173\u4e8e\u5b89\u5168\u3001API \u4e0e\u6587\u6863 \u00b6 \u5728\u751f\u4ea7\u73af\u5883\u4e0b\u9690\u85cf\u6587\u6863\u7528\u6237\u754c\u9762 \u5e76\u4e0d\u80fd \u59a5\u5584\u4fdd\u62a4 API\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4f1a\u8ba9 API \u66f4\u5b89\u5168\uff0c\u800c\u4e14 \u8def\u5f84\u64cd\u4f5c \u4f9d\u7136\u6709\u6548\u3002 \u5982\u679c\u4ee3\u7801\u4e2d\u5b58\u5728\u5b89\u5168\u9690\u60a3\uff0c\u8fd9\u4e9b\u9690\u60a3\u4ecd\u7136\u5b58\u5728\u3002 \u9690\u85cf\u6587\u6863\u53ea\u662f\u8ba9\u4e0e API \u7684\u4ea4\u4e92\u53d8\u5f97\u66f4\u96be\uff0c\u4e5f\u8ba9\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u8c03\u8bd5\u53d8\u5f97\u66f4\u96be\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ea\u662f \u9690\u5f0f\u5b89\u5168\uff08Security through obscurity \uff09\u7684\u7b80\u5355\u5f62\u5f0f\u3002 \u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u80fd\u66f4\u597d\u5730\u4fdd\u8bc1 API \u7684\u5b89\u5168\uff1a \u786e\u4fdd\u8981\u597d\u597d\u5b9a\u4e49\u8bf7\u6c42\u4f53\u4e0e\u54cd\u5e94\u7684 Pydantic \u6a21\u578b \u4f7f\u7528\u4f9d\u8d56\u9879\u914d\u7f6e\u6240\u9700\u7684\u6743\u9650\u4e0e\u89d2\u8272 \u6c38\u8fdc\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\uff0c\u53ea\u4fdd\u5b58\u54c8\u5e0c\u8fc7\u7684\u5bc6\u7801 \u4f7f\u7528\u77e5\u540d\u7684\u52a0\u5bc6\u5de5\u5177\uff0c\u5982 Passlib \u6216 JWT Token \u7b49 \u5728\u5fc5\u8981\u65f6\uff0c\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\u6dfb\u52a0\u66f4\u591a\u7cbe\u7ec6\u6743\u9650\u63a7\u5236 \u7b49\u2026\u2026 \u5c3d\u7ba1\u5982\u6b64\uff0c\u60a8\u8fd8\u53ef\u80fd\u4f1a\u9047\u5230\u6781\u4e2a\u522b\u7684\u7528\u4f8b\uff0c\u8981\u5728\u67d0\u4e9b\u73af\u5883\uff08\u5982\u751f\u4ea7\u73af\u5883\uff09\u4e0b\u7981\u7528 API \u6587\u6863\uff0c\u6216\u6839\u636e\u73af\u5883\u53d8\u91cf\u914d\u7f6e OpenAPI\u3002 \u4f7f\u7528\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf\u6309\u6761\u4ef6\u914d\u7f6e OpenAPI \u00b6 \u4f7f\u7528 Pydantic \u8bbe\u7f6e\u53ef\u4ee5\u8f7b\u677e\u5730\u914d\u7f6e OpenAPI \u4e0e API \u6587\u6863\u3002 \u4f8b\u5982\uff1a from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): openapi_url : str = \"/openapi.json\" settings = Settings () app = FastAPI ( openapi_url = settings . openapi_url ) @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } \u6b64\u5904\u628a /openapi.json \u8bbe\u7f6e\u4e3a openapi_url \u7684\u9ed8\u8ba4\u503c\u3002 \u5e76\u5728\u521b\u5efa FastAPI \u5e94\u7528\u65f6\u4f7f\u7528 openapi_url \u3002 \u628a\u73af\u5883\u53d8\u91cf OPENAPI_URL \u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u7981\u7528 OpenAPI\uff08\u5305\u62ec API \u6587\u6863\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ OPENAPI_URL = uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u67e5\u770b /openapi.json \u3001 /docs \u3001 /redoc \u7b49 URL \u65f6\uff0c\u5c31\u4f1a\u6536\u5230\u5982\u4e0b\u7684 404 Not Found \u9519\u8bef\uff1a { \"detail\" : \"Not Found\" }","title":"\u914d\u7f6e OpenAPI"},{"location":"advanced/conditional-openapi/#openapi","text":"\u4f7f\u7528\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf\u57fa\u4e8e\u73af\u5883\u5b9e\u73b0\u6309\u6761\u4ef6\u914d\u7f6e OpenAPI\uff0c\u751a\u81f3\u5b8c\u5168\u7981\u7528 OpenAPI\u3002","title":"\u914d\u7f6e OpenAPI"},{"location":"advanced/conditional-openapi/#api","text":"\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u9690\u85cf\u6587\u6863\u7528\u6237\u754c\u9762 \u5e76\u4e0d\u80fd \u59a5\u5584\u4fdd\u62a4 API\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e0d\u4f1a\u8ba9 API \u66f4\u5b89\u5168\uff0c\u800c\u4e14 \u8def\u5f84\u64cd\u4f5c \u4f9d\u7136\u6709\u6548\u3002 \u5982\u679c\u4ee3\u7801\u4e2d\u5b58\u5728\u5b89\u5168\u9690\u60a3\uff0c\u8fd9\u4e9b\u9690\u60a3\u4ecd\u7136\u5b58\u5728\u3002 \u9690\u85cf\u6587\u6863\u53ea\u662f\u8ba9\u4e0e API \u7684\u4ea4\u4e92\u53d8\u5f97\u66f4\u96be\uff0c\u4e5f\u8ba9\u5728\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u8c03\u8bd5\u53d8\u5f97\u66f4\u96be\u3002\u8fd9\u79cd\u65b9\u5f0f\u53ea\u662f \u9690\u5f0f\u5b89\u5168\uff08Security through obscurity \uff09\u7684\u7b80\u5355\u5f62\u5f0f\u3002 \u4ee5\u4e0b\u51e0\u79cd\u65b9\u5f0f\u80fd\u66f4\u597d\u5730\u4fdd\u8bc1 API \u7684\u5b89\u5168\uff1a \u786e\u4fdd\u8981\u597d\u597d\u5b9a\u4e49\u8bf7\u6c42\u4f53\u4e0e\u54cd\u5e94\u7684 Pydantic \u6a21\u578b \u4f7f\u7528\u4f9d\u8d56\u9879\u914d\u7f6e\u6240\u9700\u7684\u6743\u9650\u4e0e\u89d2\u8272 \u6c38\u8fdc\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\uff0c\u53ea\u4fdd\u5b58\u54c8\u5e0c\u8fc7\u7684\u5bc6\u7801 \u4f7f\u7528\u77e5\u540d\u7684\u52a0\u5bc6\u5de5\u5177\uff0c\u5982 Passlib \u6216 JWT Token \u7b49 \u5728\u5fc5\u8981\u65f6\uff0c\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\u6dfb\u52a0\u66f4\u591a\u7cbe\u7ec6\u6743\u9650\u63a7\u5236 \u7b49\u2026\u2026 \u5c3d\u7ba1\u5982\u6b64\uff0c\u60a8\u8fd8\u53ef\u80fd\u4f1a\u9047\u5230\u6781\u4e2a\u522b\u7684\u7528\u4f8b\uff0c\u8981\u5728\u67d0\u4e9b\u73af\u5883\uff08\u5982\u751f\u4ea7\u73af\u5883\uff09\u4e0b\u7981\u7528 API \u6587\u6863\uff0c\u6216\u6839\u636e\u73af\u5883\u53d8\u91cf\u914d\u7f6e OpenAPI\u3002","title":"\u5173\u4e8e\u5b89\u5168\u3001API \u4e0e\u6587\u6863"},{"location":"advanced/conditional-openapi/#openapi_1","text":"\u4f7f\u7528 Pydantic \u8bbe\u7f6e\u53ef\u4ee5\u8f7b\u677e\u5730\u914d\u7f6e OpenAPI \u4e0e API \u6587\u6863\u3002 \u4f8b\u5982\uff1a from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): openapi_url : str = \"/openapi.json\" settings = Settings () app = FastAPI ( openapi_url = settings . openapi_url ) @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } \u6b64\u5904\u628a /openapi.json \u8bbe\u7f6e\u4e3a openapi_url \u7684\u9ed8\u8ba4\u503c\u3002 \u5e76\u5728\u521b\u5efa FastAPI \u5e94\u7528\u65f6\u4f7f\u7528 openapi_url \u3002 \u628a\u73af\u5883\u53d8\u91cf OPENAPI_URL \u8bbe\u7f6e\u4e3a\u7a7a\u5b57\u7b26\u4e32\uff0c\u5c31\u53ef\u4ee5\u7981\u7528 OpenAPI\uff08\u5305\u62ec API \u6587\u6863\uff09\uff0c\u5982\u4e0b\u6240\u793a\uff1a $ OPENAPI_URL = uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u67e5\u770b /openapi.json \u3001 /docs \u3001 /redoc \u7b49 URL \u65f6\uff0c\u5c31\u4f1a\u6536\u5230\u5982\u4e0b\u7684 404 Not Found \u9519\u8bef\uff1a { \"detail\" : \"Not Found\" }","title":"\u4f7f\u7528\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf\u6309\u6761\u4ef6\u914d\u7f6e OpenAPI"},{"location":"advanced/custom-request-and-route/","text":"\u81ea\u5b9a\u4e49\u8bf7\u6c42\u4e0e APIRoute \u7c7b \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u8981\u8986\u76d6 Request \u4e0e APIRoute \u7c7b\u4f7f\u7528\u7684\u903b\u8f91\u3002 \u5c24\u5176\u662f\u4e2d\u95f4\u4ef6\u91cc\u7684\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u5728\u5e94\u7528\u5904\u7406\u8bf7\u6c42\u4f53\u524d\uff0c\u9884\u5148\u8bfb\u53d6\u6216\u64cd\u63a7\u8bf7\u6c42\u4f53\u3002 \u5371\u9669 \u672c\u7ae0\u5185\u5bb9 \u8f83\u96be \u3002 FastAPI \u65b0\u624b\u53ef\u8df3\u8fc7\u672c\u7ae0\u3002 \u7528\u4f8b \u00b6 \u5e38\u89c1\u7528\u4f8b\u5982\u4e0b\uff1a \u628a msgpack \u7b49\u975e JSON \u8bf7\u6c42\u4f53\u8f6c\u6362\u4e3a JSON \u89e3\u538b gzip \u538b\u7f29\u7684\u8bf7\u6c42\u4f53 \u81ea\u52a8\u8bb0\u5f55\u6240\u6709\u8bf7\u6c42\u4f53\u7684\u65e5\u5fd7 \u5904\u7406\u81ea\u5b9a\u4e49\u8bf7\u6c42\u4f53\u7f16\u7801 \u00b6 \u4e0b\u9762\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u81ea\u5b9a\u4e49 Request \u5b50\u7c7b\u538b\u7f29 gzip \u8bf7\u6c42\u3002 \u5e76\u5728\u81ea\u5b9a\u4e49\u8bf7\u6c42\u7684\u7c7b\u4e2d\u4f7f\u7528 APIRoute \u5b50\u7c7b\u3002 \u521b\u5efa\u81ea\u5b9a\u4e49 GzipRequest \u7c7b \u00b6 \u63d0\u793a \u672c\u4f8b\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e GzipRequest \u7c7b\u5982\u4f55\u8fd0\u4f5c\u3002\u5982\u9700 Gzip \u652f\u6301\uff0c\u8bf7\u4f7f\u7528 GzipMiddleware \u3002 \u9996\u5148\uff0c\u521b\u5efa GzipRequest \u7c7b\uff0c\u8986\u76d6\u89e3\u538b\u8bf7\u6c42\u5934\u4e2d\u8bf7\u6c42\u4f53\u7684 Request.body() \u65b9\u6cd5\u3002 \u8bf7\u6c42\u5934\u4e2d\u6ca1\u6709 gzip \u65f6\uff0c GzipRequest \u4e0d\u4f1a\u89e3\u538b\u8bf7\u6c42\u4f53\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u540c\u4e00\u4e2a\u8def\u7531\u7c7b\u5904\u7406 gzip \u538b\u7f29\u7684\u8bf7\u6c42\u6216\u672a\u538b\u7f29\u7684\u8bf7\u6c42\u3002 import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} \u521b\u5efa\u81ea\u5b9a\u4e49 GzipRoute \u7c7b \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4f7f\u7528 GzipRequest \u7684 fastapi.routing.APIRoute \u7684\u81ea\u5b9a\u4e49\u5b50\u7c7b\u3002 \u6b64\u65f6\uff0c\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u5b50\u7c7b\u4f1a\u8986\u76d6 APIRoute.get_route_handler() \u3002 APIRoute.get_route_handler() \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u51fd\u6570\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u51fd\u6570\u63a5\u6536\u8bf7\u6c42\u5e76\u8fd4\u56de\u54cd\u5e94\u3002 \u672c\u4f8b\u7528\u5b83\u6839\u636e\u539f\u59cb\u8bf7\u6c42\u521b\u5efa GzipRequest \u3002 import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} \u6280\u672f\u7ec6\u8282 Request \u7684 request.scope \u5c5e\u6027\u662f\u5305\u542b\u5173\u8054\u8bf7\u6c42\u5143\u6570\u636e\u7684\u5b57\u5178\u3002 Request \u7684 request.receive \u65b9\u6cd5\u662f \u63a5\u6536 \u8bf7\u6c42\u4f53\u7684\u51fd\u6570\u3002 scope \u5b57\u5178\u4e0e receive \u51fd\u6570\u90fd\u662f ASGI \u89c4\u8303\u7684\u5185\u5bb9\u3002 scope \u4e0e receive \u4e5f\u662f\u521b\u5efa\u65b0\u7684 Request \u5b9e\u4f8b\u6240\u9700\u7684\u3002 Request \u7684\u66f4\u591a\u5185\u5bb9\u8be6\u89c1 Starlette \u5b98\u6863 - \u8bf7\u6c42 \u3002 GzipRequest.get_route_handler \u8fd4\u56de\u51fd\u6570\u7684\u552f\u4e00\u533a\u522b\u662f\u628a Request \u8f6c\u6362\u6210\u4e86 GzipRequest \u3002 \u5982\u6b64\u4e00\u6765\uff0c GzipRequest \u628a\u6570\u636e\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c \u524d\uff0c\u5c31\u4f1a\u89e3\u538b\u6570\u636e\uff08\u5982\u9700\uff09\u3002 \u4e4b\u540e\uff0c\u6240\u6709\u5904\u7406\u903b\u8f91\u90fd\u4e00\u6837\u3002 \u4f46\u56e0\u4e3a\u6539\u53d8\u4e86 GzipRequest.body \uff0c FastAPI \u52a0\u8f7d\u8bf7\u6c42\u4f53\u65f6\u4f1a\u81ea\u52a8\u89e3\u538b\u3002 \u5728\u5f02\u5e38\u5904\u7406\u5668\u4e2d\u8bbf\u95ee\u8bf7\u6c42\u4f53 \u00b6 \u63d0\u793a \u4e3a\u4e86\u89e3\u51b3\u540c\u6837\u7684\u95ee\u9898\uff0c\u5728 RequestValidationError \u7684\u81ea\u5b9a\u4e49\u5904\u7406\u5668\u4f7f\u7528 body \uff08 \u5904\u7406\u9519\u8bef \uff09\u53ef\u80fd\u4f1a\u66f4\u5bb9\u6613\u3002 \u4f46\u672c\u4f8b\u4ecd\u7136\u53ef\u884c\uff0c\u800c\u4e14\u672c\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u4e0e\u5185\u90e8\u7ec4\u4ef6\u8fdb\u884c\u4ea4\u4e92\u3002 \u540c\u6837\u4e5f\u53ef\u4ee5\u5728\u5f02\u5e38\u5904\u7406\u5668\u4e2d\u8bbf\u95ee\u8bf7\u6c42\u4f53\u3002 \u6b64\u65f6\u8981\u505a\u7684\u53ea\u662f\u5904\u7406 try / except \u4e2d\u7684\u8bf7\u6c42\uff1a from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) \u53d1\u751f\u5f02\u5e38\u65f6\uff0c Request \u5b9e\u4f8b\u4ecd\u5728\u4f5c\u7528\u57df\u5185\uff0c\u56e0\u6b64\u5904\u7406\u9519\u8bef\u65f6\u53ef\u4ee5\u8bfb\u53d6\u548c\u4f7f\u7528\u8bf7\u6c42\u4f53\uff1a from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) \u5728\u8def\u7531\u4e2d\u81ea\u5b9a\u4e49 APIRoute \u7c7b \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u8bbe\u7f6e APIRoute \u7684 route_class \u53c2\u6570\uff1a import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router ) \u672c\u4f8b\u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u4e0b\u7684 router \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 TimedRoute \u7c7b\uff0c\u5e76\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u8f93\u51fa\u751f\u6210\u54cd\u5e94\u65f6\u95f4\u7684 X-Response-Time \u54cd\u5e94\u5934\uff1a import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router )","title":"\u81ea\u5b9a\u4e49\u8bf7\u6c42\u4e0e APIRoute \u7c7b"},{"location":"advanced/custom-request-and-route/#apiroute","text":"\u6709\u65f6\uff0c\u6211\u4eec\u8981\u8986\u76d6 Request \u4e0e APIRoute \u7c7b\u4f7f\u7528\u7684\u903b\u8f91\u3002 \u5c24\u5176\u662f\u4e2d\u95f4\u4ef6\u91cc\u7684\u903b\u8f91\u3002 \u4f8b\u5982\uff0c\u5728\u5e94\u7528\u5904\u7406\u8bf7\u6c42\u4f53\u524d\uff0c\u9884\u5148\u8bfb\u53d6\u6216\u64cd\u63a7\u8bf7\u6c42\u4f53\u3002 \u5371\u9669 \u672c\u7ae0\u5185\u5bb9 \u8f83\u96be \u3002 FastAPI \u65b0\u624b\u53ef\u8df3\u8fc7\u672c\u7ae0\u3002","title":"\u81ea\u5b9a\u4e49\u8bf7\u6c42\u4e0e APIRoute \u7c7b"},{"location":"advanced/custom-request-and-route/#_1","text":"\u5e38\u89c1\u7528\u4f8b\u5982\u4e0b\uff1a \u628a msgpack \u7b49\u975e JSON \u8bf7\u6c42\u4f53\u8f6c\u6362\u4e3a JSON \u89e3\u538b gzip \u538b\u7f29\u7684\u8bf7\u6c42\u4f53 \u81ea\u52a8\u8bb0\u5f55\u6240\u6709\u8bf7\u6c42\u4f53\u7684\u65e5\u5fd7","title":"\u7528\u4f8b"},{"location":"advanced/custom-request-and-route/#_2","text":"\u4e0b\u9762\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u81ea\u5b9a\u4e49 Request \u5b50\u7c7b\u538b\u7f29 gzip \u8bf7\u6c42\u3002 \u5e76\u5728\u81ea\u5b9a\u4e49\u8bf7\u6c42\u7684\u7c7b\u4e2d\u4f7f\u7528 APIRoute \u5b50\u7c7b\u3002","title":"\u5904\u7406\u81ea\u5b9a\u4e49\u8bf7\u6c42\u4f53\u7f16\u7801"},{"location":"advanced/custom-request-and-route/#gziprequest","text":"\u63d0\u793a \u672c\u4f8b\u53ea\u662f\u4e3a\u4e86\u8bf4\u660e GzipRequest \u7c7b\u5982\u4f55\u8fd0\u4f5c\u3002\u5982\u9700 Gzip \u652f\u6301\uff0c\u8bf7\u4f7f\u7528 GzipMiddleware \u3002 \u9996\u5148\uff0c\u521b\u5efa GzipRequest \u7c7b\uff0c\u8986\u76d6\u89e3\u538b\u8bf7\u6c42\u5934\u4e2d\u8bf7\u6c42\u4f53\u7684 Request.body() \u65b9\u6cd5\u3002 \u8bf7\u6c42\u5934\u4e2d\u6ca1\u6709 gzip \u65f6\uff0c GzipRequest \u4e0d\u4f1a\u89e3\u538b\u8bf7\u6c42\u4f53\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u8ba9\u540c\u4e00\u4e2a\u8def\u7531\u7c7b\u5904\u7406 gzip \u538b\u7f29\u7684\u8bf7\u6c42\u6216\u672a\u538b\u7f29\u7684\u8bf7\u6c42\u3002 import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )}","title":"\u521b\u5efa\u81ea\u5b9a\u4e49 GzipRequest \u7c7b"},{"location":"advanced/custom-request-and-route/#gziproute","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4f7f\u7528 GzipRequest \u7684 fastapi.routing.APIRoute \u7684\u81ea\u5b9a\u4e49\u5b50\u7c7b\u3002 \u6b64\u65f6\uff0c\u8fd9\u4e2a\u81ea\u5b9a\u4e49\u5b50\u7c7b\u4f1a\u8986\u76d6 APIRoute.get_route_handler() \u3002 APIRoute.get_route_handler() \u65b9\u6cd5\u8fd4\u56de\u7684\u662f\u51fd\u6570\uff0c\u5e76\u4e14\u8fd4\u56de\u7684\u51fd\u6570\u63a5\u6536\u8bf7\u6c42\u5e76\u8fd4\u56de\u54cd\u5e94\u3002 \u672c\u4f8b\u7528\u5b83\u6839\u636e\u539f\u59cb\u8bf7\u6c42\u521b\u5efa GzipRequest \u3002 import gzip from typing import Callable , List from fastapi import Body , FastAPI , Request , Response from fastapi.routing import APIRoute class GzipRequest ( Request ): async def body ( self ) -> bytes : if not hasattr ( self , \"_body\" ): body = await super () . body () if \"gzip\" in self . headers . getlist ( \"Content-Encoding\" ): body = gzip . decompress ( body ) self . _body = body return self . _body class GzipRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : request = GzipRequest ( request . scope , request . receive ) return await original_route_handler ( request ) return custom_route_handler app = FastAPI () app . router . route_class = GzipRoute @app . post ( \"/sum\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return { \"sum\" : sum ( numbers )} \u6280\u672f\u7ec6\u8282 Request \u7684 request.scope \u5c5e\u6027\u662f\u5305\u542b\u5173\u8054\u8bf7\u6c42\u5143\u6570\u636e\u7684\u5b57\u5178\u3002 Request \u7684 request.receive \u65b9\u6cd5\u662f \u63a5\u6536 \u8bf7\u6c42\u4f53\u7684\u51fd\u6570\u3002 scope \u5b57\u5178\u4e0e receive \u51fd\u6570\u90fd\u662f ASGI \u89c4\u8303\u7684\u5185\u5bb9\u3002 scope \u4e0e receive \u4e5f\u662f\u521b\u5efa\u65b0\u7684 Request \u5b9e\u4f8b\u6240\u9700\u7684\u3002 Request \u7684\u66f4\u591a\u5185\u5bb9\u8be6\u89c1 Starlette \u5b98\u6863 - \u8bf7\u6c42 \u3002 GzipRequest.get_route_handler \u8fd4\u56de\u51fd\u6570\u7684\u552f\u4e00\u533a\u522b\u662f\u628a Request \u8f6c\u6362\u6210\u4e86 GzipRequest \u3002 \u5982\u6b64\u4e00\u6765\uff0c GzipRequest \u628a\u6570\u636e\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c \u524d\uff0c\u5c31\u4f1a\u89e3\u538b\u6570\u636e\uff08\u5982\u9700\uff09\u3002 \u4e4b\u540e\uff0c\u6240\u6709\u5904\u7406\u903b\u8f91\u90fd\u4e00\u6837\u3002 \u4f46\u56e0\u4e3a\u6539\u53d8\u4e86 GzipRequest.body \uff0c FastAPI \u52a0\u8f7d\u8bf7\u6c42\u4f53\u65f6\u4f1a\u81ea\u52a8\u89e3\u538b\u3002","title":"\u521b\u5efa\u81ea\u5b9a\u4e49 GzipRoute \u7c7b"},{"location":"advanced/custom-request-and-route/#_3","text":"\u63d0\u793a \u4e3a\u4e86\u89e3\u51b3\u540c\u6837\u7684\u95ee\u9898\uff0c\u5728 RequestValidationError \u7684\u81ea\u5b9a\u4e49\u5904\u7406\u5668\u4f7f\u7528 body \uff08 \u5904\u7406\u9519\u8bef \uff09\u53ef\u80fd\u4f1a\u66f4\u5bb9\u6613\u3002 \u4f46\u672c\u4f8b\u4ecd\u7136\u53ef\u884c\uff0c\u800c\u4e14\u672c\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u4e0e\u5185\u90e8\u7ec4\u4ef6\u8fdb\u884c\u4ea4\u4e92\u3002 \u540c\u6837\u4e5f\u53ef\u4ee5\u5728\u5f02\u5e38\u5904\u7406\u5668\u4e2d\u8bbf\u95ee\u8bf7\u6c42\u4f53\u3002 \u6b64\u65f6\u8981\u505a\u7684\u53ea\u662f\u5904\u7406 try / except \u4e2d\u7684\u8bf7\u6c42\uff1a from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers ) \u53d1\u751f\u5f02\u5e38\u65f6\uff0c Request \u5b9e\u4f8b\u4ecd\u5728\u4f5c\u7528\u57df\u5185\uff0c\u56e0\u6b64\u5904\u7406\u9519\u8bef\u65f6\u53ef\u4ee5\u8bfb\u53d6\u548c\u4f7f\u7528\u8bf7\u6c42\u4f53\uff1a from typing import Callable , List from fastapi import Body , FastAPI , HTTPException , Request , Response from fastapi.exceptions import RequestValidationError from fastapi.routing import APIRoute class ValidationErrorLoggingRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : try : return await original_route_handler ( request ) except RequestValidationError as exc : body = await request . body () detail = { \"errors\" : exc . errors (), \"body\" : body . decode ()} raise HTTPException ( status_code = 422 , detail = detail ) return custom_route_handler app = FastAPI () app . router . route_class = ValidationErrorLoggingRoute @app . post ( \"/\" ) async def sum_numbers ( numbers : List [ int ] = Body ()): return sum ( numbers )","title":"\u5728\u5f02\u5e38\u5904\u7406\u5668\u4e2d\u8bbf\u95ee\u8bf7\u6c42\u4f53"},{"location":"advanced/custom-request-and-route/#apiroute_1","text":"\u60a8\u8fd8\u53ef\u4ee5\u8bbe\u7f6e APIRoute \u7684 route_class \u53c2\u6570\uff1a import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router ) \u672c\u4f8b\u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u4e0b\u7684 router \u4f7f\u7528\u81ea\u5b9a\u4e49\u7684 TimedRoute \u7c7b\uff0c\u5e76\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u8f93\u51fa\u751f\u6210\u54cd\u5e94\u65f6\u95f4\u7684 X-Response-Time \u54cd\u5e94\u5934\uff1a import time from typing import Callable from fastapi import APIRouter , FastAPI , Request , Response from fastapi.routing import APIRoute class TimedRoute ( APIRoute ): def get_route_handler ( self ) -> Callable : original_route_handler = super () . get_route_handler () async def custom_route_handler ( request : Request ) -> Response : before = time . time () response : Response = await original_route_handler ( request ) duration = time . time () - before response . headers [ \"X-Response-Time\" ] = str ( duration ) print ( f \"route duration: { duration } \" ) print ( f \"route response: { response } \" ) print ( f \"route response headers: { response . headers } \" ) return response return custom_route_handler app = FastAPI () router = APIRouter ( route_class = TimedRoute ) @app . get ( \"/\" ) async def not_timed (): return { \"message\" : \"Not timed\" } @router . get ( \"/timed\" ) async def timed (): return { \"message\" : \"It's the time of my life\" } app . include_router ( router )","title":"\u5728\u8def\u7531\u4e2d\u81ea\u5b9a\u4e49 APIRoute \u7c7b"},{"location":"advanced/custom-response/","text":"\u81ea\u5b9a\u4e49\u54cd\u5e94 - HTML\u3001\u6d41\u3001\u6587\u4ef6\u7b49 \u00b6 FastAPI \u9ed8\u8ba4\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\u3002 \u6b63\u5982 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e00\u7ae0\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de Response \u8986\u76d6\u9ed8\u8ba4\u54cd\u5e94\u3002 \u4f46\u5982\u679c\u76f4\u63a5\u8fd4\u56de Response \uff0c FastAPI \u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\u8fd4\u56de\u6570\u636e\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u6587\u6863\uff08\u4f8b\u5982\uff0c\u628a HTTP \u8bf7\u6c42\u5934 Content-Type \u4e2d\u7684\u7279\u5b9a \u5a92\u4f53\u7c7b\u578b \u6dfb\u52a0\u5230 OpenAPI \uff09\u3002 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u53ef\u4ee5\u58f0\u660e\u81ea\u5b9a\u4e49 Response \u3002 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u7684\u5185\u5bb9\u4f1a\u88ab\u653e\u5230 Response \u91cc\u3002 \u5982\u679c Response \u5305\u542b JSON \u5a92\u4f53\u7c7b\u578b\uff08 application/json \uff09\uff0c\u6bd4\u5982\u4f7f\u7528 JSONResponse \u6216 UJSONResponse \u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4e2d\u58f0\u660e\u7684 Pydantic response_model \u4f1a\u81ea\u52a8\u8f6c\u6362\uff08\u548c\u8fc7\u6ee4\uff09\u8fd4\u56de\u7684\u6570\u636e\u3002 \u7b14\u8bb0 \u5982\u679c\u4f7f\u7528\u4e0d\u5e26\u6709\u5a92\u4f53\u7c7b\u578b\u7684\u54cd\u5e94\u7c7b\uff0cFastAPI \u4f1a\u8ba4\u4e3a\u54cd\u5e94\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\uff0c\u4e0d\u4f1a\u5728\u751f\u6210\u7684 OpenAPI \u6587\u6863\u4e2d\u8bb0\u5f55\u54cd\u5e94\u683c\u5f0f\u3002 \u4f7f\u7528 ORJSONResponse \u00b6 \u4f8b\u5982\uff0c\u5982\u9700\u538b\u69a8\u6027\u80fd\u53ef\u4ee5\u4f7f\u7528 orjson \uff0c\u5e76\u628a\u54cd\u5e94\u8bbe\u7f6e\u4e3a ORJSONResponse \u3002 \u5bfc\u5165\u8981\u4f7f\u7528\u7684 Response \u7c7b\u6216\u5b83\u7684\u5b50\u7c7b\uff0c\u7136\u540e\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u58f0\u660e\u54cd\u5e94\u7c7b\u3002 from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = ORJSONResponse ) async def read_items (): return ORJSONResponse ([{ \"item_id\" : \"Foo\" }]) \u8bf4\u660e response_class \u53c2\u6570\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684 \u5a92\u4f53\u7c7b\u578b \u3002 \u672c\u4f8b\u628a HTTP \u8bf7\u6c42\u5934\u7684 Content-Type \u8bbe\u7f6e\u4e3a application/json \u3002 \u5e76\u5728 OpenAPI \u4e2d\u5b58\u6863\u3002 \u63d0\u793a ORJSONResponse \u76ee\u524d\u53ea\u80fd\u7528\u4e8e FastAPI\uff0c\u5728 Starlette \u4e2d\u4e0d\u53ef\u7528\u3002 HTML \u54cd\u5e94 \u00b6 FastAPI \u4f7f\u7528 HTMLResponse \u76f4\u63a5\u8fd4\u56de HTML \u54cd\u5e94\u3002 \u5bfc\u5165 HTMLResponse \u628a HTMLResponse \u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_class \u53c2\u6570 from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" \u8bf4\u660e response_class \u53c2\u6570\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684 \u5a92\u4f53\u7c7b\u578b \u3002 \u672c\u4f8b\u628a HTTP \u8bf7\u6c42\u5934\u7684 Content-Type \u8bbe\u7f6e\u4e3a text/html \u3002 \u5e76\u5728 OpenAPI \u4e2d\u5b58\u6863\u3002 \u8fd4\u56de Response \u00b6 \u6b63\u5982 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e00\u7ae0\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8986\u76d6\u9ed8\u8ba4\u54cd\u5e94\u3002 \u4e0e\u4e0a\u4f8b\u4e00\u6837\uff0c\u8fd4\u56de HTMLResponse \u7684\u4ee3\u7801\u5982\u4e0b\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) \u8b66\u544a OpenAPI \u4e0d\u4f1a\u5b58\u6863 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f4\u63a5\u8fd4\u56de\u7684 Response \uff08\u6bd4\u5982\uff0c Content-Type \uff09\uff0c\u5728 API \u6587\u6863\u4e2d\u4e5f\u770b\u4e0d\u5230\u3002 \u8bf4\u660e \u5f53\u7136\uff0c\u5b9e\u9645\u7684 Content-Type \u8bf7\u6c42\u5934\u3001\u72b6\u6001\u7801\u7b49\u6765\u81ea\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u3002 OpenAPI \u5b58\u6863\u548c\u8986\u76d6 Response \u00b6 \u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u8986\u76d6\u54cd\u5e94\uff0c\u4f46\u540c\u65f6\u53c8\u8981\u5728 OpenAPI \u4e2d\u5b58\u6863 \u5a92\u4f53\u7c7b\u578b \uff0c\u8981\u4f7f\u7528 response_class \u53c2\u6570\u5e76\u8fd4\u56de Response \u5bf9\u8c61\u3002 response_class \u53c2\u6570\u53ea\u7528\u4e8e\u5b58\u6863 OpenAPI \u8def\u5f84\u64cd\u4f5c \uff0c Response \u5219\u7528\u6765\u8fd4\u56de\u54cd\u5e94\u3002 \u76f4\u63a5\u8fd4\u56de HTMLResponse \u00b6 \u793a\u4f8b\u5982\u4e0b\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () def generate_html_response (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return generate_html_response () \u672c\u4f8b\u4e2d\uff0c generate_html_response() \u51fd\u6570\u6ca1\u6709\u8fd4\u56de HTML \u5b57\u7b26\u4e32 \uff0c\u800c\u662f\u751f\u6210\u5e76\u8fd4\u56de Response \u5bf9\u8c61\u3002 generate_html_response() \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u5df2\u7ecf\u8986\u76d6\u4e86 FastAPI \u7684\u9ed8\u8ba4 Response \u3002 \u56e0\u4e3a\u5728 response_class \u8fd8\u4f20\u5165\u4e86 HTMLResponse \uff0c\u56e0\u6b64\uff0c FastAPI \u77e5\u9053\u8981\u5728 OpenAPI \u548c API \u6587\u6863\u4e2d\u4ee5 text/html \u683c\u5f0f\u5c06\u4e4b\u5b58\u6863\u4e3a HTML\u3002 \u53ef\u7528\u54cd\u5e94 \u00b6 \u4e0b\u9762\u5217\u51fa\u4e00\u4e9b\u53ef\u7528\u7684\u54cd\u5e94\u3002 \u6ce8\u610f\uff0c\u4f7f\u7528 Response \u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\uff0c\u751a\u81f3\u521b\u5efa\u81ea\u5b9a\u4e49\u5b50\u7c7b\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c \u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\uff0c\u4f46\u5176\u5b9e\u7edd\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Response \u00b6 Response \u4e3b\u7c7b\uff0c\u6240\u6709\u5176\u4ed6\u54cd\u5e94\u90fd\u7ee7\u627f\u81ea\u8fd9\u4e2a\u7c7b\u3002 \u53ef\u76f4\u63a5\u8fd4\u56de\u3002 Response \u7684\u53c2\u6570\u5982\u4e0b\uff1a content - str \u6216 bytes status_code - int \u7c7b\u578b\u7684 HTTP \u72b6\u6001\u7801 headers - \u7531\u5b57\u7b26\u4e32\u7ec4\u6210\u7684 \u5b57\u5178 media_type - \u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684 \u5b57\u7b26\u4e32 \uff0c\u5982 \"text/html\" FastAPI\uff08\u5176\u5b9e\u662f Starlette\uff09\u81ea\u52a8\u5305\u542b Content-Length \u54cd\u5e94\u5934\uff0c\u8fd8\u5305\u542b\u57fa\u4e8e media_type \u7684 Content-Type \u54cd\u5e94\u5934\uff0c\u5e76\u4e3a\u6587\u672c\u7c7b\u578b\u6dfb\u52a0\u5b57\u7b26\u96c6\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" ) HTMLResponse \u00b6 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u63a5\u6536\u6587\u672c\u6216\u5b57\u8282\uff0c\u8fd4\u56de HTML \u54cd\u5e94\u3002 PlainTextResponse \u00b6 \u63a5\u6536\u6587\u672c\u6216\u5b57\u8282\uff0c\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI () @app . get ( \"/\" , response_class = PlainTextResponse ) async def main (): return \"Hello World\" JSONResponse \u00b6 \u63a5\u6536\u6570\u636e\uff0c\u8fd4\u56de application/json \u7f16\u7801\u7c7b\u578b\u7684\u54cd\u5e94\u3002 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u8fd9\u662f FastAPI \u7684\u9ed8\u8ba4\u54cd\u5e94\u3002 ORJSONResponse \u00b6 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c ORJSONResponse \u662f\u4f7f\u7528 orjson \u7684\u5feb\u901f JSON \u54cd\u5e94\u3002 UJSONResponse \u00b6 UJSONResponse \u662f\u4f7f\u7528 ujson \u7684 JSON \u54cd\u5e94\u3002 \u8b66\u544a \u5728\u5904\u7406\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u65f6\uff0c ujson \u4e0d\u5982 Python \u7684\u5185\u7f6e\u5b9e\u73b0\u90a3\u4e48\u8c28\u614e\u3002 from fastapi import FastAPI from fastapi.responses import UJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = UJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u63d0\u793a ORJSONResponse \u53ef\u80fd\u66f4\u5feb\u3002 RedirectResponse \u00b6 \u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\uff08\u4e34\u65f6\u91cd\u5b9a\u5411\uff09\u3002 from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/typer\" ) async def redirect_typer (): return RedirectResponse ( \"https://typer.tiangolo.com\" ) StreamingResponse \u00b6 \u91c7\u7528\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u7136\u540e\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse app = FastAPI () async def fake_video_streamer (): for i in range ( 10 ): yield b \"some fake video bytes\" @app . get ( \"/\" ) async def main (): return StreamingResponse ( fake_video_streamer ()) \u4f7f\u7528 StreamingResponse \u5904\u7406\u6587\u4ef6\u7c7b\u5bf9\u8c61 \u00b6 \u521b\u5efa\u751f\u6210\u5668\u51fd\u6570\u8fed\u4ee3\u5904\u7406\u6587\u4ef6\u7c7b\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c open() \u8fd4\u56de\u7684\u5bf9\u8c61\uff09\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u65e0\u9700\u5b9e\u73b0\u628a\u6587\u4ef6\u5168\u90e8\u8bfb\u53d6\u5230\u5185\u5b58\u91cc\uff0c\u53ef\u4ee5\u4f20\u9012\u751f\u6210\u5668\u51fd\u6570\u81f3 StreamingResponse \uff0c\u7136\u540e\u8fd4\u56de\u8be5\u54cd\u5e94\u3002 \u8fd9\u79cd\u65b9\u5f0f\u5305\u62ec\u8bb8\u591a\u4e0e\u4e91\u5b58\u50a8\u3001\u89c6\u9891\u5904\u7406\u7b49\u4ea4\u4e92\u7684\u652f\u6301\u5e93\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) def main (): def iterfile (): # (1) with open ( some_file_path , mode = \"rb\" ) as file_like : # (2) yield from file_like # (3) return StreamingResponse ( iterfile (), media_type = \"video/mp4\" ) \u8fd9\u662f\u751f\u6210\u5668\u51fd\u6570\u3002\u56e0\u4e3a\u5305\u542b yield \u8bed\u53e5\uff0c\u56e0\u6b64\u5b83\u662f \u751f\u6210\u5668\u51fd\u6570 \uff1b \u4f7f\u7528 with \u4ee3\u7801\u5757\uff0c\u80fd\u786e\u4fdd\u6587\u4ef6\u7c7b\u5bf9\u8c61\u5728\u751f\u6210\u5668\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u6b63\u5e38\u5173\u95ed\u3002\u5373\u5728\u5b83\u53d1\u9001\u5b8c\u54cd\u5e94\u4e4b\u540e\uff1b yield from \u544a\u8bc9\u51fd\u6570\u8fed\u4ee3\u540d\u4e3a file_like \u7684\u5bf9\u8c61\u3002\u7136\u540e\u6ca1\u8fed\u4ee3\u4e00\u90e8\u5206\uff0c\u5c31\u4f7f\u7528\u751f\u6210\u5668\u51fd\u6570\u751f\u6210\u5bf9\u5e94\u7684\u5185\u5bb9\uff1b \u56e0\u6b64\uff0c\u5b83\u662f\u7528\u4e8e\u5728\u5185\u90e8\u628a\u4f20\u8f93 \u751f\u6210 \u5185\u5bb9\u4f20\u9012\u7ed9\u5176\u4ed6\u5bf9\u8c61\u7684\u751f\u6210\u5668\u51fd\u6570\u3002 \u7531\u6b64\uff0c\u53ef\u4ee5\u628a\u5b83\u653e\u5728 with \u4ee3\u7801\u5757\u91cc\uff0c\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u5b8c\u6210\u4e4b\u540e\u6b63\u5e38\u5173\u95ed\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u6b64\u5904\u4f7f\u7528\u7684\u662f\u4e0d\u652f\u6301 async \u548c await \u7684\u6807\u51c6 open() \uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u666e\u901a\u51fd\u6570\u58f0\u660e\u8def\u5f84\u64cd\u4f5c\u3002 FileResponse \u00b6 \u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u7684\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u4e0d\u540c\uff0c\u6b64\u54cd\u5e94\u63a5\u6536\u4e0d\u540c\u7ec4\u5408\u7684\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a path - \u6d41\u5f0f\u4f20\u8f93\u6587\u4ef6\u7684\u8def\u5f84 headers - \u5305\u542b\u4efb\u610f\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\u7684\u5b57\u5178 media_type - \u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002\u5982\u672a\u8bbe\u7f6e\uff0c\u5219\u4f7f\u7528\u6587\u4ef6\u540d\u6216\u8def\u5f84\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b filename - \u5982\u8bbe\u7f6e\u4e86\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d \u6587\u4ef6\u54cd\u5e94\u5305\u542b Content-Length \u3001 Last-Modified \u3001 ETag \u7b49\u54cd\u5e94\u5934\u3002 from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) async def main (): return FileResponse ( some_file_path ) \u8fd8\u53ef\u4ee5\u4f7f\u7528 response_class \u53c2\u6570\uff1a from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" , response_class = FileResponse ) async def main (): return some_file_path \u672c\u4f8b\u4ece \u8def\u5f84\u64cd\u4f5c \u51fd\u6570\u4e2d\u76f4\u63a5\u8fd4\u56de\u6587\u4ef6\u8def\u5f84\u3002 \u9ed8\u8ba4\u54cd\u5e94\u7c7b \u00b6 \u521b\u5efa FastAPI \u7c7b\u5b9e\u4f8b\u6216 APIRouter \u65f6\u80fd\u591f\u6307\u5b9a\u9ed8\u8ba4\u4f7f\u7528\u54ea\u4e2a\u54cd\u5e94\u7c7b\u3002 \u5b9a\u4e49\u9ed8\u8ba4\u54cd\u5e94\u7c7b\u7684\u53c2\u6570\u662f default_response_class \u3002 \u4e0b\u4f8b\u4e2d\uff0c FastAPI \u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u9ed8\u8ba4\u4f7f\u7528 ORJSONResponse \uff0c\u4e0d\u518d\u662f JSONResponse \u3002 from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI ( default_response_class = ORJSONResponse ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u63d0\u793a \u60a8\u4ecd\u53ef\u4ee5\u50cf\u4e4b\u524d\u90a3\u6837\u5728 \u8def\u5f84\u64cd\u4f5c \u8986\u76d6 response_class \u3002 \u9644\u52a0\u6587\u6863 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u5728 OpenAPI \u4e2d\u4f7f\u7528 response \u58f0\u660e\u5a92\u4f53\u7c7b\u578b\u548c\u66f4\u591a\u8be6\u7ec6\u5185\u5bb9\uff1a OpenAPI \u9644\u52a0\u54cd\u5e94 \u3002","title":"\u81ea\u5b9a\u4e49\u54cd\u5e94 - HTML\u3001\u6d41\u3001\u6587\u4ef6\u7b49"},{"location":"advanced/custom-response/#-html","text":"FastAPI \u9ed8\u8ba4\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\u3002 \u6b63\u5982 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e00\u7ae0\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de Response \u8986\u76d6\u9ed8\u8ba4\u54cd\u5e94\u3002 \u4f46\u5982\u679c\u76f4\u63a5\u8fd4\u56de Response \uff0c FastAPI \u4e0d\u4f1a\u81ea\u52a8\u8f6c\u6362\u8fd4\u56de\u6570\u636e\uff0c\u4e5f\u4e0d\u4f1a\u81ea\u52a8\u751f\u6210\u6587\u6863\uff08\u4f8b\u5982\uff0c\u628a HTTP \u8bf7\u6c42\u5934 Content-Type \u4e2d\u7684\u7279\u5b9a \u5a92\u4f53\u7c7b\u578b \u6dfb\u52a0\u5230 OpenAPI \uff09\u3002 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u53ef\u4ee5\u58f0\u660e\u81ea\u5b9a\u4e49 Response \u3002 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u7684\u5185\u5bb9\u4f1a\u88ab\u653e\u5230 Response \u91cc\u3002 \u5982\u679c Response \u5305\u542b JSON \u5a92\u4f53\u7c7b\u578b\uff08 application/json \uff09\uff0c\u6bd4\u5982\u4f7f\u7528 JSONResponse \u6216 UJSONResponse \u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4e2d\u58f0\u660e\u7684 Pydantic response_model \u4f1a\u81ea\u52a8\u8f6c\u6362\uff08\u548c\u8fc7\u6ee4\uff09\u8fd4\u56de\u7684\u6570\u636e\u3002 \u7b14\u8bb0 \u5982\u679c\u4f7f\u7528\u4e0d\u5e26\u6709\u5a92\u4f53\u7c7b\u578b\u7684\u54cd\u5e94\u7c7b\uff0cFastAPI \u4f1a\u8ba4\u4e3a\u54cd\u5e94\u6ca1\u6709\u4efb\u4f55\u5185\u5bb9\uff0c\u4e0d\u4f1a\u5728\u751f\u6210\u7684 OpenAPI \u6587\u6863\u4e2d\u8bb0\u5f55\u54cd\u5e94\u683c\u5f0f\u3002","title":"\u81ea\u5b9a\u4e49\u54cd\u5e94 - HTML\u3001\u6d41\u3001\u6587\u4ef6\u7b49"},{"location":"advanced/custom-response/#orjsonresponse","text":"\u4f8b\u5982\uff0c\u5982\u9700\u538b\u69a8\u6027\u80fd\u53ef\u4ee5\u4f7f\u7528 orjson \uff0c\u5e76\u628a\u54cd\u5e94\u8bbe\u7f6e\u4e3a ORJSONResponse \u3002 \u5bfc\u5165\u8981\u4f7f\u7528\u7684 Response \u7c7b\u6216\u5b83\u7684\u5b50\u7c7b\uff0c\u7136\u540e\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u58f0\u660e\u54cd\u5e94\u7c7b\u3002 from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = ORJSONResponse ) async def read_items (): return ORJSONResponse ([{ \"item_id\" : \"Foo\" }]) \u8bf4\u660e response_class \u53c2\u6570\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684 \u5a92\u4f53\u7c7b\u578b \u3002 \u672c\u4f8b\u628a HTTP \u8bf7\u6c42\u5934\u7684 Content-Type \u8bbe\u7f6e\u4e3a application/json \u3002 \u5e76\u5728 OpenAPI \u4e2d\u5b58\u6863\u3002 \u63d0\u793a ORJSONResponse \u76ee\u524d\u53ea\u80fd\u7528\u4e8e FastAPI\uff0c\u5728 Starlette \u4e2d\u4e0d\u53ef\u7528\u3002","title":"\u4f7f\u7528 ORJSONResponse"},{"location":"advanced/custom-response/#html","text":"FastAPI \u4f7f\u7528 HTMLResponse \u76f4\u63a5\u8fd4\u56de HTML \u54cd\u5e94\u3002 \u5bfc\u5165 HTMLResponse \u628a HTMLResponse \u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684 response_class \u53c2\u6570 from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" \u8bf4\u660e response_class \u53c2\u6570\u4e5f\u53ef\u4ee5\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684 \u5a92\u4f53\u7c7b\u578b \u3002 \u672c\u4f8b\u628a HTTP \u8bf7\u6c42\u5934\u7684 Content-Type \u8bbe\u7f6e\u4e3a text/html \u3002 \u5e76\u5728 OpenAPI \u4e2d\u5b58\u6863\u3002","title":"HTML \u54cd\u5e94"},{"location":"advanced/custom-response/#response","text":"\u6b63\u5982 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e00\u7ae0\u6240\u8ff0\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8986\u76d6\u9ed8\u8ba4\u54cd\u5e94\u3002 \u4e0e\u4e0a\u4f8b\u4e00\u6837\uff0c\u8fd4\u56de HTMLResponse \u7684\u4ee3\u7801\u5982\u4e0b\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) \u8b66\u544a OpenAPI \u4e0d\u4f1a\u5b58\u6863 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f4\u63a5\u8fd4\u56de\u7684 Response \uff08\u6bd4\u5982\uff0c Content-Type \uff09\uff0c\u5728 API \u6587\u6863\u4e2d\u4e5f\u770b\u4e0d\u5230\u3002 \u8bf4\u660e \u5f53\u7136\uff0c\u5b9e\u9645\u7684 Content-Type \u8bf7\u6c42\u5934\u3001\u72b6\u6001\u7801\u7b49\u6765\u81ea\u8fd4\u56de\u7684 Response \u5bf9\u8c61\u3002","title":"\u8fd4\u56de Response"},{"location":"advanced/custom-response/#openapi-response","text":"\u5982\u679c\u8981\u5728\u51fd\u6570\u5185\u8986\u76d6\u54cd\u5e94\uff0c\u4f46\u540c\u65f6\u53c8\u8981\u5728 OpenAPI \u4e2d\u5b58\u6863 \u5a92\u4f53\u7c7b\u578b \uff0c\u8981\u4f7f\u7528 response_class \u53c2\u6570\u5e76\u8fd4\u56de Response \u5bf9\u8c61\u3002 response_class \u53c2\u6570\u53ea\u7528\u4e8e\u5b58\u6863 OpenAPI \u8def\u5f84\u64cd\u4f5c \uff0c Response \u5219\u7528\u6765\u8fd4\u56de\u54cd\u5e94\u3002","title":"OpenAPI \u5b58\u6863\u548c\u8986\u76d6 Response"},{"location":"advanced/custom-response/#htmlresponse","text":"\u793a\u4f8b\u5982\u4e0b\uff1a from fastapi import FastAPI from fastapi.responses import HTMLResponse app = FastAPI () def generate_html_response (): html_content = \"\"\" <html> <head> <title>Some HTML in here</title> </head> <body> <h1>Look ma! HTML!</h1> </body> </html> \"\"\" return HTMLResponse ( content = html_content , status_code = 200 ) @app . get ( \"/items/\" , response_class = HTMLResponse ) async def read_items (): return generate_html_response () \u672c\u4f8b\u4e2d\uff0c generate_html_response() \u51fd\u6570\u6ca1\u6709\u8fd4\u56de HTML \u5b57\u7b26\u4e32 \uff0c\u800c\u662f\u751f\u6210\u5e76\u8fd4\u56de Response \u5bf9\u8c61\u3002 generate_html_response() \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u5df2\u7ecf\u8986\u76d6\u4e86 FastAPI \u7684\u9ed8\u8ba4 Response \u3002 \u56e0\u4e3a\u5728 response_class \u8fd8\u4f20\u5165\u4e86 HTMLResponse \uff0c\u56e0\u6b64\uff0c FastAPI \u77e5\u9053\u8981\u5728 OpenAPI \u548c API \u6587\u6863\u4e2d\u4ee5 text/html \u683c\u5f0f\u5c06\u4e4b\u5b58\u6863\u4e3a HTML\u3002","title":"\u76f4\u63a5\u8fd4\u56de HTMLResponse"},{"location":"advanced/custom-response/#_1","text":"\u4e0b\u9762\u5217\u51fa\u4e00\u4e9b\u53ef\u7528\u7684\u54cd\u5e94\u3002 \u6ce8\u610f\uff0c\u4f7f\u7528 Response \u53ef\u4ee5\u8fd4\u56de\u4efb\u4f55\u5176\u4ed6\u5bf9\u8c61\uff0c\u751a\u81f3\u521b\u5efa\u81ea\u5b9a\u4e49\u5b50\u7c7b\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c \u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\uff0c\u4f46\u5176\u5b9e\u7edd\u5927\u591a\u6570\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u53ef\u7528\u54cd\u5e94"},{"location":"advanced/custom-response/#response_1","text":"Response \u4e3b\u7c7b\uff0c\u6240\u6709\u5176\u4ed6\u54cd\u5e94\u90fd\u7ee7\u627f\u81ea\u8fd9\u4e2a\u7c7b\u3002 \u53ef\u76f4\u63a5\u8fd4\u56de\u3002 Response \u7684\u53c2\u6570\u5982\u4e0b\uff1a content - str \u6216 bytes status_code - int \u7c7b\u578b\u7684 HTTP \u72b6\u6001\u7801 headers - \u7531\u5b57\u7b26\u4e32\u7ec4\u6210\u7684 \u5b57\u5178 media_type - \u5b9a\u4e49\u5a92\u4f53\u7c7b\u578b\u7684 \u5b57\u7b26\u4e32 \uff0c\u5982 \"text/html\" FastAPI\uff08\u5176\u5b9e\u662f Starlette\uff09\u81ea\u52a8\u5305\u542b Content-Length \u54cd\u5e94\u5934\uff0c\u8fd8\u5305\u542b\u57fa\u4e8e media_type \u7684 Content-Type \u54cd\u5e94\u5934\uff0c\u5e76\u4e3a\u6587\u672c\u7c7b\u578b\u6dfb\u52a0\u5b57\u7b26\u96c6\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" )","title":"Response"},{"location":"advanced/custom-response/#htmlresponse_1","text":"\u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u63a5\u6536\u6587\u672c\u6216\u5b57\u8282\uff0c\u8fd4\u56de HTML \u54cd\u5e94\u3002","title":"HTMLResponse"},{"location":"advanced/custom-response/#plaintextresponse","text":"\u63a5\u6536\u6587\u672c\u6216\u5b57\u8282\uff0c\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\u3002 from fastapi import FastAPI from fastapi.responses import PlainTextResponse app = FastAPI () @app . get ( \"/\" , response_class = PlainTextResponse ) async def main (): return \"Hello World\"","title":"PlainTextResponse"},{"location":"advanced/custom-response/#jsonresponse","text":"\u63a5\u6536\u6570\u636e\uff0c\u8fd4\u56de application/json \u7f16\u7801\u7c7b\u578b\u7684\u54cd\u5e94\u3002 \u5982\u4e0a\u6587\u6240\u8ff0\uff0c\u8fd9\u662f FastAPI \u7684\u9ed8\u8ba4\u54cd\u5e94\u3002","title":"JSONResponse"},{"location":"advanced/custom-response/#orjsonresponse_1","text":"\u5982\u4e0a\u6587\u6240\u8ff0\uff0c ORJSONResponse \u662f\u4f7f\u7528 orjson \u7684\u5feb\u901f JSON \u54cd\u5e94\u3002","title":"ORJSONResponse"},{"location":"advanced/custom-response/#ujsonresponse","text":"UJSONResponse \u662f\u4f7f\u7528 ujson \u7684 JSON \u54cd\u5e94\u3002 \u8b66\u544a \u5728\u5904\u7406\u67d0\u4e9b\u8fb9\u7f18\u60c5\u51b5\u65f6\uff0c ujson \u4e0d\u5982 Python \u7684\u5185\u7f6e\u5b9e\u73b0\u90a3\u4e48\u8c28\u614e\u3002 from fastapi import FastAPI from fastapi.responses import UJSONResponse app = FastAPI () @app . get ( \"/items/\" , response_class = UJSONResponse ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u63d0\u793a ORJSONResponse \u53ef\u80fd\u66f4\u5feb\u3002","title":"UJSONResponse"},{"location":"advanced/custom-response/#redirectresponse","text":"\u8fd4\u56de HTTP \u91cd\u5b9a\u5411\u3002\u9ed8\u8ba4\u4f7f\u7528 307 \u72b6\u6001\u4ee3\u7801\uff08\u4e34\u65f6\u91cd\u5b9a\u5411\uff09\u3002 from fastapi import FastAPI from fastapi.responses import RedirectResponse app = FastAPI () @app . get ( \"/typer\" ) async def redirect_typer (): return RedirectResponse ( \"https://typer.tiangolo.com\" )","title":"RedirectResponse"},{"location":"advanced/custom-response/#streamingresponse","text":"\u91c7\u7528\u5f02\u6b65\u751f\u6210\u5668\u6216\u666e\u901a\u751f\u6210\u5668/\u8fed\u4ee3\u5668\uff0c\u7136\u540e\u6d41\u5f0f\u4f20\u8f93\u54cd\u5e94\u4e3b\u4f53\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse app = FastAPI () async def fake_video_streamer (): for i in range ( 10 ): yield b \"some fake video bytes\" @app . get ( \"/\" ) async def main (): return StreamingResponse ( fake_video_streamer ())","title":"StreamingResponse"},{"location":"advanced/custom-response/#streamingresponse_1","text":"\u521b\u5efa\u751f\u6210\u5668\u51fd\u6570\u8fed\u4ee3\u5904\u7406\u6587\u4ef6\u7c7b\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c open() \u8fd4\u56de\u7684\u5bf9\u8c61\uff09\u3002 \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\uff0c\u65e0\u9700\u5b9e\u73b0\u628a\u6587\u4ef6\u5168\u90e8\u8bfb\u53d6\u5230\u5185\u5b58\u91cc\uff0c\u53ef\u4ee5\u4f20\u9012\u751f\u6210\u5668\u51fd\u6570\u81f3 StreamingResponse \uff0c\u7136\u540e\u8fd4\u56de\u8be5\u54cd\u5e94\u3002 \u8fd9\u79cd\u65b9\u5f0f\u5305\u62ec\u8bb8\u591a\u4e0e\u4e91\u5b58\u50a8\u3001\u89c6\u9891\u5904\u7406\u7b49\u4ea4\u4e92\u7684\u652f\u6301\u5e93\u3002 from fastapi import FastAPI from fastapi.responses import StreamingResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) def main (): def iterfile (): # (1) with open ( some_file_path , mode = \"rb\" ) as file_like : # (2) yield from file_like # (3) return StreamingResponse ( iterfile (), media_type = \"video/mp4\" ) \u8fd9\u662f\u751f\u6210\u5668\u51fd\u6570\u3002\u56e0\u4e3a\u5305\u542b yield \u8bed\u53e5\uff0c\u56e0\u6b64\u5b83\u662f \u751f\u6210\u5668\u51fd\u6570 \uff1b \u4f7f\u7528 with \u4ee3\u7801\u5757\uff0c\u80fd\u786e\u4fdd\u6587\u4ef6\u7c7b\u5bf9\u8c61\u5728\u751f\u6210\u5668\u51fd\u6570\u6267\u884c\u5b8c\u6bd5\u540e\u6b63\u5e38\u5173\u95ed\u3002\u5373\u5728\u5b83\u53d1\u9001\u5b8c\u54cd\u5e94\u4e4b\u540e\uff1b yield from \u544a\u8bc9\u51fd\u6570\u8fed\u4ee3\u540d\u4e3a file_like \u7684\u5bf9\u8c61\u3002\u7136\u540e\u6ca1\u8fed\u4ee3\u4e00\u90e8\u5206\uff0c\u5c31\u4f7f\u7528\u751f\u6210\u5668\u51fd\u6570\u751f\u6210\u5bf9\u5e94\u7684\u5185\u5bb9\uff1b \u56e0\u6b64\uff0c\u5b83\u662f\u7528\u4e8e\u5728\u5185\u90e8\u628a\u4f20\u8f93 \u751f\u6210 \u5185\u5bb9\u4f20\u9012\u7ed9\u5176\u4ed6\u5bf9\u8c61\u7684\u751f\u6210\u5668\u51fd\u6570\u3002 \u7531\u6b64\uff0c\u53ef\u4ee5\u628a\u5b83\u653e\u5728 with \u4ee3\u7801\u5757\u91cc\uff0c\u8fd9\u6837\u5c31\u80fd\u786e\u4fdd\u5b8c\u6210\u4e4b\u540e\u6b63\u5e38\u5173\u95ed\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u6b64\u5904\u4f7f\u7528\u7684\u662f\u4e0d\u652f\u6301 async \u548c await \u7684\u6807\u51c6 open() \uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u666e\u901a\u51fd\u6570\u58f0\u660e\u8def\u5f84\u64cd\u4f5c\u3002","title":"\u4f7f\u7528 StreamingResponse \u5904\u7406\u6587\u4ef6\u7c7b\u5bf9\u8c61"},{"location":"advanced/custom-response/#fileresponse","text":"\u5f02\u6b65\u4f20\u8f93\u6587\u4ef6\u7684\u54cd\u5e94\u3002 \u4e0e\u5176\u4ed6\u54cd\u5e94\u7c7b\u578b\u4e0d\u540c\uff0c\u6b64\u54cd\u5e94\u63a5\u6536\u4e0d\u540c\u7ec4\u5408\u7684\u53c2\u6570\u8fdb\u884c\u5b9e\u4f8b\u5316\uff1a path - \u6d41\u5f0f\u4f20\u8f93\u6587\u4ef6\u7684\u8def\u5f84 headers - \u5305\u542b\u4efb\u610f\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\u7684\u5b57\u5178 media_type - \u5a92\u4f53\u7c7b\u578b\u7684\u5b57\u7b26\u4e32\u3002\u5982\u672a\u8bbe\u7f6e\uff0c\u5219\u4f7f\u7528\u6587\u4ef6\u540d\u6216\u8def\u5f84\u63a8\u65ad\u5a92\u4f53\u7c7b\u578b filename - \u5982\u8bbe\u7f6e\u4e86\u6587\u4ef6\u540d\uff0c\u5219\u4f1a\u5305\u542b\u5728\u54cd\u5e94\u7684 Content-Disposition \u4e2d \u6587\u4ef6\u54cd\u5e94\u5305\u542b Content-Length \u3001 Last-Modified \u3001 ETag \u7b49\u54cd\u5e94\u5934\u3002 from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" ) async def main (): return FileResponse ( some_file_path ) \u8fd8\u53ef\u4ee5\u4f7f\u7528 response_class \u53c2\u6570\uff1a from fastapi import FastAPI from fastapi.responses import FileResponse some_file_path = \"large-video-file.mp4\" app = FastAPI () @app . get ( \"/\" , response_class = FileResponse ) async def main (): return some_file_path \u672c\u4f8b\u4ece \u8def\u5f84\u64cd\u4f5c \u51fd\u6570\u4e2d\u76f4\u63a5\u8fd4\u56de\u6587\u4ef6\u8def\u5f84\u3002","title":"FileResponse"},{"location":"advanced/custom-response/#_2","text":"\u521b\u5efa FastAPI \u7c7b\u5b9e\u4f8b\u6216 APIRouter \u65f6\u80fd\u591f\u6307\u5b9a\u9ed8\u8ba4\u4f7f\u7528\u54ea\u4e2a\u54cd\u5e94\u7c7b\u3002 \u5b9a\u4e49\u9ed8\u8ba4\u54cd\u5e94\u7c7b\u7684\u53c2\u6570\u662f default_response_class \u3002 \u4e0b\u4f8b\u4e2d\uff0c FastAPI \u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u9ed8\u8ba4\u4f7f\u7528 ORJSONResponse \uff0c\u4e0d\u518d\u662f JSONResponse \u3002 from fastapi import FastAPI from fastapi.responses import ORJSONResponse app = FastAPI ( default_response_class = ORJSONResponse ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u63d0\u793a \u60a8\u4ecd\u53ef\u4ee5\u50cf\u4e4b\u524d\u90a3\u6837\u5728 \u8def\u5f84\u64cd\u4f5c \u8986\u76d6 response_class \u3002","title":"\u9ed8\u8ba4\u54cd\u5e94\u7c7b"},{"location":"advanced/custom-response/#_3","text":"\u60a8\u8fd8\u53ef\u4ee5\u5728 OpenAPI \u4e2d\u4f7f\u7528 response \u58f0\u660e\u5a92\u4f53\u7c7b\u578b\u548c\u66f4\u591a\u8be6\u7ec6\u5185\u5bb9\uff1a OpenAPI \u9644\u52a0\u54cd\u5e94 \u3002","title":"\u9644\u52a0\u6587\u6863"},{"location":"advanced/dataclasses/","text":"\u4f7f\u7528\u6570\u636e\u7c7b \u00b6 FastAPI \u57fa\u4e8e Pydantic \u6784\u5efa\uff0c\u524d\u6587\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u5982\u4f55\u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e\u8bf7\u6c42\u4e0e\u54cd\u5e94\u3002 \u4f46 FastAPI \u8fd8\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7c7b\uff08 dataclasses \uff09\uff1a from dataclasses import dataclass from typing import Union from fastapi import FastAPI @dataclass class Item : name : str price : float description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u8fd9\u8fd8\u662f\u501f\u52a9\u4e8e Pydantic \u53ca\u5176 \u5185\u7f6e\u7684 dataclasses \u3002 \u56e0\u6b64\uff0c\u5373\u4fbf\u4e0a\u8ff0\u4ee3\u7801\u6ca1\u6709\u663e\u5f0f\u4f7f\u7528 Pydantic\uff0cFastAPI \u4ecd\u4f1a\u4f7f\u7528 Pydantic \u628a\u6807\u51c6\u6570\u636e\u7c7b\u8f6c\u6362\u4e3a Pydantic \u6570\u636e\u7c7b\uff08 dataclasses \uff09\u3002 \u5e76\u4e14\uff0c\u5b83\u4ecd\u7136\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a \u6570\u636e\u9a8c\u8bc1 \u6570\u636e\u5e8f\u5217\u5316 \u6570\u636e\u5b58\u6863\u7b49 \u6570\u636e\u7c7b\u7684\u548c\u8fd0\u4f5c\u65b9\u5f0f\u4e0e Pydantic \u6a21\u578b\u76f8\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u7684\u5e95\u5c42\u4f7f\u7528\u7684\u4e5f\u662f Pydantic\u3002 \u8bf4\u660e \u6ce8\u610f\uff0c\u6570\u636e\u7c7b\u4e0d\u652f\u6301 Pydantic \u6a21\u578b\u7684\u6240\u6709\u529f\u80fd\u3002 \u56e0\u6b64\uff0c\u5f00\u53d1\u65f6\u4ecd\u9700\u8981\u4f7f\u7528 Pydantic \u6a21\u578b\u3002 \u4f46\u5982\u679c\u6570\u636e\u7c7b\u5f88\u591a\uff0c\u8fd9\u4e00\u6280\u5de7\u80fd\u7ed9 FastAPI \u5f00\u53d1 Web API \u589e\u6dfb\u4e0d\u5c11\u52a9\u529b\u3002\ud83e\udd13 response_model \u4f7f\u7528\u6570\u636e\u7c7b \u00b6 \u5728 response_model \u53c2\u6570\u4e2d\u4f7f\u7528 dataclasses \uff1a from dataclasses import dataclass , field from typing import List , Union from fastapi import FastAPI @dataclass class Item : name : str price : float tags : List [ str ] = field ( default_factory = list ) description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . get ( \"/items/next\" , response_model = Item ) async def read_next_item (): return { \"name\" : \"Island In The Moon\" , \"price\" : 12.99 , \"description\" : \"A place to be be playin' and havin' fun\" , \"tags\" : [ \"breater\" ], } \u672c\u4f8b\u628a\u6570\u636e\u7c7b\u81ea\u52a8\u8f6c\u6362\u4e3a Pydantic \u6570\u636e\u7c7b\u3002 API \u6587\u6863\u4e2d\u4e5f\u4f1a\u663e\u793a\u76f8\u5173\u6982\u56fe\uff1a \u5728\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u4e2d\u4f7f\u7528\u6570\u636e\u7c7b \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u628a dataclasses \u4e0e\u5176\u4ed6\u7c7b\u578b\u6ce8\u89e3\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u521b\u5efa\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u3002 \u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5\u4e5f\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 dataclasses \u3002\u4f8b\u5982\uff0c\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u9519\u8bef\u3002 \u672c\u4f8b\u628a\u6807\u51c6\u7684 dataclasses \u76f4\u63a5\u66ff\u6362\u4e3a pydantic.dataclasses \uff1a from dataclasses import field # (1) from typing import List , Union from fastapi import FastAPI from pydantic.dataclasses import dataclass # (2) @dataclass class Item : name : str description : Union [ str , None ] = None @dataclass class Author : name : str items : List [ Item ] = field ( default_factory = list ) # (3) app = FastAPI () @app . post ( \"/authors/ {author_id} /items/\" , response_model = Author ) # (4) async def create_author_items ( author_id : str , items : List [ Item ]): # (5) return { \"name\" : author_id , \"items\" : items } # (6) @app . get ( \"/authors/\" , response_model = List [ Author ]) # (7) def get_authors (): # (8) return [ # (9) { \"name\" : \"Breaters\" , \"items\" : [ { \"name\" : \"Island In The Moon\" , \"description\" : \"A place to be be playin' and havin' fun\" , }, { \"name\" : \"Holy Buddies\" }, ], }, { \"name\" : \"System of an Up\" , \"items\" : [ { \"name\" : \"Salt\" , \"description\" : \"The kombucha mushroom people's favorite\" , }, { \"name\" : \"Pad Thai\" }, { \"name\" : \"Lonely Night\" , \"description\" : \"The mostests lonliest nightiest of allest\" , }, ], }, ] \u672c\u4f8b\u4f9d\u7136\u8981\u4ece\u6807\u51c6\u7684 dataclasses \u4e2d\u5bfc\u5165 field \uff1b \u4f7f\u7528 pydantic.dataclasses \u76f4\u63a5\u66ff\u6362 dataclasses \uff1b Author \u6570\u636e\u7c7b\u5305\u542b Item \u6570\u636e\u7c7b\u5217\u8868\uff1b Author \u6570\u636e\u7c7b\u7528\u4e8e response_model \u53c2\u6570\uff1b \u5176\u4ed6\u5e26\u6709\u6570\u636e\u7c7b\u7684\u6807\u51c6\u7c7b\u578b\u6ce8\u89e3\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bf7\u6c42\u4f53\uff1b \u672c\u4f8b\u4f7f\u7528\u7684\u662f Item \u6570\u636e\u7c7b\u5217\u8868\uff1b \u8fd9\u884c\u4ee3\u7801\u8fd4\u56de\u7684\u662f\u5305\u542b items \u7684\u5b57\u5178\uff0c items \u662f\u6570\u636e\u7c7b\u5217\u8868\uff1b FastAPI \u4ecd\u80fd\u628a\u6570\u636e \u5e8f\u5217\u5316 \u4e3a JSON\uff1b \u8fd9\u884c\u4ee3\u7801\u4e2d\uff0c response_model \u7684\u7c7b\u578b\u6ce8\u89e3\u662f Author \u6570\u636e\u7c7b\u5217\u8868\uff1b \u518d\u4e00\u6b21\uff0c\u53ef\u4ee5\u628a dataclasses \u4e0e\u6807\u51c6\u7c7b\u578b\u6ce8\u89e3\u4e00\u8d77\u4f7f\u7528\uff1b \u6ce8\u610f\uff0c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f7f\u7528\u7684\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e0d\u662f\u5f02\u6b65\u51fd\u6570\uff1b \u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u5728 FastAPI \u4e2d\uff0c\u53ef\u4ee5\u6309\u9700\u7ec4\u5408\u666e\u901a\u51fd\u6570\u4e0e\u5f02\u6b65\u51fd\u6570\uff1b \u5982\u679c\u4e0d\u6e05\u695a\u4f55\u65f6\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff0c\u8bf7\u53c2\u9605 \u6025\u4e0d\u53ef\u5f85\uff1f \u4e00\u8282\u4e2d\u5bf9 async \u4e0e await \u7684\u8bf4\u660e\uff1b \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u7684\u4e0d\u662f\u6570\u636e\u7c7b\uff08\u867d\u7136\u5b83\u53ef\u4ee5\u8fd4\u56de\u6570\u636e\u7c7b\uff09\uff0c\u800c\u662f\u8fd4\u56de\u5185\u542b\u6570\u636e\u7684\u5b57\u5178\u5217\u8868\uff1b FastAPI \u4f7f\u7528\uff08\u5305\u542b\u6570\u636e\u7c7b\u7684\uff09 response_model \u53c2\u6570\u8f6c\u6362\u54cd\u5e94\u3002 \u628a dataclasses \u4e0e\u5176\u4ed6\u7c7b\u578b\u6ce8\u89e3\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u7ec4\u6210\u4e0d\u540c\u5f62\u5f0f\u7684\u590d\u6742\u6570\u636e\u7ed3\u6784\u3002 \u66f4\u591a\u5185\u5bb9\u8be6\u89c1\u4e0a\u8ff0\u4ee3\u7801\u5185\u7684\u6ce8\u91ca\u3002 \u6df1\u5165\u5b66\u4e60 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u628a dataclasses \u4e0e\u5176\u4ed6 Pydantic \u6a21\u578b\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u7ee7\u627f\u5408\u5e76\u7684\u6a21\u578b\uff0c\u628a\u5b83\u4eec\u5305\u542b\u5728\u60a8\u81ea\u5df1\u7684\u6a21\u578b\u91cc\u3002 \u8be6\u89c1 Pydantic \u5b98\u6863 - \u6570\u636e\u7c7b \u3002 \u7248\u672c \u00b6 \u672c\u7ae0\u5185\u5bb9\u81ea FastAPI 0.67.0 \u7248\u8d77\u751f\u6548\u3002\ud83d\udd16","title":"\u4f7f\u7528\u6570\u636e\u7c7b"},{"location":"advanced/dataclasses/#_1","text":"FastAPI \u57fa\u4e8e Pydantic \u6784\u5efa\uff0c\u524d\u6587\u5df2\u7ecf\u4ecb\u7ecd\u8fc7\u5982\u4f55\u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e\u8bf7\u6c42\u4e0e\u54cd\u5e94\u3002 \u4f46 FastAPI \u8fd8\u53ef\u4ee5\u4f7f\u7528\u6570\u636e\u7c7b\uff08 dataclasses \uff09\uff1a from dataclasses import dataclass from typing import Union from fastapi import FastAPI @dataclass class Item : name : str price : float description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u8fd9\u8fd8\u662f\u501f\u52a9\u4e8e Pydantic \u53ca\u5176 \u5185\u7f6e\u7684 dataclasses \u3002 \u56e0\u6b64\uff0c\u5373\u4fbf\u4e0a\u8ff0\u4ee3\u7801\u6ca1\u6709\u663e\u5f0f\u4f7f\u7528 Pydantic\uff0cFastAPI \u4ecd\u4f1a\u4f7f\u7528 Pydantic \u628a\u6807\u51c6\u6570\u636e\u7c7b\u8f6c\u6362\u4e3a Pydantic \u6570\u636e\u7c7b\uff08 dataclasses \uff09\u3002 \u5e76\u4e14\uff0c\u5b83\u4ecd\u7136\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a \u6570\u636e\u9a8c\u8bc1 \u6570\u636e\u5e8f\u5217\u5316 \u6570\u636e\u5b58\u6863\u7b49 \u6570\u636e\u7c7b\u7684\u548c\u8fd0\u4f5c\u65b9\u5f0f\u4e0e Pydantic \u6a21\u578b\u76f8\u540c\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u7684\u5e95\u5c42\u4f7f\u7528\u7684\u4e5f\u662f Pydantic\u3002 \u8bf4\u660e \u6ce8\u610f\uff0c\u6570\u636e\u7c7b\u4e0d\u652f\u6301 Pydantic \u6a21\u578b\u7684\u6240\u6709\u529f\u80fd\u3002 \u56e0\u6b64\uff0c\u5f00\u53d1\u65f6\u4ecd\u9700\u8981\u4f7f\u7528 Pydantic \u6a21\u578b\u3002 \u4f46\u5982\u679c\u6570\u636e\u7c7b\u5f88\u591a\uff0c\u8fd9\u4e00\u6280\u5de7\u80fd\u7ed9 FastAPI \u5f00\u53d1 Web API \u589e\u6dfb\u4e0d\u5c11\u52a9\u529b\u3002\ud83e\udd13","title":"\u4f7f\u7528\u6570\u636e\u7c7b"},{"location":"advanced/dataclasses/#response_model","text":"\u5728 response_model \u53c2\u6570\u4e2d\u4f7f\u7528 dataclasses \uff1a from dataclasses import dataclass , field from typing import List , Union from fastapi import FastAPI @dataclass class Item : name : str price : float tags : List [ str ] = field ( default_factory = list ) description : Union [ str , None ] = None tax : Union [ float , None ] = None app = FastAPI () @app . get ( \"/items/next\" , response_model = Item ) async def read_next_item (): return { \"name\" : \"Island In The Moon\" , \"price\" : 12.99 , \"description\" : \"A place to be be playin' and havin' fun\" , \"tags\" : [ \"breater\" ], } \u672c\u4f8b\u628a\u6570\u636e\u7c7b\u81ea\u52a8\u8f6c\u6362\u4e3a Pydantic \u6570\u636e\u7c7b\u3002 API \u6587\u6863\u4e2d\u4e5f\u4f1a\u663e\u793a\u76f8\u5173\u6982\u56fe\uff1a","title":"response_model \u4f7f\u7528\u6570\u636e\u7c7b"},{"location":"advanced/dataclasses/#_2","text":"\u60a8\u8fd8\u53ef\u4ee5\u628a dataclasses \u4e0e\u5176\u4ed6\u7c7b\u578b\u6ce8\u89e3\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u521b\u5efa\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u3002 \u8fd8\u6709\u4e00\u4e9b\u60c5\u51b5\u4e5f\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 dataclasses \u3002\u4f8b\u5982\uff0c\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u9519\u8bef\u3002 \u672c\u4f8b\u628a\u6807\u51c6\u7684 dataclasses \u76f4\u63a5\u66ff\u6362\u4e3a pydantic.dataclasses \uff1a from dataclasses import field # (1) from typing import List , Union from fastapi import FastAPI from pydantic.dataclasses import dataclass # (2) @dataclass class Item : name : str description : Union [ str , None ] = None @dataclass class Author : name : str items : List [ Item ] = field ( default_factory = list ) # (3) app = FastAPI () @app . post ( \"/authors/ {author_id} /items/\" , response_model = Author ) # (4) async def create_author_items ( author_id : str , items : List [ Item ]): # (5) return { \"name\" : author_id , \"items\" : items } # (6) @app . get ( \"/authors/\" , response_model = List [ Author ]) # (7) def get_authors (): # (8) return [ # (9) { \"name\" : \"Breaters\" , \"items\" : [ { \"name\" : \"Island In The Moon\" , \"description\" : \"A place to be be playin' and havin' fun\" , }, { \"name\" : \"Holy Buddies\" }, ], }, { \"name\" : \"System of an Up\" , \"items\" : [ { \"name\" : \"Salt\" , \"description\" : \"The kombucha mushroom people's favorite\" , }, { \"name\" : \"Pad Thai\" }, { \"name\" : \"Lonely Night\" , \"description\" : \"The mostests lonliest nightiest of allest\" , }, ], }, ] \u672c\u4f8b\u4f9d\u7136\u8981\u4ece\u6807\u51c6\u7684 dataclasses \u4e2d\u5bfc\u5165 field \uff1b \u4f7f\u7528 pydantic.dataclasses \u76f4\u63a5\u66ff\u6362 dataclasses \uff1b Author \u6570\u636e\u7c7b\u5305\u542b Item \u6570\u636e\u7c7b\u5217\u8868\uff1b Author \u6570\u636e\u7c7b\u7528\u4e8e response_model \u53c2\u6570\uff1b \u5176\u4ed6\u5e26\u6709\u6570\u636e\u7c7b\u7684\u6807\u51c6\u7c7b\u578b\u6ce8\u89e3\u4e5f\u53ef\u4ee5\u4f5c\u4e3a\u8bf7\u6c42\u4f53\uff1b \u672c\u4f8b\u4f7f\u7528\u7684\u662f Item \u6570\u636e\u7c7b\u5217\u8868\uff1b \u8fd9\u884c\u4ee3\u7801\u8fd4\u56de\u7684\u662f\u5305\u542b items \u7684\u5b57\u5178\uff0c items \u662f\u6570\u636e\u7c7b\u5217\u8868\uff1b FastAPI \u4ecd\u80fd\u628a\u6570\u636e \u5e8f\u5217\u5316 \u4e3a JSON\uff1b \u8fd9\u884c\u4ee3\u7801\u4e2d\uff0c response_model \u7684\u7c7b\u578b\u6ce8\u89e3\u662f Author \u6570\u636e\u7c7b\u5217\u8868\uff1b \u518d\u4e00\u6b21\uff0c\u53ef\u4ee5\u628a dataclasses \u4e0e\u6807\u51c6\u7c7b\u578b\u6ce8\u89e3\u4e00\u8d77\u4f7f\u7528\uff1b \u6ce8\u610f\uff0c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f7f\u7528\u7684\u662f\u666e\u901a\u51fd\u6570\uff0c\u4e0d\u662f\u5f02\u6b65\u51fd\u6570\uff1b \u4e0e\u5f80\u5e38\u4e00\u6837\uff0c\u5728 FastAPI \u4e2d\uff0c\u53ef\u4ee5\u6309\u9700\u7ec4\u5408\u666e\u901a\u51fd\u6570\u4e0e\u5f02\u6b65\u51fd\u6570\uff1b \u5982\u679c\u4e0d\u6e05\u695a\u4f55\u65f6\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\uff0c\u8bf7\u53c2\u9605 \u6025\u4e0d\u53ef\u5f85\uff1f \u4e00\u8282\u4e2d\u5bf9 async \u4e0e await \u7684\u8bf4\u660e\uff1b \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u7684\u4e0d\u662f\u6570\u636e\u7c7b\uff08\u867d\u7136\u5b83\u53ef\u4ee5\u8fd4\u56de\u6570\u636e\u7c7b\uff09\uff0c\u800c\u662f\u8fd4\u56de\u5185\u542b\u6570\u636e\u7684\u5b57\u5178\u5217\u8868\uff1b FastAPI \u4f7f\u7528\uff08\u5305\u542b\u6570\u636e\u7c7b\u7684\uff09 response_model \u53c2\u6570\u8f6c\u6362\u54cd\u5e94\u3002 \u628a dataclasses \u4e0e\u5176\u4ed6\u7c7b\u578b\u6ce8\u89e3\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u53ef\u4ee5\u7ec4\u6210\u4e0d\u540c\u5f62\u5f0f\u7684\u590d\u6742\u6570\u636e\u7ed3\u6784\u3002 \u66f4\u591a\u5185\u5bb9\u8be6\u89c1\u4e0a\u8ff0\u4ee3\u7801\u5185\u7684\u6ce8\u91ca\u3002","title":"\u5728\u5d4c\u5957\u6570\u636e\u7ed3\u6784\u4e2d\u4f7f\u7528\u6570\u636e\u7c7b"},{"location":"advanced/dataclasses/#_3","text":"\u60a8\u8fd8\u53ef\u4ee5\u628a dataclasses \u4e0e\u5176\u4ed6 Pydantic \u6a21\u578b\u7ec4\u5408\u5728\u4e00\u8d77\uff0c\u7ee7\u627f\u5408\u5e76\u7684\u6a21\u578b\uff0c\u628a\u5b83\u4eec\u5305\u542b\u5728\u60a8\u81ea\u5df1\u7684\u6a21\u578b\u91cc\u3002 \u8be6\u89c1 Pydantic \u5b98\u6863 - \u6570\u636e\u7c7b \u3002","title":"\u6df1\u5165\u5b66\u4e60"},{"location":"advanced/dataclasses/#_4","text":"\u672c\u7ae0\u5185\u5bb9\u81ea FastAPI 0.67.0 \u7248\u8d77\u751f\u6548\u3002\ud83d\udd16","title":"\u7248\u672c"},{"location":"advanced/events/","text":"\u4e8b\u4ef6\uff1a\u542f\u52a8 - \u5173\u95ed \u00b6 FastAPI \u652f\u6301\u5b9a\u4e49\u5728\u5e94\u7528\u542f\u52a8\u524d\uff0c\u6216\u5e94\u7528\u5173\u95ed\u540e\u6267\u884c\u7684\u4e8b\u4ef6\u5904\u7406\u5668\uff08\u51fd\u6570\uff09\u3002 \u4e8b\u4ef6\u51fd\u6570\u65e2\u53ef\u4ee5\u58f0\u660e\u4e3a\u5f02\u6b65\u51fd\u6570\uff08 async def \uff09\uff0c\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e3a\u666e\u901a\u51fd\u6570\uff08 def \uff09\u3002 \u8b66\u544a FastAPI \u53ea\u6267\u884c\u4e3b\u5e94\u7528\u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u4e0d\u6267\u884c \u5b50\u5e94\u7528 - \u6302\u8f7d \u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u3002 startup \u4e8b\u4ef6 \u00b6 \u4f7f\u7528 startup \u4e8b\u4ef6\u58f0\u660e app \u542f\u52a8\u524d\u8fd0\u884c\u7684\u51fd\u6570\uff1a from fastapi import FastAPI app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] \u672c\u4f8b\u4e2d\uff0c startup \u4e8b\u4ef6\u5904\u7406\u5668\u51fd\u6570\u4e3a\u9879\u76ee\u6570\u636e\u5e93\uff08\u53ea\u662f \u5b57\u5178 \uff09\u63d0\u4f9b\u4e86\u4e00\u4e9b\u521d\u59cb\u503c\u3002 FastAPI \u652f\u6301\u591a\u4e2a\u4e8b\u4ef6\u5904\u7406\u5668\u51fd\u6570\u3002 \u53ea\u6709\u6240\u6709 startup \u4e8b\u4ef6\u5904\u7406\u5668\u8fd0\u884c\u5b8c\u6bd5\uff0c FastAPI \u5e94\u7528\u624d\u5f00\u59cb\u63a5\u6536\u8bf7\u6c42\u3002 shutdown \u4e8b\u4ef6 \u00b6 \u4f7f\u7528 shutdown \u4e8b\u4ef6\u58f0\u660e app \u5173\u95ed\u65f6\u8fd0\u884c\u7684\u51fd\u6570\uff1a from fastapi import FastAPI app = FastAPI () @app . on_event ( \"shutdown\" ) def shutdown_event (): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( \"Application shutdown\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \u6b64\u5904\uff0c shutdown \u4e8b\u4ef6\u5904\u7406\u5668\u51fd\u6570\u5728 log.txt \u4e2d\u5199\u5165\u4e00\u884c\u6587\u672c Application shutdown \u3002 \u8bf4\u660e open() \u51fd\u6570\u4e2d\uff0c mode=\"a\" \u6307\u7684\u662f \u8ffd\u52a0 \u3002\u56e0\u6b64\u8fd9\u884c\u6587\u672c\u4f1a\u6dfb\u52a0\u5728\u6587\u4ef6\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\uff0c\u4e0d\u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u5185\u5bb9\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u672c\u4f8b\u4f7f\u7528 Python open() \u6807\u51c6\u51fd\u6570\u4e0e\u6587\u4ef6\u4ea4\u4e92\u3002 \u8fd9\u4e2a\u51fd\u6570\u6267\u884c I/O\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u64cd\u4f5c\uff0c\u9700\u8981\u7b49\u5f85\u5185\u5bb9\u5199\u8fdb\u78c1\u76d8\u3002 \u4f46 open() \u51fd\u6570\u4e0d\u652f\u6301\u4f7f\u7528 async \u4e0e await \u3002 \u56e0\u6b64\uff0c\u58f0\u660e\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u8981\u4f7f\u7528 def \uff0c\u4e0d\u80fd\u4f7f\u7528 asnyc def \u3002 \u8bf4\u660e \u6709\u5173\u4e8b\u4ef6\u5904\u7406\u5668\u7684\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Starlette \u5b98\u6863 - \u4e8b\u4ef6 \u3002","title":"\u4e8b\u4ef6\uff1a\u542f\u52a8 - \u5173\u95ed"},{"location":"advanced/events/#-","text":"FastAPI \u652f\u6301\u5b9a\u4e49\u5728\u5e94\u7528\u542f\u52a8\u524d\uff0c\u6216\u5e94\u7528\u5173\u95ed\u540e\u6267\u884c\u7684\u4e8b\u4ef6\u5904\u7406\u5668\uff08\u51fd\u6570\uff09\u3002 \u4e8b\u4ef6\u51fd\u6570\u65e2\u53ef\u4ee5\u58f0\u660e\u4e3a\u5f02\u6b65\u51fd\u6570\uff08 async def \uff09\uff0c\u4e5f\u53ef\u4ee5\u58f0\u660e\u4e3a\u666e\u901a\u51fd\u6570\uff08 def \uff09\u3002 \u8b66\u544a FastAPI \u53ea\u6267\u884c\u4e3b\u5e94\u7528\u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u5668\uff0c\u4e0d\u6267\u884c \u5b50\u5e94\u7528 - \u6302\u8f7d \u4e2d\u7684\u4e8b\u4ef6\u5904\u7406\u5668\u3002","title":"\u4e8b\u4ef6\uff1a\u542f\u52a8 - \u5173\u95ed"},{"location":"advanced/events/#startup","text":"\u4f7f\u7528 startup \u4e8b\u4ef6\u58f0\u660e app \u542f\u52a8\u524d\u8fd0\u884c\u7684\u51fd\u6570\uff1a from fastapi import FastAPI app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] \u672c\u4f8b\u4e2d\uff0c startup \u4e8b\u4ef6\u5904\u7406\u5668\u51fd\u6570\u4e3a\u9879\u76ee\u6570\u636e\u5e93\uff08\u53ea\u662f \u5b57\u5178 \uff09\u63d0\u4f9b\u4e86\u4e00\u4e9b\u521d\u59cb\u503c\u3002 FastAPI \u652f\u6301\u591a\u4e2a\u4e8b\u4ef6\u5904\u7406\u5668\u51fd\u6570\u3002 \u53ea\u6709\u6240\u6709 startup \u4e8b\u4ef6\u5904\u7406\u5668\u8fd0\u884c\u5b8c\u6bd5\uff0c FastAPI \u5e94\u7528\u624d\u5f00\u59cb\u63a5\u6536\u8bf7\u6c42\u3002","title":"startup \u4e8b\u4ef6"},{"location":"advanced/events/#shutdown","text":"\u4f7f\u7528 shutdown \u4e8b\u4ef6\u58f0\u660e app \u5173\u95ed\u65f6\u8fd0\u884c\u7684\u51fd\u6570\uff1a from fastapi import FastAPI app = FastAPI () @app . on_event ( \"shutdown\" ) def shutdown_event (): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( \"Application shutdown\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \u6b64\u5904\uff0c shutdown \u4e8b\u4ef6\u5904\u7406\u5668\u51fd\u6570\u5728 log.txt \u4e2d\u5199\u5165\u4e00\u884c\u6587\u672c Application shutdown \u3002 \u8bf4\u660e open() \u51fd\u6570\u4e2d\uff0c mode=\"a\" \u6307\u7684\u662f \u8ffd\u52a0 \u3002\u56e0\u6b64\u8fd9\u884c\u6587\u672c\u4f1a\u6dfb\u52a0\u5728\u6587\u4ef6\u5df2\u6709\u5185\u5bb9\u4e4b\u540e\uff0c\u4e0d\u4f1a\u8986\u76d6\u4e4b\u524d\u7684\u5185\u5bb9\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u672c\u4f8b\u4f7f\u7528 Python open() \u6807\u51c6\u51fd\u6570\u4e0e\u6587\u4ef6\u4ea4\u4e92\u3002 \u8fd9\u4e2a\u51fd\u6570\u6267\u884c I/O\uff08\u8f93\u5165/\u8f93\u51fa\uff09\u64cd\u4f5c\uff0c\u9700\u8981\u7b49\u5f85\u5185\u5bb9\u5199\u8fdb\u78c1\u76d8\u3002 \u4f46 open() \u51fd\u6570\u4e0d\u652f\u6301\u4f7f\u7528 async \u4e0e await \u3002 \u56e0\u6b64\uff0c\u58f0\u660e\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\u8981\u4f7f\u7528 def \uff0c\u4e0d\u80fd\u4f7f\u7528 asnyc def \u3002 \u8bf4\u660e \u6709\u5173\u4e8b\u4ef6\u5904\u7406\u5668\u7684\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Starlette \u5b98\u6863 - \u4e8b\u4ef6 \u3002","title":"shutdown \u4e8b\u4ef6"},{"location":"advanced/extending-openapi/","text":"\u6269\u5c55 OpenAPI \u00b6 \u8b66\u544a \u672c\u7ae0\u4ecb\u7ecd\u7684\u529f\u80fd\u8f83\u96be\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7\u9605\u8bfb\u3002 \u5982\u679c\u60a8\u521a\u5f00\u59cb\u5b66\u4e60 \u7528\u6237\u6307\u5357 \uff0c\u6700\u597d\u8df3\u8fc7\u672c\u7ae0\u3002 \u5982\u679c\u60a8\u786e\u5b9a\u8981\u4fee\u6539 OpenAPI \u6982\u56fe\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002 \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 OpenAPI \u6982\u56fe\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4fee\u6539 OpenAPI \u6982\u56fe\u3002 \u5e38\u89c4\u6d41\u7a0b \u00b6 \u5e38\u89c4\uff08\u9ed8\u8ba4\uff09\u6d41\u7a0b\u5982\u4e0b\u3002 FastAPI \u5e94\u7528\uff08\u5b9e\u4f8b\uff09\u63d0\u4f9b\u4e86\u8fd4\u56de OpenAPI \u6982\u56fe\u7684 .openapi() \u65b9\u6cd5\u3002 \u4f5c\u4e3a\u5e94\u7528\u5bf9\u8c61\u521b\u5efa\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u8981\u6ce8\u518c /openapi.json \uff08\u6216\u5176\u4ed6\u4e3a openapi_url \u8bbe\u7f6e\u7684\u4efb\u610f\u5185\u5bb9\uff09 \u8def\u5f84\u64cd\u4f5c \u3002 \u5b83\u53ea\u8fd4\u56de\u5305\u542b\u5e94\u7528\u7684 .openapi() \u65b9\u6cd5\u64cd\u4f5c\u7ed3\u679c\u7684 JSON \u54cd\u5e94\u3002 \u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c .openapi() \u53ea\u662f\u68c0\u67e5 .openapi_schema \u5c5e\u6027\u662f\u5426\u5305\u542b\u5185\u5bb9\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d\u7684\u5185\u5bb9\u3002 \u5982\u679c .openapi_schema \u5c5e\u6027\u6ca1\u6709\u5185\u5bb9\uff0c\u8be5\u65b9\u6cd5\u5c31\u4f7f\u7528 fastapi.openapi.utils.get_openapi \u5de5\u5177\u51fd\u6570\u751f\u6210\u5185\u5bb9\u3002 get_openapi() \u51fd\u6570\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a title \uff1a\u6587\u6863\u4e2d\u663e\u793a\u7684 OpenAPI \u6807\u9898 version \uff1aAPI \u7684\u7248\u672c\u53f7\uff0c\u4f8b\u5982 2.5.0 openapi_version \uff1a OpenAPI \u89c4\u8303\u7684\u7248\u672c\u53f7\uff0c\u9ed8\u8ba4\u4e3a\u6700\u65b0\u7248\uff1a 3.0.2 description \uff1aAPI \u7684\u63cf\u8ff0\u8bf4\u660e routes \uff1a\u8def\u7531\u5217\u8868\uff0c\u6bcf\u4e2a\u8def\u7531\u90fd\u662f\u6ce8\u518c\u7684 \u8def\u5f84\u64cd\u4f5c \u3002\u8fd9\u4e9b\u8def\u7531\u662f\u4ece app.routes \u4e2d\u63d0\u53d6\u7684\u3002 \u8986\u76d6\u9ed8\u8ba4\u503c \u00b6 get_openapi() \u5de5\u5177\u51fd\u6570\u8fd8\u53ef\u4ee5\u7528\u4e8e\u751f\u6210 OpenAPI \u6982\u56fe\uff0c\u5e76\u5229\u7528\u4e0a\u8ff0\u4fe1\u606f\u53c2\u6570\u8986\u76d6\u6307\u5b9a\u7684\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 ReDoc \u7684 OpenAPI \u6269\u5c55\u6dfb\u52a0\u81ea\u5b9a\u4e49 Logo \u3002 \u5e38\u89c4 FastAPI \u00b6 \u9996\u5148\uff0c\u7f16\u5199\u5e38\u89c4 FastAPI \u5e94\u7528\uff1a from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi \u751f\u6210 OpenAPI \u6982\u56fe \u00b6 \u7136\u540e\uff0c\u5728 custom_openapi() \u51fd\u6570\u91cc\u4f7f\u7528 get_openapi() \u5de5\u5177\u51fd\u6570\u751f\u6210 OpenAPI \u6982\u56fe\uff1a from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi \u4fee\u6539 OpenAPI \u6982\u56fe \u00b6 \u6dfb\u52a0 ReDoc \u6269\u5c55\u4fe1\u606f\uff0c\u4e3a OpenAPI \u6982\u56fe\u91cc\u7684 info \u5bf9\u8c61 \u6dfb\u52a0\u81ea\u5b9a\u4e49 x-logo \uff1a from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi \u7f13\u5b58 OpenAPI \u6982\u56fe \u00b6 \u628a .openapi_schema \u5c5e\u6027\u5f53\u4f5c \u7f13\u5b58 \uff0c\u5b58\u50a8\u751f\u6210\u7684\u6982\u56fe\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c FastAPI \u5e94\u7528\u4e0d\u5fc5\u5728\u7528\u6237\u6bcf\u6b21\u6253\u5f00 API \u6587\u6863\u65f6\u53cd\u590d\u751f\u6210\u6982\u56fe\u3002 \u53ea\u9700\u751f\u6210\u4e00\u6b21\uff0c\u4e0b\u6b21\u8bf7\u6c42\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f13\u5b58\u7684\u6982\u56fe\u3002 from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi \u8986\u76d6\u65b9\u6cd5 \u00b6 \u7528\u65b0\u51fd\u6570\u66ff\u6362 .openapi() \u65b9\u6cd5\u3002 from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi \u67e5\u770b\u6587\u6863 \u00b6 \u6253\u5f00 http://127.0.0.1:8000/redoc \uff0c\u67e5\u770b\u81ea\u5b9a\u4e49 Logo\uff08\u672c\u4f8b\u4e2d\u662f FastAPI \u7684 Logo\uff09\uff1a \u6587\u6863 JavaScript \u4e0e CSS \u81ea\u6258\u7ba1 \u00b6 FastAPI \u5185\u7f6e\u4e86 Swagger UI \u548c ReDoc \u6587\u6863\uff0c\u8fd9\u4e24\u79cd\u6587\u6863\u90fd\u9700\u8981\u8c03\u7528 JavaScript \u4e0e CSS \u6587\u4ef6\u3002 \u8fd9\u4e9b\u6587\u4ef6\u9ed8\u8ba4\u7531 CDN \u63d0\u4f9b\u652f\u6301\u670d\u52a1\u3002 \u4f46\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8bbe\u7f6e\u6307\u5b9a\u7684 CDN \u6216\u81ea\u884c\u63d0\u4f9b\u6587\u4ef6\u670d\u52a1\u3002 \u8fd9\u79cd\u505a\u6cd5\u5f88\u5e38\u7528\uff0c\u4f8b\u5982\uff0c\u5728\u6ca1\u6709\u8054\u7f51\u6216\u672c\u5730\u5c40\u57df\u7f51\u65f6\u4e5f\u80fd\u8ba9\u5e94\u7528\u5728\u79bb\u7ebf\u72b6\u6001\u4e0b\u6b63\u5e38\u8fd0\u884c\u3002 \u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u4e3a FastAPI \u5e94\u7528\u63d0\u4f9b\u6587\u4ef6\u81ea\u6258\u7ba1\u670d\u52a1\uff0c\u5e76\u8bbe\u7f6e\u6587\u6863\u4f7f\u7528\u8fd9\u4e9b\u6587\u4ef6\u3002 \u9879\u76ee\u6587\u4ef6\u67b6\u6784 \u00b6 \u5047\u8bbe\u9879\u76ee\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5b58\u50a8\u9759\u6001\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u3002 \u65b0\u7684\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static/ \u4e0b\u8f7d\u6587\u4ef6 \u00b6 \u4e0b\u8f7d\u6587\u6863\u6240\u9700\u7684\u9759\u6001\u6587\u4ef6\uff0c\u628a\u6587\u4ef6\u653e\u5230 static/ \u6587\u4ef6\u5939\u91cc\u3002 \u53f3\u952e\u70b9\u51fb\u94fe\u63a5\uff0c\u9009\u62e9 \u53e6\u5b58\u4e3a... \u3002 Swagger UI \u4f7f\u7528\u5982\u4e0b\u6587\u4ef6\uff1a swagger-ui-bundle.js swagger-ui.css ReDoc \u4f7f\u7528\u5982\u4e0b\u6587\u4ef6\uff1a redoc.standalone.js \u4fdd\u5b58\u597d\u540e\uff0c\u6587\u4ef6\u67b6\u6784\u6240\u793a\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static \u251c\u2500\u2500 redoc.standalone.js \u251c\u2500\u2500 swagger-ui-bundle.js \u2514\u2500\u2500 swagger-ui.css \u5b89\u88c5 aiofiles \u00b6 \u73b0\u5728\uff0c\u5b89\u88c5 aiofiles \uff1a $ pip install aiofiles ---> 100% \u9759\u6001\u6587\u4ef6\u670d\u52a1 \u00b6 \u5bfc\u5165 StaticFiles \u5728\u6307\u5b9a\u8def\u5f84\u4e0b \u6302\u8f7d StaticFiles() \u5b9e\u4f8b from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } \u6d4b\u8bd5\u9759\u6001\u6587\u4ef6 \u00b6 \u542f\u52a8\u5e94\u7528\uff0c\u6253\u5f00 http://127.0.0.1:8000/static/redoc.standalone.js\u3002 \u5c31\u80fd\u770b\u5230 ReDoc \u7684 JavaScript \u6587\u4ef6\u3002 \u8be5\u6587\u4ef6\u5f00\u5934\u5982\u4e0b\uff1a /*! * ReDoc - OpenAPI/Swagger-generated API Reference Documentation * ------------------------------------------------------------- * Version: \"2.0.0-rc.18\" * Repo: https://github.com/Redocly/redoc */ ! function ( e , t ){ \"object\" == typeof exports && \"object\" == typeof m ... \u80fd\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5c31\u8868\u793a FastAPI \u5e94\u7528\u80fd\u63d0\u4f9b\u9759\u6001\u6587\u4ef6\u670d\u52a1\uff0c\u5e76\u4e14\u6587\u6863\u8981\u8c03\u7528\u7684\u9759\u6001\u6587\u4ef6\u653e\u5230\u4e86\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u9759\u6001\u6587\u4ef6\u914d\u7f6e\u6587\u6863\u3002 \u7981\u7528 API \u6587\u6863 \u00b6 \u7b2c\u4e00\u6b65\u662f\u7981\u7528 API \u6587\u6863\uff0c\u5c31\u662f\u4f7f\u7528 CDN \u7684\u9ed8\u8ba4\u6587\u6863\u3002 \u521b\u5efa FastAPI \u5e94\u7528\u65f6\u628a\u6587\u6863\u7684 URL \u8bbe\u7f6e\u4e3a None \u5373\u53ef\u7981\u7528\u9ed8\u8ba4\u6587\u6863\uff1a from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } \u6dfb\u52a0\u81ea\u5b9a\u4e49\u6587\u6863 \u00b6 \u73b0\u5728\uff0c\u521b\u5efa\u81ea\u5b9a\u4e49\u6587\u6863\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u5bfc\u5165 FastAPI \u5185\u90e8\u51fd\u6570\u4e3a\u6587\u6863\u521b\u5efa HTML \u9875\u9762\uff0c\u5e76\u628a\u6240\u9700\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e9b\u51fd\u6570\uff1a openapi_url \uff1a API \u6587\u6863\u83b7\u53d6 OpenAPI \u6982\u56fe\u7684 HTML \u9875\u9762\uff0c\u6b64\u5904\u53ef\u4f7f\u7528 app.openapi_url title \uff1aAPI \u7684\u6807\u9898 oauth2_redirect_url \uff1a\u6b64\u5904\u4f7f\u7528 app.swagger_ui_oauth2_redirect_url \u4f5c\u4e3a\u9ed8\u8ba4\u503c swagger_js_url \uff1aSwagger UI \u6587\u6863\u6240\u9700 JavaScript \u6587\u4ef6\u7684 URL\uff0c\u5373\u4e3a\u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\u6587\u4ef6 swagger_css_url \uff1aSwagger UI \u6587\u6863\u6240\u9700 CSS \u6587\u4ef6\u7684 URL\uff0c\u5373\u4e3a\u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\u6587\u4ef6 \u6dfb\u52a0 ReDoc \u6587\u6863\u7684\u65b9\u5f0f\u4e0e\u6b64\u7c7b\u4f3c\u2026\u2026 from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } \u63d0\u793a swagger_ui_redirect \u7684 \u8def\u5f84\u64cd\u4f5c \u662f OAuth2 \u7684\u8f85\u52a9\u51fd\u6570\u3002 \u96c6\u6210 API \u4e0e OAuth2 \u7b2c\u4e09\u65b9\u5e94\u7528\u65f6\uff0c\u60a8\u80fd\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528\u8bf7\u6c42\u51ed\u8bc1\u8fd4\u56de API \u6587\u6863\uff0c\u5e76\u4f7f\u7528\u771f\u6b63\u7684 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u4e0e API \u6587\u6863\u8fdb\u884c\u4ea4\u4e92\u64cd\u4f5c\u3002 Swagger UI \u5728\u540e\u53f0\u8fdb\u884c\u5904\u7406\uff0c\u4f46\u5b83\u9700\u8981\u8fd9\u4e2a \u91cd\u5b9a\u5411 \u8f85\u52a9\u51fd\u6570\u3002 \u521b\u5efa\u6d4b\u8bd5 \u8def\u5f84\u64cd\u4f5c \u00b6 \u73b0\u5728\uff0c\u6d4b\u8bd5\u5404\u9879\u529f\u80fd\u662f\u5426\u80fd\u987a\u5229\u8fd0\u884c\u3002\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \uff1a from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } \u6d4b\u8bd5\u6587\u6863 \u00b6 \u65ad\u5f00 WiFi \u8fde\u63a5\uff0c\u6253\u5f00 http://127.0.0.1:8000/docs\uff0c\u5237\u65b0\u9875\u9762\u3002 \u73b0\u5728\uff0c\u5c31\u7b97\u6ca1\u6709\u8054\u7f51\u4e5f\u80fd\u67e5\u770b\u5e76\u64cd\u4f5c API \u6587\u6863\u3002","title":"\u6269\u5c55 OpenAPI"},{"location":"advanced/extending-openapi/#openapi","text":"\u8b66\u544a \u672c\u7ae0\u4ecb\u7ecd\u7684\u529f\u80fd\u8f83\u96be\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7\u9605\u8bfb\u3002 \u5982\u679c\u60a8\u521a\u5f00\u59cb\u5b66\u4e60 \u7528\u6237\u6307\u5357 \uff0c\u6700\u597d\u8df3\u8fc7\u672c\u7ae0\u3002 \u5982\u679c\u60a8\u786e\u5b9a\u8981\u4fee\u6539 OpenAPI \u6982\u56fe\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002 \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u9700\u8981\u4fee\u6539 OpenAPI \u6982\u56fe\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4fee\u6539 OpenAPI \u6982\u56fe\u3002","title":"\u6269\u5c55 OpenAPI"},{"location":"advanced/extending-openapi/#_1","text":"\u5e38\u89c4\uff08\u9ed8\u8ba4\uff09\u6d41\u7a0b\u5982\u4e0b\u3002 FastAPI \u5e94\u7528\uff08\u5b9e\u4f8b\uff09\u63d0\u4f9b\u4e86\u8fd4\u56de OpenAPI \u6982\u56fe\u7684 .openapi() \u65b9\u6cd5\u3002 \u4f5c\u4e3a\u5e94\u7528\u5bf9\u8c61\u521b\u5efa\u7684\u7ec4\u6210\u90e8\u5206\uff0c\u8981\u6ce8\u518c /openapi.json \uff08\u6216\u5176\u4ed6\u4e3a openapi_url \u8bbe\u7f6e\u7684\u4efb\u610f\u5185\u5bb9\uff09 \u8def\u5f84\u64cd\u4f5c \u3002 \u5b83\u53ea\u8fd4\u56de\u5305\u542b\u5e94\u7528\u7684 .openapi() \u65b9\u6cd5\u64cd\u4f5c\u7ed3\u679c\u7684 JSON \u54cd\u5e94\u3002 \u4f46\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c .openapi() \u53ea\u662f\u68c0\u67e5 .openapi_schema \u5c5e\u6027\u662f\u5426\u5305\u542b\u5185\u5bb9\uff0c\u5e76\u8fd4\u56de\u5176\u4e2d\u7684\u5185\u5bb9\u3002 \u5982\u679c .openapi_schema \u5c5e\u6027\u6ca1\u6709\u5185\u5bb9\uff0c\u8be5\u65b9\u6cd5\u5c31\u4f7f\u7528 fastapi.openapi.utils.get_openapi \u5de5\u5177\u51fd\u6570\u751f\u6210\u5185\u5bb9\u3002 get_openapi() \u51fd\u6570\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a title \uff1a\u6587\u6863\u4e2d\u663e\u793a\u7684 OpenAPI \u6807\u9898 version \uff1aAPI \u7684\u7248\u672c\u53f7\uff0c\u4f8b\u5982 2.5.0 openapi_version \uff1a OpenAPI \u89c4\u8303\u7684\u7248\u672c\u53f7\uff0c\u9ed8\u8ba4\u4e3a\u6700\u65b0\u7248\uff1a 3.0.2 description \uff1aAPI \u7684\u63cf\u8ff0\u8bf4\u660e routes \uff1a\u8def\u7531\u5217\u8868\uff0c\u6bcf\u4e2a\u8def\u7531\u90fd\u662f\u6ce8\u518c\u7684 \u8def\u5f84\u64cd\u4f5c \u3002\u8fd9\u4e9b\u8def\u7531\u662f\u4ece app.routes \u4e2d\u63d0\u53d6\u7684\u3002","title":"\u5e38\u89c4\u6d41\u7a0b"},{"location":"advanced/extending-openapi/#_2","text":"get_openapi() \u5de5\u5177\u51fd\u6570\u8fd8\u53ef\u4ee5\u7528\u4e8e\u751f\u6210 OpenAPI \u6982\u56fe\uff0c\u5e76\u5229\u7528\u4e0a\u8ff0\u4fe1\u606f\u53c2\u6570\u8986\u76d6\u6307\u5b9a\u7684\u5185\u5bb9\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 ReDoc \u7684 OpenAPI \u6269\u5c55\u6dfb\u52a0\u81ea\u5b9a\u4e49 Logo \u3002","title":"\u8986\u76d6\u9ed8\u8ba4\u503c"},{"location":"advanced/extending-openapi/#fastapi","text":"\u9996\u5148\uff0c\u7f16\u5199\u5e38\u89c4 FastAPI \u5e94\u7528\uff1a from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"\u5e38\u89c4 FastAPI"},{"location":"advanced/extending-openapi/#openapi_1","text":"\u7136\u540e\uff0c\u5728 custom_openapi() \u51fd\u6570\u91cc\u4f7f\u7528 get_openapi() \u5de5\u5177\u51fd\u6570\u751f\u6210 OpenAPI \u6982\u56fe\uff1a from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"\u751f\u6210 OpenAPI \u6982\u56fe"},{"location":"advanced/extending-openapi/#openapi_2","text":"\u6dfb\u52a0 ReDoc \u6269\u5c55\u4fe1\u606f\uff0c\u4e3a OpenAPI \u6982\u56fe\u91cc\u7684 info \u5bf9\u8c61 \u6dfb\u52a0\u81ea\u5b9a\u4e49 x-logo \uff1a from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"\u4fee\u6539 OpenAPI \u6982\u56fe"},{"location":"advanced/extending-openapi/#openapi_3","text":"\u628a .openapi_schema \u5c5e\u6027\u5f53\u4f5c \u7f13\u5b58 \uff0c\u5b58\u50a8\u751f\u6210\u7684\u6982\u56fe\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c FastAPI \u5e94\u7528\u4e0d\u5fc5\u5728\u7528\u6237\u6bcf\u6b21\u6253\u5f00 API \u6587\u6863\u65f6\u53cd\u590d\u751f\u6210\u6982\u56fe\u3002 \u53ea\u9700\u751f\u6210\u4e00\u6b21\uff0c\u4e0b\u6b21\u8bf7\u6c42\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u7f13\u5b58\u7684\u6982\u56fe\u3002 from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"\u7f13\u5b58 OpenAPI \u6982\u56fe"},{"location":"advanced/extending-openapi/#_3","text":"\u7528\u65b0\u51fd\u6570\u66ff\u6362 .openapi() \u65b9\u6cd5\u3002 from fastapi import FastAPI from fastapi.openapi.utils import get_openapi app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] def custom_openapi (): if app . openapi_schema : return app . openapi_schema openapi_schema = get_openapi ( title = \"Custom title\" , version = \"2.5.0\" , description = \"This is a very custom OpenAPI schema\" , routes = app . routes , ) openapi_schema [ \"info\" ][ \"x-logo\" ] = { \"url\" : \"https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png\" } app . openapi_schema = openapi_schema return app . openapi_schema app . openapi = custom_openapi","title":"\u8986\u76d6\u65b9\u6cd5"},{"location":"advanced/extending-openapi/#_4","text":"\u6253\u5f00 http://127.0.0.1:8000/redoc \uff0c\u67e5\u770b\u81ea\u5b9a\u4e49 Logo\uff08\u672c\u4f8b\u4e2d\u662f FastAPI \u7684 Logo\uff09\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/extending-openapi/#javascript-css","text":"FastAPI \u5185\u7f6e\u4e86 Swagger UI \u548c ReDoc \u6587\u6863\uff0c\u8fd9\u4e24\u79cd\u6587\u6863\u90fd\u9700\u8981\u8c03\u7528 JavaScript \u4e0e CSS \u6587\u4ef6\u3002 \u8fd9\u4e9b\u6587\u4ef6\u9ed8\u8ba4\u7531 CDN \u63d0\u4f9b\u652f\u6301\u670d\u52a1\u3002 \u4f46\u4e5f\u53ef\u4ee5\u81ea\u5b9a\u4e49\u8bbe\u7f6e\u6307\u5b9a\u7684 CDN \u6216\u81ea\u884c\u63d0\u4f9b\u6587\u4ef6\u670d\u52a1\u3002 \u8fd9\u79cd\u505a\u6cd5\u5f88\u5e38\u7528\uff0c\u4f8b\u5982\uff0c\u5728\u6ca1\u6709\u8054\u7f51\u6216\u672c\u5730\u5c40\u57df\u7f51\u65f6\u4e5f\u80fd\u8ba9\u5e94\u7528\u5728\u79bb\u7ebf\u72b6\u6001\u4e0b\u6b63\u5e38\u8fd0\u884c\u3002 \u672c\u6587\u4ecb\u7ecd\u5982\u4f55\u4e3a FastAPI \u5e94\u7528\u63d0\u4f9b\u6587\u4ef6\u81ea\u6258\u7ba1\u670d\u52a1\uff0c\u5e76\u8bbe\u7f6e\u6587\u6863\u4f7f\u7528\u8fd9\u4e9b\u6587\u4ef6\u3002","title":"\u6587\u6863 JavaScript \u4e0e CSS \u81ea\u6258\u7ba1"},{"location":"advanced/extending-openapi/#_5","text":"\u5047\u8bbe\u9879\u76ee\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5b58\u50a8\u9759\u6001\u6587\u4ef6\u7684\u6587\u4ef6\u5939\u3002 \u65b0\u7684\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static/","title":"\u9879\u76ee\u6587\u4ef6\u67b6\u6784"},{"location":"advanced/extending-openapi/#_6","text":"\u4e0b\u8f7d\u6587\u6863\u6240\u9700\u7684\u9759\u6001\u6587\u4ef6\uff0c\u628a\u6587\u4ef6\u653e\u5230 static/ \u6587\u4ef6\u5939\u91cc\u3002 \u53f3\u952e\u70b9\u51fb\u94fe\u63a5\uff0c\u9009\u62e9 \u53e6\u5b58\u4e3a... \u3002 Swagger UI \u4f7f\u7528\u5982\u4e0b\u6587\u4ef6\uff1a swagger-ui-bundle.js swagger-ui.css ReDoc \u4f7f\u7528\u5982\u4e0b\u6587\u4ef6\uff1a redoc.standalone.js \u4fdd\u5b58\u597d\u540e\uff0c\u6587\u4ef6\u67b6\u6784\u6240\u793a\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2514\u2500\u2500 static \u251c\u2500\u2500 redoc.standalone.js \u251c\u2500\u2500 swagger-ui-bundle.js \u2514\u2500\u2500 swagger-ui.css","title":"\u4e0b\u8f7d\u6587\u4ef6"},{"location":"advanced/extending-openapi/#aiofiles","text":"\u73b0\u5728\uff0c\u5b89\u88c5 aiofiles \uff1a $ pip install aiofiles ---> 100%","title":"\u5b89\u88c5 aiofiles"},{"location":"advanced/extending-openapi/#_7","text":"\u5bfc\u5165 StaticFiles \u5728\u6307\u5b9a\u8def\u5f84\u4e0b \u6302\u8f7d StaticFiles() \u5b9e\u4f8b from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"\u9759\u6001\u6587\u4ef6\u670d\u52a1"},{"location":"advanced/extending-openapi/#_8","text":"\u542f\u52a8\u5e94\u7528\uff0c\u6253\u5f00 http://127.0.0.1:8000/static/redoc.standalone.js\u3002 \u5c31\u80fd\u770b\u5230 ReDoc \u7684 JavaScript \u6587\u4ef6\u3002 \u8be5\u6587\u4ef6\u5f00\u5934\u5982\u4e0b\uff1a /*! * ReDoc - OpenAPI/Swagger-generated API Reference Documentation * ------------------------------------------------------------- * Version: \"2.0.0-rc.18\" * Repo: https://github.com/Redocly/redoc */ ! function ( e , t ){ \"object\" == typeof exports && \"object\" == typeof m ... \u80fd\u6253\u5f00\u8fd9\u4e2a\u6587\u4ef6\u5c31\u8868\u793a FastAPI \u5e94\u7528\u80fd\u63d0\u4f9b\u9759\u6001\u6587\u4ef6\u670d\u52a1\uff0c\u5e76\u4e14\u6587\u6863\u8981\u8c03\u7528\u7684\u9759\u6001\u6587\u4ef6\u653e\u5230\u4e86\u6b63\u786e\u7684\u4f4d\u7f6e\u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u9759\u6001\u6587\u4ef6\u914d\u7f6e\u6587\u6863\u3002","title":"\u6d4b\u8bd5\u9759\u6001\u6587\u4ef6"},{"location":"advanced/extending-openapi/#api","text":"\u7b2c\u4e00\u6b65\u662f\u7981\u7528 API \u6587\u6863\uff0c\u5c31\u662f\u4f7f\u7528 CDN \u7684\u9ed8\u8ba4\u6587\u6863\u3002 \u521b\u5efa FastAPI \u5e94\u7528\u65f6\u628a\u6587\u6863\u7684 URL \u8bbe\u7f6e\u4e3a None \u5373\u53ef\u7981\u7528\u9ed8\u8ba4\u6587\u6863\uff1a from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"\u7981\u7528 API \u6587\u6863"},{"location":"advanced/extending-openapi/#_9","text":"\u73b0\u5728\uff0c\u521b\u5efa\u81ea\u5b9a\u4e49\u6587\u6863\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u5bfc\u5165 FastAPI \u5185\u90e8\u51fd\u6570\u4e3a\u6587\u6863\u521b\u5efa HTML \u9875\u9762\uff0c\u5e76\u628a\u6240\u9700\u53c2\u6570\u4f20\u9012\u7ed9\u8fd9\u4e9b\u51fd\u6570\uff1a openapi_url \uff1a API \u6587\u6863\u83b7\u53d6 OpenAPI \u6982\u56fe\u7684 HTML \u9875\u9762\uff0c\u6b64\u5904\u53ef\u4f7f\u7528 app.openapi_url title \uff1aAPI \u7684\u6807\u9898 oauth2_redirect_url \uff1a\u6b64\u5904\u4f7f\u7528 app.swagger_ui_oauth2_redirect_url \u4f5c\u4e3a\u9ed8\u8ba4\u503c swagger_js_url \uff1aSwagger UI \u6587\u6863\u6240\u9700 JavaScript \u6587\u4ef6\u7684 URL\uff0c\u5373\u4e3a\u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\u6587\u4ef6 swagger_css_url \uff1aSwagger UI \u6587\u6863\u6240\u9700 CSS \u6587\u4ef6\u7684 URL\uff0c\u5373\u4e3a\u5e94\u7528\u63d0\u4f9b\u670d\u52a1\u7684\u6587\u4ef6 \u6dfb\u52a0 ReDoc \u6587\u6863\u7684\u65b9\u5f0f\u4e0e\u6b64\u7c7b\u4f3c\u2026\u2026 from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" } \u63d0\u793a swagger_ui_redirect \u7684 \u8def\u5f84\u64cd\u4f5c \u662f OAuth2 \u7684\u8f85\u52a9\u51fd\u6570\u3002 \u96c6\u6210 API \u4e0e OAuth2 \u7b2c\u4e09\u65b9\u5e94\u7528\u65f6\uff0c\u60a8\u80fd\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u4f7f\u7528\u8bf7\u6c42\u51ed\u8bc1\u8fd4\u56de API \u6587\u6863\uff0c\u5e76\u4f7f\u7528\u771f\u6b63\u7684 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u4e0e API \u6587\u6863\u8fdb\u884c\u4ea4\u4e92\u64cd\u4f5c\u3002 Swagger UI \u5728\u540e\u53f0\u8fdb\u884c\u5904\u7406\uff0c\u4f46\u5b83\u9700\u8981\u8fd9\u4e2a \u91cd\u5b9a\u5411 \u8f85\u52a9\u51fd\u6570\u3002","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u6587\u6863"},{"location":"advanced/extending-openapi/#_10","text":"\u73b0\u5728\uff0c\u6d4b\u8bd5\u5404\u9879\u529f\u80fd\u662f\u5426\u80fd\u987a\u5229\u8fd0\u884c\u3002\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \uff1a from fastapi import FastAPI from fastapi.openapi.docs import ( get_redoc_html , get_swagger_ui_html , get_swagger_ui_oauth2_redirect_html , ) from fastapi.staticfiles import StaticFiles app = FastAPI ( docs_url = None , redoc_url = None ) app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) @app . get ( \"/docs\" , include_in_schema = False ) async def custom_swagger_ui_html (): return get_swagger_ui_html ( openapi_url = app . openapi_url , title = app . title + \" - Swagger UI\" , oauth2_redirect_url = app . swagger_ui_oauth2_redirect_url , swagger_js_url = \"/static/swagger-ui-bundle.js\" , swagger_css_url = \"/static/swagger-ui.css\" , ) @app . get ( app . swagger_ui_oauth2_redirect_url , include_in_schema = False ) async def swagger_ui_redirect (): return get_swagger_ui_oauth2_redirect_html () @app . get ( \"/redoc\" , include_in_schema = False ) async def redoc_html (): return get_redoc_html ( openapi_url = app . openapi_url , title = app . title + \" - ReDoc\" , redoc_js_url = \"/static/redoc.standalone.js\" , ) @app . get ( \"/users/ {username} \" ) async def read_user ( username : str ): return { \"message\" : f \"Hello { username } \" }","title":"\u521b\u5efa\u6d4b\u8bd5\u8def\u5f84\u64cd\u4f5c"},{"location":"advanced/extending-openapi/#_11","text":"\u65ad\u5f00 WiFi \u8fde\u63a5\uff0c\u6253\u5f00 http://127.0.0.1:8000/docs\uff0c\u5237\u65b0\u9875\u9762\u3002 \u73b0\u5728\uff0c\u5c31\u7b97\u6ca1\u6709\u8054\u7f51\u4e5f\u80fd\u67e5\u770b\u5e76\u64cd\u4f5c API \u6587\u6863\u3002","title":"\u6d4b\u8bd5\u6587\u6863"},{"location":"advanced/generate-clients/","text":"Generate Clients \u00b6 As FastAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI). One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages . OpenAPI Client Generators \u00b6 There are many tools to generate clients from OpenAPI . A common tool is OpenAPI Generator . If you are building a frontend , a very interesting alternative is openapi-typescript-codegen . Generate a TypeScript Frontend Client \u00b6 Let's start with a simple FastAPI application: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = List [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = list [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] Notice that the path operations define the models they use for request payload and response payload, using the models Item and ResponseMessage . API Docs \u00b6 If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses: You can see those schemas because they were declared with the models in the app. That information is available in the app's OpenAPI schema , and then shown in the API docs (by Swagger UI). And that same information from the models that is included in OpenAPI is what can be used to generate the client code . Generate a TypeScript Client \u00b6 Now that we have the app with the models, we can generate the client code for the frontend. Install openapi-typescript-codegen \u00b6 You can install openapi-typescript-codegen in your frontend code with: $ npm install openapi-typescript-codegen --save-dev ---> 100% Generate Client Code \u00b6 To generate the client code you can use the command line application openapi that would now be installed. Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your package.json file. It could look like this: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After having that NPM generate-client script there, you can run it with: $ npm run generate-client frontend-app@1.0.0 generate-client /home/user/code/frontend-app > openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios That command will generate code in ./src/client and will use axios (the frontend HTTP library) internally. Try Out the Client Code \u00b6 Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods: You will also get autocompletion for the payload to send: Tip Notice the autocompletion for name and price , that was defined in the FastAPI application, in the Item model. You will have inline errors for the data that you send: The response object will also have autocompletion: FastAPI App with Tags \u00b6 In many cases your FastAPI app will be bigger, and you will probably use tags to separate different groups of path operations . For example, you could have a section for items and another section for users , and they could be separated by tags: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } Generate a TypeScript Client with Tags \u00b6 If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags. This way you will be able to have things ordered and grouped correctly for the client code: In this case you have: ItemsService UsersService Client Method Names \u00b6 Right now the generated method names like createItemItemsPost don't look very clean: ItemsService . createItemItemsPost ({ name : \"Plumbus\" , price : 5 }) ...that's because the client generator uses the OpenAPI internal operation ID for each path operation . OpenAPI requires that each operation ID is unique across all the path operations , so FastAPI uses the function name , the path , and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique. But I'll show you how to improve that next. \ud83e\udd13 Custom Operation IDs and Better Method Names \u00b6 You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients. In this case you will have to ensure that each operation ID is unique in some other way. For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name). Custom Generate Unique ID Function \u00b6 FastAPI uses a unique ID for each path operation , it is used for the operation ID and also for the names of any needed custom models, for requests or responses. You can customize that function. It takes an APIRoute and outputs a string. For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name). You can then pass that custom function to FastAPI as the generate_unique_id_function parameter: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } Generate a TypeScript Client with Custom Operation IDs \u00b6 Now if you generate the client again, you will see that it has the improved method names: As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation. Preprocess the OpenAPI Specification for the Client Generator \u00b6 The generated code still has some duplicated information . We already know that this method is related to the items because that word is in the ItemsService (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15 We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique . But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner . We could download the OpenAPI JSON to a file openapi.json and then we could remove that prefixed tag with a script like this: import json from pathlib import Path file_path = Path ( \"./openapi.json\" ) openapi_content = json . loads ( file_path . read_text ()) for path_data in openapi_content [ \"paths\" ] . values (): for operation in path_data . values (): tag = operation [ \"tags\" ][ 0 ] operation_id = operation [ \"operationId\" ] to_remove = f \" { tag } -\" new_operation_id = operation_id [ len ( to_remove ) :] operation [ \"operationId\" ] = new_operation_id file_path . write_text ( json . dumps ( openapi_content )) With that, the operation IDs would be renamed from things like items-get_items to just get_items , that way the client generator can generate simpler method names. Generate a TypeScript Client with the Preprocessed OpenAPI \u00b6 Now as the end result is in a file openapi.json , you would modify the package.json to use that local file, for example: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input ./openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After generating the new client, you would now have clean method names , with all the autocompletion , inline errors , etc: Benefits \u00b6 When using the automatically generated clients you would autocompletion for: Methods. Request payloads in the body, query parameters, etc. Response payloads. You would also have inline errors for everything. And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13 This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used. So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728","title":"Generate Clients"},{"location":"advanced/generate-clients/#generate-clients","text":"As FastAPI is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI). One particular advantage that is not necessarily obvious is that you can generate clients (sometimes called SDKs ) for your API, for many different programming languages .","title":"Generate Clients"},{"location":"advanced/generate-clients/#openapi-client-generators","text":"There are many tools to generate clients from OpenAPI . A common tool is OpenAPI Generator . If you are building a frontend , a very interesting alternative is openapi-typescript-codegen .","title":"OpenAPI Client Generators"},{"location":"advanced/generate-clients/#generate-a-typescript-frontend-client","text":"Let's start with a simple FastAPI application: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = List [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str @app . post ( \"/items/\" , response_model = ResponseMessage ) async def create_item ( item : Item ): return { \"message\" : \"item received\" } @app . get ( \"/items/\" , response_model = list [ Item ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] Notice that the path operations define the models they use for request payload and response payload, using the models Item and ResponseMessage .","title":"Generate a TypeScript Frontend Client"},{"location":"advanced/generate-clients/#api-docs","text":"If you go to the API docs, you will see that it has the schemas for the data to be sent in requests and received in responses: You can see those schemas because they were declared with the models in the app. That information is available in the app's OpenAPI schema , and then shown in the API docs (by Swagger UI). And that same information from the models that is included in OpenAPI is what can be used to generate the client code .","title":"API Docs"},{"location":"advanced/generate-clients/#generate-a-typescript-client","text":"Now that we have the app with the models, we can generate the client code for the frontend.","title":"Generate a TypeScript Client"},{"location":"advanced/generate-clients/#install-openapi-typescript-codegen","text":"You can install openapi-typescript-codegen in your frontend code with: $ npm install openapi-typescript-codegen --save-dev ---> 100%","title":"Install openapi-typescript-codegen"},{"location":"advanced/generate-clients/#generate-client-code","text":"To generate the client code you can use the command line application openapi that would now be installed. Because it is installed in the local project, you probably wouldn't be able to call that command directly, but you would put it on your package.json file. It could look like this: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After having that NPM generate-client script there, you can run it with: $ npm run generate-client frontend-app@1.0.0 generate-client /home/user/code/frontend-app > openapi --input http://localhost:8000/openapi.json --output ./src/client --client axios That command will generate code in ./src/client and will use axios (the frontend HTTP library) internally.","title":"Generate Client Code"},{"location":"advanced/generate-clients/#try-out-the-client-code","text":"Now you can import and use the client code, it could look like this, notice that you get autocompletion for the methods: You will also get autocompletion for the payload to send: Tip Notice the autocompletion for name and price , that was defined in the FastAPI application, in the Item model. You will have inline errors for the data that you send: The response object will also have autocompletion:","title":"Try Out the Client Code"},{"location":"advanced/generate-clients/#fastapi-app-with-tags","text":"In many cases your FastAPI app will be bigger, and you will probably use tags to separate different groups of path operations . For example, you could have a section for items and another section for users , and they could be separated by tags: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" }","title":"FastAPI App with Tags"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-tags","text":"If you generate a client for a FastAPI app using tags, it will normally also separate the client code based on the tags. This way you will be able to have things ordered and grouped correctly for the client code: In this case you have: ItemsService UsersService","title":"Generate a TypeScript Client with Tags"},{"location":"advanced/generate-clients/#client-method-names","text":"Right now the generated method names like createItemItemsPost don't look very clean: ItemsService . createItemItemsPost ({ name : \"Plumbus\" , price : 5 }) ...that's because the client generator uses the OpenAPI internal operation ID for each path operation . OpenAPI requires that each operation ID is unique across all the path operations , so FastAPI uses the function name , the path , and the HTTP method/operation to generate that operation ID, because that way it can make sure that the operation IDs are unique. But I'll show you how to improve that next. \ud83e\udd13","title":"Client Method Names"},{"location":"advanced/generate-clients/#custom-operation-ids-and-better-method-names","text":"You can modify the way these operation IDs are generated to make them simpler and have simpler method names in the clients. In this case you will have to ensure that each operation ID is unique in some other way. For example, you could make sure that each path operation has a tag, and then generate the operation ID based on the tag and the path operation name (the function name).","title":"Custom Operation IDs and Better Method Names"},{"location":"advanced/generate-clients/#custom-generate-unique-id-function","text":"FastAPI uses a unique ID for each path operation , it is used for the operation ID and also for the names of any needed custom models, for requests or responses. You can customize that function. It takes an APIRoute and outputs a string. For example, here it is using the first tag (you will probably have only one tag) and the path operation name (the function name). You can then pass that custom function to FastAPI as the generate_unique_id_function parameter: Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = List [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" } from fastapi import FastAPI from fastapi.routing import APIRoute from pydantic import BaseModel def custom_generate_unique_id ( route : APIRoute ): return f \" { route . tags [ 0 ] } - { route . name } \" app = FastAPI ( generate_unique_id_function = custom_generate_unique_id ) class Item ( BaseModel ): name : str price : float class ResponseMessage ( BaseModel ): message : str class User ( BaseModel ): username : str email : str @app . post ( \"/items/\" , response_model = ResponseMessage , tags = [ \"items\" ]) async def create_item ( item : Item ): return { \"message\" : \"Item received\" } @app . get ( \"/items/\" , response_model = list [ Item ], tags = [ \"items\" ]) async def get_items (): return [ { \"name\" : \"Plumbus\" , \"price\" : 3 }, { \"name\" : \"Portal Gun\" , \"price\" : 9001 }, ] @app . post ( \"/users/\" , response_model = ResponseMessage , tags = [ \"users\" ]) async def create_user ( user : User ): return { \"message\" : \"User received\" }","title":"Custom Generate Unique ID Function"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-custom-operation-ids","text":"Now if you generate the client again, you will see that it has the improved method names: As you see, the method names now have the tag and then the function name, now they don't include information from the URL path and the HTTP operation.","title":"Generate a TypeScript Client with Custom Operation IDs"},{"location":"advanced/generate-clients/#preprocess-the-openapi-specification-for-the-client-generator","text":"The generated code still has some duplicated information . We already know that this method is related to the items because that word is in the ItemsService (taken from the tag), but we still have the tag name prefixed in the method name too. \ud83d\ude15 We will probably still want to keep it for OpenAPI in general, as that will ensure that the operation IDs are unique . But for the generated client we could modify the OpenAPI operation IDs right before generating the clients, just to make those method names nicer and cleaner . We could download the OpenAPI JSON to a file openapi.json and then we could remove that prefixed tag with a script like this: import json from pathlib import Path file_path = Path ( \"./openapi.json\" ) openapi_content = json . loads ( file_path . read_text ()) for path_data in openapi_content [ \"paths\" ] . values (): for operation in path_data . values (): tag = operation [ \"tags\" ][ 0 ] operation_id = operation [ \"operationId\" ] to_remove = f \" { tag } -\" new_operation_id = operation_id [ len ( to_remove ) :] operation [ \"operationId\" ] = new_operation_id file_path . write_text ( json . dumps ( openapi_content )) With that, the operation IDs would be renamed from things like items-get_items to just get_items , that way the client generator can generate simpler method names.","title":"Preprocess the OpenAPI Specification for the Client Generator"},{"location":"advanced/generate-clients/#generate-a-typescript-client-with-the-preprocessed-openapi","text":"Now as the end result is in a file openapi.json , you would modify the package.json to use that local file, for example: { \"name\" : \"frontend-app\" , \"version\" : \"1.0.0\" , \"description\" : \"\" , \"main\" : \"index.js\" , \"scripts\" : { \"generate-client\" : \"openapi --input ./openapi.json --output ./src/client --client axios\" }, \"author\" : \"\" , \"license\" : \"\" , \"devDependencies\" : { \"openapi-typescript-codegen\" : \"^0.20.1\" , \"typescript\" : \"^4.6.2\" } } After generating the new client, you would now have clean method names , with all the autocompletion , inline errors , etc:","title":"Generate a TypeScript Client with the Preprocessed OpenAPI"},{"location":"advanced/generate-clients/#benefits","text":"When using the automatically generated clients you would autocompletion for: Methods. Request payloads in the body, query parameters, etc. Response payloads. You would also have inline errors for everything. And whenever you update the backend code, and regenerate the frontend, it would have any new path operations available as methods, the old ones removed, and any other change would be reflected on the generated code. \ud83e\udd13 This also means that if something changed it will be reflected on the client code automatically. And if you build the client it will error out if you have any mismatch in the data used. So, you would detect many errors very early in the development cycle instead of having to wait for the errors to show up to your final users in production and then trying to debug where the problem is. \u2728","title":"Benefits"},{"location":"advanced/graphql/","text":"GraphQL \u00b6 FastAPI \u57fa\u4e8e ASGI \u6807\u51c6\uff0c\u56e0\u6b64\u80fd\u8f7b\u6613\u5730\u4e0e\u4efb\u4f55\u517c\u5bb9 ASGI \u7684 GraphQL \u652f\u6301\u5e93\u96c6\u6210\u3002 \u60a8\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u4e2d\u628a\u666e\u901a\u7684 FastAPI \u8def\u5f84\u64cd\u4f5c \u4e0e GraphQL \u5408\u5e76\u5728\u4e00\u8d77\u4f7f\u7528\u3002 Tip GraphQL \u7528\u4e8e\u89e3\u51b3\u4e00\u4e9b\u975e\u5e38\u7279\u6b8a\u7684\u7528\u4f8b\u3002 \u5b83\u4e0e\u666e\u901a\u7684 Web API \u5404\u6709\u5229\u5f0a\u3002 \u4f7f\u7528\u4e4b\u524d\uff0c\u8bf7\u5148\u8bc4\u4f30\u60a8\u7684\u7528\u4f8b\uff0c\u786e\u4fdd\u7528\u5b83\u80fd\u591f \u53d6\u957f\u8865\u77ed \u3002\ud83e\udd13 GraphQL \u652f\u6301\u5e93 \u00b6 \u4e0b\u5217 GraphQL \u652f\u6301\u5e93\u90fd\u652f\u6301 ASGI \uff0c\u53ef\u7528\u4e8e FastAPI \uff1a Strawberry \ud83c\udf53 \u63d0\u4f9b\u4e86 FastAPI \u4f7f\u7528\u6587\u6863 Ariadne \u63d0\u4f9b\u4e86 Starlette \u4f7f\u7528\u6587\u6863 \uff08\u4e5f\u53ef\u7528\u4e8e FastAPI\uff09 Tartiflette \u63d0\u4f9b\u4e86 Tartiflette ASGI \u4ee5\u652f\u6301 ASGI \u96c6\u6210 Graphene \u63d0\u4f9b\u4e86 starlette-graphene3 GraphQL \u4e0e Strawberry \u00b6 \u63a8\u8350 \u4f7f\u7528 Strawberry \u5b9e\u73b0 GraphQL \uff0c\u8fd9\u4e2a\u652f\u6301\u5e93\u7684\u8bbe\u8ba1\u601d\u8def\u4e0e FastAPI \u6700\u50cf\uff0c\u4e5f\u57fa\u4e8e \u7c7b\u578b\u63d0\u793a \u3002 \u57fa\u4e8e\u60a8\u7684\u7528\u4f8b\uff0c\u4e5f\u8bb8\u60a8\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u5e93\uff0c\u4f46\u5982\u679c\u60a8\u95ee\u6211\u7684\u5efa\u8bae\uff0c\u6211\u4f1a\u63a8\u8350\u60a8\u5c1d\u8bd5\u4e00\u4e0b Strawberry \u3002 \u4e0b\u9762\u8fd9\u4e2a\u5c0f\u4f8b\u5b50\u6f14\u793a\u4e86\u600e\u6837\u628a Strawberry \u96c6\u6210\u81f3 FastAPI\uff1a import strawberry from fastapi import FastAPI from strawberry.asgi import GraphQL @strawberry . type class User : name : str age : int @strawberry . type class Query : @strawberry . field def user ( self ) -> User : return User ( name = \"Patrick\" , age = 100 ) schema = strawberry . Schema ( query = Query ) graphql_app = GraphQL ( schema ) app = FastAPI () app . add_route ( \"/graphql\" , graphql_app ) app . add_websocket_route ( \"/graphql\" , graphql_app ) \u66f4\u591a\u5185\u5bb9\u8be6\u89c1 Strawberry \u6587\u6863 \u3002 \u8fd8\u6709\u8fd9\u4e2a\u6587\u6863 Strawberry \u4e0e FastAPI \u3002 Starlette \u7684\u65e7\u7248 GraphQLApp \u00b6 Starlette \u4ee5\u524d\u7684\u7248\u672c\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u7528\u4e8e\u4e0e Graphene \u96c6\u6210\u7684\u7c7b - GraphQLApp \u3002 Starlette \u5df2\u7ecf\u5e9f\u5f03\u4e86\u8fd9\u4e2a\u7c7b\uff0c\u4f46\u5982\u679c\u60a8\u7684\u4ee3\u7801\u91cc\u4f7f\u7528\u4e86\u8fd9\u4e2a\u7c7b\uff0c \u8fc1\u79fb \u5230 starlette-graphene3 \u4e5f\u5f88\u7b80\u5355\uff0c\u5b83\u652f\u6301\u540c\u6837\u7684\u7528\u4f8b\uff0c \u63a5\u53e3\u4e5f\u51e0\u4e4e\u4e00\u6837 \u3002 Tip \u8981\u5b9e\u73b0 GraphQL\uff0c\u6211\u8fd8\u662f\u63a8\u8350\u4f7f\u7528 Strawberry \uff0c\u56e0\u4e3a\u5b83\u4e0d\u518d\u4f7f\u7528\u4f20\u7edf\u7684\u7c7b\u4e0e\u7c7b\u578b\uff0c\u800c\u662f\u57fa\u4e8e\u7c7b\u578b\u63d0\u793a\u3002 \u6269\u5c55\u9605\u8bfb \u00b6 GraphQL \u7684\u66f4\u591a\u5185\u5bb9\uff0c\u8be6\u89c1 GraphQL \u5b98\u6863 \u3002 \u70b9\u51fb\u672c\u8282\u6b63\u6587\u4e2d\u7684\u652f\u6301\u5e93\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u8be6\u60c5\u3002","title":"GraphQL"},{"location":"advanced/graphql/#graphql","text":"FastAPI \u57fa\u4e8e ASGI \u6807\u51c6\uff0c\u56e0\u6b64\u80fd\u8f7b\u6613\u5730\u4e0e\u4efb\u4f55\u517c\u5bb9 ASGI \u7684 GraphQL \u652f\u6301\u5e93\u96c6\u6210\u3002 \u60a8\u53ef\u4ee5\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u4e2d\u628a\u666e\u901a\u7684 FastAPI \u8def\u5f84\u64cd\u4f5c \u4e0e GraphQL \u5408\u5e76\u5728\u4e00\u8d77\u4f7f\u7528\u3002 Tip GraphQL \u7528\u4e8e\u89e3\u51b3\u4e00\u4e9b\u975e\u5e38\u7279\u6b8a\u7684\u7528\u4f8b\u3002 \u5b83\u4e0e\u666e\u901a\u7684 Web API \u5404\u6709\u5229\u5f0a\u3002 \u4f7f\u7528\u4e4b\u524d\uff0c\u8bf7\u5148\u8bc4\u4f30\u60a8\u7684\u7528\u4f8b\uff0c\u786e\u4fdd\u7528\u5b83\u80fd\u591f \u53d6\u957f\u8865\u77ed \u3002\ud83e\udd13","title":"GraphQL"},{"location":"advanced/graphql/#graphql_1","text":"\u4e0b\u5217 GraphQL \u652f\u6301\u5e93\u90fd\u652f\u6301 ASGI \uff0c\u53ef\u7528\u4e8e FastAPI \uff1a Strawberry \ud83c\udf53 \u63d0\u4f9b\u4e86 FastAPI \u4f7f\u7528\u6587\u6863 Ariadne \u63d0\u4f9b\u4e86 Starlette \u4f7f\u7528\u6587\u6863 \uff08\u4e5f\u53ef\u7528\u4e8e FastAPI\uff09 Tartiflette \u63d0\u4f9b\u4e86 Tartiflette ASGI \u4ee5\u652f\u6301 ASGI \u96c6\u6210 Graphene \u63d0\u4f9b\u4e86 starlette-graphene3","title":"GraphQL \u652f\u6301\u5e93"},{"location":"advanced/graphql/#graphql-strawberry","text":"\u63a8\u8350 \u4f7f\u7528 Strawberry \u5b9e\u73b0 GraphQL \uff0c\u8fd9\u4e2a\u652f\u6301\u5e93\u7684\u8bbe\u8ba1\u601d\u8def\u4e0e FastAPI \u6700\u50cf\uff0c\u4e5f\u57fa\u4e8e \u7c7b\u578b\u63d0\u793a \u3002 \u57fa\u4e8e\u60a8\u7684\u7528\u4f8b\uff0c\u4e5f\u8bb8\u60a8\u66f4\u503e\u5411\u4e8e\u4f7f\u7528\u5176\u4ed6\u652f\u6301\u5e93\uff0c\u4f46\u5982\u679c\u60a8\u95ee\u6211\u7684\u5efa\u8bae\uff0c\u6211\u4f1a\u63a8\u8350\u60a8\u5c1d\u8bd5\u4e00\u4e0b Strawberry \u3002 \u4e0b\u9762\u8fd9\u4e2a\u5c0f\u4f8b\u5b50\u6f14\u793a\u4e86\u600e\u6837\u628a Strawberry \u96c6\u6210\u81f3 FastAPI\uff1a import strawberry from fastapi import FastAPI from strawberry.asgi import GraphQL @strawberry . type class User : name : str age : int @strawberry . type class Query : @strawberry . field def user ( self ) -> User : return User ( name = \"Patrick\" , age = 100 ) schema = strawberry . Schema ( query = Query ) graphql_app = GraphQL ( schema ) app = FastAPI () app . add_route ( \"/graphql\" , graphql_app ) app . add_websocket_route ( \"/graphql\" , graphql_app ) \u66f4\u591a\u5185\u5bb9\u8be6\u89c1 Strawberry \u6587\u6863 \u3002 \u8fd8\u6709\u8fd9\u4e2a\u6587\u6863 Strawberry \u4e0e FastAPI \u3002","title":"GraphQL \u4e0e Strawberry"},{"location":"advanced/graphql/#starlette-graphqlapp","text":"Starlette \u4ee5\u524d\u7684\u7248\u672c\u4e2d\u5305\u542b\u4e86\u4e00\u4e2a\u7528\u4e8e\u4e0e Graphene \u96c6\u6210\u7684\u7c7b - GraphQLApp \u3002 Starlette \u5df2\u7ecf\u5e9f\u5f03\u4e86\u8fd9\u4e2a\u7c7b\uff0c\u4f46\u5982\u679c\u60a8\u7684\u4ee3\u7801\u91cc\u4f7f\u7528\u4e86\u8fd9\u4e2a\u7c7b\uff0c \u8fc1\u79fb \u5230 starlette-graphene3 \u4e5f\u5f88\u7b80\u5355\uff0c\u5b83\u652f\u6301\u540c\u6837\u7684\u7528\u4f8b\uff0c \u63a5\u53e3\u4e5f\u51e0\u4e4e\u4e00\u6837 \u3002 Tip \u8981\u5b9e\u73b0 GraphQL\uff0c\u6211\u8fd8\u662f\u63a8\u8350\u4f7f\u7528 Strawberry \uff0c\u56e0\u4e3a\u5b83\u4e0d\u518d\u4f7f\u7528\u4f20\u7edf\u7684\u7c7b\u4e0e\u7c7b\u578b\uff0c\u800c\u662f\u57fa\u4e8e\u7c7b\u578b\u63d0\u793a\u3002","title":"Starlette \u7684\u65e7\u7248 GraphQLApp"},{"location":"advanced/graphql/#_1","text":"GraphQL \u7684\u66f4\u591a\u5185\u5bb9\uff0c\u8be6\u89c1 GraphQL \u5b98\u6863 \u3002 \u70b9\u51fb\u672c\u8282\u6b63\u6587\u4e2d\u7684\u652f\u6301\u5e93\u94fe\u63a5\uff0c\u4e5f\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u8be6\u60c5\u3002","title":"\u6269\u5c55\u9605\u8bfb"},{"location":"advanced/middleware/","text":"\u9ad8\u7ea7\u4e2d\u95f4\u4ef6 \u00b6 \u7528\u6237\u6307\u5357\u4ecb\u7ecd\u4e86\u5982\u4f55\u4e3a\u5e94\u7528\u6dfb\u52a0 \u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6 \u3002 \u4ee5\u53ca\u5982\u4f55 \u4f7f\u7528 CORSMiddleware \u5904\u7406 CORS \u3002 \u672c\u7ae0\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u5176\u4ed6\u4e2d\u95f4\u4ef6\u3002 \u6dfb\u52a0 ASGI \u4e2d\u95f4\u4ef6 \u00b6 \u56e0\u4e3a FastAPI \u57fa\u4e8e Starlette\uff0c\u4e14\u6267\u884c ASGI \u89c4\u8303\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f ASGI \u4e2d\u95f4\u4ef6\u3002 \u4e2d\u95f4\u4ef6\u4e0d\u5fc5\u662f\u4e13\u4e3a FastAPI \u6216 Starlette \u5b9a\u5236\u7684\uff0c\u53ea\u8981\u9075\u5faa ASGI \u89c4\u8303\u5373\u53ef\u3002 \u603b\u4e4b\uff0cASGI \u4e2d\u95f4\u4ef6\u662f\u7c7b\uff0c\u5e76\u628a ASGI \u5e94\u7528\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u56e0\u6b64\uff0c\u6709\u4e9b\u7b2c\u4e09\u65b9 ASGI \u4e2d\u95f4\u4ef6\u7684\u6587\u6863\u63a8\u8350\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\u4e2d\u95f4\u4ef6\uff1a from unicorn import UnicornMiddleware app = SomeASGIApp () new_app = UnicornMiddleware ( app , some_config = \"rainbow\" ) \u4f46 FastAPI\uff08\u5b9e\u9645\u4e0a\u662f Starlette\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u80fd\u8ba9\u5185\u90e8\u4e2d\u95f4\u4ef6\u5728\u5904\u7406\u670d\u52a1\u5668\u9519\u8bef\u7684\u540c\u65f6\uff0c\u8fd8\u80fd\u8ba9\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668\u6b63\u5e38\u8fd0\u4f5c\u3002 \u4e3a\u6b64\uff0c\u8981\u4f7f\u7528 app.add_middleware() \uff08\u4e0e CORS \u4e2d\u7684\u793a\u4f8b\u4e00\u6837\uff09\u3002 from fastapi import FastAPI from unicorn import UnicornMiddleware app = FastAPI () app . add_middleware ( UnicornMiddleware , some_config = \"rainbow\" ) app.add_middleware() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e2d\u95f4\u4ef6\u7684\u7c7b\uff0c\u5176\u4ed6\u53c2\u6570\u5219\u662f\u8981\u4f20\u9012\u7ed9\u4e2d\u95f4\u4ef6\u7684\u53c2\u6570\u3002 \u96c6\u6210\u4e2d\u95f4\u4ef6 \u00b6 FastAPI \u4e3a\u5e38\u89c1\u7528\u4f8b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4e2d\u95f4\u4ef6\uff0c\u4e0b\u9762\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u3002 \u6280\u672f\u7ec6\u8282 \u4ee5\u4e0b\u51e0\u4e2a\u793a\u4f8b\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.middleware.something import SomethingMiddleware \u3002 FastAPI \u5728 fastapi.middleware \u4e2d\u63d0\u4f9b\u7684\u4e2d\u95f4\u4ef6\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u4f7f\u7528\uff0c\u4f46\u7edd\u5927\u591a\u6570\u53ef\u7528\u7684\u4e2d\u95f4\u4ef6\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 HTTPSRedirectMiddleware \u00b6 \u5f3a\u5236\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u5fc5\u987b\u662f https \u6216 wss \u3002 \u4efb\u4f55\u4f20\u5411 http \u6216 ws \u7684\u8bf7\u6c42\u90fd\u4f1a\u88ab\u91cd\u5b9a\u5411\u81f3\u5b89\u5168\u65b9\u6848\u3002 from fastapi import FastAPI from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware app = FastAPI () app . add_middleware ( HTTPSRedirectMiddleware ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } TrustedHostMiddleware \u00b6 \u5f3a\u5236\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u90fd\u5fc5\u987b\u6b63\u786e\u8bbe\u7f6e Host \u8bf7\u6c42\u5934\uff0c\u4ee5\u9632 HTTP \u4e3b\u673a\u5934\u653b\u51fb\u3002 from fastapi import FastAPI from fastapi.middleware.trustedhost import TrustedHostMiddleware app = FastAPI () app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ \"example.com\" , \"*.example.com\" ] ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } \u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b\u6240\u793a\uff1a allowed_hosts - \u83b7\u5f97\u8bb8\u53ef\u7684\u57df\u540d\uff08\u4e3b\u673a\u540d\uff09\u5217\u8868\u3002\u652f\u6301\u4f7f\u7528 *.example.com \u7b49\u901a\u914d\u7b26\u5339\u914d\u5b50\u57df\u540d\u3002\u5982\u9700\u8bb8\u53ef\u4efb\u610f\u4e3b\u673a\u540d\uff0c\u53ef\u4f7f\u7528 allowed_hosts=[\"*\"] \u6216\u7701\u7565\u4e2d\u95f4\u4ef6\u3002 \u5982\u679c\u4f20\u5165\u7684\u8bf7\u6c42\u6ca1\u6709\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5219\u53d1\u9001 400 \u54cd\u5e94\u3002 GZipMiddleware \u00b6 \u5904\u7406 Accept-Encoding \u8bf7\u6c42\u5934\u4e2d\u5305\u542b gzip \u8bf7\u6c42\u7684 GZip \u54cd\u5e94\u3002 \u4e2d\u95f4\u4ef6\u4f1a\u5904\u7406\u6807\u51c6\u54cd\u5e94\u4e0e\u6d41\u54cd\u5e94\u3002 from fastapi import FastAPI from fastapi.middleware.gzip import GZipMiddleware app = FastAPI () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) @app . get ( \"/\" ) async def main (): return \"somebigcontent\" \u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a minimum_size - \u5c0f\u4e8e\u6700\u5c0f\u5b57\u8282\u7684\u54cd\u5e94\u4e0d\u4f7f\u7528 GZip\u3002 \u9ed8\u8ba4\u503c\u662f 500 \u3002 \u5176\u4ed6\u4e2d\u95f4\u4ef6 \u00b6 \u9664\u4e86\u4e0a\u8ff0\u4e2d\u95f4\u4ef6\u5916\uff0cFastAPI \u8fd8\u652f\u6301\u5176\u4ed6ASGI \u4e2d\u95f4\u4ef6\u3002 \u4f8b\u5982\uff1a Sentry Uvicorn \u7684 ProxyHeadersMiddleware MessagePack \u5176\u4ed6\u53ef\u7528\u4e2d\u95f4\u4ef6\u8be6\u89c1 Starlette \u5b98\u6863 - \u4e2d\u95f4\u4ef6 \u53ca ASGI Awesome \u5217\u8868 \u3002","title":"\u9ad8\u7ea7\u4e2d\u95f4\u4ef6"},{"location":"advanced/middleware/#_1","text":"\u7528\u6237\u6307\u5357\u4ecb\u7ecd\u4e86\u5982\u4f55\u4e3a\u5e94\u7528\u6dfb\u52a0 \u81ea\u5b9a\u4e49\u4e2d\u95f4\u4ef6 \u3002 \u4ee5\u53ca\u5982\u4f55 \u4f7f\u7528 CORSMiddleware \u5904\u7406 CORS \u3002 \u672c\u7ae0\u5b66\u4e60\u5982\u4f55\u4f7f\u7528\u5176\u4ed6\u4e2d\u95f4\u4ef6\u3002","title":"\u9ad8\u7ea7\u4e2d\u95f4\u4ef6"},{"location":"advanced/middleware/#asgi","text":"\u56e0\u4e3a FastAPI \u57fa\u4e8e Starlette\uff0c\u4e14\u6267\u884c ASGI \u89c4\u8303\uff0c\u6240\u4ee5\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f ASGI \u4e2d\u95f4\u4ef6\u3002 \u4e2d\u95f4\u4ef6\u4e0d\u5fc5\u662f\u4e13\u4e3a FastAPI \u6216 Starlette \u5b9a\u5236\u7684\uff0c\u53ea\u8981\u9075\u5faa ASGI \u89c4\u8303\u5373\u53ef\u3002 \u603b\u4e4b\uff0cASGI \u4e2d\u95f4\u4ef6\u662f\u7c7b\uff0c\u5e76\u628a ASGI \u5e94\u7528\u4f5c\u4e3a\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 \u56e0\u6b64\uff0c\u6709\u4e9b\u7b2c\u4e09\u65b9 ASGI \u4e2d\u95f4\u4ef6\u7684\u6587\u6863\u63a8\u8350\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f7f\u7528\u4e2d\u95f4\u4ef6\uff1a from unicorn import UnicornMiddleware app = SomeASGIApp () new_app = UnicornMiddleware ( app , some_config = \"rainbow\" ) \u4f46 FastAPI\uff08\u5b9e\u9645\u4e0a\u662f Starlette\uff09\u63d0\u4f9b\u4e86\u4e00\u79cd\u66f4\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u80fd\u8ba9\u5185\u90e8\u4e2d\u95f4\u4ef6\u5728\u5904\u7406\u670d\u52a1\u5668\u9519\u8bef\u7684\u540c\u65f6\uff0c\u8fd8\u80fd\u8ba9\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668\u6b63\u5e38\u8fd0\u4f5c\u3002 \u4e3a\u6b64\uff0c\u8981\u4f7f\u7528 app.add_middleware() \uff08\u4e0e CORS \u4e2d\u7684\u793a\u4f8b\u4e00\u6837\uff09\u3002 from fastapi import FastAPI from unicorn import UnicornMiddleware app = FastAPI () app . add_middleware ( UnicornMiddleware , some_config = \"rainbow\" ) app.add_middleware() \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u4e2d\u95f4\u4ef6\u7684\u7c7b\uff0c\u5176\u4ed6\u53c2\u6570\u5219\u662f\u8981\u4f20\u9012\u7ed9\u4e2d\u95f4\u4ef6\u7684\u53c2\u6570\u3002","title":"\u6dfb\u52a0 ASGI \u4e2d\u95f4\u4ef6"},{"location":"advanced/middleware/#_2","text":"FastAPI \u4e3a\u5e38\u89c1\u7528\u4f8b\u63d0\u4f9b\u4e86\u4e00\u4e9b\u4e2d\u95f4\u4ef6\uff0c\u4e0b\u9762\u4ecb\u7ecd\u600e\u4e48\u4f7f\u7528\u8fd9\u4e9b\u4e2d\u95f4\u4ef6\u3002 \u6280\u672f\u7ec6\u8282 \u4ee5\u4e0b\u51e0\u4e2a\u793a\u4f8b\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.middleware.something import SomethingMiddleware \u3002 FastAPI \u5728 fastapi.middleware \u4e2d\u63d0\u4f9b\u7684\u4e2d\u95f4\u4ef6\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u4f7f\u7528\uff0c\u4f46\u7edd\u5927\u591a\u6570\u53ef\u7528\u7684\u4e2d\u95f4\u4ef6\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u96c6\u6210\u4e2d\u95f4\u4ef6"},{"location":"advanced/middleware/#httpsredirectmiddleware","text":"\u5f3a\u5236\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u5fc5\u987b\u662f https \u6216 wss \u3002 \u4efb\u4f55\u4f20\u5411 http \u6216 ws \u7684\u8bf7\u6c42\u90fd\u4f1a\u88ab\u91cd\u5b9a\u5411\u81f3\u5b89\u5168\u65b9\u6848\u3002 from fastapi import FastAPI from fastapi.middleware.httpsredirect import HTTPSRedirectMiddleware app = FastAPI () app . add_middleware ( HTTPSRedirectMiddleware ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" }","title":"HTTPSRedirectMiddleware"},{"location":"advanced/middleware/#trustedhostmiddleware","text":"\u5f3a\u5236\u6240\u6709\u4f20\u5165\u8bf7\u6c42\u90fd\u5fc5\u987b\u6b63\u786e\u8bbe\u7f6e Host \u8bf7\u6c42\u5934\uff0c\u4ee5\u9632 HTTP \u4e3b\u673a\u5934\u653b\u51fb\u3002 from fastapi import FastAPI from fastapi.middleware.trustedhost import TrustedHostMiddleware app = FastAPI () app . add_middleware ( TrustedHostMiddleware , allowed_hosts = [ \"example.com\" , \"*.example.com\" ] ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } \u652f\u6301\u7684\u53c2\u6570\u5982\u4e0b\u6240\u793a\uff1a allowed_hosts - \u83b7\u5f97\u8bb8\u53ef\u7684\u57df\u540d\uff08\u4e3b\u673a\u540d\uff09\u5217\u8868\u3002\u652f\u6301\u4f7f\u7528 *.example.com \u7b49\u901a\u914d\u7b26\u5339\u914d\u5b50\u57df\u540d\u3002\u5982\u9700\u8bb8\u53ef\u4efb\u610f\u4e3b\u673a\u540d\uff0c\u53ef\u4f7f\u7528 allowed_hosts=[\"*\"] \u6216\u7701\u7565\u4e2d\u95f4\u4ef6\u3002 \u5982\u679c\u4f20\u5165\u7684\u8bf7\u6c42\u6ca1\u6709\u901a\u8fc7\u9a8c\u8bc1\uff0c\u5219\u53d1\u9001 400 \u54cd\u5e94\u3002","title":"TrustedHostMiddleware"},{"location":"advanced/middleware/#gzipmiddleware","text":"\u5904\u7406 Accept-Encoding \u8bf7\u6c42\u5934\u4e2d\u5305\u542b gzip \u8bf7\u6c42\u7684 GZip \u54cd\u5e94\u3002 \u4e2d\u95f4\u4ef6\u4f1a\u5904\u7406\u6807\u51c6\u54cd\u5e94\u4e0e\u6d41\u54cd\u5e94\u3002 from fastapi import FastAPI from fastapi.middleware.gzip import GZipMiddleware app = FastAPI () app . add_middleware ( GZipMiddleware , minimum_size = 1000 ) @app . get ( \"/\" ) async def main (): return \"somebigcontent\" \u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a minimum_size - \u5c0f\u4e8e\u6700\u5c0f\u5b57\u8282\u7684\u54cd\u5e94\u4e0d\u4f7f\u7528 GZip\u3002 \u9ed8\u8ba4\u503c\u662f 500 \u3002","title":"GZipMiddleware"},{"location":"advanced/middleware/#_3","text":"\u9664\u4e86\u4e0a\u8ff0\u4e2d\u95f4\u4ef6\u5916\uff0cFastAPI \u8fd8\u652f\u6301\u5176\u4ed6ASGI \u4e2d\u95f4\u4ef6\u3002 \u4f8b\u5982\uff1a Sentry Uvicorn \u7684 ProxyHeadersMiddleware MessagePack \u5176\u4ed6\u53ef\u7528\u4e2d\u95f4\u4ef6\u8be6\u89c1 Starlette \u5b98\u6863 - \u4e2d\u95f4\u4ef6 \u53ca ASGI Awesome \u5217\u8868 \u3002","title":"\u5176\u4ed6\u4e2d\u95f4\u4ef6"},{"location":"advanced/nosql-databases/","text":"NoSQL\uff08\u5206\u5e03\u5f0f/\u5927\u6570\u636e\uff09\u6570\u636e\u5e93 \u00b6 FastAPI \u8fd8\u652f\u6301\u4e0e NoSQL \u6570\u636e\u5e93\u96c6\u6210\u3002 \u672c\u7ae0\u793a\u4f8b\u4f7f\u7528 Couchbase \uff0c\u5b83\u662f\u4e00\u79cd\u57fa\u4e8e \u6587\u6863 \u7684 NoSQL \u6570\u636e\u5e93\u3002 \u9664\u4e86 Couchbase \u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b NoSQL \u6570\u636e\u5e93\uff1a MongoDB Cassandra CouchDB ArangoDB ElasticSearch \u7b49 \u63d0\u793a FastAPI \u5b98\u65b9\u63d0\u4f9b\u4e86\u4f7f\u7528 CouchBase \u7684\u9879\u76ee\u751f\u6210\u5668\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u5305\u542b\u5728 Docker \u5bb9\u5668\u4e2d\uff0c\u5305\u62ec\u524d\u7aef\u7b49\u5de5\u5177\uff1a https://github.com/tiangolo/full-stack-fastapi-couchbase \u5bfc\u5165 Couchbase \u7ec4\u4ef6 \u00b6 \u73b0\u5728\uff0c\u5148\u4e0d\u8003\u8651\u5176\u4ed6\u5185\u5bb9\uff0c\u53ea\u5173\u6ce8\u5bfc\u5165\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u5b9a\u4e49 \u6587\u6863\u7c7b\u578b \u5e38\u91cf \u00b6 \u7a0d\u540e\u4f7f\u7528\u8fd9\u4e2a\u5e38\u91cf\uff0c\u5728\u6587\u6863\u4e2d\u4f5c\u4e3a\u56fa\u5b9a\u5b57\u6bb5 type \u3002 CouchBase \u4e0d\u9700\u8981\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u7a0d\u540e\u4f1a\u6709\u5e2e\u52a9\u3002 from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u6dfb\u52a0\u83b7\u53d6 Bucket \u7684\u51fd\u6570 \u00b6 Couchbase \u4e2d\uff0cBucket \u662f\u4e00\u7ec4\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u6863\u3002 \u5b83\u4eec\u901a\u5e38\u90fd\u5173\u8054\u5230\u540c\u4e00\u4e2a\u5e94\u7528\u3002 \u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5bf9\u5e94\u7684\u6982\u5ff5\u662f \u6570\u636e\u5e93 \uff08\u4e13\u6307\u6570\u636e\u5e93\uff0c\u4e0d\u662f\u6570\u636e\u5e93\u670d\u52a1\u5668\uff09\u3002 \u4e0e MongoDB \u5bf9\u5e94\u7684\u662f \u96c6\u5408 \u3002 \u5728\u4ee3\u7801\u4e2d\uff0c Bucket \u8868\u793a\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u7684\u4e3b\u5165\u53e3\u70b9\u3002 \u8fd9\u4e2a\u5de5\u5177\u51fd\u6570\u5c06\uff1a \u5173\u8054 Couchbase \u96c6\u7fa4\uff08\u53ef\u80fd\u53ea\u662f\u4e00\u53f0\u673a\u5668\uff09 Set defaults for timeouts. \u8bbe\u7f6e\u8d85\u65f6\u7684\u9ed8\u8ba4\u503c \u5728\u96c6\u7fa4\u4e2d\u9a8c\u8bc1\u8eab\u4efd \u83b7\u53d6 Bucket \u5b9e\u4f8b \u8bbe\u7f6e\u8d85\u65f6\u7684\u9ed8\u8ba4\u503c \u8fd4\u56de\u503c from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u521b\u5efa Pydantic \u6a21\u578b \u00b6 Couchbase \u6587\u6863\u5b9e\u9645\u4e0a\u53ea\u662f JSON \u5bf9\u8c61 \uff0c\u56e0\u6b64\u53ef\u4ee5\u7528 Pydantic \u5efa\u6a21\u3002 User \u6a21\u578b \u00b6 \u9996\u5148\uff0c\u521b\u5efa User \u6a21\u578b\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u7684\u662f\u8fd9\u4e2a\u6a21\u578b\uff0c\u56e0\u6b64\uff0c\u4e0d\u8981\u628a hashed_password \u5305\u542b\u5728\u8fd9\u4e2a\u6a21\u578b\u91cc\u3002 UserInDB \u6a21\u578b \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa UserInDB \u6a21\u578b\u3002 \u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u628a\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u91cc\u3002 UserInDB \u6a21\u578b\u4e0d\u662f Pydantic \u4e2d BaseModel \u7684\u5b50\u7c7b\uff0c\u800c\u662f User \u7684\u5b50\u7c7b\uff0c\u56e0\u4e3a\u9664\u4e86 User \u6240\u6709\u5c5e\u6027\u4e4b\u5916\uff0c\u5b83\u53ea\u589e\u52a0\u4e24\u4e2a\u65b0\u5c5e\u6027\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u7b14\u8bb0 \u6ce8\u610f\uff0c hashed_password \u4e0e type \u5b57\u6bb5\u4f1a\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u91cc\u3002 \u4f46\u5b83\u4e0d\u662f\u901a\u7528 User \u6a21\u578b\u7684\u7ec4\u4ef6\uff0c\uff08\u800c\u662f\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8fd4\u56de\uff09\u3002 \u63d0\u53d6\u7528\u6237 \u00b6 \u521b\u5efa\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\u7684\u51fd\u6570\uff1a \u63d0\u53d6\u7528\u6237\u540d \u6839\u636e\u7528\u6237\u540d\u751f\u6210\u6587\u6863 ID \u4f7f\u7528 ID \u63d0\u53d6\u6587\u6863 \u628a\u6587\u6863\u5185\u5bb9\u653e\u5165 UserInDB \u6a21\u578b \u521b\u5efa\u72ec\u7acb\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\uff0c\u4f7f\u7528 username \uff08\u6216\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\uff09\u63d0\u53d6\u7528\u6237\u7684\u4e13\u5c5e\u51fd\u6570\uff0c\u53ef\u4ee5\u66f4\u8f7b\u6613\u5730\u5728\u591a\u4e2a\u4f4d\u7f6e\u590d\u7528\u8be5\u51fd\u6570\uff0c\u5e76\u4e3a\u5b83\u6dfb\u52a0 \u5355\u5143\u6d4b\u8bd5 \u3002 from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user f-\u5b57\u7b26\u4e32 \u00b6 f\"userprofile::{username}\" \u662f Python \u7684 f-string \u3002 f-string \u628a {} \u91cc\u7684\u53d8\u91cf\u5c55\u5f00\u5e76\u6ce8\u5165\u5230\u5b57\u7b26\u4e32\u91cc\u3002 dict \u89e3\u5305 \u00b6 \u5982\u679c\u60a8\u4e0d\u6e05\u695a\u4ec0\u4e48\u662f UserInDB(**result.value) \uff0c \u5b83\u4f7f\u7528\u7684\u662f dict \u201d\u89e3\u5305\u201c \u6280\u672f\u3002 \u5b83\u4ece result.value \u4e2d\u63d0\u53d6\u5b57\u5178\uff0c\u5e76\u63d0\u53d6\u6bcf\u4e2a\u952e\u548c\u503c\uff0c\u7136\u540e\u628a\u952e\u503c\u5bf9\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 UserInDB \u3002 \u5982\u679c \u5b57\u5178 \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a { \"username\" : \"johndoe\" , \"hashed_password\" : \"some_hash\" , } \u5b83\u4f1a\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f20\u9012\u7ed9 UserInDB \uff1a UserInDB ( username = \"johndoe\" , hashed_password = \"some_hash\" ) \u521b\u5efa FastAPI \u4ee3\u7801 \u00b6 \u521b\u5efa FastAPI \u5e94\u7528 \u00b6 from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u521b\u5efa \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u00b6 \u56e0\u4e3a\u672c\u4f8b\u4e2d\u7684\u4ee3\u7801\u8c03\u7528\u4e86 Couchbase\uff0c\u5e76\u4e14\u6ca1\u6709\u4f7f\u7528 \u8bd5\u9a8c\u6027\u7684 Python await \u652f\u6301 \uff0c\u56e0\u6b64\uff0c\u8981\u628a\u51fd\u6570\u58f0\u660e\u4e3a\u666e\u901a\u51fd\u6570\uff08 def \uff09\uff0c\u800c\u4e0d\u662f\u5f02\u6b65\u51fd\u6570\uff08 async \uff09\u3002 Couchbase \u8fd8\u5efa\u8bae\u4e0d\u8981\u5728\u591a \u7ebf\u7a0b \u4e2d\u4f7f\u7528\u5355\u4e2a Bucket \u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6 Bucket\uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9\u5de5\u5177\u51fd\u6570\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u5c0f\u7ed3 \u00b6 \u53ea\u4f7f\u7528\u6807\u51c6\u5305\uff0c\u5c31\u53ef\u4ee5\u96c6\u6210\u7b2c\u4e09\u65b9 NoSQL \u6570\u636e\u5e93\u3002 \u540c\u6837\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u9002\u7528\u4e8e\u4efb\u4f55\u5916\u90e8\u5de5\u5177\u3001\u7cfb\u7edf\u6216 API\u3002","title":"NoSQL\uff08\u5206\u5e03\u5f0f/\u5927\u6570\u636e\uff09\u6570\u636e\u5e93"},{"location":"advanced/nosql-databases/#nosql","text":"FastAPI \u8fd8\u652f\u6301\u4e0e NoSQL \u6570\u636e\u5e93\u96c6\u6210\u3002 \u672c\u7ae0\u793a\u4f8b\u4f7f\u7528 Couchbase \uff0c\u5b83\u662f\u4e00\u79cd\u57fa\u4e8e \u6587\u6863 \u7684 NoSQL \u6570\u636e\u5e93\u3002 \u9664\u4e86 Couchbase \u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b NoSQL \u6570\u636e\u5e93\uff1a MongoDB Cassandra CouchDB ArangoDB ElasticSearch \u7b49 \u63d0\u793a FastAPI \u5b98\u65b9\u63d0\u4f9b\u4e86\u4f7f\u7528 CouchBase \u7684\u9879\u76ee\u751f\u6210\u5668\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u5305\u542b\u5728 Docker \u5bb9\u5668\u4e2d\uff0c\u5305\u62ec\u524d\u7aef\u7b49\u5de5\u5177\uff1a https://github.com/tiangolo/full-stack-fastapi-couchbase","title":"NoSQL\uff08\u5206\u5e03\u5f0f/\u5927\u6570\u636e\uff09\u6570\u636e\u5e93"},{"location":"advanced/nosql-databases/#couchbase","text":"\u73b0\u5728\uff0c\u5148\u4e0d\u8003\u8651\u5176\u4ed6\u5185\u5bb9\uff0c\u53ea\u5173\u6ce8\u5bfc\u5165\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"\u5bfc\u5165 Couchbase \u7ec4\u4ef6"},{"location":"advanced/nosql-databases/#_1","text":"\u7a0d\u540e\u4f7f\u7528\u8fd9\u4e2a\u5e38\u91cf\uff0c\u5728\u6587\u6863\u4e2d\u4f5c\u4e3a\u56fa\u5b9a\u5b57\u6bb5 type \u3002 CouchBase \u4e0d\u9700\u8981\u8fd9\u6bb5\u4ee3\u7801\uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u7a0d\u540e\u4f1a\u6709\u5e2e\u52a9\u3002 from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"\u5b9a\u4e49\u6587\u6863\u7c7b\u578b\u5e38\u91cf"},{"location":"advanced/nosql-databases/#bucket","text":"Couchbase \u4e2d\uff0cBucket \u662f\u4e00\u7ec4\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u6863\u3002 \u5b83\u4eec\u901a\u5e38\u90fd\u5173\u8054\u5230\u540c\u4e00\u4e2a\u5e94\u7528\u3002 \u4e0e\u5173\u7cfb\u578b\u6570\u636e\u5e93\u5bf9\u5e94\u7684\u6982\u5ff5\u662f \u6570\u636e\u5e93 \uff08\u4e13\u6307\u6570\u636e\u5e93\uff0c\u4e0d\u662f\u6570\u636e\u5e93\u670d\u52a1\u5668\uff09\u3002 \u4e0e MongoDB \u5bf9\u5e94\u7684\u662f \u96c6\u5408 \u3002 \u5728\u4ee3\u7801\u4e2d\uff0c Bucket \u8868\u793a\u4e0e\u6570\u636e\u5e93\u901a\u4fe1\u7684\u4e3b\u5165\u53e3\u70b9\u3002 \u8fd9\u4e2a\u5de5\u5177\u51fd\u6570\u5c06\uff1a \u5173\u8054 Couchbase \u96c6\u7fa4\uff08\u53ef\u80fd\u53ea\u662f\u4e00\u53f0\u673a\u5668\uff09 Set defaults for timeouts. \u8bbe\u7f6e\u8d85\u65f6\u7684\u9ed8\u8ba4\u503c \u5728\u96c6\u7fa4\u4e2d\u9a8c\u8bc1\u8eab\u4efd \u83b7\u53d6 Bucket \u5b9e\u4f8b \u8bbe\u7f6e\u8d85\u65f6\u7684\u9ed8\u8ba4\u503c \u8fd4\u56de\u503c from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"\u6dfb\u52a0\u83b7\u53d6 Bucket \u7684\u51fd\u6570"},{"location":"advanced/nosql-databases/#pydantic","text":"Couchbase \u6587\u6863\u5b9e\u9645\u4e0a\u53ea\u662f JSON \u5bf9\u8c61 \uff0c\u56e0\u6b64\u53ef\u4ee5\u7528 Pydantic \u5efa\u6a21\u3002","title":"\u521b\u5efa Pydantic \u6a21\u578b"},{"location":"advanced/nosql-databases/#user","text":"\u9996\u5148\uff0c\u521b\u5efa User \u6a21\u578b\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u7684\u662f\u8fd9\u4e2a\u6a21\u578b\uff0c\u56e0\u6b64\uff0c\u4e0d\u8981\u628a hashed_password \u5305\u542b\u5728\u8fd9\u4e2a\u6a21\u578b\u91cc\u3002","title":"User \u6a21\u578b"},{"location":"advanced/nosql-databases/#userindb","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa UserInDB \u6a21\u578b\u3002 \u4f7f\u7528\u8fd9\u4e2a\u6a21\u578b\u628a\u6570\u636e\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u91cc\u3002 UserInDB \u6a21\u578b\u4e0d\u662f Pydantic \u4e2d BaseModel \u7684\u5b50\u7c7b\uff0c\u800c\u662f User \u7684\u5b50\u7c7b\uff0c\u56e0\u4e3a\u9664\u4e86 User \u6240\u6709\u5c5e\u6027\u4e4b\u5916\uff0c\u5b83\u53ea\u589e\u52a0\u4e24\u4e2a\u65b0\u5c5e\u6027\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user \u7b14\u8bb0 \u6ce8\u610f\uff0c hashed_password \u4e0e type \u5b57\u6bb5\u4f1a\u4fdd\u5b58\u5230\u6570\u636e\u5e93\u91cc\u3002 \u4f46\u5b83\u4e0d\u662f\u901a\u7528 User \u6a21\u578b\u7684\u7ec4\u4ef6\uff0c\uff08\u800c\u662f\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u8fd4\u56de\uff09\u3002","title":"UserInDB \u6a21\u578b"},{"location":"advanced/nosql-databases/#_2","text":"\u521b\u5efa\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\u7684\u51fd\u6570\uff1a \u63d0\u53d6\u7528\u6237\u540d \u6839\u636e\u7528\u6237\u540d\u751f\u6210\u6587\u6863 ID \u4f7f\u7528 ID \u63d0\u53d6\u6587\u6863 \u628a\u6587\u6863\u5185\u5bb9\u653e\u5165 UserInDB \u6a21\u578b \u521b\u5efa\u72ec\u7acb\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\uff0c\u4f7f\u7528 username \uff08\u6216\u4efb\u4f55\u5176\u4ed6\u53c2\u6570\uff09\u63d0\u53d6\u7528\u6237\u7684\u4e13\u5c5e\u51fd\u6570\uff0c\u53ef\u4ee5\u66f4\u8f7b\u6613\u5730\u5728\u591a\u4e2a\u4f4d\u7f6e\u590d\u7528\u8be5\u51fd\u6570\uff0c\u5e76\u4e3a\u5b83\u6dfb\u52a0 \u5355\u5143\u6d4b\u8bd5 \u3002 from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"\u63d0\u53d6\u7528\u6237"},{"location":"advanced/nosql-databases/#f-","text":"f\"userprofile::{username}\" \u662f Python \u7684 f-string \u3002 f-string \u628a {} \u91cc\u7684\u53d8\u91cf\u5c55\u5f00\u5e76\u6ce8\u5165\u5230\u5b57\u7b26\u4e32\u91cc\u3002","title":"f-\u5b57\u7b26\u4e32"},{"location":"advanced/nosql-databases/#dict","text":"\u5982\u679c\u60a8\u4e0d\u6e05\u695a\u4ec0\u4e48\u662f UserInDB(**result.value) \uff0c \u5b83\u4f7f\u7528\u7684\u662f dict \u201d\u89e3\u5305\u201c \u6280\u672f\u3002 \u5b83\u4ece result.value \u4e2d\u63d0\u53d6\u5b57\u5178\uff0c\u5e76\u63d0\u53d6\u6bcf\u4e2a\u952e\u548c\u503c\uff0c\u7136\u540e\u628a\u952e\u503c\u5bf9\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u7ed9 UserInDB \u3002 \u5982\u679c \u5b57\u5178 \u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a { \"username\" : \"johndoe\" , \"hashed_password\" : \"some_hash\" , } \u5b83\u4f1a\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4f20\u9012\u7ed9 UserInDB \uff1a UserInDB ( username = \"johndoe\" , hashed_password = \"some_hash\" )","title":"dict \u89e3\u5305"},{"location":"advanced/nosql-databases/#fastapi","text":"","title":"\u521b\u5efa FastAPI \u4ee3\u7801"},{"location":"advanced/nosql-databases/#fastapi_1","text":"from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"\u521b\u5efa FastAPI \u5e94\u7528"},{"location":"advanced/nosql-databases/#_3","text":"\u56e0\u4e3a\u672c\u4f8b\u4e2d\u7684\u4ee3\u7801\u8c03\u7528\u4e86 Couchbase\uff0c\u5e76\u4e14\u6ca1\u6709\u4f7f\u7528 \u8bd5\u9a8c\u6027\u7684 Python await \u652f\u6301 \uff0c\u56e0\u6b64\uff0c\u8981\u628a\u51fd\u6570\u58f0\u660e\u4e3a\u666e\u901a\u51fd\u6570\uff08 def \uff09\uff0c\u800c\u4e0d\u662f\u5f02\u6b65\u51fd\u6570\uff08 async \uff09\u3002 Couchbase \u8fd8\u5efa\u8bae\u4e0d\u8981\u5728\u591a \u7ebf\u7a0b \u4e2d\u4f7f\u7528\u5355\u4e2a Bucket \u5bf9\u8c61\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u76f4\u63a5\u83b7\u53d6 Bucket\uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9\u5de5\u5177\u51fd\u6570\uff1a from typing import Union from couchbase import LOCKMODE_WAIT from couchbase.bucket import Bucket from couchbase.cluster import Cluster , PasswordAuthenticator from fastapi import FastAPI from pydantic import BaseModel USERPROFILE_DOC_TYPE = \"userprofile\" def get_bucket (): cluster = Cluster ( \"couchbase://couchbasehost:8091?fetch_mutation_tokens=1&operation_timeout=30&n1ql_timeout=300\" ) authenticator = PasswordAuthenticator ( \"username\" , \"password\" ) cluster . authenticate ( authenticator ) bucket : Bucket = cluster . open_bucket ( \"bucket_name\" , lockmode = LOCKMODE_WAIT ) bucket . timeout = 30 bucket . n1ql_timeout = 300 return bucket class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): type : str = USERPROFILE_DOC_TYPE hashed_password : str def get_user ( bucket : Bucket , username : str ): doc_id = f \"userprofile:: { username } \" result = bucket . get ( doc_id , quiet = True ) if not result . value : return None user = UserInDB ( ** result . value ) return user # FastAPI specific code app = FastAPI () @app . get ( \"/users/ {username} \" , response_model = User ) def read_user ( username : str ): bucket = get_bucket () user = get_user ( bucket = bucket , username = username ) return user","title":"\u521b\u5efa\u8def\u5f84\u64cd\u4f5c\u51fd\u6570"},{"location":"advanced/nosql-databases/#_4","text":"\u53ea\u4f7f\u7528\u6807\u51c6\u5305\uff0c\u5c31\u53ef\u4ee5\u96c6\u6210\u7b2c\u4e09\u65b9 NoSQL \u6570\u636e\u5e93\u3002 \u540c\u6837\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e5f\u9002\u7528\u4e8e\u4efb\u4f55\u5916\u90e8\u5de5\u5177\u3001\u7cfb\u7edf\u6216 API\u3002","title":"\u5c0f\u7ed3"},{"location":"advanced/openapi-callbacks/","text":"OpenAPI \u56de\u8c03 \u00b6 \u60a8\u53ef\u4ee5\u521b\u5efa\u89e6\u53d1\u5916\u90e8 API \u8bf7\u6c42\u7684 \u8def\u5f84\u64cd\u4f5c API\uff0c\u8fd9\u4e2a\u5916\u90e8 API \u53ef\u4ee5\u662f\u522b\u4eba\u521b\u5efa\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u60a8\u81ea\u5df1\u521b\u5efa\u7684\u3002 API \u5e94\u7528\u8c03\u7528\u5916\u90e8 API \u65f6\u7684\u6d41\u7a0b\u53eb\u505a \u56de\u8c03 \u3002\u56e0\u4e3a\u5916\u90e8\u5f00\u53d1\u8005\u7f16\u5199\u7684\u8f6f\u4ef6\u53d1\u9001\u8bf7\u6c42\u81f3\u60a8\u7684 API\uff0c\u7136\u540e\u60a8\u7684 API \u8981\u8fdb\u884c\u56de\u8c03\uff0c\u5e76\u628a\u8bf7\u6c42\u53d1\u9001\u81f3\u5916\u90e8 API\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5b58\u6863\u5916\u90e8 API \u7684 \u4fe1\u606f \uff0c\u6bd4\u5982\u5e94\u8be5\u6709\u54ea\u4e9b \u8def\u5f84\u64cd\u4f5c \uff0c\u8fd4\u56de\u4ec0\u4e48\u6837\u7684\u8bf7\u6c42\u4f53\uff0c\u5e94\u8be5\u8fd4\u56de\u54ea\u79cd\u54cd\u5e94\u7b49\u3002 \u4f7f\u7528\u56de\u8c03\u7684\u5e94\u7528 \u00b6 \u793a\u4f8b\u5982\u4e0b\u3002 \u5047\u8bbe\u8981\u5f00\u53d1\u4e00\u4e2a\u521b\u5efa\u53d1\u7968\u7684\u5e94\u7528\u3002 \u53d1\u7968\u5305\u62ec id \u3001 title \uff08\u53ef\u9009\uff09\u3001 customer \u3001 total \u7b49\u5c5e\u6027\u3002 API \u7684\u7528\u6237 \uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09\u8981\u5728\u60a8\u7684 API \u5185\u4f7f\u7528 POST \u8bf7\u6c42\u521b\u5efa\u4e00\u6761\u53d1\u7968\u8bb0\u5f55\u3002 \uff08\u5047\u8bbe\uff09\u60a8\u7684 API \u5c06\uff1a \u628a\u53d1\u7968\u53d1\u9001\u81f3\u5916\u90e8\u5f00\u53d1\u8005\u7684\u6d88\u8d39\u8005 \u5f52\u96c6\u73b0\u91d1 \u628a\u901a\u77e5\u53d1\u9001\u81f3 API \u7684\u7528\u6237\uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09 \u901a\u8fc7\uff08\u4ece\u60a8\u7684 API\uff09\u53d1\u9001 POST \u8bf7\u6c42\u81f3\u5916\u90e8 API \uff08\u5373 \u56de\u8c03 \uff09\u6765\u5b8c\u6210 \u5e38\u89c4 FastAPI \u5e94\u7528 \u00b6 \u6dfb\u52a0\u56de\u8c03\u524d\uff0c\u9996\u5148\u770b\u4e0b\u5e38\u89c4 API \u5e94\u7528\u662f\u4ec0\u4e48\u6837\u5b50\u3002 \u5e38\u89c4 API \u5e94\u7528\u5305\u542b\u63a5\u6536 Invoice \u8bf7\u6c42\u4f53\u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u8fd8\u6709\u5305\u542b\u56de\u8c03 URL \u7684\u67e5\u8be2\u53c2\u6570 callback_url \u3002 \u8fd9\u90e8\u5206\u4ee3\u7801\u5f88\u5e38\u89c4\uff0c\u60a8\u5bf9\u7edd\u5927\u591a\u6570\u4ee3\u7801\u5e94\u8be5\u90fd\u6bd4\u8f83\u719f\u6089\u4e86\uff1a from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u63d0\u793a callback_url \u67e5\u8be2\u53c2\u6570\u4f7f\u7528 Pydantic \u7684 URL \u7c7b\u578b\u3002 \u6b64\u5904\u552f\u4e00\u6bd4\u8f83\u65b0\u7684\u5185\u5bb9\u662f \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u7684 callbacks=invoices_callback_router.routes \u53c2\u6570\uff0c\u4e0b\u6587\u4ecb\u7ecd\u3002 \u5b58\u6863\u56de\u8c03 \u00b6 \u5b9e\u9645\u7684\u56de\u8c03\u4ee3\u7801\u9ad8\u5ea6\u4f9d\u8d56\u4e8e\u60a8\u81ea\u5df1\u7684 API \u5e94\u7528\u3002 \u5e76\u4e14\u53ef\u80fd\u6bcf\u4e2a\u5e94\u7528\u90fd\u5404\u4e0d\u76f8\u540c\u3002 \u56de\u8c03\u4ee3\u7801\u53ef\u80fd\u53ea\u6709\u4e00\u4e24\u884c\uff0c\u6bd4\u5982\uff1a callback_url = \"https://example.com/api/v1/invoices/events/\" requests . post ( callback_url , json = { \"description\" : \"Invoice paid\" , \"paid\" : True }) \u4f46\u56de\u8c03\u6700\u91cd\u8981\u7684\u90e8\u5206\u53ef\u80fd\u662f\uff0c\u6839\u636e API \u8981\u53d1\u9001\u7ed9\u56de\u8c03\u8bf7\u6c42\u4f53\u7684\u6570\u636e\u7b49\u5185\u5bb9\uff0c\u786e\u4fdd\u60a8\u7684 API \u7528\u6237\uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09\u6b63\u786e\u5730\u5b9e\u73b0 \u5916\u90e8 API \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4e0b\u4e00\u6b65\u8981\u505a\u7684\u5c31\u662f\u6dfb\u52a0\u4ee3\u7801\uff0c\u4e3a\u4ece API \u63a5\u6536\u56de\u8c03\u7684 \u5916\u90e8 API \u5b58\u6863\u3002 \u8fd9\u90e8\u5206\u6587\u6863\u5728 /docs \u4e0b\u7684 Swagger API \u6587\u6863\u4e2d\u663e\u793a\uff0c\u5e76\u4e14\u4f1a\u544a\u8bc9\u5916\u90e8\u5f00\u53d1\u8005\u5982\u4f55\u6784\u5efa \u5916\u90e8 API \u3002 \u672c\u4f8b\u6ca1\u6709\u5b9e\u73b0\u56de\u8c03\u672c\u8eab\uff08\u53ea\u662f\u4e00\u884c\u4ee3\u7801\uff09\uff0c\u53ea\u6709\u6587\u6863\u90e8\u5206\u3002 \u63d0\u793a \u5b9e\u9645\u7684\u56de\u8c03\u53ea\u662f HTTP \u8bf7\u6c42\u3002 \u5b9e\u73b0\u56de\u8c03\u65f6\uff0c\u8981\u4f7f\u7528 HTTPX \u6216 Requests \u3002 \u7f16\u5199\u56de\u8c03\u6587\u6863\u4ee3\u7801 \u00b6 \u5e94\u7528\u4e0d\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u53ea\u662f\u7528\u5b83\u6765 \u8bb0\u5f55 \u5916\u90e8 API \u3002 \u4f46\uff0c\u60a8\u5df2\u7ecf\u77e5\u9053\u7528 FastAPI \u521b\u5efa\u81ea\u52a8 API \u6587\u6863\u6709\u591a\u7b80\u5355\u4e86\u3002 \u6211\u4eec\u8981\u4f7f\u7528\u4e0e\u5b58\u6863 \u5916\u90e8 API \u76f8\u540c\u7684\u77e5\u8bc6\u2026\u2026\u901a\u8fc7\u521b\u5efa\u5916\u90e8 API \u8981\u5b9e\u73b0\u7684 \u8def\u5f84\u64cd\u4f5c \uff08\u60a8\u7684 API \u8981\u8c03\u7528\u7684\uff09\u3002 \u63d0\u793a \u7f16\u5199\u5b58\u6863\u56de\u8c03\u7684\u4ee3\u7801\u65f6\uff0c\u5047\u8bbe\u60a8\u662f \u5916\u90e8\u5f00\u53d1\u8005 \u53ef\u80fd\u4f1a\u7528\u7684\u4e0a\u3002\u5e76\u4e14\u60a8\u5f53\u524d\u6b63\u5728\u5b9e\u73b0\u7684\u662f \u5916\u90e8 API \uff0c\u4e0d\u662f \u60a8\u81ea\u5df1\u7684 API \u3002 \u4e34\u65f6\u6539\u53d8\uff08\u4e3a\u5916\u90e8\u5f00\u53d1\u8005\u7684\uff09\u89c6\u89d2\u80fd\u8ba9\u60a8\u66f4\u6e05\u695a\u8be5\u5982\u4f55\u653e\u7f6e \u5916\u90e8 API \u54cd\u5e94\u548c\u8bf7\u6c42\u4f53\u7684\u53c2\u6570\u4e0e Pydantic \u6a21\u578b\u7b49\u3002 \u521b\u5efa\u56de\u8c03\u7684 APIRouter \u00b6 \u9996\u5148\uff0c\u65b0\u5efa\u5305\u542b\u4e00\u4e9b\u7528\u4e8e\u56de\u8c03\u7684 APIRouter \u3002 from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u521b\u5efa\u56de\u8c03 \u8def\u5f84\u64cd\u4f5c \u00b6 \u521b\u5efa\u56de\u8c03 \u8def\u5f84\u64cd\u4f5c \u4e5f\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684 APIRouter \u3002 \u5b83\u770b\u8d77\u6765\u548c\u5e38\u89c4 FastAPI \u8def\u5f84\u64cd\u4f5c \u5dee\u4e0d\u591a\uff1a \u58f0\u660e\u8981\u63a5\u6536\u7684\u8bf7\u6c42\u4f53\uff0c\u4f8b\u5982\uff0c body: InvoiceEvent \u8fd8\u8981\u58f0\u660e\u8981\u8fd4\u56de\u7684\u54cd\u5e94\uff0c\u4f8b\u5982\uff0c response_model=InvoiceEventReceived from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u56de\u8c03 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5e38\u89c4 \u8def\u5f84\u64cd\u4f5c \u6709\u4e24\u70b9\u4e3b\u8981\u533a\u522b\uff1a \u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u5b9e\u9645\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5e94\u7528\u4e0d\u4f1a\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u3002\u5b83\u53ea\u662f\u7528\u4e8e\u5b58\u6863 \u5916\u90e8 API \u3002\u56e0\u6b64\uff0c\u51fd\u6570\u7684\u5185\u5bb9\u53ea\u9700\u8981 pass \u5c31\u53ef\u4ee5\u4e86 \u8def\u5f84 \u53ef\u4ee5\u5305\u542b OpenAPI 3 \u8868\u8fbe\u5f0f \uff08\u8be6\u89c1\u4e0b\u6587\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e26\u53c2\u6570\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u53d1\u9001\u81f3\u60a8\u7684 API \u7684\u539f\u59cb\u8bf7\u6c42\u7684\u90e8\u5206 \u56de\u8c03\u8def\u5f84\u8868\u8fbe\u5f0f \u00b6 \u56de\u8c03 \u8def\u5f84 \u652f\u6301\u5305\u542b\u53d1\u9001\u7ed9\u60a8\u7684 API \u7684\u539f\u59cb\u8bf7\u6c42\u7684\u90e8\u5206\u7684 OpenAPI 3 \u8868\u8fbe\u5f0f \u3002 \u672c\u4f8b\u4e2d\u662f \u5b57\u7b26\u4e32 \uff1a \"{$callback_url}/invoices/{$request.body.id}\" \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684 API \u7528\u6237\uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09\u53d1\u9001\u8bf7\u6c42\u5230\u60a8\u7684 API\uff1a https://yourapi.com/invoices/?callback_url=https://www.external.org/events \u4f7f\u7528\u5982\u4e0b JSON \u8bf7\u6c42\u4f53\uff1a { \"id\" : \"2expen51ve\" , \"customer\" : \"Mr. Richie Rich\" , \"total\" : \"9999\" } \u7136\u540e\uff0c\u60a8\u7684 API \u5c31\u4f1a\u5904\u7406\u53d1\u7968\uff0c\u5e76\u5728\u67d0\u4e2a\u70b9\u4e4b\u540e\uff0c\u53d1\u9001\u56de\u8c03\u8bf7\u6c42\u81f3 callback_url \uff08\u5916\u90e8 API\uff09\uff1a https://www.external.org/events/invoices/2expen51ve JSON \u8bf7\u6c42\u4f53\u5305\u542b\u5982\u4e0b\u5185\u5bb9\uff1a { \"description\" : \"Payment celebration\" , \"paid\" : true } \u5b83\u4f1a\u9884\u671f \u5916\u90e8 API \u7684\u54cd\u5e94\u5305\u542b\u5982\u4e0b JSON \u8bf7\u6c42\u4f53\uff1a { \"ok\" : true } \u63d0\u793a \u6ce8\u610f\uff0c\u56de\u8c03 URL\u5305\u542b callback_url \uff08 https://www.external.org/events \uff09\u4e2d\u7684\u67e5\u8be2\u53c2\u6570\uff0c\u8fd8\u6709 JSON \u8bf7\u6c42\u4f53\u5185\u90e8\u7684\u53d1\u7968 ID\uff08 2expen51ve \uff09\u3002 \u6dfb\u52a0\u56de\u8c03\u8def\u7531 \u00b6 \u81f3\u6b64\uff0c\u5728\u4e0a\u6587\u521b\u5efa\u7684\u56de\u8c03\u8def\u7531\u91cc\u5c31\u5305\u542b\u4e86 \u56de\u8c03\u8def\u5f84\u64cd\u4f5c \uff08\u5916\u90e8\u5f00\u53d1\u8005\u8981\u5728\u5916\u90e8 API \u4e2d\u5b9e\u73b0\uff09\u3002 \u73b0\u5728\u4f7f\u7528 API \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684\u53c2\u6570 callbacks \uff0c\u4ece\u56de\u8c03\u8def\u7531\u4f20\u9012\u5c5e\u6027 .routes \uff08\u5b9e\u9645\u4e0a\u53ea\u662f\u8def\u7531/\u8def\u5f84\u64cd\u4f5c\u7684 \u5217\u8868 \uff09\uff1a from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u63d0\u793a \u6ce8\u610f\uff0c\u4e0d\u80fd\u628a\u8def\u7531\u672c\u8eab\uff08 invoices_callback_router \uff09\u4f20\u9012\u7ed9 callback= \uff0c\u8981\u4f20\u9012 invoices_callback_router.routes \u4e2d\u7684 .routes \u5c5e\u6027\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u73b0\u5728\uff0c\u4f7f\u7528 Uvicorn \u542f\u52a8\u5e94\u7528\uff0c\u6253\u5f00 http://127.0.0.1:8000/docs\u3002 \u5c31\u80fd\u770b\u5230\u6587\u6863\u7684 \u8def\u5f84\u64cd\u4f5c \u5df2\u7ecf\u5305\u542b\u4e86 \u56de\u8c03 \u7684\u5185\u5bb9\u4ee5\u53ca \u5916\u90e8 API \uff1a","title":"OpenAPI \u56de\u8c03"},{"location":"advanced/openapi-callbacks/#openapi","text":"\u60a8\u53ef\u4ee5\u521b\u5efa\u89e6\u53d1\u5916\u90e8 API \u8bf7\u6c42\u7684 \u8def\u5f84\u64cd\u4f5c API\uff0c\u8fd9\u4e2a\u5916\u90e8 API \u53ef\u4ee5\u662f\u522b\u4eba\u521b\u5efa\u7684\uff0c\u4e5f\u53ef\u4ee5\u662f\u7531\u60a8\u81ea\u5df1\u521b\u5efa\u7684\u3002 API \u5e94\u7528\u8c03\u7528\u5916\u90e8 API \u65f6\u7684\u6d41\u7a0b\u53eb\u505a \u56de\u8c03 \u3002\u56e0\u4e3a\u5916\u90e8\u5f00\u53d1\u8005\u7f16\u5199\u7684\u8f6f\u4ef6\u53d1\u9001\u8bf7\u6c42\u81f3\u60a8\u7684 API\uff0c\u7136\u540e\u60a8\u7684 API \u8981\u8fdb\u884c\u56de\u8c03\uff0c\u5e76\u628a\u8bf7\u6c42\u53d1\u9001\u81f3\u5916\u90e8 API\u3002 \u6b64\u65f6\uff0c\u6211\u4eec\u9700\u8981\u5b58\u6863\u5916\u90e8 API \u7684 \u4fe1\u606f \uff0c\u6bd4\u5982\u5e94\u8be5\u6709\u54ea\u4e9b \u8def\u5f84\u64cd\u4f5c \uff0c\u8fd4\u56de\u4ec0\u4e48\u6837\u7684\u8bf7\u6c42\u4f53\uff0c\u5e94\u8be5\u8fd4\u56de\u54ea\u79cd\u54cd\u5e94\u7b49\u3002","title":"OpenAPI \u56de\u8c03"},{"location":"advanced/openapi-callbacks/#_1","text":"\u793a\u4f8b\u5982\u4e0b\u3002 \u5047\u8bbe\u8981\u5f00\u53d1\u4e00\u4e2a\u521b\u5efa\u53d1\u7968\u7684\u5e94\u7528\u3002 \u53d1\u7968\u5305\u62ec id \u3001 title \uff08\u53ef\u9009\uff09\u3001 customer \u3001 total \u7b49\u5c5e\u6027\u3002 API \u7684\u7528\u6237 \uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09\u8981\u5728\u60a8\u7684 API \u5185\u4f7f\u7528 POST \u8bf7\u6c42\u521b\u5efa\u4e00\u6761\u53d1\u7968\u8bb0\u5f55\u3002 \uff08\u5047\u8bbe\uff09\u60a8\u7684 API \u5c06\uff1a \u628a\u53d1\u7968\u53d1\u9001\u81f3\u5916\u90e8\u5f00\u53d1\u8005\u7684\u6d88\u8d39\u8005 \u5f52\u96c6\u73b0\u91d1 \u628a\u901a\u77e5\u53d1\u9001\u81f3 API \u7684\u7528\u6237\uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09 \u901a\u8fc7\uff08\u4ece\u60a8\u7684 API\uff09\u53d1\u9001 POST \u8bf7\u6c42\u81f3\u5916\u90e8 API \uff08\u5373 \u56de\u8c03 \uff09\u6765\u5b8c\u6210","title":"\u4f7f\u7528\u56de\u8c03\u7684\u5e94\u7528"},{"location":"advanced/openapi-callbacks/#fastapi","text":"\u6dfb\u52a0\u56de\u8c03\u524d\uff0c\u9996\u5148\u770b\u4e0b\u5e38\u89c4 API \u5e94\u7528\u662f\u4ec0\u4e48\u6837\u5b50\u3002 \u5e38\u89c4 API \u5e94\u7528\u5305\u542b\u63a5\u6536 Invoice \u8bf7\u6c42\u4f53\u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u8fd8\u6709\u5305\u542b\u56de\u8c03 URL \u7684\u67e5\u8be2\u53c2\u6570 callback_url \u3002 \u8fd9\u90e8\u5206\u4ee3\u7801\u5f88\u5e38\u89c4\uff0c\u60a8\u5bf9\u7edd\u5927\u591a\u6570\u4ee3\u7801\u5e94\u8be5\u90fd\u6bd4\u8f83\u719f\u6089\u4e86\uff1a from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u63d0\u793a callback_url \u67e5\u8be2\u53c2\u6570\u4f7f\u7528 Pydantic \u7684 URL \u7c7b\u578b\u3002 \u6b64\u5904\u552f\u4e00\u6bd4\u8f83\u65b0\u7684\u5185\u5bb9\u662f \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u7684 callbacks=invoices_callback_router.routes \u53c2\u6570\uff0c\u4e0b\u6587\u4ecb\u7ecd\u3002","title":"\u5e38\u89c4 FastAPI \u5e94\u7528"},{"location":"advanced/openapi-callbacks/#_2","text":"\u5b9e\u9645\u7684\u56de\u8c03\u4ee3\u7801\u9ad8\u5ea6\u4f9d\u8d56\u4e8e\u60a8\u81ea\u5df1\u7684 API \u5e94\u7528\u3002 \u5e76\u4e14\u53ef\u80fd\u6bcf\u4e2a\u5e94\u7528\u90fd\u5404\u4e0d\u76f8\u540c\u3002 \u56de\u8c03\u4ee3\u7801\u53ef\u80fd\u53ea\u6709\u4e00\u4e24\u884c\uff0c\u6bd4\u5982\uff1a callback_url = \"https://example.com/api/v1/invoices/events/\" requests . post ( callback_url , json = { \"description\" : \"Invoice paid\" , \"paid\" : True }) \u4f46\u56de\u8c03\u6700\u91cd\u8981\u7684\u90e8\u5206\u53ef\u80fd\u662f\uff0c\u6839\u636e API \u8981\u53d1\u9001\u7ed9\u56de\u8c03\u8bf7\u6c42\u4f53\u7684\u6570\u636e\u7b49\u5185\u5bb9\uff0c\u786e\u4fdd\u60a8\u7684 API \u7528\u6237\uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09\u6b63\u786e\u5730\u5b9e\u73b0 \u5916\u90e8 API \u3002 \u56e0\u6b64\uff0c\u6211\u4eec\u4e0b\u4e00\u6b65\u8981\u505a\u7684\u5c31\u662f\u6dfb\u52a0\u4ee3\u7801\uff0c\u4e3a\u4ece API \u63a5\u6536\u56de\u8c03\u7684 \u5916\u90e8 API \u5b58\u6863\u3002 \u8fd9\u90e8\u5206\u6587\u6863\u5728 /docs \u4e0b\u7684 Swagger API \u6587\u6863\u4e2d\u663e\u793a\uff0c\u5e76\u4e14\u4f1a\u544a\u8bc9\u5916\u90e8\u5f00\u53d1\u8005\u5982\u4f55\u6784\u5efa \u5916\u90e8 API \u3002 \u672c\u4f8b\u6ca1\u6709\u5b9e\u73b0\u56de\u8c03\u672c\u8eab\uff08\u53ea\u662f\u4e00\u884c\u4ee3\u7801\uff09\uff0c\u53ea\u6709\u6587\u6863\u90e8\u5206\u3002 \u63d0\u793a \u5b9e\u9645\u7684\u56de\u8c03\u53ea\u662f HTTP \u8bf7\u6c42\u3002 \u5b9e\u73b0\u56de\u8c03\u65f6\uff0c\u8981\u4f7f\u7528 HTTPX \u6216 Requests \u3002","title":"\u5b58\u6863\u56de\u8c03"},{"location":"advanced/openapi-callbacks/#_3","text":"\u5e94\u7528\u4e0d\u6267\u884c\u8fd9\u90e8\u5206\u4ee3\u7801\uff0c\u53ea\u662f\u7528\u5b83\u6765 \u8bb0\u5f55 \u5916\u90e8 API \u3002 \u4f46\uff0c\u60a8\u5df2\u7ecf\u77e5\u9053\u7528 FastAPI \u521b\u5efa\u81ea\u52a8 API \u6587\u6863\u6709\u591a\u7b80\u5355\u4e86\u3002 \u6211\u4eec\u8981\u4f7f\u7528\u4e0e\u5b58\u6863 \u5916\u90e8 API \u76f8\u540c\u7684\u77e5\u8bc6\u2026\u2026\u901a\u8fc7\u521b\u5efa\u5916\u90e8 API \u8981\u5b9e\u73b0\u7684 \u8def\u5f84\u64cd\u4f5c \uff08\u60a8\u7684 API \u8981\u8c03\u7528\u7684\uff09\u3002 \u63d0\u793a \u7f16\u5199\u5b58\u6863\u56de\u8c03\u7684\u4ee3\u7801\u65f6\uff0c\u5047\u8bbe\u60a8\u662f \u5916\u90e8\u5f00\u53d1\u8005 \u53ef\u80fd\u4f1a\u7528\u7684\u4e0a\u3002\u5e76\u4e14\u60a8\u5f53\u524d\u6b63\u5728\u5b9e\u73b0\u7684\u662f \u5916\u90e8 API \uff0c\u4e0d\u662f \u60a8\u81ea\u5df1\u7684 API \u3002 \u4e34\u65f6\u6539\u53d8\uff08\u4e3a\u5916\u90e8\u5f00\u53d1\u8005\u7684\uff09\u89c6\u89d2\u80fd\u8ba9\u60a8\u66f4\u6e05\u695a\u8be5\u5982\u4f55\u653e\u7f6e \u5916\u90e8 API \u54cd\u5e94\u548c\u8bf7\u6c42\u4f53\u7684\u53c2\u6570\u4e0e Pydantic \u6a21\u578b\u7b49\u3002","title":"\u7f16\u5199\u56de\u8c03\u6587\u6863\u4ee3\u7801"},{"location":"advanced/openapi-callbacks/#apirouter","text":"\u9996\u5148\uff0c\u65b0\u5efa\u5305\u542b\u4e00\u4e9b\u7528\u4e8e\u56de\u8c03\u7684 APIRouter \u3002 from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" }","title":"\u521b\u5efa\u56de\u8c03\u7684 APIRouter"},{"location":"advanced/openapi-callbacks/#_4","text":"\u521b\u5efa\u56de\u8c03 \u8def\u5f84\u64cd\u4f5c \u4e5f\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684 APIRouter \u3002 \u5b83\u770b\u8d77\u6765\u548c\u5e38\u89c4 FastAPI \u8def\u5f84\u64cd\u4f5c \u5dee\u4e0d\u591a\uff1a \u58f0\u660e\u8981\u63a5\u6536\u7684\u8bf7\u6c42\u4f53\uff0c\u4f8b\u5982\uff0c body: InvoiceEvent \u8fd8\u8981\u58f0\u660e\u8981\u8fd4\u56de\u7684\u54cd\u5e94\uff0c\u4f8b\u5982\uff0c response_model=InvoiceEventReceived from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u56de\u8c03 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5e38\u89c4 \u8def\u5f84\u64cd\u4f5c \u6709\u4e24\u70b9\u4e3b\u8981\u533a\u522b\uff1a \u5b83\u4e0d\u9700\u8981\u4efb\u4f55\u5b9e\u9645\u7684\u4ee3\u7801\uff0c\u56e0\u4e3a\u5e94\u7528\u4e0d\u4f1a\u8c03\u7528\u8fd9\u6bb5\u4ee3\u7801\u3002\u5b83\u53ea\u662f\u7528\u4e8e\u5b58\u6863 \u5916\u90e8 API \u3002\u56e0\u6b64\uff0c\u51fd\u6570\u7684\u5185\u5bb9\u53ea\u9700\u8981 pass \u5c31\u53ef\u4ee5\u4e86 \u8def\u5f84 \u53ef\u4ee5\u5305\u542b OpenAPI 3 \u8868\u8fbe\u5f0f \uff08\u8be6\u89c1\u4e0b\u6587\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528\u5e26\u53c2\u6570\u7684\u53d8\u91cf\uff0c\u4ee5\u53ca\u53d1\u9001\u81f3\u60a8\u7684 API \u7684\u539f\u59cb\u8bf7\u6c42\u7684\u90e8\u5206","title":"\u521b\u5efa\u56de\u8c03\u8def\u5f84\u64cd\u4f5c"},{"location":"advanced/openapi-callbacks/#_5","text":"\u56de\u8c03 \u8def\u5f84 \u652f\u6301\u5305\u542b\u53d1\u9001\u7ed9\u60a8\u7684 API \u7684\u539f\u59cb\u8bf7\u6c42\u7684\u90e8\u5206\u7684 OpenAPI 3 \u8868\u8fbe\u5f0f \u3002 \u672c\u4f8b\u4e2d\u662f \u5b57\u7b26\u4e32 \uff1a \"{$callback_url}/invoices/{$request.body.id}\" \u56e0\u6b64\uff0c\u5982\u679c\u60a8\u7684 API \u7528\u6237\uff08\u5916\u90e8\u5f00\u53d1\u8005\uff09\u53d1\u9001\u8bf7\u6c42\u5230\u60a8\u7684 API\uff1a https://yourapi.com/invoices/?callback_url=https://www.external.org/events \u4f7f\u7528\u5982\u4e0b JSON \u8bf7\u6c42\u4f53\uff1a { \"id\" : \"2expen51ve\" , \"customer\" : \"Mr. Richie Rich\" , \"total\" : \"9999\" } \u7136\u540e\uff0c\u60a8\u7684 API \u5c31\u4f1a\u5904\u7406\u53d1\u7968\uff0c\u5e76\u5728\u67d0\u4e2a\u70b9\u4e4b\u540e\uff0c\u53d1\u9001\u56de\u8c03\u8bf7\u6c42\u81f3 callback_url \uff08\u5916\u90e8 API\uff09\uff1a https://www.external.org/events/invoices/2expen51ve JSON \u8bf7\u6c42\u4f53\u5305\u542b\u5982\u4e0b\u5185\u5bb9\uff1a { \"description\" : \"Payment celebration\" , \"paid\" : true } \u5b83\u4f1a\u9884\u671f \u5916\u90e8 API \u7684\u54cd\u5e94\u5305\u542b\u5982\u4e0b JSON \u8bf7\u6c42\u4f53\uff1a { \"ok\" : true } \u63d0\u793a \u6ce8\u610f\uff0c\u56de\u8c03 URL\u5305\u542b callback_url \uff08 https://www.external.org/events \uff09\u4e2d\u7684\u67e5\u8be2\u53c2\u6570\uff0c\u8fd8\u6709 JSON \u8bf7\u6c42\u4f53\u5185\u90e8\u7684\u53d1\u7968 ID\uff08 2expen51ve \uff09\u3002","title":"\u56de\u8c03\u8def\u5f84\u8868\u8fbe\u5f0f"},{"location":"advanced/openapi-callbacks/#_6","text":"\u81f3\u6b64\uff0c\u5728\u4e0a\u6587\u521b\u5efa\u7684\u56de\u8c03\u8def\u7531\u91cc\u5c31\u5305\u542b\u4e86 \u56de\u8c03\u8def\u5f84\u64cd\u4f5c \uff08\u5916\u90e8\u5f00\u53d1\u8005\u8981\u5728\u5916\u90e8 API \u4e2d\u5b9e\u73b0\uff09\u3002 \u73b0\u5728\u4f7f\u7528 API \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684\u53c2\u6570 callbacks \uff0c\u4ece\u56de\u8c03\u8def\u7531\u4f20\u9012\u5c5e\u6027 .routes \uff08\u5b9e\u9645\u4e0a\u53ea\u662f\u8def\u7531/\u8def\u5f84\u64cd\u4f5c\u7684 \u5217\u8868 \uff09\uff1a from typing import Union from fastapi import APIRouter , FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Invoice ( BaseModel ): id : str title : Union [ str , None ] = None customer : str total : float class InvoiceEvent ( BaseModel ): description : str paid : bool class InvoiceEventReceived ( BaseModel ): ok : bool invoices_callback_router = APIRouter () @invoices_callback_router . post ( \"{$callback_url}/invoices/{$request.body.id}\" , response_model = InvoiceEventReceived ) def invoice_notification ( body : InvoiceEvent ): pass @app . post ( \"/invoices/\" , callbacks = invoices_callback_router . routes ) def create_invoice ( invoice : Invoice , callback_url : Union [ HttpUrl , None ] = None ): \"\"\" Create an invoice. This will (let's imagine) let the API user (some external developer) create an invoice. And this path operation will: * Send the invoice to the client. * Collect the money from the client. * Send a notification back to the API user (the external developer), as a callback. * At this point is that the API will somehow send a POST request to the external API with the notification of the invoice event (e.g. \"payment successful\"). \"\"\" # Send the invoice, collect the money, send the notification (the callback) return { \"msg\" : \"Invoice received\" } \u63d0\u793a \u6ce8\u610f\uff0c\u4e0d\u80fd\u628a\u8def\u7531\u672c\u8eab\uff08 invoices_callback_router \uff09\u4f20\u9012\u7ed9 callback= \uff0c\u8981\u4f20\u9012 invoices_callback_router.routes \u4e2d\u7684 .routes \u5c5e\u6027\u3002","title":"\u6dfb\u52a0\u56de\u8c03\u8def\u7531"},{"location":"advanced/openapi-callbacks/#_7","text":"\u73b0\u5728\uff0c\u4f7f\u7528 Uvicorn \u542f\u52a8\u5e94\u7528\uff0c\u6253\u5f00 http://127.0.0.1:8000/docs\u3002 \u5c31\u80fd\u770b\u5230\u6587\u6863\u7684 \u8def\u5f84\u64cd\u4f5c \u5df2\u7ecf\u5305\u542b\u4e86 \u56de\u8c03 \u7684\u5185\u5bb9\u4ee5\u53ca \u5916\u90e8 API \uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/path-operation-advanced-configuration/","text":"\u8def\u5f84\u64cd\u4f5c\u9ad8\u7ea7\u914d\u7f6e \u00b6 OpenAPI \u7684 operationId \u00b6 \u8b66\u544a \u5982\u679c\u60a8\u4e0d\u662f OpenAPI \u4e13\u5bb6 \uff0c\u8bf7\u8df3\u8fc7\u672c\u7ae0\u3002 operation_id \u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e \u8def\u5f84\u64cd\u4f5c \u4e2d OpenAPI \u7684 operationId \u3002 \u4f46\u8def\u5f84\u64cd\u4f5c\u7684 operation_id \u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , operation_id = \"some_specific_id_you_define\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] \u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c \u51fd\u6570\u540d\u5b9a\u4e49 operationId \u00b6 \u4f7f\u7528 API \u7684\u51fd\u6570\u540d\u5b9a\u4e49 operationId \uff0c\u9700\u8981\u5148\u904d\u5386 API \u51fd\u6570\u540d\uff0c\u518d\u4f7f\u7528 APIRoute.name \u91cd\u5199 \u8def\u5f84\u64cd\u4f5c \u7684 operation_id \u3002 \u8fd9\u9879\u64cd\u4f5c\u8981\u5728\u6dfb\u52a0\u4e86\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u540e\u6267\u884c\u3002 from fastapi import FastAPI from fastapi.routing import APIRoute app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] def use_route_names_as_operation_ids ( app : FastAPI ) -> None : \"\"\" Simplify operation IDs so that generated API clients have simpler function names. Should be called only after all routes have been added. \"\"\" for route in app . routes : if isinstance ( route , APIRoute ): route . operation_id = route . name # in this case, 'read_items' use_route_names_as_operation_ids ( app ) \u63d0\u793a \u624b\u52a8\u8c03\u7528 app.openapi() \u65f6\uff0c\u5e94\u9884\u5148\u66f4\u65b0 operationId \u3002 \u8b66\u544a \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u65f6\uff0c\u52a1\u5fc5\u786e\u4fdd \u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u540d \u662f\u552f\u4e00\u7684\u3002 \u5373\u4f7f\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u6a21\u5757\u91cc\uff08Python \u6587\u4ef6\uff09\u3002 \u4ece OpenAPI \u4e2d\u6392\u9664 \u00b6 \u628a\u53c2\u6570 include_in_schema \u8bbe\u7f6e\u4e3a False \uff0c\u5c31\u4f1a\u5728 OpenAPI \u6982\u56fe\u4e2d\u6392\u9664 \u8def\u5f84\u64cd\u4f5c \uff08\u540c\u65f6\u4e5f\u4ece API \u6587\u6863\u4e2d\u6392\u9664\u8be5 \u8def\u5f84\u64cd\u4f5c \uff09\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , include_in_schema = False ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] docstring \u7684\u9ad8\u7ea7\u63cf\u8ff0 \u00b6 \u9650\u5236 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 \u6587\u6863\u5b57\u7b26\u4e32 \u5728 OpenAPI \u4e2d\u663e\u793a\u7684\u884c\u6570\u3002 \u6dfb\u52a0 \\f \uff08\u6362\u9875\u7b26\uff09\uff0c FastAPI \u5728\u6362\u9875\u7b26\u6240\u5728\u4f4d\u7f6e\u622a\u65ad\u5728 OpenAPI \u4e2d\u7684\u8f93\u51fa\u5185\u5bb9\u3002 \u6362\u9875\u7b26\u540e\u7684\u5185\u5bb9\u4e0d\u4f1a\u5728\u6587\u6863\u4e2d\u663e\u793a\uff0c\u4f46 Sphinx \u7b49\u5de5\u5177\u4ecd\u53ef\u4ee5\u4f7f\u7528\u3002 from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \\f :param item: User input. \"\"\" return item \u9644\u52a0\u54cd\u5e94 \u00b6 \u60a8\u53ef\u80fd\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4e3a \u8def\u5f84\u64cd\u4f5c \u58f0\u660e response_model \u548c status_code \u3002 \u8fd9\u79cd\u65b9\u5f0f\u5b9a\u4e49\u4e86 \u8def\u5f84\u64cd\u4f5c \u4e3b\u54cd\u5e94\u7684\u5143\u6570\u636e\u3002 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u3001\u72b6\u6001\u7801\u7b49\u58f0\u660e\u9644\u52a0\u54cd\u5e94\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357\u6709\u4e00\u7ae0\u4e13\u95e8\u4ecb\u7ecd\u76f8\u5173\u5185\u5bb9\uff0c\u8be6\u89c1 OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u3002 OpenAPI Extra \u00b6 \u5728\u5e94\u7528\u4e2d\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u65f6\uff0c FastAPI \u4f1a\u81ea\u52a8\u751f\u6210 \u8def\u5f84\u64cd\u4f5c \u7684\u5143\u6570\u636e\uff0c\u5e76\u628a\u5b83\u6dfb\u52a0\u81f3 OpenAPI \u6982\u56fe\u3002 \u6280\u672f\u7ec6\u8282 OpenAPI \u89c4\u8303\u4e2d\uff0c\u5b83\u88ab\u79f0\u4e3a \u64cd\u4f5c\u5bf9\u8c61 \u3002 \u8fd9\u4e9b\u5143\u6570\u636e\u5305\u542b \u8def\u5f84\u64cd\u4f5c \u7684\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u7528\u4e8e\u751f\u6210 API \u6587\u6863\u3002 \u5305\u62ec tags \u3001 parameters \u3001 requestBody \u3001 responses \u7b49\u3002 \u8fd9\u4e2a\u4e13\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c \u7684 OpenAPI \u6982\u56fe\u901a\u5e38\u7531 FastAPI \u81ea\u52a8\u751f\u6210\uff0c\u8fd8\u53ef\u4ee5\u6269\u5c55\u3002 \u63d0\u793a \u8fd9\u662f\u4e00\u4e2a\u4f4e\u7ea7\u6269\u5c55\u70b9\u3002 \u5982\u679c\u53ea\u662f\u8981\u58f0\u660e\u9644\u52a0\u54cd\u5e94\uff0c\u4f7f\u7528 OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u66f4\u65b9\u4fbf\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 openapi_extra \u53c2\u6570\u6269\u5c55 \u8def\u5f84\u64cd\u4f5c \u7684 OpenAPI \u6982\u56fe\u3002 OpenAPI \u6269\u5c55 \u00b6 \u4f8b\u5982\uff0c\u4f7f\u7528 openapi_extra \u58f0\u660e OpenAPI \u6269\u5c55 \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , openapi_extra = { \"x-aperture-labs-portal\" : \"blue\" }) async def read_items (): return [{ \"item_id\" : \"portal-gun\" }] \u6253\u5f00 API \u6587\u6863\uff0c\u5728\u6307\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u5e95\u90e8\u4f1a\u663e\u793a\u6269\u5c55\u9879\u3002 \u67e5\u770b OpenAPI \u7684\u7ed3\u679c\uff08API \u91cc\u7684 /openapi.json \uff09\uff0c\u5c31\u80fd\u770b\u5230\u6269\u5c55\u9879\u662f\u7279\u5b9a \u8def\u5f84\u64cd\u4f5c \u7684\u7ec4\u6210\u90e8\u5206\u3002 { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"summary\" : \"Read Items\" , \"operationId\" : \"read_items_items__get\" , \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : {} } } } }, \"x-aperture-labs-portal\" : \"blue\" } } } } \u81ea\u5b9a\u4e49 OpenAPI \u8def\u5f84\u64cd\u4f5c \u6982\u56fe \u00b6 openapi_extra \u91cc\u7684\u5b57\u5178\u4e0e\u81ea\u52a8\u751f\u6210\u7684 \u8def\u5f84\u64cd\u4f5c OpenAPI \u6982\u56fe\u53ef\u4ee5\u6df1\u5ea6\u7ed3\u5408\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u4e3a\u81ea\u52a8\u751f\u6210\u7684\u6982\u56fe\u6dfb\u52a0\u9644\u52a0\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u81ea\u5df1\u7f16\u5199\u8bfb\u53d6\u548c\u9a8c\u8bc1\u8bf7\u6c42\u7684\u4ee3\u7801\uff0c\u4e0d\u4f7f\u7528 FastAPI \u548c Pydantic \u7684\u81ea\u52a8\u529f\u80fd\uff0c\u4f46\u60a8\u4ecd\u8981\u5b9a\u4e49 OpenAPI \u6982\u56fe\u4e2d\u7684\u8bf7\u6c42\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 openapi_extra \uff1a from fastapi import FastAPI , Request app = FastAPI () def magic_data_reader ( raw_body : bytes ): return { \"size\" : len ( raw_body ), \"content\" : { \"name\" : \"Maaaagic\" , \"price\" : 42 , \"description\" : \"Just kiddin', no magic here. \u2728\" , }, } @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/json\" : { \"schema\" : { \"required\" : [ \"name\" , \"price\" ], \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" }, \"price\" : { \"type\" : \"number\" }, \"description\" : { \"type\" : \"string\" }, }, } } }, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () data = magic_data_reader ( raw_body ) return data \u672c\u4f8b\u4e2d\uff0c\u6ca1\u6709\u58f0\u660e\u4efb\u4f55 Pydantic \u6a21\u578b\u3002\u5b9e\u9645\u4e0a\uff0c\u751a\u81f3\u6ca1\u6709\u628a\u8bf7\u6c42\u4f53 \u89e3\u6790 \u4e3a JSON\uff0c\u800c\u662f\u76f4\u63a5\u8bfb\u53d6\u4e3a bytes \uff0c\u7531 magic_data_reader() \u51fd\u6570\u8fdb\u884c\u89e3\u6790\u3002 \u603b\u4e4b\uff0c\u8981\u4e3a\u8bf7\u6c42\u4f53\u58f0\u660e\u9884\u671f\u7684\u6982\u56fe\u3002 \u81ea\u5b9a\u4e49 OpenAPI \u5185\u5bb9\u7c7b\u578b \u00b6 \u8fd8\u662f\u540c\u6837\u7684\u6280\u5de7\uff0c\u4f7f\u7528 Pydantic \u6a21\u578b\u5b9a\u4e49 JSON \u6982\u56fe\uff0c\u7136\u540e\u628a\u5b83\u6dfb\u52a0\u5230 \u8def\u5f84\u64cd\u4f5c \u7684\u81ea\u5b9a\u4e49 OpenAPI \u6982\u56fe\u91cc\u3002 \u5c31\u7b97\u8bf7\u6c42\u4e2d\u6570\u636e\u7684\u7c7b\u578b\u4e0d\u662f JSON \u4e5f\u80fd\u8fd9\u6837\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u4e0d\u4f7f\u7528 FastAPI \u7684\u5185\u7f6e\u529f\u80fd\u4ece Pydantic \u6a21\u578b\u4e2d\u63d0\u53d6 JSON Schema\uff0c \u4e5f\u4e0d\u81ea\u52a8\u9a8c\u8bc1 JSON\u3002\u5b9e\u9645\u4e0a\uff0c\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\u58f0\u660e\u4e3a YAML\uff0c\u4e0d\u662f JSON\uff1a from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item \u5c3d\u7ba1\u6ca1\u6709\u4f7f\u7528\u9ed8\u8ba4\u7684\u5185\u7f6e\u529f\u80fd\uff0c\u6211\u4eec\u8fd8\u662f\u4f7f\u7528\u4e86 Pydantic \u6a21\u578b\u4e3a\u8981\u5728 YAML \u4e2d\u63a5\u6536\u7684\u6570\u636e\u624b\u52a8\u751f\u6210\u4e86 JSON Schema\u3002 \u7136\u540e\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42\uff0c\u4ee5 bytes \u683c\u5f0f\u63d0\u53d6\u8bf7\u6c42\u4f53\u3002\u8fd9\u662f\u6307 FastAPI \u751a\u81f3\u4e0d\u4f1a\u5c1d\u8bd5\u628a\u8bf7\u6c42\u8d1f\u8f7d\u89e3\u6790\u4e3a JSON\u3002 \u5728\u4ee3\u7801\u91cc\u76f4\u63a5\u89e3\u6790 YAML \u5185\u5bb9\uff0c\u7136\u540e\u518d\u4e00\u6b21\u4f7f\u7528 Pydantic \u6a21\u578b\u9a8c\u8bc1 YAML \u7684\u5185\u5bb9\uff1a from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item \u63d0\u793a \u6b64\u5904\u590d\u7528\u4e86\u76f8\u540c\u7684 Pydantic \u6a21\u578b\u3002 \u4f46\u540c\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u9a8c\u8bc1\u8fd9\u4e2a\u6a21\u578b\u3002","title":"\u8def\u5f84\u64cd\u4f5c\u9ad8\u7ea7\u914d\u7f6e"},{"location":"advanced/path-operation-advanced-configuration/#_1","text":"","title":"\u8def\u5f84\u64cd\u4f5c\u9ad8\u7ea7\u914d\u7f6e"},{"location":"advanced/path-operation-advanced-configuration/#openapi-operationid","text":"\u8b66\u544a \u5982\u679c\u60a8\u4e0d\u662f OpenAPI \u4e13\u5bb6 \uff0c\u8bf7\u8df3\u8fc7\u672c\u7ae0\u3002 operation_id \u53c2\u6570\u7528\u4e8e\u8bbe\u7f6e \u8def\u5f84\u64cd\u4f5c \u4e2d OpenAPI \u7684 operationId \u3002 \u4f46\u8def\u5f84\u64cd\u4f5c\u7684 operation_id \u5fc5\u987b\u662f\u552f\u4e00\u7684\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , operation_id = \"some_specific_id_you_define\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }]","title":"OpenAPI \u7684 operationId"},{"location":"advanced/path-operation-advanced-configuration/#operationid","text":"\u4f7f\u7528 API \u7684\u51fd\u6570\u540d\u5b9a\u4e49 operationId \uff0c\u9700\u8981\u5148\u904d\u5386 API \u51fd\u6570\u540d\uff0c\u518d\u4f7f\u7528 APIRoute.name \u91cd\u5199 \u8def\u5f84\u64cd\u4f5c \u7684 operation_id \u3002 \u8fd9\u9879\u64cd\u4f5c\u8981\u5728\u6dfb\u52a0\u4e86\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u540e\u6267\u884c\u3002 from fastapi import FastAPI from fastapi.routing import APIRoute app = FastAPI () @app . get ( \"/items/\" ) async def read_items (): return [{ \"item_id\" : \"Foo\" }] def use_route_names_as_operation_ids ( app : FastAPI ) -> None : \"\"\" Simplify operation IDs so that generated API clients have simpler function names. Should be called only after all routes have been added. \"\"\" for route in app . routes : if isinstance ( route , APIRoute ): route . operation_id = route . name # in this case, 'read_items' use_route_names_as_operation_ids ( app ) \u63d0\u793a \u624b\u52a8\u8c03\u7528 app.openapi() \u65f6\uff0c\u5e94\u9884\u5148\u66f4\u65b0 operationId \u3002 \u8b66\u544a \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u65f6\uff0c\u52a1\u5fc5\u786e\u4fdd \u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u540d \u662f\u552f\u4e00\u7684\u3002 \u5373\u4f7f\u5b83\u4eec\u5728\u4e0d\u540c\u7684\u6a21\u5757\u91cc\uff08Python \u6587\u4ef6\uff09\u3002","title":"\u4f7f\u7528\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u540d\u5b9a\u4e49 operationId"},{"location":"advanced/path-operation-advanced-configuration/#openapi","text":"\u628a\u53c2\u6570 include_in_schema \u8bbe\u7f6e\u4e3a False \uff0c\u5c31\u4f1a\u5728 OpenAPI \u6982\u56fe\u4e2d\u6392\u9664 \u8def\u5f84\u64cd\u4f5c \uff08\u540c\u65f6\u4e5f\u4ece API \u6587\u6863\u4e2d\u6392\u9664\u8be5 \u8def\u5f84\u64cd\u4f5c \uff09\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , include_in_schema = False ) async def read_items (): return [{ \"item_id\" : \"Foo\" }]","title":"\u4ece OpenAPI \u4e2d\u6392\u9664"},{"location":"advanced/path-operation-advanced-configuration/#docstring","text":"\u9650\u5236 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 \u6587\u6863\u5b57\u7b26\u4e32 \u5728 OpenAPI \u4e2d\u663e\u793a\u7684\u884c\u6570\u3002 \u6dfb\u52a0 \\f \uff08\u6362\u9875\u7b26\uff09\uff0c FastAPI \u5728\u6362\u9875\u7b26\u6240\u5728\u4f4d\u7f6e\u622a\u65ad\u5728 OpenAPI \u4e2d\u7684\u8f93\u51fa\u5185\u5bb9\u3002 \u6362\u9875\u7b26\u540e\u7684\u5185\u5bb9\u4e0d\u4f1a\u5728\u6587\u6863\u4e2d\u663e\u793a\uff0c\u4f46 Sphinx \u7b49\u5de5\u5177\u4ecd\u53ef\u4ee5\u4f7f\u7528\u3002 from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \\f :param item: User input. \"\"\" return item","title":"docstring \u7684\u9ad8\u7ea7\u63cf\u8ff0"},{"location":"advanced/path-operation-advanced-configuration/#_2","text":"\u60a8\u53ef\u80fd\u5df2\u7ecf\u4e86\u89e3\u4e86\u5982\u4f55\u4e3a \u8def\u5f84\u64cd\u4f5c \u58f0\u660e response_model \u548c status_code \u3002 \u8fd9\u79cd\u65b9\u5f0f\u5b9a\u4e49\u4e86 \u8def\u5f84\u64cd\u4f5c \u4e3b\u54cd\u5e94\u7684\u5143\u6570\u636e\u3002 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528\u6a21\u578b\u3001\u72b6\u6001\u7801\u7b49\u58f0\u660e\u9644\u52a0\u54cd\u5e94\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357\u6709\u4e00\u7ae0\u4e13\u95e8\u4ecb\u7ecd\u76f8\u5173\u5185\u5bb9\uff0c\u8be6\u89c1 OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u3002","title":"\u9644\u52a0\u54cd\u5e94"},{"location":"advanced/path-operation-advanced-configuration/#openapi-extra","text":"\u5728\u5e94\u7528\u4e2d\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u65f6\uff0c FastAPI \u4f1a\u81ea\u52a8\u751f\u6210 \u8def\u5f84\u64cd\u4f5c \u7684\u5143\u6570\u636e\uff0c\u5e76\u628a\u5b83\u6dfb\u52a0\u81f3 OpenAPI \u6982\u56fe\u3002 \u6280\u672f\u7ec6\u8282 OpenAPI \u89c4\u8303\u4e2d\uff0c\u5b83\u88ab\u79f0\u4e3a \u64cd\u4f5c\u5bf9\u8c61 \u3002 \u8fd9\u4e9b\u5143\u6570\u636e\u5305\u542b \u8def\u5f84\u64cd\u4f5c \u7684\u6240\u6709\u4fe1\u606f\uff0c\u5e76\u7528\u4e8e\u751f\u6210 API \u6587\u6863\u3002 \u5305\u62ec tags \u3001 parameters \u3001 requestBody \u3001 responses \u7b49\u3002 \u8fd9\u4e2a\u4e13\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c \u7684 OpenAPI \u6982\u56fe\u901a\u5e38\u7531 FastAPI \u81ea\u52a8\u751f\u6210\uff0c\u8fd8\u53ef\u4ee5\u6269\u5c55\u3002 \u63d0\u793a \u8fd9\u662f\u4e00\u4e2a\u4f4e\u7ea7\u6269\u5c55\u70b9\u3002 \u5982\u679c\u53ea\u662f\u8981\u58f0\u660e\u9644\u52a0\u54cd\u5e94\uff0c\u4f7f\u7528 OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u66f4\u65b9\u4fbf\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 openapi_extra \u53c2\u6570\u6269\u5c55 \u8def\u5f84\u64cd\u4f5c \u7684 OpenAPI \u6982\u56fe\u3002","title":"OpenAPI Extra"},{"location":"advanced/path-operation-advanced-configuration/#openapi_1","text":"\u4f8b\u5982\uff0c\u4f7f\u7528 openapi_extra \u58f0\u660e OpenAPI \u6269\u5c55 \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , openapi_extra = { \"x-aperture-labs-portal\" : \"blue\" }) async def read_items (): return [{ \"item_id\" : \"portal-gun\" }] \u6253\u5f00 API \u6587\u6863\uff0c\u5728\u6307\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u5e95\u90e8\u4f1a\u663e\u793a\u6269\u5c55\u9879\u3002 \u67e5\u770b OpenAPI \u7684\u7ed3\u679c\uff08API \u91cc\u7684 /openapi.json \uff09\uff0c\u5c31\u80fd\u770b\u5230\u6269\u5c55\u9879\u662f\u7279\u5b9a \u8def\u5f84\u64cd\u4f5c \u7684\u7ec4\u6210\u90e8\u5206\u3002 { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"summary\" : \"Read Items\" , \"operationId\" : \"read_items_items__get\" , \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { \"schema\" : {} } } } }, \"x-aperture-labs-portal\" : \"blue\" } } } }","title":"OpenAPI \u6269\u5c55"},{"location":"advanced/path-operation-advanced-configuration/#openapi_2","text":"openapi_extra \u91cc\u7684\u5b57\u5178\u4e0e\u81ea\u52a8\u751f\u6210\u7684 \u8def\u5f84\u64cd\u4f5c OpenAPI \u6982\u56fe\u53ef\u4ee5\u6df1\u5ea6\u7ed3\u5408\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u4e3a\u81ea\u52a8\u751f\u6210\u7684\u6982\u56fe\u6dfb\u52a0\u9644\u52a0\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u81ea\u5df1\u7f16\u5199\u8bfb\u53d6\u548c\u9a8c\u8bc1\u8bf7\u6c42\u7684\u4ee3\u7801\uff0c\u4e0d\u4f7f\u7528 FastAPI \u548c Pydantic \u7684\u81ea\u52a8\u529f\u80fd\uff0c\u4f46\u60a8\u4ecd\u8981\u5b9a\u4e49 OpenAPI \u6982\u56fe\u4e2d\u7684\u8bf7\u6c42\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 openapi_extra \uff1a from fastapi import FastAPI , Request app = FastAPI () def magic_data_reader ( raw_body : bytes ): return { \"size\" : len ( raw_body ), \"content\" : { \"name\" : \"Maaaagic\" , \"price\" : 42 , \"description\" : \"Just kiddin', no magic here. \u2728\" , }, } @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/json\" : { \"schema\" : { \"required\" : [ \"name\" , \"price\" ], \"type\" : \"object\" , \"properties\" : { \"name\" : { \"type\" : \"string\" }, \"price\" : { \"type\" : \"number\" }, \"description\" : { \"type\" : \"string\" }, }, } } }, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () data = magic_data_reader ( raw_body ) return data \u672c\u4f8b\u4e2d\uff0c\u6ca1\u6709\u58f0\u660e\u4efb\u4f55 Pydantic \u6a21\u578b\u3002\u5b9e\u9645\u4e0a\uff0c\u751a\u81f3\u6ca1\u6709\u628a\u8bf7\u6c42\u4f53 \u89e3\u6790 \u4e3a JSON\uff0c\u800c\u662f\u76f4\u63a5\u8bfb\u53d6\u4e3a bytes \uff0c\u7531 magic_data_reader() \u51fd\u6570\u8fdb\u884c\u89e3\u6790\u3002 \u603b\u4e4b\uff0c\u8981\u4e3a\u8bf7\u6c42\u4f53\u58f0\u660e\u9884\u671f\u7684\u6982\u56fe\u3002","title":"\u81ea\u5b9a\u4e49 OpenAPI \u8def\u5f84\u64cd\u4f5c\u6982\u56fe"},{"location":"advanced/path-operation-advanced-configuration/#openapi_3","text":"\u8fd8\u662f\u540c\u6837\u7684\u6280\u5de7\uff0c\u4f7f\u7528 Pydantic \u6a21\u578b\u5b9a\u4e49 JSON \u6982\u56fe\uff0c\u7136\u540e\u628a\u5b83\u6dfb\u52a0\u5230 \u8def\u5f84\u64cd\u4f5c \u7684\u81ea\u5b9a\u4e49 OpenAPI \u6982\u56fe\u91cc\u3002 \u5c31\u7b97\u8bf7\u6c42\u4e2d\u6570\u636e\u7684\u7c7b\u578b\u4e0d\u662f JSON \u4e5f\u80fd\u8fd9\u6837\u64cd\u4f5c\u3002 \u4f8b\u5982\uff0c\u5728\u8fd9\u4e2a\u5e94\u7528\u4e2d\uff0c\u6211\u4eec\u4e0d\u4f7f\u7528 FastAPI \u7684\u5185\u7f6e\u529f\u80fd\u4ece Pydantic \u6a21\u578b\u4e2d\u63d0\u53d6 JSON Schema\uff0c \u4e5f\u4e0d\u81ea\u52a8\u9a8c\u8bc1 JSON\u3002\u5b9e\u9645\u4e0a\uff0c\u8bf7\u6c42\u7684\u5185\u5bb9\u7c7b\u578b\u58f0\u660e\u4e3a YAML\uff0c\u4e0d\u662f JSON\uff1a from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item \u5c3d\u7ba1\u6ca1\u6709\u4f7f\u7528\u9ed8\u8ba4\u7684\u5185\u7f6e\u529f\u80fd\uff0c\u6211\u4eec\u8fd8\u662f\u4f7f\u7528\u4e86 Pydantic \u6a21\u578b\u4e3a\u8981\u5728 YAML \u4e2d\u63a5\u6536\u7684\u6570\u636e\u624b\u52a8\u751f\u6210\u4e86 JSON Schema\u3002 \u7136\u540e\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42\uff0c\u4ee5 bytes \u683c\u5f0f\u63d0\u53d6\u8bf7\u6c42\u4f53\u3002\u8fd9\u662f\u6307 FastAPI \u751a\u81f3\u4e0d\u4f1a\u5c1d\u8bd5\u628a\u8bf7\u6c42\u8d1f\u8f7d\u89e3\u6790\u4e3a JSON\u3002 \u5728\u4ee3\u7801\u91cc\u76f4\u63a5\u89e3\u6790 YAML \u5185\u5bb9\uff0c\u7136\u540e\u518d\u4e00\u6b21\u4f7f\u7528 Pydantic \u6a21\u578b\u9a8c\u8bc1 YAML \u7684\u5185\u5bb9\uff1a from typing import List import yaml from fastapi import FastAPI , HTTPException , Request from pydantic import BaseModel , ValidationError app = FastAPI () class Item ( BaseModel ): name : str tags : List [ str ] @app . post ( \"/items/\" , openapi_extra = { \"requestBody\" : { \"content\" : { \"application/x-yaml\" : { \"schema\" : Item . schema ()}}, \"required\" : True , }, }, ) async def create_item ( request : Request ): raw_body = await request . body () try : data = yaml . safe_load ( raw_body ) except yaml . YAMLError : raise HTTPException ( status_code = 422 , detail = \"Invalid YAML\" ) try : item = Item . parse_obj ( data ) except ValidationError as e : raise HTTPException ( status_code = 422 , detail = e . errors ()) return item \u63d0\u793a \u6b64\u5904\u590d\u7528\u4e86\u76f8\u540c\u7684 Pydantic \u6a21\u578b\u3002 \u4f46\u540c\u6837\uff0c\u6211\u4eec\u4f7f\u7528\u5176\u4ed6\u65b9\u5f0f\u9a8c\u8bc1\u8fd9\u4e2a\u6a21\u578b\u3002","title":"\u81ea\u5b9a\u4e49 OpenAPI \u5185\u5bb9\u7c7b\u578b"},{"location":"advanced/response-change-status-code/","text":"\u54cd\u5e94 - \u4fee\u6539\u72b6\u6001\u7801 \u00b6 \u54cd\u5e94\u72b6\u6001\u7801 \u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u8fc7\u5982\u4f55\u8bbe\u7f6e\u9ed8\u8ba4\u72b6\u6001\u7801\u3002 \u4f46\u6709\u65f6\u8981\u8fd4\u56de\u4e0e\u9ed8\u8ba4\u72b6\u6001\u7801\u4e0d\u540c\u7684\u72b6\u6001\u7801\u3002 \u7528\u4f8b \u00b6 \u4f8b\u5982\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de HTTP \u72b6\u6001\u7801 - OK 200 \u3002 \u4f46\u6570\u636e\u4e0d\u5b58\u5728\u65f6\uff0c\u8981\u521b\u5efa\u6570\u636e\uff0c\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u7801 - CREATED 201 \u3002 \u5e76\u4e14\uff0c\u8fd8\u8981\u4f7f\u7528 response_model \u7b5b\u9009\u5e76\u8f6c\u6362\u6570\u636e\u3002 \u8fd9\u4e9b\u7528\u4f8b\u4e5f\u53ef\u4ee5\u4f7f\u7528 Response \u53c2\u6570\u3002 \u4f7f\u7528 Response \u53c2\u6570 \u00b6 \u4e0e\u5904\u7406 Cookie \u548c\u8bf7\u6c42\u5934\u54cd\u5e94\u4e00\u6837\uff0c\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ef\u4ee5\u58f0\u660e Response \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u7136\u540e\uff0c\u5728 \u4e34\u65f6 \u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e\u72b6\u6001\u7801\u3002 from fastapi import FastAPI , Response , status app = FastAPI () tasks = { \"foo\" : \"Listen to the Bar Fighters\" } @app . put ( \"/get-or-create-task/ {task_id} \" , status_code = 200 ) def get_or_create_task ( task_id : str , response : Response ): if task_id not in tasks : tasks [ task_id ] = \"This didn't exist before\" response . status_code = status . HTTP_201_CREATED return tasks [ task_id ] \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u50cf\u8fd4\u56de\u5b57\u5178\u3001\u6570\u636e\u5e93\u6a21\u578b\u4e00\u6837\u8fd4\u56de\u6240\u9700\u7684\u4efb\u4f55\u5bf9\u8c61\u3002 \u58f0\u660e\u4e86 response_model \u65f6\uff0c\u4ecd\u53ef\u4ee5\u7b5b\u9009\u548c\u8f6c\u6362\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 FastAPI \u4f7f\u7528 \u4e34\u65f6 \u54cd\u5e94\u83b7\u53d6\u72b6\u6001\u7801\uff08\u53ca Cookie \u4e0e\u54cd\u5e94\u5934\uff09\uff0c\u5e76\u628a\u8fd9\u4e9b\u5bf9\u8c61\u653e\u5165\u5305\u542b\u4e86 response_model \u7b5b\u9009\u8fc7\u7684\u8fd4\u56de\u503c\u7684\u6700\u7ec8\u54cd\u5e94\u3002 \u4f9d\u8d56\u9879\u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e Response \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e\u72b6\u6001\u7801\uff0c\u4f46\u8981\u6ce8\u610f\uff0c\u53ea\u6709\u6700\u540e\u8bbe\u7f6e\u7684\u72b6\u6001\u7801\u624d\u4f1a\u751f\u6548\u3002","title":"\u54cd\u5e94 - \u4fee\u6539\u72b6\u6001\u7801"},{"location":"advanced/response-change-status-code/#-","text":"\u54cd\u5e94\u72b6\u6001\u7801 \u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u8fc7\u5982\u4f55\u8bbe\u7f6e\u9ed8\u8ba4\u72b6\u6001\u7801\u3002 \u4f46\u6709\u65f6\u8981\u8fd4\u56de\u4e0e\u9ed8\u8ba4\u72b6\u6001\u7801\u4e0d\u540c\u7684\u72b6\u6001\u7801\u3002","title":"\u54cd\u5e94 - \u4fee\u6539\u72b6\u6001\u7801"},{"location":"advanced/response-change-status-code/#_1","text":"\u4f8b\u5982\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8fd4\u56de HTTP \u72b6\u6001\u7801 - OK 200 \u3002 \u4f46\u6570\u636e\u4e0d\u5b58\u5728\u65f6\uff0c\u8981\u521b\u5efa\u6570\u636e\uff0c\u5e76\u8fd4\u56de HTTP \u72b6\u6001\u7801 - CREATED 201 \u3002 \u5e76\u4e14\uff0c\u8fd8\u8981\u4f7f\u7528 response_model \u7b5b\u9009\u5e76\u8f6c\u6362\u6570\u636e\u3002 \u8fd9\u4e9b\u7528\u4f8b\u4e5f\u53ef\u4ee5\u4f7f\u7528 Response \u53c2\u6570\u3002","title":"\u7528\u4f8b"},{"location":"advanced/response-change-status-code/#response","text":"\u4e0e\u5904\u7406 Cookie \u548c\u8bf7\u6c42\u5934\u54cd\u5e94\u4e00\u6837\uff0c\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ef\u4ee5\u58f0\u660e Response \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u7136\u540e\uff0c\u5728 \u4e34\u65f6 \u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e\u72b6\u6001\u7801\u3002 from fastapi import FastAPI , Response , status app = FastAPI () tasks = { \"foo\" : \"Listen to the Bar Fighters\" } @app . put ( \"/get-or-create-task/ {task_id} \" , status_code = 200 ) def get_or_create_task ( task_id : str , response : Response ): if task_id not in tasks : tasks [ task_id ] = \"This didn't exist before\" response . status_code = status . HTTP_201_CREATED return tasks [ task_id ] \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u50cf\u8fd4\u56de\u5b57\u5178\u3001\u6570\u636e\u5e93\u6a21\u578b\u4e00\u6837\u8fd4\u56de\u6240\u9700\u7684\u4efb\u4f55\u5bf9\u8c61\u3002 \u58f0\u660e\u4e86 response_model \u65f6\uff0c\u4ecd\u53ef\u4ee5\u7b5b\u9009\u548c\u8f6c\u6362\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 FastAPI \u4f7f\u7528 \u4e34\u65f6 \u54cd\u5e94\u83b7\u53d6\u72b6\u6001\u7801\uff08\u53ca Cookie \u4e0e\u54cd\u5e94\u5934\uff09\uff0c\u5e76\u628a\u8fd9\u4e9b\u5bf9\u8c61\u653e\u5165\u5305\u542b\u4e86 response_model \u7b5b\u9009\u8fc7\u7684\u8fd4\u56de\u503c\u7684\u6700\u7ec8\u54cd\u5e94\u3002 \u4f9d\u8d56\u9879\u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e Response \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e\u72b6\u6001\u7801\uff0c\u4f46\u8981\u6ce8\u610f\uff0c\u53ea\u6709\u6700\u540e\u8bbe\u7f6e\u7684\u72b6\u6001\u7801\u624d\u4f1a\u751f\u6548\u3002","title":"\u4f7f\u7528 Response \u53c2\u6570"},{"location":"advanced/response-cookies/","text":"\u54cd\u5e94 - Cookie \u00b6 \u4f7f\u7528 Response \u53c2\u6570 \u00b6 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ef\u4ee5\u58f0\u660e Response \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u73b0\u5728\uff0c\u5728 \u4e34\u65f6 \u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e cookie\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . post ( \"/cookie-and-object/\" ) def create_cookie ( response : Response ): response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return { \"message\" : \"Come to the dark side, we have cookies\" } \u63a5\u7740\uff0c\u5c31\u53ef\u4ee5\u50cf\u8fd4\u56de\u5b57\u5178\u3001\u6570\u636e\u5e93\u6a21\u578b\u4e00\u6837\u8fd4\u56de\u4efb\u610f\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u4ecd\u53ef\u4ee5\u58f0\u660e\u7684 response_model \u7b5b\u9009\u548c\u8f6c\u6362\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 FastAPI \u4f7f\u7528 \u4e34\u65f6 \u54cd\u5e94\u83b7\u53d6 cookie\uff08\u53ca\u54cd\u5e94\u5934\u4e0e\u72b6\u6001\u7801\uff09\uff0c\u5e76\u628a\u8fd9\u4e9b\u5bf9\u8c61\u653e\u5165\u5305\u542b\u4e86 response_model \u7b5b\u9009\u8fc7\u7684\u8fd4\u56de\u503c\u7684\u54cd\u5e94\u3002 \u4f9d\u8d56\u9879\u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e Response \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e cookie\uff08\u548c\u54cd\u5e94\u5934\uff09\u3002 \u76f4\u63a5\u8fd4\u56de Response \u00b6 \u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u53ef\u4ee5\u521b\u5efa cookie\u3002 \u6b64\u65f6\u8981\u4ee5 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e00\u7ae0\u4e2d\u6240\u8ff0\u7684\u65b9\u5f0f\u521b\u5efa\u54cd\u5e94\u3002 \u7136\u540e\uff0c\u5728\u54cd\u5e94\u5185\u8bbe\u7f6e Cookie\uff0c\u5e76\u8fd4\u56de\u54cd\u5e94\uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . post ( \"/cookie/\" ) def create_cookie (): content = { \"message\" : \"Come to the dark side, we have cookies\" } response = JSONResponse ( content = content ) response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return response \u63d0\u793a \u6ce8\u610f\uff0c\u4e0d\u4f7f\u7528 Response \u53c2\u6570\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u65f6\uff0cFastAPI \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u786e\u4fdd\u6570\u636e\u7c7b\u578b\u662f\u6b63\u786e\u7684\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\u65f6\uff0c\u6570\u636e\u7c7b\u578b\u8981\u517c\u5bb9 JSON\u3002 \u800c\u4e14\u4e0d\u80fd\u53d1\u9001\u7ecf response_model \u7b5b\u9009\u8fc7\u7684\u6570\u636e\u3002 \u66f4\u591a\u8bf4\u660e \u00b6 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import Response \u6216 from starlette.responses import JSONResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c\u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u4e2d\u7edd\u5927\u90e8\u5206\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Response \u5e38\u7528\u4e8e\u8bbe\u7f6e\u54cd\u5e94\u5934\u6216 Cookie\uff0c\u56e0\u6b64\uff0c FastAPI \u5728 fastapi.Response \u4e2d\u63d0\u4f9b\u4e86\u652f\u6301\u3002 \u6240\u6709\u53ef\u7528\u53c2\u6570\u53ca\u9009\u9879\uff0c\u8be6\u89c1 Starlette \u5b98\u6863 \u3002","title":"\u54cd\u5e94 - Cookie"},{"location":"advanced/response-cookies/#-cookie","text":"","title":"\u54cd\u5e94 - Cookie"},{"location":"advanced/response-cookies/#response","text":"\u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ef\u4ee5\u58f0\u660e Response \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u73b0\u5728\uff0c\u5728 \u4e34\u65f6 \u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e cookie\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . post ( \"/cookie-and-object/\" ) def create_cookie ( response : Response ): response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return { \"message\" : \"Come to the dark side, we have cookies\" } \u63a5\u7740\uff0c\u5c31\u53ef\u4ee5\u50cf\u8fd4\u56de\u5b57\u5178\u3001\u6570\u636e\u5e93\u6a21\u578b\u4e00\u6837\u8fd4\u56de\u4efb\u610f\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u4ecd\u53ef\u4ee5\u58f0\u660e\u7684 response_model \u7b5b\u9009\u548c\u8f6c\u6362\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 FastAPI \u4f7f\u7528 \u4e34\u65f6 \u54cd\u5e94\u83b7\u53d6 cookie\uff08\u53ca\u54cd\u5e94\u5934\u4e0e\u72b6\u6001\u7801\uff09\uff0c\u5e76\u628a\u8fd9\u4e9b\u5bf9\u8c61\u653e\u5165\u5305\u542b\u4e86 response_model \u7b5b\u9009\u8fc7\u7684\u8fd4\u56de\u503c\u7684\u54cd\u5e94\u3002 \u4f9d\u8d56\u9879\u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e Response \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e cookie\uff08\u548c\u54cd\u5e94\u5934\uff09\u3002","title":"\u4f7f\u7528 Response \u53c2\u6570"},{"location":"advanced/response-cookies/#response_1","text":"\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u53ef\u4ee5\u521b\u5efa cookie\u3002 \u6b64\u65f6\u8981\u4ee5 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u4e00\u7ae0\u4e2d\u6240\u8ff0\u7684\u65b9\u5f0f\u521b\u5efa\u54cd\u5e94\u3002 \u7136\u540e\uff0c\u5728\u54cd\u5e94\u5185\u8bbe\u7f6e Cookie\uff0c\u5e76\u8fd4\u56de\u54cd\u5e94\uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . post ( \"/cookie/\" ) def create_cookie (): content = { \"message\" : \"Come to the dark side, we have cookies\" } response = JSONResponse ( content = content ) response . set_cookie ( key = \"fakesession\" , value = \"fake-cookie-session-value\" ) return response \u63d0\u793a \u6ce8\u610f\uff0c\u4e0d\u4f7f\u7528 Response \u53c2\u6570\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u65f6\uff0cFastAPI \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\u3002 \u56e0\u6b64\uff0c\u5fc5\u987b\u786e\u4fdd\u6570\u636e\u7c7b\u578b\u662f\u6b63\u786e\u7684\u3002\u4f8b\u5982\uff0c\u4f7f\u7528 JSONResponse \u8fd4\u56de\u54cd\u5e94\u65f6\uff0c\u6570\u636e\u7c7b\u578b\u8981\u517c\u5bb9 JSON\u3002 \u800c\u4e14\u4e0d\u80fd\u53d1\u9001\u7ecf response_model \u7b5b\u9009\u8fc7\u7684\u6570\u636e\u3002","title":"\u76f4\u63a5\u8fd4\u56de Response"},{"location":"advanced/response-cookies/#_1","text":"\u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import Response \u6216 from starlette.responses import JSONResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c\u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u4e2d\u7edd\u5927\u90e8\u5206\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Response \u5e38\u7528\u4e8e\u8bbe\u7f6e\u54cd\u5e94\u5934\u6216 Cookie\uff0c\u56e0\u6b64\uff0c FastAPI \u5728 fastapi.Response \u4e2d\u63d0\u4f9b\u4e86\u652f\u6301\u3002 \u6240\u6709\u53ef\u7528\u53c2\u6570\u53ca\u9009\u9879\uff0c\u8be6\u89c1 Starlette \u5b98\u6863 \u3002","title":"\u66f4\u591a\u8bf4\u660e"},{"location":"advanced/response-directly/","text":"\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u00b6 FastAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u652f\u6301\u8fd4\u56de\u4efb\u610f\u6570\u636e\u7c7b\u578b\uff1a\u5b57\u5178\u3001\u5217\u8868\u3001Pydantic \u6a21\u578b\u3001\u6570\u636e\u5e93\u6a21\u578b\u7b49\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u4f7f\u7528 JSON \u7f16\u7801\u5668 \u81ea\u52a8\u628a\u8fd4\u56de\u7684\u503c\u8f6c\u6362\u4e3a JSON\u3002 \u7136\u540e\uff0c FastAPI \u5728\u540e\u53f0\u628a\u517c\u5bb9 JSON \u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u5178\uff09\u653e\u5230\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u54cd\u5e94\u7684 JSONResponse \u91cc\u3002 \u4f46\u5176\u5b9e \u8def\u5f84\u64cd\u4f5c \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de JSONResponse \u3002 \u8fd4\u56de\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u6216 Cookie \u65f6\u7ecf\u5e38\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002 \u8fd4\u56de Response \u00b6 \u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f Response \u6216 Response \u7684\u5b50\u7c7b\u3002 \u63d0\u793a JSONResponse \u5c31\u662f Response \u7684\u5b50\u7c7b\u3002 FastAPI \u76f4\u63a5\u4f20\u9012\u8fd4\u56de\u7684 Response \u3002 \u6b64\u65f6\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u8f6c\u6362\u4efb\u4f55\u6570\u636e\uff0c\u4e5f\u4e0d\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3002 \u8fd9\u79cd\u65b9\u5f0f\u5f88\u7075\u6d3b\uff0c\u80fd\u8fd4\u56de\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u6216\u8986\u76d6\u6570\u636e\u58f0\u660e\u3001\u9a8c\u8bc1\u7b49\u64cd\u4f5c\u3002 \u5728 Response \u4e2d\u4f7f\u7528 jsonable_encoder \u00b6 FastAPI \u4e0d\u4fee\u6539\u8fd4\u56de\u7684 Response \uff0c\u56e0\u6b64\u5fc5\u987b\u8981\u4e8b\u5148\u786e\u8ba4\u5b83\u7684\u5185\u5bb9\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u628a Pydantic \u6a21\u578b\u653e\u5165 JSONResponse \u524d\uff0c\u8981\u5148\u628a\u5b83\u8f6c\u6362\u4e3a\u6240\u6709\u6570\u636e\u7c7b\u578b\uff08\u5982 datetime \u3001 UUID \u7b49\uff09\u90fd\u517c\u5bb9 JSON \u7c7b\u578b\u7684 \u5b57\u5178 \u3002 \u628a\u6570\u636e\u4f20\u9012\u7ed9\u54cd\u5e94\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u8f6c\u6362\u6570\u636e\u3002 from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) return JSONResponse ( content = json_compatible_item_data ) \u6280\u672f\u7ec6\u8282 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u4e2d\u5927\u591a\u6570\u53ef\u7528\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 \u8fd4\u56de\u81ea\u5b9a\u4e49 Response \u00b6 \u4e0a\u4f8b\u4ecb\u7ecd\u4e86\u6240\u6709\u8981\u4e86\u89e3\u7684\u77e5\u8bc6\u70b9\uff0c\u4f46\u5e76\u4e0d\u662f\u5f88\u5b9e\u7528\uff0c\u56e0\u4e3a FastAPI \u672c\u6765\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de item \uff0c\u628a\u5b83\u653e\u5165 JSONResponse \uff0c\u7136\u540e\u8f6c\u6362\u6210 \u5b57\u5178 \uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u9ed8\u8ba4\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fd4\u56de\u81ea\u5b9a\u4e49\u54cd\u5e94\u3002 \u6bd4\u5982\u8bf4\uff0c\u8fd4\u56de XML \u54cd\u5e94\u3002 \u76f4\u63a5\u628a XML \u5185\u5bb9\u5b9a\u4e49\u4e3a\u5b57\u7b26\u4e32\uff0c\u653e\u5165 Response \uff0c\u5e76\u8fd4\u56de\u54cd\u5e94\uff1a from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" ) \u8bf4\u660e \u00b6 \u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c FastAPI \u4e0d\u4f1a\u9a8c\u8bc1\u3001\u8f6c\u6362\uff08\u5e8f\u5217\u5316\uff09\u548c\u81ea\u52a8\u5b58\u6863 Response \u4e2d\u7684\u6570\u636e\u3002 \u4f46\u4ecd\u53ef\u4ee5\u4f7f\u7528 OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u4e00\u7ae0\u91cc\u7684\u65b9\u5f0f\u8fdb\u884c\u5b58\u6863\u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u5982\u4f55\u58f0\u660e\u5e76\u4f7f\u7528\u81ea\u5b9a\u4e49 Response \uff0c\u540c\u65f6\u5b9e\u73b0\u81ea\u52a8\u6570\u636e\u8f6c\u6362\u3001\u5b58\u6863\u7b49\u529f\u80fd\u3002","title":"\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94"},{"location":"advanced/response-directly/#_1","text":"FastAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u652f\u6301\u8fd4\u56de\u4efb\u610f\u6570\u636e\u7c7b\u578b\uff1a\u5b57\u5178\u3001\u5217\u8868\u3001Pydantic \u6a21\u578b\u3001\u6570\u636e\u5e93\u6a21\u578b\u7b49\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u4f7f\u7528 JSON \u7f16\u7801\u5668 \u81ea\u52a8\u628a\u8fd4\u56de\u7684\u503c\u8f6c\u6362\u4e3a JSON\u3002 \u7136\u540e\uff0c FastAPI \u5728\u540e\u53f0\u628a\u517c\u5bb9 JSON \u7684\u6570\u636e\uff08\u6bd4\u5982\u5b57\u5178\uff09\u653e\u5230\u5411\u5ba2\u6237\u7aef\u53d1\u9001\u54cd\u5e94\u7684 JSONResponse \u91cc\u3002 \u4f46\u5176\u5b9e \u8def\u5f84\u64cd\u4f5c \u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de JSONResponse \u3002 \u8fd4\u56de\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u6216 Cookie \u65f6\u7ecf\u5e38\u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u3002","title":"\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94"},{"location":"advanced/response-directly/#response","text":"\u5b9e\u9645\u4e0a\uff0c\u60a8\u53ef\u4ee5\u8fd4\u56de\u4efb\u610f Response \u6216 Response \u7684\u5b50\u7c7b\u3002 \u63d0\u793a JSONResponse \u5c31\u662f Response \u7684\u5b50\u7c7b\u3002 FastAPI \u76f4\u63a5\u4f20\u9012\u8fd4\u56de\u7684 Response \u3002 \u6b64\u65f6\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u8f6c\u6362\u4efb\u4f55\u6570\u636e\uff0c\u4e5f\u4e0d\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3002 \u8fd9\u79cd\u65b9\u5f0f\u5f88\u7075\u6d3b\uff0c\u80fd\u8fd4\u56de\u4efb\u4f55\u6570\u636e\u7c7b\u578b\uff0c\u6216\u8986\u76d6\u6570\u636e\u58f0\u660e\u3001\u9a8c\u8bc1\u7b49\u64cd\u4f5c\u3002","title":"\u8fd4\u56de Response"},{"location":"advanced/response-directly/#response-jsonable_encoder","text":"FastAPI \u4e0d\u4fee\u6539\u8fd4\u56de\u7684 Response \uff0c\u56e0\u6b64\u5fc5\u987b\u8981\u4e8b\u5148\u786e\u8ba4\u5b83\u7684\u5185\u5bb9\u6ca1\u6709\u4efb\u4f55\u95ee\u9898\u3002 \u4f8b\u5982\uff0c\u628a Pydantic \u6a21\u578b\u653e\u5165 JSONResponse \u524d\uff0c\u8981\u5148\u628a\u5b83\u8f6c\u6362\u4e3a\u6240\u6709\u6570\u636e\u7c7b\u578b\uff08\u5982 datetime \u3001 UUID \u7b49\uff09\u90fd\u517c\u5bb9 JSON \u7c7b\u578b\u7684 \u5b57\u5178 \u3002 \u628a\u6570\u636e\u4f20\u9012\u7ed9\u54cd\u5e94\u524d\uff0c\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u8f6c\u6362\u6570\u636e\u3002 from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from fastapi.responses import JSONResponse from pydantic import BaseModel class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) return JSONResponse ( content = json_compatible_item_data ) \u6280\u672f\u7ec6\u8282 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import JSONResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u4e2d\u5927\u591a\u6570\u53ef\u7528\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u5728 Response \u4e2d\u4f7f\u7528 jsonable_encoder"},{"location":"advanced/response-directly/#response_1","text":"\u4e0a\u4f8b\u4ecb\u7ecd\u4e86\u6240\u6709\u8981\u4e86\u89e3\u7684\u77e5\u8bc6\u70b9\uff0c\u4f46\u5e76\u4e0d\u662f\u5f88\u5b9e\u7528\uff0c\u56e0\u4e3a FastAPI \u672c\u6765\u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de item \uff0c\u628a\u5b83\u653e\u5165 JSONResponse \uff0c\u7136\u540e\u8f6c\u6362\u6210 \u5b57\u5178 \uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u9ed8\u8ba4\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fd4\u56de\u81ea\u5b9a\u4e49\u54cd\u5e94\u3002 \u6bd4\u5982\u8bf4\uff0c\u8fd4\u56de XML \u54cd\u5e94\u3002 \u76f4\u63a5\u628a XML \u5185\u5bb9\u5b9a\u4e49\u4e3a\u5b57\u7b26\u4e32\uff0c\u653e\u5165 Response \uff0c\u5e76\u8fd4\u56de\u54cd\u5e94\uff1a from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/legacy/\" ) def get_legacy_data (): data = \"\"\"<?xml version=\"1.0\"?> <shampoo> <Header> Apply shampoo here. </Header> <Body> You'll have to use soap here. </Body> </shampoo> \"\"\" return Response ( content = data , media_type = \"application/xml\" )","title":"\u8fd4\u56de\u81ea\u5b9a\u4e49 Response"},{"location":"advanced/response-directly/#_2","text":"\u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c FastAPI \u4e0d\u4f1a\u9a8c\u8bc1\u3001\u8f6c\u6362\uff08\u5e8f\u5217\u5316\uff09\u548c\u81ea\u52a8\u5b58\u6863 Response \u4e2d\u7684\u6570\u636e\u3002 \u4f46\u4ecd\u53ef\u4ee5\u4f7f\u7528 OpenAPI \u4e2d\u7684\u9644\u52a0\u54cd\u5e94 \u4e00\u7ae0\u91cc\u7684\u65b9\u5f0f\u8fdb\u884c\u5b58\u6863\u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u5982\u4f55\u58f0\u660e\u5e76\u4f7f\u7528\u81ea\u5b9a\u4e49 Response \uff0c\u540c\u65f6\u5b9e\u73b0\u81ea\u52a8\u6570\u636e\u8f6c\u6362\u3001\u5b58\u6863\u7b49\u529f\u80fd\u3002","title":"\u8bf4\u660e"},{"location":"advanced/response-headers/","text":"\u54cd\u5e94\u5934 \u00b6 \u4f7f\u7528 Response \u53c2\u6570 \u00b6 \u4e0e\u58f0\u660e Cookie \u54cd\u5e94\u4e00\u6837\uff0c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u8fd8\u53ef\u4ee5\u58f0\u660e Response \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u73b0\u5728\uff0c\u5728 \u4e34\u65f6 \u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e\u54cd\u5e94\u5934\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/headers-and-object/\" ) def get_headers ( response : Response ): response . headers [ \"X-Cat-Dog\" ] = \"alone in the world\" return { \"message\" : \"Hello World\" } \u63a5\u7740\uff0c\u5c31\u53ef\u4ee5\u50cf\u8fd4\u56de\u5b57\u5178\u3001\u6570\u636e\u5e93\u6a21\u578b\u4e00\u6837\u8fd4\u56de\u4efb\u610f\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u4ecd\u53ef\u4ee5\u4f7f\u7528\u58f0\u660e\u7684 response_model \u7b5b\u9009\u548c\u8f6c\u6362\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 FastAPI \u4f7f\u7528 \u4e34\u65f6 \u54cd\u5e94\u83b7\u53d6\u54cd\u5e94\u5934\uff08\u53ca Cookie \u4e0e\u72b6\u6001\u7801\uff09\uff0c\u5e76\u628a\u8fd9\u4e9b\u5bf9\u8c61\u653e\u5165\u5305\u542b\u4e86 response_model \u7b5b\u9009\u8fc7\u7684\u8fd4\u56de\u503c\u7684\u6700\u7ec8\u54cd\u5e94\u3002 \u4f9d\u8d56\u9879\u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e Response \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e\u54cd\u5e94\u5934\uff08\u548c Cookie\uff09\u3002 \u76f4\u63a5\u8fd4\u56de Response \u00b6 \u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u54cd\u5e94\u5934\u3002 \u4ee5 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u6240\u8ff0\u7684\u65b9\u5f0f\u521b\u5efa\u54cd\u5e94\uff0c\u5e76\u4ee5\u9644\u52a0\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u54cd\u5e94\u5934\uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . get ( \"/headers/\" ) def get_headers (): content = { \"message\" : \"Hello World\" } headers = { \"X-Cat-Dog\" : \"alone in the world\" , \"Content-Language\" : \"en-US\" } return JSONResponse ( content = content , headers = headers ) \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import Response \u6216 from starlette.responses import JSONResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c\u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u4e2d\u7edd\u5927\u90e8\u5206\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Response \u5e38\u7528\u4e8e\u8bbe\u7f6e\u54cd\u5e94\u5934\u4e0e Cookie\uff0c\u56e0\u6b64\uff0c FastAPI \u4e5f\u5728 fastapi.Response \u4e2d\u63d0\u4f9b\u4e86\u652f\u6301\u3002 \u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 \u00b6 \u6ce8\u610f\uff0c\u81ea\u5b9a\u4e49\u4e13\u7528\u54cd\u5e94\u5934\u53ef\u4ee5\u6dfb\u52a0 \u524d\u7f00 'X-' \u3002 \u4f46\u5982\u679c\u9700\u8981\u6d4f\u89c8\u5668\u4e2d\u7684\u5ba2\u6237\u7aef\u67e5\u770b\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff0c\u5219\u8981\u5728 CORS \u914d\u7f6e\u4e2d\uff08\u8be6\u89c1 CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09 )\u4f7f\u7528 Starlette \u5b98\u6863 - CORS \u4e2d\u7684 expose_headers \u53c2\u6570\u3002","title":"\u54cd\u5e94\u5934"},{"location":"advanced/response-headers/#_1","text":"","title":"\u54cd\u5e94\u5934"},{"location":"advanced/response-headers/#response","text":"\u4e0e\u58f0\u660e Cookie \u54cd\u5e94\u4e00\u6837\uff0c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u8fd8\u53ef\u4ee5\u58f0\u660e Response \u7c7b\u578b\u7684\u53c2\u6570\u3002 \u73b0\u5728\uff0c\u5728 \u4e34\u65f6 \u54cd\u5e94\u5bf9\u8c61\u4e2d\u8bbe\u7f6e\u54cd\u5e94\u5934\u3002 from fastapi import FastAPI , Response app = FastAPI () @app . get ( \"/headers-and-object/\" ) def get_headers ( response : Response ): response . headers [ \"X-Cat-Dog\" ] = \"alone in the world\" return { \"message\" : \"Hello World\" } \u63a5\u7740\uff0c\u5c31\u53ef\u4ee5\u50cf\u8fd4\u56de\u5b57\u5178\u3001\u6570\u636e\u5e93\u6a21\u578b\u4e00\u6837\u8fd4\u56de\u4efb\u610f\u6240\u9700\u7684\u5bf9\u8c61\u3002 \u4ecd\u53ef\u4ee5\u4f7f\u7528\u58f0\u660e\u7684 response_model \u7b5b\u9009\u548c\u8f6c\u6362\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 FastAPI \u4f7f\u7528 \u4e34\u65f6 \u54cd\u5e94\u83b7\u53d6\u54cd\u5e94\u5934\uff08\u53ca Cookie \u4e0e\u72b6\u6001\u7801\uff09\uff0c\u5e76\u628a\u8fd9\u4e9b\u5bf9\u8c61\u653e\u5165\u5305\u542b\u4e86 response_model \u7b5b\u9009\u8fc7\u7684\u8fd4\u56de\u503c\u7684\u6700\u7ec8\u54cd\u5e94\u3002 \u4f9d\u8d56\u9879\u4e2d\u4e5f\u53ef\u4ee5\u58f0\u660e Response \u53c2\u6570\uff0c\u5e76\u8bbe\u7f6e\u54cd\u5e94\u5934\uff08\u548c Cookie\uff09\u3002","title":"\u4f7f\u7528 Response \u53c2\u6570"},{"location":"advanced/response-headers/#response_1","text":"\u76f4\u63a5\u8fd4\u56de Response \u65f6\uff0c\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u54cd\u5e94\u5934\u3002 \u4ee5 \u76f4\u63a5\u8fd4\u56de\u54cd\u5e94 \u6240\u8ff0\u7684\u65b9\u5f0f\u521b\u5efa\u54cd\u5e94\uff0c\u5e76\u4ee5\u9644\u52a0\u53c2\u6570\u7684\u5f62\u5f0f\u4f20\u9012\u54cd\u5e94\u5934\uff1a from fastapi import FastAPI from fastapi.responses import JSONResponse app = FastAPI () @app . get ( \"/headers/\" ) def get_headers (): content = { \"message\" : \"Hello World\" } headers = { \"X-Cat-Dog\" : \"alone in the world\" , \"Content-Language\" : \"en-US\" } return JSONResponse ( content = content , headers = headers ) \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import Response \u6216 from starlette.responses import JSONResponse \u3002 FastAPI \u7684 fastapi.responses \u4e0e starlette.responses \u4e00\u6837\uff0c\u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u4e2d\u7edd\u5927\u90e8\u5206\u53ef\u7528\u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Response \u5e38\u7528\u4e8e\u8bbe\u7f6e\u54cd\u5e94\u5934\u4e0e Cookie\uff0c\u56e0\u6b64\uff0c FastAPI \u4e5f\u5728 fastapi.Response \u4e2d\u63d0\u4f9b\u4e86\u652f\u6301\u3002","title":"\u76f4\u63a5\u8fd4\u56de Response"},{"location":"advanced/response-headers/#_2","text":"\u6ce8\u610f\uff0c\u81ea\u5b9a\u4e49\u4e13\u7528\u54cd\u5e94\u5934\u53ef\u4ee5\u6dfb\u52a0 \u524d\u7f00 'X-' \u3002 \u4f46\u5982\u679c\u9700\u8981\u6d4f\u89c8\u5668\u4e2d\u7684\u5ba2\u6237\u7aef\u67e5\u770b\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff0c\u5219\u8981\u5728 CORS \u914d\u7f6e\u4e2d\uff08\u8be6\u89c1 CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09 )\u4f7f\u7528 Starlette \u5b98\u6863 - CORS \u4e2d\u7684 expose_headers \u53c2\u6570\u3002","title":"\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934"},{"location":"advanced/settings/","text":"\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u8981\u5728\u5e94\u7528\u5916\u90e8\u5bf9\u5bc6\u94a5\u3001\u6570\u636e\u5e93\u51ed\u8bc1\u3001\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u51ed\u8bc1\u7b49\u8fdb\u884c\u8bbe\u7f6e\u6216\u914d\u7f6e\u3002 \u8fd9\u4e9b\u8bbe\u7f6e\u5927\u591a\u6570\u90fd\u662f\u6570\u636e\u5e93 URL \u7b49\uff08\u53ef\u4fee\u6539\u7684\uff09\u53d8\u91cf\u3002\u6709\u4e00\u4e9b\u53d8\u91cf\u5219\u5305\u542b\u5bc6\u94a5\u7b49\u654f\u611f\u4fe1\u606f\u3002 \u56e0\u6b64\uff0cFastAPI \u5e94\u7528\u901a\u5e38\u9700\u8981\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u91cc\u7684\u914d\u7f6e\u3002 \u73af\u5883\u53d8\u91cf \u00b6 \u63d0\u793a \u5982\u679c\u60a8\u5df2\u7ecf\u4e86\u89e3 \u73af\u5883\u53d8\u91cf \uff0c\u5e76\u77e5\u9053\u600e\u4e48\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u53ef\u4ee5\u8df3\u8fc7\u672c\u7ae0\u4e0b\u9762\u7684\u5185\u5bb9\u3002 \u73af\u5883\u53d8\u91cf \uff08\u5373 env var \uff09\u5b58\u50a8\u5728\u64cd\u4f5c\u7cfb\u7edf\u91cc\uff0c\u867d\u7136\u73af\u5883\u53d8\u91cf\u5728 Python \u4ee3\u7801\u4e4b\u5916\uff0c\u4f46\u80fd\u88ab Python \u4ee3\u7801\uff08\u6216\u5176\u4ed6\u7a0b\u5e8f\uff09\u8bfb\u53d6\u3002 \u6ca1\u6709 Python\uff0c\u4e5f\u80fd\u5728 Shell \u91cc\u521b\u5efa\u4e0e\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u3002 Linux, macOS, Windows Bash Windows PowerShell // \u521b\u5efa MY_NAME \u73af\u5883\u53d8\u91cf $ export MY_NAME = \"Wade Wilson\" // \u5176\u4ed6\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a $ echo \"Hello $MY_NAME \" Hello Wade Wilson // \u521b\u5efa MY_NAME \u73af\u5883\u53d8\u91cf $ $Env :MY_NAME = \"Wade Wilson\" // \u5176\u4ed6\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a $ echo \"Hello $Env :MY_NAME\" Hello Wade Wilson Python \u8bfb\u53d6\u73af\u5883\u53d8\u91cf \u00b6 \u4f7f\u7528 Terminal \u547d\u4ee4\u7a97\u53e3\u7b49\u65b9\u5f0f\u5728 Python \u5916\u90e8\u521b\u5efa\u73af\u5883\u53d8\u91cf\uff0c\u518d\u5728 Python \u91cc\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u3002 \u4ee5\u5982\u4e0b\u7684 main.py \u4e3a\u4f8b\uff1a import os name = os . getenv ( \"MY_NAME\" , \"World\" ) print ( f \"Hello { name } from Python\" ) \u63d0\u793a os.getenv() \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8fd4\u56de\u7684\u9ed8\u8ba4\u503c\u3002 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a None \uff0c\u6b64\u5904\u4f7f\u7528 World \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u7136\u540e\uff0c\u8c03\u7528 Python \u7a0b\u5e8f\uff1a // \u6b64\u65f6\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf $ python main.py // \u56e0\u4e3a\u5c1a\u672a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u8fd4\u56de\u9ed8\u8ba4\u503c Hello World from Python // \u4f46\u5982\u679c\u4e8b\u5148\u521b\u5efa\u4e86\u73af\u5883\u53d8\u91cf $ export MY_NAME = \"Wade Wilson\" // \u7136\u540e\u518d\u8c03\u7528\u7a0b\u5e8f $ python main.py // \u73b0\u5728\uff0c\u7a0b\u5e8f\u5c31\u80fd\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u4e86 Hello Wade Wilson from Python \u73af\u5883\u53d8\u91cf\u662f\u5728\u4ee3\u7801\u4e4b\u5916\u8bbe\u7f6e\u7684\uff0c\u4ee3\u7801\u53ef\u4ee5\u8bfb\u53d6\uff0c\u4f46\u4e0d\u80fd\u628a\u73af\u5883\u53d8\u91cf\u4e0e\u5176\u4ed6\u6587\u4ef6\u4e00\u8d77\u4fdd\u5b58\uff08\u7528 git \u63d0\u4ea4\uff09\uff0c\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5e38\u7528\u4e8e\u914d\u7f6e\u6216\u8bbe\u7f6e\u3002 \u60a8\u8fd8\u53ef\u4ee5\u521b\u5efa\u4ec5\u4f9b\u7279\u5b9a\u7a0b\u5e8f\u8c03\u7528\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5373\u4e13\u4f9b\u6307\u5b9a\u7a0b\u5e8f\u4f7f\u7528\uff0c\u800c\u4e14\u53ea\u80fd\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u4f7f\u7528\u3002 \u4e3a\u6b64\u8981\u5728\u540c\u4e00\u547d\u4ee4\u884c\u4e2d\uff0c\u5728\u8c03\u7528\u7a0b\u5e8f\u4e4b\u524d\u521b\u5efa\u73af\u5883\u53d8\u91cf\uff1a // \u5728\u8c03\u7528\u7a0b\u5e8f\u7684\u540c\u4e00\u547d\u4ee4\u884c\u4e2d\u521b\u5efa\u73af\u5883\u53d8\u91cf MY_NAME $ MY_NAME = \"Wade Wilson\" python main.py // \u73b0\u5728\uff0c\u7a0b\u5e8f\u5c31\u80fd\u591f\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u4e86 Hello Wade Wilson from Python // \u7a0b\u5e8f\u8fd0\u884c\u5b8c\u6bd5\u540e\uff0c\u73af\u5883\u53d8\u91cf\u5c31\u4e0d\u5b58\u5728\u4e86 $ python main.py Hello World from Python \u63d0\u793a \u8be6\u89c1 The Twelve-Factor App: Config \u3002 \u7c7b\u578b\u4e0e\u9a8c\u8bc1 \u00b6 \u73af\u5883\u53d8\u91cf\u53ea\u80fd\u5904\u7406\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728 Python \u5916\u90e8\uff0c\u5fc5\u987b\u517c\u5bb9\u5176\u4ed6\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u4ef6\uff0c\u751a\u81f3\u8fd8\u8981\u517c\u5bb9 Linux\u3001Windows\u3001macOS \u7b49\u64cd\u4f5c\u7cfb\u7edf\u3002 \u5373\uff0cPython \u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u8bfb\u53d6\u7684\u503c\u5fc5\u987b\u662f \u5b57\u7b26\u4e32 \uff0c\u7c7b\u578b\u8f6c\u6362\u4e0e\u9a8c\u8bc1\u7b49\u64cd\u4f5c\u53ea\u80fd\u5728\u4ee3\u7801\u4e2d\u5b8c\u6210\u3002 Pydantic \u7684 Settings \u00b6 \u8fd8\u597d Pydantic \u63d0\u4f9b\u4e86\u5904\u7406\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u7684\u5de5\u5177\uff0c\u8be6\u89c1 Pydantic \u5b98\u6863 - \u8bbe\u7f6e\u7ba1\u7406 \u3002 \u521b\u5efa Settings \u5bf9\u8c61 \u00b6 \u4ece Pydantic \u5bfc\u5165 BaseSettings \u5e76\u521b\u5efa\u5b50\u7c7b\uff0c\u8fd9\u4e0e\u521b\u5efa Pydantic \u6a21\u578b\u7c7b\u4f3c\u3002 \u521b\u5efa Settings \u5bf9\u8c61\u548c Pydantic \u6a21\u578b\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u58f0\u660e\u7c7b\u7684\u5c5e\u6027\uff0c\u5e76\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528 Pydantic \u6a21\u578b\u7684\u9a8c\u8bc1\u529f\u80fd\u4e0e\u5de5\u5177\uff0c\u6bd4\u5982\u58f0\u660e\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u6216\u4f7f\u7528 Field() \u5b9e\u73b0\u9644\u52a0\u9a8c\u8bc1\u64cd\u4f5c\u3002 from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u63d0\u793a \u4e0d\u8981\u590d\u7528\u672c\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0b\u6587\u4e2d\u6700\u540e\u7684\u4ee3\u7801\u3002 \u521b\u5efa Settings \u7c7b\u5b9e\u4f8b\u65f6\uff08\u672c\u4f8b\u4e2d\u662f settings \u5bf9\u8c61\uff09\uff0cPydantic \u8bfb\u53d6\u73af\u5883\u53d8\u91cf\uff0c\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64\u5927\u5199\u53d8\u91cf APP_NAME \u4f1a\u88ab\u8bfb\u53d6\u4e3a app_name \u3002 \u5bf9\u4e8e\u6570\u636e\u8f6c\u6362\u4e0e\u9a8c\u8bc1\uff0c\u4f7f\u7528 settings \u5bf9\u8c61\u65f6\u4f1a\u4fdd\u7559\u58f0\u660e\u7684\u6570\u636e\u7c7b\u578b\uff08\u4f8b\u5982\uff0c items_per_user \u7684\u7c7b\u578b\u8fd8\u662f int \uff09\u3002 \u4f7f\u7528 settings \u00b6 \u5728 app \u4e2d\u4f7f\u7528\u65b0\u7684 settings \u5bf9\u8c61\uff1a from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u8fd0\u884c\u670d\u52a1\u5668 \u00b6 \u4f7f\u7528\u73af\u5883\u53d8\u91cf\u4f20\u9012\u914d\u7f6e\u53c2\u6570\u5e76\u8fd0\u884c\u670d\u52a1\u5668\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8bbe\u7f6e ADMIN_EMAIL \u548c APP_NAME \uff1a $ ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u63d0\u793a \u5728\u5355\u4e00\u547d\u4ee4\u4e2d\u8bbe\u7f6e\u591a\u4e2a\u73af\u5883\u53d8\u91cf\uff0c\u8981\u7528\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u628a\u73af\u5883\u53d8\u91cf\u653e\u5728\u547d\u4ee4\u524d\u9762\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u628a admin_email \u8bbe\u7f6e\u4e3a \"deadpool@example.com\" \u3002 app_name \u7684\u503c\u5219\u662f ChimichangApp \u3002 \u5e76\u4e14 items_per_user \u7684\u9ed8\u8ba4\u503c\u8fd8\u662f 50 \u3002 \u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u8bbe\u7f6e \u00b6 \u5982 \u5927\u578b\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u6240\u793a\uff0c\u8fd8\u53ef\u4ee5\u628a\u8bbe\u7f6e\u653e\u5728\u6a21\u5757\u6587\u4ef6\u91cc\u3002 \u4f8b\u5982\u4e0b\u9762\u7684 config.py \uff1a from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () \u7136\u540e\u5728 main.py \u4e2d\u4f7f\u7528\uff1a from fastapi import FastAPI from .config import settings app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u63d0\u793a \u5982 \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u6240\u793a\uff0c\u8fd8\u8981\u5728\u6587\u4ef6\u5939\u4e2d\u521b\u5efa __init__.py \u6587\u4ef6\u3002 \u4f9d\u8d56\u9879\u4e2d\u7684\u8bbe\u7f6e \u00b6 \u6709\u65f6\u4f7f\u7528\u4f9d\u8d56\u9879\u8fdb\u884c\u8bbe\u7f6e\u6bd4\u4f7f\u7528 settings \u5168\u5c40\u5bf9\u8c61\u66f4\u5b9e\u7528\u3002 \u7279\u522b\u662f\u5728\u6d4b\u8bd5\u65f6\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u8bbe\u7f6e\u53ef\u4ee5\u8f7b\u6613\u5730\u8986\u76d6\u4f9d\u8d56\u9879\u3002 \u914d\u7f6e\u6587\u4ef6 \u00b6 \u53c2\u7167\u4e0a\u4f8b\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539 config.py \uff1a from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 \u6ce8\u610f\uff0c\u672c\u4f8b\u6ca1\u6709\u521b\u5efa\u9ed8\u8ba4\u5b9e\u4f8b settings = Settings() \u3002 \u4e3b\u5e94\u7528\u6587\u4ef6 \u00b6 \u73b0\u5728\uff0c\u521b\u5efa\u8fd4\u56de\u65b0\u7684 config.Settings() \u7684\u4f9d\u8d56\u9879\u3002 from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u63d0\u793a \u7a0d\u540e\u518d\u4ecb\u7ecd @lru_cache() \u3002 \u73b0\u5728\u5047\u8bbe get_settings() \u53ea\u662f\u666e\u901a\u51fd\u6570\u3002 \u7136\u540e\uff0c\u901a\u8fc7 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u7684\u4f9d\u8d56\u9879\u8bf7\u6c42\u5e76\u4f7f\u7528\u8bbe\u7f6e\u3002 from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u8bbe\u7f6e\u4e0e\u6d4b\u8bd5 \u00b6 \u5728\u6d4b\u8bd5\u671f\u95f4\uff0c\u521b\u5efa\u4f9d\u8d56\u9879\u8986\u76d6 get_settings \u53ef\u4ee5\u8f7b\u677e\u5730\u4f7f\u7528\u4e0d\u540c\u7684\u8bbe\u7f6e\u5bf9\u8c61\uff1a from fastapi.testclient import TestClient from .config import Settings from .main import app , get_settings client = TestClient ( app ) def get_settings_override (): return Settings ( admin_email = \"testing_admin@example.com\" ) app . dependency_overrides [ get_settings ] = get_settings_override def test_app (): response = client . get ( \"/info\" ) data = response . json () assert data == { \"app_name\" : \"Awesome API\" , \"admin_email\" : \"testing_admin@example.com\" , \"items_per_user\" : 50 , } \u5728\u8986\u76d6\u4f9d\u8d56\u9879\u4e2d\uff0c\u521b\u5efa\u65b0\u7684 Settings \u5bf9\u8c61\uff0c\u5e76\u4e3a admin_email \u8bbe\u7f6e\u65b0\u7684\u503c\uff0c\u7136\u540e\u518d\u8fd4\u56de\u65b0\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u7528\u5b83\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002 \u8bfb\u53d6 .env \u6587\u4ef6 \u00b6 \u5982\u679c\u7ecf\u5e38\u8981\u5728\u4e0d\u540c\u73af\u5883\u4e0b\u6539\u53d8\u5f88\u591a\u8bbe\u7f6e\uff0c\u6700\u597d\u628a\u8fd9\u4e9b\u8bbe\u7f6e\u653e\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\uff0c\u5e76\u4ece\u6587\u4ef6\u4e2d\u4ee5\u73af\u5883\u53d8\u91cf\u7684\u5f62\u5f0f\u8bfb\u53d6\u8bbe\u7f6e\u5185\u5bb9\u3002 \u8fd9\u79cd\u505a\u6cd5\u5f88\u5e38\u89c1\uff0c\u901a\u5e38\u4f1a\u628a\u8bbe\u7f6e\u53d8\u91cf\u653e\u5728 dotenv \uff08 .env \uff09\u6587\u4ef6\u91cc\u3002 \u63d0\u793a \u4ee5\u70b9\uff08 . \uff09\u5f00\u5934\u7684\u6587\u4ef6\u5728 Linux \u548c macOS \u7b49 Unix \u7cfb\u7edf\u91cc\u662f\u9690\u85cf\u6587\u4ef6\u3002 \u4f46\u662f dotenv \u6587\u4ef6\u5b9e\u9645\u4e0a\u4e0d\u5fc5\u6709\u660e\u786e\u7684\u6587\u4ef6\u540d\u3002 Pydantic \u652f\u6301\u4f7f\u7528\u5916\u90e8\u652f\u6301\u5e93\u8bfb\u53d6\u8fd9\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\u3002\u8be6\u89c1 Pydantic \u5b98\u6863 - \u8bbe\u7f6e\uff1aDotenv (.env) \u652f\u6301 \u3002 \u63d0\u793a \u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\u9700\u8981\u5148\u5b89\u88c5 pip install python-dotenv \u3002 .env \u6587\u4ef6 \u00b6 \u5047\u8bbe .env \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" \u8bfb\u53d6 .env \u4e2d\u7684\u8bbe\u7f6e \u00b6 \u7136\u540e\u66f4\u65b0 config.py \uff1a from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 class Config : env_file = \".env\" \u6b64\u5904\uff0c\u521b\u5efa Pydantic Settings \u7c7b\u4e2d\u7684 Config \u7c7b\uff0c\u5e76\u4f7f\u7528 env_file \u8bbe\u7f6e dotenv \u6587\u4ef6\u540d\u3002 \u63d0\u793a Config \u7c7b\u53ea\u7528\u4e8e Pydantic \u914d\u7f6e\u3002\u8be6\u89c1 Pydantic \u6a21\u578b\u914d\u7f6e \u4f7f\u7528 lru_cache \u53ea\u521b\u5efa\u4e00\u6b21 Settings \u00b6 \u4ece\u78c1\u76d8\u8bfb\u53d6\u6587\u4ef6\u7684\u6210\u672c\u8f83\u9ad8\uff08\u6162\uff09\uff0c\u6700\u597d\u53ea\u64cd\u4f5c\u4e00\u6b21\uff0c\u7136\u540e\u590d\u7528\u540c\u4e00\u4e2a\u8bbe\u7f6e\u5bf9\u8c61\uff0c\u4e0d\u8981\u6bcf\u6b21\u8bf7\u6c42\u65f6\u90fd\u53cd\u590d\u8bfb\u53d6\u3002 \u4f46\u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a Settings () \u56e0\u6b64\u6bcf\u6b21\u521b\u5efa\u65b0\u7684 Settings \u5bf9\u8c61\u65f6\u90fd\u8981\u8bfb\u53d6 .env \u3002 \u5982\u679c\u4f7f\u7528\u4e0b\u9762\u7684\u4f9d\u8d56\u9879\u51fd\u6570\uff1a def get_settings (): return Settings () \u6bcf\u6b21\u8bf7\u6c42\u65f6\u8fd8\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u8bfb\u53d6 .env \u6587\u4ef6\u3002\u26a0\ufe0f \u4f46\u4f7f\u7528 @lru_cache \u88c5\u9970\u5668\uff0c\u5219\u53ea\u9700\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u521b\u5efa\u4e00\u6b21 Settings \u5bf9\u8c61\u3002\u2714\ufe0f from functools import lru_cache from fastapi import Depends , FastAPI from . import config app = FastAPI () @lru_cache () def get_settings (): return config . Settings () @app . get ( \"/info\" ) async def info ( settings : config . Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u518d\u6b21\u8bf7\u6c42\u65f6\uff0c\u8c03\u7528\u4f9d\u8d56\u9879\u4e2d\u7684 get_settings() \u65f6\u4e0d\u518d\u6267\u884c\u5185\u90e8\u4ee3\u7801 get_settings() \uff0c\u4e5f\u4e0d\u518d\u521b\u5efa\u65b0\u7684 Settings \u5bf9\u8c61\uff0c\u6bcf\u6b21\u8bf7\u6c42\u65f6\u53ea\u8fd4\u56de\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u8fd4\u56de\u7684\u5bf9\u8c61\u3002 lru_cache \u6280\u672f\u7ec6\u8282 \u00b6 @lru_cache() \u4fee\u6539\u88c5\u9970\u7684\u51fd\u6570\uff0c\u4f7f\u5176\u8fd4\u56de\u4e0e\u7b2c\u4e00\u6b21\u8fd4\u56de\u76f8\u540c\u7684\u503c\uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u91cd\u65b0\u8ba1\u7b97\uff0c\u4e5f\u4e0d\u7528\u6bcf\u6b21\u90fd\u6267\u884c\u51fd\u6570\u4ee3\u7801\u3002 \u56e0\u6b64\uff0c\u5b83\u4e0b\u9762\u7684\u51fd\u6570\u6bcf\u6b21\u53ea\u4e3a\u540c\u4e00\u79cd\u5b9e\u53c2\u7ec4\u5408\u6267\u884c\u4e00\u6b21\u3002\u7136\u540e\uff0c\u6bcf\u6b21\u4f7f\u7528\u76f8\u540c\u5b9e\u53c2\u7ec4\u5408\u8c03\u7528\u51fd\u6570\u65f6\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a\u8fd4\u56de\u503c\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u5982\u4e0b\u51fd\u6570\uff1a @lru_cache () def say_hi ( name : str , salutation : str = \"Ms.\" ): return f \"Hello { salutation } { name } \" \u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u5982\u4e0b\u56fe\uff1a sequenceDiagram participant code as Code participant function as say_hi() participant execute as Execute function rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Camila\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Rick\") function ->> code: return stored result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end \u672c\u4f8b\u4e2d\uff0c\u4f9d\u8d56\u9879 get_settings() \u51fd\u6570\u751a\u81f3\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u56e0\u6b64\u6bcf\u6b21\u8fd4\u56de\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u503c\u3002 \u51fd\u6570\u7684\u8fd9\u79cd\u64cd\u4f5c\u65b9\u5f0f\u6709\u70b9\u50cf\u5168\u5c40\u53d8\u91cf\u3002\u4f46\u56e0\u4e3a\u5b83\u4f7f\u7528\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u6240\u4ee5\u6d4b\u8bd5\u65f6\u53ef\u4ee5\u8f7b\u6613\u5730\u8986\u76d6\u3002 @lru_cache() \u662f Python \u6807\u51c6\u5e93 functools \u7684\u7ec4\u4ef6\uff0c\u8be6\u89c1 Python \u5b98\u6863 - @lru_cache() \u3002 \u5c0f\u7ed3 \u00b6 \u5145\u5206\u5229\u7528 Pydantic \u6a21\u578b\u7684\u4f18\u52bf\uff0c\u4f7f\u7528 Pydantic \u7684 Settings \u5904\u7406\u5e94\u7528\u7684\u8bbe\u7f6e\u6216\u914d\u7f6e\u3002 \u901a\u8fc7\u4f9d\u8d56\u9879\u7b80\u5316\u6d4b\u8bd5 \u652f\u6301\u4f7f\u7528 .env \u4f7f\u7528 @lru_cache() \uff0c\u4e0d\u7528\u6bcf\u6b21\u8bf7\u6c42\u65f6\u90fd\u8bfb\u53d6 dotenv \u6587\u4ef6\uff0c\u5e76\u4e14\u652f\u6301\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f7f\u7528","title":"\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf"},{"location":"advanced/settings/#_1","text":"\u6709\u65f6\uff0c\u6211\u4eec\u8981\u5728\u5e94\u7528\u5916\u90e8\u5bf9\u5bc6\u94a5\u3001\u6570\u636e\u5e93\u51ed\u8bc1\u3001\u7535\u5b50\u90ae\u4ef6\u670d\u52a1\u51ed\u8bc1\u7b49\u8fdb\u884c\u8bbe\u7f6e\u6216\u914d\u7f6e\u3002 \u8fd9\u4e9b\u8bbe\u7f6e\u5927\u591a\u6570\u90fd\u662f\u6570\u636e\u5e93 URL \u7b49\uff08\u53ef\u4fee\u6539\u7684\uff09\u53d8\u91cf\u3002\u6709\u4e00\u4e9b\u53d8\u91cf\u5219\u5305\u542b\u5bc6\u94a5\u7b49\u654f\u611f\u4fe1\u606f\u3002 \u56e0\u6b64\uff0cFastAPI \u5e94\u7528\u901a\u5e38\u9700\u8981\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u91cc\u7684\u914d\u7f6e\u3002","title":"\u8bbe\u7f6e\u4e0e\u73af\u5883\u53d8\u91cf"},{"location":"advanced/settings/#_2","text":"\u63d0\u793a \u5982\u679c\u60a8\u5df2\u7ecf\u4e86\u89e3 \u73af\u5883\u53d8\u91cf \uff0c\u5e76\u77e5\u9053\u600e\u4e48\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u53ef\u4ee5\u8df3\u8fc7\u672c\u7ae0\u4e0b\u9762\u7684\u5185\u5bb9\u3002 \u73af\u5883\u53d8\u91cf \uff08\u5373 env var \uff09\u5b58\u50a8\u5728\u64cd\u4f5c\u7cfb\u7edf\u91cc\uff0c\u867d\u7136\u73af\u5883\u53d8\u91cf\u5728 Python \u4ee3\u7801\u4e4b\u5916\uff0c\u4f46\u80fd\u88ab Python \u4ee3\u7801\uff08\u6216\u5176\u4ed6\u7a0b\u5e8f\uff09\u8bfb\u53d6\u3002 \u6ca1\u6709 Python\uff0c\u4e5f\u80fd\u5728 Shell \u91cc\u521b\u5efa\u4e0e\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u3002 Linux, macOS, Windows Bash Windows PowerShell // \u521b\u5efa MY_NAME \u73af\u5883\u53d8\u91cf $ export MY_NAME = \"Wade Wilson\" // \u5176\u4ed6\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a $ echo \"Hello $MY_NAME \" Hello Wade Wilson // \u521b\u5efa MY_NAME \u73af\u5883\u53d8\u91cf $ $Env :MY_NAME = \"Wade Wilson\" // \u5176\u4ed6\u7a0b\u5e8f\u4e5f\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\uff0c\u4f8b\u5982\uff1a $ echo \"Hello $Env :MY_NAME\" Hello Wade Wilson","title":"\u73af\u5883\u53d8\u91cf"},{"location":"advanced/settings/#python","text":"\u4f7f\u7528 Terminal \u547d\u4ee4\u7a97\u53e3\u7b49\u65b9\u5f0f\u5728 Python \u5916\u90e8\u521b\u5efa\u73af\u5883\u53d8\u91cf\uff0c\u518d\u5728 Python \u91cc\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u3002 \u4ee5\u5982\u4e0b\u7684 main.py \u4e3a\u4f8b\uff1a import os name = os . getenv ( \"MY_NAME\" , \"World\" ) print ( f \"Hello { name } from Python\" ) \u63d0\u793a os.getenv() \u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662f\u8981\u8fd4\u56de\u7684\u9ed8\u8ba4\u503c\u3002 \u5982\u679c\u6ca1\u6709\u63d0\u4f9b\u8fd9\u4e2a\u53c2\u6570\uff0c\u5219\u9ed8\u8ba4\u4e3a None \uff0c\u6b64\u5904\u4f7f\u7528 World \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u7136\u540e\uff0c\u8c03\u7528 Python \u7a0b\u5e8f\uff1a // \u6b64\u65f6\u8fd8\u6ca1\u6709\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf $ python main.py // \u56e0\u4e3a\u5c1a\u672a\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\uff0c\u6240\u4ee5\u8fd4\u56de\u9ed8\u8ba4\u503c Hello World from Python // \u4f46\u5982\u679c\u4e8b\u5148\u521b\u5efa\u4e86\u73af\u5883\u53d8\u91cf $ export MY_NAME = \"Wade Wilson\" // \u7136\u540e\u518d\u8c03\u7528\u7a0b\u5e8f $ python main.py // \u73b0\u5728\uff0c\u7a0b\u5e8f\u5c31\u80fd\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u4e86 Hello Wade Wilson from Python \u73af\u5883\u53d8\u91cf\u662f\u5728\u4ee3\u7801\u4e4b\u5916\u8bbe\u7f6e\u7684\uff0c\u4ee3\u7801\u53ef\u4ee5\u8bfb\u53d6\uff0c\u4f46\u4e0d\u80fd\u628a\u73af\u5883\u53d8\u91cf\u4e0e\u5176\u4ed6\u6587\u4ef6\u4e00\u8d77\u4fdd\u5b58\uff08\u7528 git \u63d0\u4ea4\uff09\uff0c\u56e0\u6b64\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5e38\u7528\u4e8e\u914d\u7f6e\u6216\u8bbe\u7f6e\u3002 \u60a8\u8fd8\u53ef\u4ee5\u521b\u5efa\u4ec5\u4f9b\u7279\u5b9a\u7a0b\u5e8f\u8c03\u7528\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5373\u4e13\u4f9b\u6307\u5b9a\u7a0b\u5e8f\u4f7f\u7528\uff0c\u800c\u4e14\u53ea\u80fd\u5728\u7a0b\u5e8f\u8fd0\u884c\u671f\u95f4\u4f7f\u7528\u3002 \u4e3a\u6b64\u8981\u5728\u540c\u4e00\u547d\u4ee4\u884c\u4e2d\uff0c\u5728\u8c03\u7528\u7a0b\u5e8f\u4e4b\u524d\u521b\u5efa\u73af\u5883\u53d8\u91cf\uff1a // \u5728\u8c03\u7528\u7a0b\u5e8f\u7684\u540c\u4e00\u547d\u4ee4\u884c\u4e2d\u521b\u5efa\u73af\u5883\u53d8\u91cf MY_NAME $ MY_NAME = \"Wade Wilson\" python main.py // \u73b0\u5728\uff0c\u7a0b\u5e8f\u5c31\u80fd\u591f\u8bfb\u53d6\u73af\u5883\u53d8\u91cf\u4e86 Hello Wade Wilson from Python // \u7a0b\u5e8f\u8fd0\u884c\u5b8c\u6bd5\u540e\uff0c\u73af\u5883\u53d8\u91cf\u5c31\u4e0d\u5b58\u5728\u4e86 $ python main.py Hello World from Python \u63d0\u793a \u8be6\u89c1 The Twelve-Factor App: Config \u3002","title":"Python \u8bfb\u53d6\u73af\u5883\u53d8\u91cf"},{"location":"advanced/settings/#_3","text":"\u73af\u5883\u53d8\u91cf\u53ea\u80fd\u5904\u7406\u6587\u672c\u5b57\u7b26\u4e32\uff0c\u56e0\u4e3a\u5b83\u4eec\u5728 Python \u5916\u90e8\uff0c\u5fc5\u987b\u517c\u5bb9\u5176\u4ed6\u7a0b\u5e8f\u548c\u64cd\u4f5c\u7cfb\u7edf\u7ec4\u4ef6\uff0c\u751a\u81f3\u8fd8\u8981\u517c\u5bb9 Linux\u3001Windows\u3001macOS \u7b49\u64cd\u4f5c\u7cfb\u7edf\u3002 \u5373\uff0cPython \u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u8bfb\u53d6\u7684\u503c\u5fc5\u987b\u662f \u5b57\u7b26\u4e32 \uff0c\u7c7b\u578b\u8f6c\u6362\u4e0e\u9a8c\u8bc1\u7b49\u64cd\u4f5c\u53ea\u80fd\u5728\u4ee3\u7801\u4e2d\u5b8c\u6210\u3002","title":"\u7c7b\u578b\u4e0e\u9a8c\u8bc1"},{"location":"advanced/settings/#pydantic-settings","text":"\u8fd8\u597d Pydantic \u63d0\u4f9b\u4e86\u5904\u7406\u73af\u5883\u53d8\u91cf\u8bbe\u7f6e\u7684\u5de5\u5177\uff0c\u8be6\u89c1 Pydantic \u5b98\u6863 - \u8bbe\u7f6e\u7ba1\u7406 \u3002","title":"Pydantic \u7684 Settings"},{"location":"advanced/settings/#settings","text":"\u4ece Pydantic \u5bfc\u5165 BaseSettings \u5e76\u521b\u5efa\u5b50\u7c7b\uff0c\u8fd9\u4e0e\u521b\u5efa Pydantic \u6a21\u578b\u7c7b\u4f3c\u3002 \u521b\u5efa Settings \u5bf9\u8c61\u548c Pydantic \u6a21\u578b\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u58f0\u660e\u7c7b\u7684\u5c5e\u6027\uff0c\u5e76\u8bbe\u7f6e\u9ed8\u8ba4\u503c\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528 Pydantic \u6a21\u578b\u7684\u9a8c\u8bc1\u529f\u80fd\u4e0e\u5de5\u5177\uff0c\u6bd4\u5982\u58f0\u660e\u4e0d\u540c\u6570\u636e\u7c7b\u578b\u6216\u4f7f\u7528 Field() \u5b9e\u73b0\u9644\u52a0\u9a8c\u8bc1\u64cd\u4f5c\u3002 from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u63d0\u793a \u4e0d\u8981\u590d\u7528\u672c\u4f8b\u4e2d\u7684\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0b\u6587\u4e2d\u6700\u540e\u7684\u4ee3\u7801\u3002 \u521b\u5efa Settings \u7c7b\u5b9e\u4f8b\u65f6\uff08\u672c\u4f8b\u4e2d\u662f settings \u5bf9\u8c61\uff09\uff0cPydantic \u8bfb\u53d6\u73af\u5883\u53d8\u91cf\uff0c\u4e14\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u56e0\u6b64\u5927\u5199\u53d8\u91cf APP_NAME \u4f1a\u88ab\u8bfb\u53d6\u4e3a app_name \u3002 \u5bf9\u4e8e\u6570\u636e\u8f6c\u6362\u4e0e\u9a8c\u8bc1\uff0c\u4f7f\u7528 settings \u5bf9\u8c61\u65f6\u4f1a\u4fdd\u7559\u58f0\u660e\u7684\u6570\u636e\u7c7b\u578b\uff08\u4f8b\u5982\uff0c items_per_user \u7684\u7c7b\u578b\u8fd8\u662f int \uff09\u3002","title":"\u521b\u5efa Settings \u5bf9\u8c61"},{"location":"advanced/settings/#settings_1","text":"\u5728 app \u4e2d\u4f7f\u7528\u65b0\u7684 settings \u5bf9\u8c61\uff1a from fastapi import FastAPI from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , }","title":"\u4f7f\u7528 settings"},{"location":"advanced/settings/#_4","text":"\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u4f20\u9012\u914d\u7f6e\u53c2\u6570\u5e76\u8fd0\u884c\u670d\u52a1\u5668\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8bbe\u7f6e ADMIN_EMAIL \u548c APP_NAME \uff1a $ ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\" uvicorn main:app <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u63d0\u793a \u5728\u5355\u4e00\u547d\u4ee4\u4e2d\u8bbe\u7f6e\u591a\u4e2a\u73af\u5883\u53d8\u91cf\uff0c\u8981\u7528\u7a7a\u683c\u5206\u9694\uff0c\u5e76\u628a\u73af\u5883\u53d8\u91cf\u653e\u5728\u547d\u4ee4\u524d\u9762\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u628a admin_email \u8bbe\u7f6e\u4e3a \"deadpool@example.com\" \u3002 app_name \u7684\u503c\u5219\u662f ChimichangApp \u3002 \u5e76\u4e14 items_per_user \u7684\u9ed8\u8ba4\u503c\u8fd8\u662f 50 \u3002","title":"\u8fd0\u884c\u670d\u52a1\u5668"},{"location":"advanced/settings/#_5","text":"\u5982 \u5927\u578b\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u6240\u793a\uff0c\u8fd8\u53ef\u4ee5\u628a\u8bbe\u7f6e\u653e\u5728\u6a21\u5757\u6587\u4ef6\u91cc\u3002 \u4f8b\u5982\u4e0b\u9762\u7684 config.py \uff1a from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 settings = Settings () \u7136\u540e\u5728 main.py \u4e2d\u4f7f\u7528\uff1a from fastapi import FastAPI from .config import settings app = FastAPI () @app . get ( \"/info\" ) async def info (): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u63d0\u793a \u5982 \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u6240\u793a\uff0c\u8fd8\u8981\u5728\u6587\u4ef6\u5939\u4e2d\u521b\u5efa __init__.py \u6587\u4ef6\u3002","title":"\u5728\u5176\u4ed6\u6a21\u5757\u4e2d\u8bbe\u7f6e"},{"location":"advanced/settings/#_6","text":"\u6709\u65f6\u4f7f\u7528\u4f9d\u8d56\u9879\u8fdb\u884c\u8bbe\u7f6e\u6bd4\u4f7f\u7528 settings \u5168\u5c40\u5bf9\u8c61\u66f4\u5b9e\u7528\u3002 \u7279\u522b\u662f\u5728\u6d4b\u8bd5\u65f6\uff0c\u4f7f\u7528\u81ea\u5b9a\u4e49\u8bbe\u7f6e\u53ef\u4ee5\u8f7b\u6613\u5730\u8986\u76d6\u4f9d\u8d56\u9879\u3002","title":"\u4f9d\u8d56\u9879\u4e2d\u7684\u8bbe\u7f6e"},{"location":"advanced/settings/#_7","text":"\u53c2\u7167\u4e0a\u4f8b\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u4fee\u6539 config.py \uff1a from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 \u6ce8\u610f\uff0c\u672c\u4f8b\u6ca1\u6709\u521b\u5efa\u9ed8\u8ba4\u5b9e\u4f8b settings = Settings() \u3002","title":"\u914d\u7f6e\u6587\u4ef6"},{"location":"advanced/settings/#_8","text":"\u73b0\u5728\uff0c\u521b\u5efa\u8fd4\u56de\u65b0\u7684 config.Settings() \u7684\u4f9d\u8d56\u9879\u3002 from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u63d0\u793a \u7a0d\u540e\u518d\u4ecb\u7ecd @lru_cache() \u3002 \u73b0\u5728\u5047\u8bbe get_settings() \u53ea\u662f\u666e\u901a\u51fd\u6570\u3002 \u7136\u540e\uff0c\u901a\u8fc7 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u7684\u4f9d\u8d56\u9879\u8bf7\u6c42\u5e76\u4f7f\u7528\u8bbe\u7f6e\u3002 from functools import lru_cache from fastapi import Depends , FastAPI from .config import Settings app = FastAPI () @lru_cache () def get_settings (): return Settings () @app . get ( \"/info\" ) async def info ( settings : Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , }","title":"\u4e3b\u5e94\u7528\u6587\u4ef6"},{"location":"advanced/settings/#_9","text":"\u5728\u6d4b\u8bd5\u671f\u95f4\uff0c\u521b\u5efa\u4f9d\u8d56\u9879\u8986\u76d6 get_settings \u53ef\u4ee5\u8f7b\u677e\u5730\u4f7f\u7528\u4e0d\u540c\u7684\u8bbe\u7f6e\u5bf9\u8c61\uff1a from fastapi.testclient import TestClient from .config import Settings from .main import app , get_settings client = TestClient ( app ) def get_settings_override (): return Settings ( admin_email = \"testing_admin@example.com\" ) app . dependency_overrides [ get_settings ] = get_settings_override def test_app (): response = client . get ( \"/info\" ) data = response . json () assert data == { \"app_name\" : \"Awesome API\" , \"admin_email\" : \"testing_admin@example.com\" , \"items_per_user\" : 50 , } \u5728\u8986\u76d6\u4f9d\u8d56\u9879\u4e2d\uff0c\u521b\u5efa\u65b0\u7684 Settings \u5bf9\u8c61\uff0c\u5e76\u4e3a admin_email \u8bbe\u7f6e\u65b0\u7684\u503c\uff0c\u7136\u540e\u518d\u8fd4\u56de\u65b0\u7684\u5bf9\u8c61\u3002 \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u7528\u5b83\u6765\u8fdb\u884c\u6d4b\u8bd5\u3002","title":"\u8bbe\u7f6e\u4e0e\u6d4b\u8bd5"},{"location":"advanced/settings/#env","text":"\u5982\u679c\u7ecf\u5e38\u8981\u5728\u4e0d\u540c\u73af\u5883\u4e0b\u6539\u53d8\u5f88\u591a\u8bbe\u7f6e\uff0c\u6700\u597d\u628a\u8fd9\u4e9b\u8bbe\u7f6e\u653e\u5230\u4e00\u4e2a\u6587\u4ef6\u91cc\uff0c\u5e76\u4ece\u6587\u4ef6\u4e2d\u4ee5\u73af\u5883\u53d8\u91cf\u7684\u5f62\u5f0f\u8bfb\u53d6\u8bbe\u7f6e\u5185\u5bb9\u3002 \u8fd9\u79cd\u505a\u6cd5\u5f88\u5e38\u89c1\uff0c\u901a\u5e38\u4f1a\u628a\u8bbe\u7f6e\u53d8\u91cf\u653e\u5728 dotenv \uff08 .env \uff09\u6587\u4ef6\u91cc\u3002 \u63d0\u793a \u4ee5\u70b9\uff08 . \uff09\u5f00\u5934\u7684\u6587\u4ef6\u5728 Linux \u548c macOS \u7b49 Unix \u7cfb\u7edf\u91cc\u662f\u9690\u85cf\u6587\u4ef6\u3002 \u4f46\u662f dotenv \u6587\u4ef6\u5b9e\u9645\u4e0a\u4e0d\u5fc5\u6709\u660e\u786e\u7684\u6587\u4ef6\u540d\u3002 Pydantic \u652f\u6301\u4f7f\u7528\u5916\u90e8\u652f\u6301\u5e93\u8bfb\u53d6\u8fd9\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\u3002\u8be6\u89c1 Pydantic \u5b98\u6863 - \u8bbe\u7f6e\uff1aDotenv (.env) \u652f\u6301 \u3002 \u63d0\u793a \u4f7f\u7528\u8fd9\u4e2a\u529f\u80fd\u9700\u8981\u5148\u5b89\u88c5 pip install python-dotenv \u3002","title":"\u8bfb\u53d6 .env \u6587\u4ef6"},{"location":"advanced/settings/#env_1","text":"\u5047\u8bbe .env \u6587\u4ef6\u5185\u5bb9\u5982\u4e0b\uff1a ADMIN_EMAIL = \"deadpool@example.com\" APP_NAME = \"ChimichangApp\"","title":".env \u6587\u4ef6"},{"location":"advanced/settings/#env_2","text":"\u7136\u540e\u66f4\u65b0 config.py \uff1a from pydantic import BaseSettings class Settings ( BaseSettings ): app_name : str = \"Awesome API\" admin_email : str items_per_user : int = 50 class Config : env_file = \".env\" \u6b64\u5904\uff0c\u521b\u5efa Pydantic Settings \u7c7b\u4e2d\u7684 Config \u7c7b\uff0c\u5e76\u4f7f\u7528 env_file \u8bbe\u7f6e dotenv \u6587\u4ef6\u540d\u3002 \u63d0\u793a Config \u7c7b\u53ea\u7528\u4e8e Pydantic \u914d\u7f6e\u3002\u8be6\u89c1 Pydantic \u6a21\u578b\u914d\u7f6e","title":"\u8bfb\u53d6 .env \u4e2d\u7684\u8bbe\u7f6e"},{"location":"advanced/settings/#lru_cache-settings","text":"\u4ece\u78c1\u76d8\u8bfb\u53d6\u6587\u4ef6\u7684\u6210\u672c\u8f83\u9ad8\uff08\u6162\uff09\uff0c\u6700\u597d\u53ea\u64cd\u4f5c\u4e00\u6b21\uff0c\u7136\u540e\u590d\u7528\u540c\u4e00\u4e2a\u8bbe\u7f6e\u5bf9\u8c61\uff0c\u4e0d\u8981\u6bcf\u6b21\u8bf7\u6c42\u65f6\u90fd\u53cd\u590d\u8bfb\u53d6\u3002 \u4f46\u6bcf\u6b21\u64cd\u4f5c\u90fd\u8981\u4f7f\u7528\u5982\u4e0b\u4ee3\u7801\uff1a Settings () \u56e0\u6b64\u6bcf\u6b21\u521b\u5efa\u65b0\u7684 Settings \u5bf9\u8c61\u65f6\u90fd\u8981\u8bfb\u53d6 .env \u3002 \u5982\u679c\u4f7f\u7528\u4e0b\u9762\u7684\u4f9d\u8d56\u9879\u51fd\u6570\uff1a def get_settings (): return Settings () \u6bcf\u6b21\u8bf7\u6c42\u65f6\u8fd8\u8981\u521b\u5efa\u5bf9\u8c61\uff0c\u5e76\u8bfb\u53d6 .env \u6587\u4ef6\u3002\u26a0\ufe0f \u4f46\u4f7f\u7528 @lru_cache \u88c5\u9970\u5668\uff0c\u5219\u53ea\u9700\u5728\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u521b\u5efa\u4e00\u6b21 Settings \u5bf9\u8c61\u3002\u2714\ufe0f from functools import lru_cache from fastapi import Depends , FastAPI from . import config app = FastAPI () @lru_cache () def get_settings (): return config . Settings () @app . get ( \"/info\" ) async def info ( settings : config . Settings = Depends ( get_settings )): return { \"app_name\" : settings . app_name , \"admin_email\" : settings . admin_email , \"items_per_user\" : settings . items_per_user , } \u518d\u6b21\u8bf7\u6c42\u65f6\uff0c\u8c03\u7528\u4f9d\u8d56\u9879\u4e2d\u7684 get_settings() \u65f6\u4e0d\u518d\u6267\u884c\u5185\u90e8\u4ee3\u7801 get_settings() \uff0c\u4e5f\u4e0d\u518d\u521b\u5efa\u65b0\u7684 Settings \u5bf9\u8c61\uff0c\u6bcf\u6b21\u8bf7\u6c42\u65f6\u53ea\u8fd4\u56de\u7b2c\u4e00\u6b21\u8c03\u7528\u65f6\u8fd4\u56de\u7684\u5bf9\u8c61\u3002","title":"\u4f7f\u7528 lru_cache \u53ea\u521b\u5efa\u4e00\u6b21 Settings"},{"location":"advanced/settings/#lru_cache","text":"@lru_cache() \u4fee\u6539\u88c5\u9970\u7684\u51fd\u6570\uff0c\u4f7f\u5176\u8fd4\u56de\u4e0e\u7b2c\u4e00\u6b21\u8fd4\u56de\u76f8\u540c\u7684\u503c\uff0c\u4e0d\u7528\u6bcf\u6b21\u90fd\u91cd\u65b0\u8ba1\u7b97\uff0c\u4e5f\u4e0d\u7528\u6bcf\u6b21\u90fd\u6267\u884c\u51fd\u6570\u4ee3\u7801\u3002 \u56e0\u6b64\uff0c\u5b83\u4e0b\u9762\u7684\u51fd\u6570\u6bcf\u6b21\u53ea\u4e3a\u540c\u4e00\u79cd\u5b9e\u53c2\u7ec4\u5408\u6267\u884c\u4e00\u6b21\u3002\u7136\u540e\uff0c\u6bcf\u6b21\u4f7f\u7528\u76f8\u540c\u5b9e\u53c2\u7ec4\u5408\u8c03\u7528\u51fd\u6570\u65f6\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a\u8fd4\u56de\u503c\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528\u5982\u4e0b\u51fd\u6570\uff1a @lru_cache () def say_hi ( name : str , salutation : str = \"Ms.\" ): return f \"Hello { salutation } { name } \" \u7a0b\u5e8f\u6267\u884c\u6d41\u7a0b\u5982\u4e0b\u56fe\uff1a sequenceDiagram participant code as Code participant function as say_hi() participant execute as Execute function rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Camila\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 0, .1) code ->> function: say_hi(name=\"Rick\", salutation=\"Mr.\") function ->> execute: execute function code execute ->> code: return the result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Rick\") function ->> code: return stored result end rect rgba(0, 255, 255, .1) code ->> function: say_hi(name=\"Camila\") function ->> code: return stored result end \u672c\u4f8b\u4e2d\uff0c\u4f9d\u8d56\u9879 get_settings() \u51fd\u6570\u751a\u81f3\u6ca1\u6709\u4efb\u4f55\u53c2\u6570\uff0c\u56e0\u6b64\u6bcf\u6b21\u8fd4\u56de\u7684\u90fd\u662f\u540c\u4e00\u4e2a\u503c\u3002 \u51fd\u6570\u7684\u8fd9\u79cd\u64cd\u4f5c\u65b9\u5f0f\u6709\u70b9\u50cf\u5168\u5c40\u53d8\u91cf\u3002\u4f46\u56e0\u4e3a\u5b83\u4f7f\u7528\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u6240\u4ee5\u6d4b\u8bd5\u65f6\u53ef\u4ee5\u8f7b\u6613\u5730\u8986\u76d6\u3002 @lru_cache() \u662f Python \u6807\u51c6\u5e93 functools \u7684\u7ec4\u4ef6\uff0c\u8be6\u89c1 Python \u5b98\u6863 - @lru_cache() \u3002","title":"lru_cache \u6280\u672f\u7ec6\u8282"},{"location":"advanced/settings/#_10","text":"\u5145\u5206\u5229\u7528 Pydantic \u6a21\u578b\u7684\u4f18\u52bf\uff0c\u4f7f\u7528 Pydantic \u7684 Settings \u5904\u7406\u5e94\u7528\u7684\u8bbe\u7f6e\u6216\u914d\u7f6e\u3002 \u901a\u8fc7\u4f9d\u8d56\u9879\u7b80\u5316\u6d4b\u8bd5 \u652f\u6301\u4f7f\u7528 .env \u4f7f\u7528 @lru_cache() \uff0c\u4e0d\u7528\u6bcf\u6b21\u8bf7\u6c42\u65f6\u90fd\u8bfb\u53d6 dotenv \u6587\u4ef6\uff0c\u5e76\u4e14\u652f\u6301\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f7f\u7528","title":"\u5c0f\u7ed3"},{"location":"advanced/sql-databases-peewee/","text":"SQL \u6570\u636e\u5e93\u4e0e Peewee \u00b6 \u8b66\u544a If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough. Feel free to skip this. If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM ( SQL (Relational) Databases ), or any other async ORM. If you already have a code base that uses Peewee ORM , you can check here how to use it with FastAPI . \u9700\u8981 Python 3.7+ You will need Python 3.7 or above to safely use Peewee with FastAPI. Peewee for async \u00b6 Peewee was not designed for async frameworks, or with them in mind. Peewee has some heavy assumptions about its defaults and about how it should be used. If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool . But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like FastAPI), etc, you will need to add quite some complex extra code to override those defaults. Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with FastAPI. Technical Details You can read more about Peewee's stand about async in Python in the docs , an issue , a PR . The same app \u00b6 We are going to create the same application as in the SQLAlchemy tutorial ( SQL (Relational) Databases ). Most of the code is actually the same. So, we are going to focus only on the differences. File structure \u00b6 Let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 schemas.py This is almost the same structure as we had for the SQLAlchemy tutorial. Now let's see what each file/module does. Create the Peewee parts \u00b6 Let's refer to the file sql_app/database.py . The standard Peewee code \u00b6 Let's first check all the normal Peewee code, create a Peewee database: from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Have in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class. Note \u00b6 The argument: check_same_thread = False is equivalent to the one in the SQLAlchemy tutorial: connect_args = { \"check_same_thread\" : False } ...it is needed only for SQLite . Technical Details Exactly the same technical details as in SQL (Relational) Databases apply. Make Peewee async-compatible PeeweeConnectionState \u00b6 The main issue with Peewee and FastAPI is that Peewee relies heavily on Python's threading.local , and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial). And threading.local is not compatible with the new async features of modern Python. Technical Details threading.local is used to have a \"magic\" variable that has a different value for each thread. This was useful in older frameworks designed to have one single thread per request, no more, no less. Using this, each request would have its own database connection/session, which is the actual final goal. But FastAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use async def or normal def . This is what gives all the performance improvements to FastAPI. But Python 3.7 and above provide a more advanced alternative to threading.local , that can also be used in the places where threading.local would be used, but is compatible with the new async features. We are going to use that. It's called contextvars . We are going to override the internal parts of Peewee that use threading.local and replace them with contextvars , with the corresponding updates. This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it. We will create a PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () This class inherits from a special internal class used by Peewee. It has all the logic to make Peewee use contextvars instead of threading.local . contextvars works a bit differently than threading.local . But the rest of Peewee's internal code assumes that this class works with threading.local . So, we need to do some extra tricks to make it work as if it was just using threading.local . The __init__ , __setattr__ , and __getattr__ implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with FastAPI. Tip This will just make Peewee behave correctly when used with FastAPI. Not randomly opening or closing connections that are being used, creating errors, etc. But it doesn't give Peewee async super-powers. You should still use normal def functions and not async def . Use the custom PeeweeConnectionState class \u00b6 Now, overwrite the ._state internal attribute in the Peewee database db object using the new PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Make sure you overwrite db._state after creating db . Tip You would do the same for any other Peewee database, including PostgresqlDatabase , MySQLDatabase , etc. Create the database models \u00b6 Let's now see the file sql_app/models.py . Create Peewee models for our data \u00b6 Now create the Peewee models (classes) for User and Item . This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial. Tip Peewee also uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import db from database (the file database.py from above) and use it here. import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db Tip Peewee creates several magic attributes. It will automatically add an id attribute as an integer to be the primary key. It will chose the name of the tables based on the class names. For the Item , it will create an attribute owner_id with the integer ID of the User . But we don't declare it anywhere. Create the Pydantic models \u00b6 Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the Peewee models and the Pydantic models , we will have the file models.py with the Peewee models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both. Create the Pydantic models / schemas \u00b6 Create all the same Pydantic models as in the SQLAlchemy tutorial: from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Tip Here we are creating the models with an id . We didn't explicitly specify an id attribute in the Peewee models, but Peewee adds one automatically. We are also adding the magic owner_id attribute to Item . Create a PeeweeGetterDict for the Pydantic models / schemas \u00b6 When you access a relationship in a Peewee object, like in some_user.items , Peewee doesn't provide a list of Item . It provides a special custom object of class ModelSelect . It's possible to create a list of its items with list(some_user.items) . But the object itself is not a list . And it's also not an actual Python generator . Because of this, Pydantic doesn't know by default how to convert it to a list of Pydantic models / schemas. But recent versions of Pydantic allow providing a custom class that inherits from pydantic.utils.GetterDict , to provide the functionality used when using the orm_mode = True to retrieve the values for ORM model attributes. We are going to create a custom PeeweeGetterDict class and use it in all the same Pydantic models / schemas that use orm_mode : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Here we are checking if the attribute that is being accessed (e.g. .items in some_user.items ) is an instance of peewee.ModelSelect . And if that's the case, just return a list with it. And then we use it in the Pydantic models / schemas that use orm_mode = True , with the configuration variable getter_dict = PeeweeGetterDict . Tip We only need to create one PeeweeGetterDict class, and we can use it in all the Pydantic models / schemas. CRUD utils \u00b6 Now let's see the file sql_app/crud.py . Create all the CRUD utils \u00b6 Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar: from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item There are some differences with the code for the SQLAlchemy tutorial. We don't pass a db attribute around. Instead we use the models directly. This is because the db object is a global object, that includes all the connection logic. That's why we had to do all the contextvars updates above. Aso, when returning several objects, like in get_users , we directly call list , like in: list ( models . User . select ()) This is for the same reason that we had to create a custom PeeweeGetterDict . But by returning something that is already a list instead of the peewee.ModelSelect the response_model in the path operation with List[models.User] (that we'll see later) will work correctly. Main FastAPI app \u00b6 And now in the file sql_app/main.py let's integrate and use all the other parts we created before. Create the database tables \u00b6 In a very simplistic way create the database tables: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Create a dependency \u00b6 Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Here we have an empty yield because we are actually not using the database object directly. It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the contextvars tricks from above). Because the database connection is potentially I/O blocking, this dependency is created with a normal def function. And then, in each path operation function that needs to access the database we add it as a dependency. But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty yield ). So, we don't add it to the path operation function but to the path operation decorator in the dependencies parameter: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Context variable sub-dependency \u00b6 For all the contextvars parts to work, we need to make sure we have an independent value in the ContextVar for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request. For that, we need to create another async dependency reset_db_state() that is used as a sub-dependency in get_db() . It will set the value for the context variable (with just a default dict ) that will be used as the database state for the whole request. And then the dependency get_db() will store in it the database state (connection, transactions, etc). import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users For the next request , as we will reset that context variable again in the async dependency reset_db_state() and then create a new connection in the get_db() dependency, that new request will have its own database state (connection, transactions, etc). Tip As FastAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread. But context variables are aware of these async features, so, a Peewee database state set in the async dependency reset_db_state() will keep its own data throughout the entire request. And at the same time, the other concurrent request will have its own database state that will be independent for the whole request. Peewee Proxy \u00b6 If you are using a Peewee Proxy , the actual database is at db.obj . So, you would reset it with: async def reset_db_state (): database . db . obj . _state . _state . set ( db_state_default . copy ()) database . db . obj . _state . reset () Create your FastAPI path operations \u00b6 Now, finally, here's the standard FastAPI path operations code. import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users About def vs async def \u00b6 The same as with SQLAlchemy, we are not doing something like: user = await models . User . select () . first () ...but instead we are using: user = models . User . select () . first () So, again, we should declare the path operation functions and the dependency without async def , just with a normal def , as: # Something goes here def read_users ( skip : int = 0 , limit : int = 100 ): # Something goes here Testing Peewee with async \u00b6 This example includes an extra path operation that simulates a long processing request with time.sleep(sleep_time) . It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less. This will easily let you test that your app with Peewee and FastAPI is behaving correctly with all the stuff about threads. If you want to check how Peewee would break your app if used without modification, go the the sql_app/database.py file and comment the line: # db._state = PeeweeConnectionState() And in the file sql_app/main.py file, comment the body of the async dependency reset_db_state() and replace it with a pass : async def reset_db_state (): # database.db._state._state.set(db_state_default.copy()) # database.db._state.reset() pass Then run your app with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000/docs and create a couple of users. Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time. Go to the path operation \"Get /slowusers/ \" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other. The tabs will wait for a bit and then some of them will show Internal Server Error . What happens \u00b6 The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection. Then, for the request in the next tab, your app will wait for one second less, and so on. This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones. Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an Internal Server Error . This will probably happen for more than one of those tabs. If you had multiple clients talking to your app exactly at the same time, this is what could happen. And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error. Fix Peewee with FastAPI \u00b6 Now go back to the file sql_app/database.py , and uncomment the line: db . _state = PeeweeConnectionState () And in the file sql_app/main.py file, uncomment the body of the async dependency reset_db_state() : async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () Terminate your running app and start it again. Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors. ...You fixed it! Review all the files \u00b6 Remember you should have a directory named my_super_project (or however you want) that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () sql_app/models.py : import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db sql_app/schemas.py : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict sql_app/crud.py : from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item sql_app/main.py : import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Technical Details \u00b6 Warning These are very technical details that you probably don't need. The problem \u00b6 Peewee uses threading.local by default to store it's database \"state\" data (connection, transactions, etc). threading.local creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order. On top of that, an async framework could run some sync code in a threadpool (using asyncio.run_in_executor ), but belonging to the same request. This means that, with Peewee's current implementation, multiple tasks could be using the same threading.local variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal def functions in FastAPI, in path operations and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state. Context variables \u00b6 Python 3.7 has contextvars that can create a local variable very similar to threading.local , but also supporting these async features. There are several things to have in mind. The ContextVar has to be created at the top of the module, like: some_var = ContextVar ( \"some_var\" , default = \"default value\" ) To set a value used in the current \"context\" (e.g. for the current request) use: some_var . set ( \"new value\" ) To get a value anywhere inside of the context (e.g. in any part handling the current request) use: some_var . get () Set context variables in the async dependency reset_db_state() \u00b6 If some part of the async code sets the value with some_var.set(\"updated in function\") (e.g. like the async dependency), the rest of the code in it and the code that goes after (including code inside of async functions called with await ) will see that new value. So, in our case, if we set the Peewee state variable (with a default dict ) in the async dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request. And the context variable would be set again for the next request, even if they are concurrent. Set database state in the dependency get_db() \u00b6 As get_db() is a normal def function, FastAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the dict with the reset database state). Then it can add database state to that dict , like the connection, etc. But if the value of the context variable (the default dict ) was set in that normal def function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions ) wouldn't have access to it. In get_db() we can only set values in the dict , but not the entire dict itself. So, we need to have the async dependency reset_db_state() to set the dict in the context variable. That way, all the code has access to the same dict for the database state for a single request. Connect and disconnect in the dependency get_db() \u00b6 Then the next question would be, why not just connect and disconnect the database in the async dependency itself, instead of in get_db() ? The async dependency has to be async for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there. So we also need the normal def dependency get_db() .","title":"SQL \u6570\u636e\u5e93\u4e0e Peewee"},{"location":"advanced/sql-databases-peewee/#sql-peewee","text":"\u8b66\u544a If you are just starting, the tutorial SQL (Relational) Databases that uses SQLAlchemy should be enough. Feel free to skip this. If you are starting a project from scratch, you are probably better off with SQLAlchemy ORM ( SQL (Relational) Databases ), or any other async ORM. If you already have a code base that uses Peewee ORM , you can check here how to use it with FastAPI . \u9700\u8981 Python 3.7+ You will need Python 3.7 or above to safely use Peewee with FastAPI.","title":"SQL \u6570\u636e\u5e93\u4e0e Peewee"},{"location":"advanced/sql-databases-peewee/#peewee-for-async","text":"Peewee was not designed for async frameworks, or with them in mind. Peewee has some heavy assumptions about its defaults and about how it should be used. If you are developing an application with an older non-async framework, and can work with all its defaults, it can be a great tool . But if you need to change some of the defaults, support more than one predefined database, work with an async framework (like FastAPI), etc, you will need to add quite some complex extra code to override those defaults. Nevertheless, it's possible to do it, and here you'll see exactly what code you have to add to be able to use Peewee with FastAPI. Technical Details You can read more about Peewee's stand about async in Python in the docs , an issue , a PR .","title":"Peewee for async"},{"location":"advanced/sql-databases-peewee/#the-same-app","text":"We are going to create the same application as in the SQLAlchemy tutorial ( SQL (Relational) Databases ). Most of the code is actually the same. So, we are going to focus only on the differences.","title":"The same app"},{"location":"advanced/sql-databases-peewee/#file-structure","text":"Let's say you have a directory named my_super_project that contains a sub-directory called sql_app with a structure like this: . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u2514\u2500\u2500 schemas.py This is almost the same structure as we had for the SQLAlchemy tutorial. Now let's see what each file/module does.","title":"File structure"},{"location":"advanced/sql-databases-peewee/#create-the-peewee-parts","text":"Let's refer to the file sql_app/database.py .","title":"Create the Peewee parts"},{"location":"advanced/sql-databases-peewee/#the-standard-peewee-code","text":"Let's first check all the normal Peewee code, create a Peewee database: from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Have in mind that if you wanted to use a different database, like PostgreSQL, you couldn't just change the string. You would need to use a different Peewee database class.","title":"The standard Peewee code"},{"location":"advanced/sql-databases-peewee/#note","text":"The argument: check_same_thread = False is equivalent to the one in the SQLAlchemy tutorial: connect_args = { \"check_same_thread\" : False } ...it is needed only for SQLite . Technical Details Exactly the same technical details as in SQL (Relational) Databases apply.","title":"Note"},{"location":"advanced/sql-databases-peewee/#make-peewee-async-compatible-peeweeconnectionstate","text":"The main issue with Peewee and FastAPI is that Peewee relies heavily on Python's threading.local , and it doesn't have a direct way to override it or let you handle connections/sessions directly (as is done in the SQLAlchemy tutorial). And threading.local is not compatible with the new async features of modern Python. Technical Details threading.local is used to have a \"magic\" variable that has a different value for each thread. This was useful in older frameworks designed to have one single thread per request, no more, no less. Using this, each request would have its own database connection/session, which is the actual final goal. But FastAPI, using the new async features, could handle more than one request on the same thread. And at the same time, for a single request, it could run multiple things in different threads (in a threadpool), depending on if you use async def or normal def . This is what gives all the performance improvements to FastAPI. But Python 3.7 and above provide a more advanced alternative to threading.local , that can also be used in the places where threading.local would be used, but is compatible with the new async features. We are going to use that. It's called contextvars . We are going to override the internal parts of Peewee that use threading.local and replace them with contextvars , with the corresponding updates. This might seem a bit complex (and it actually is), you don't really need to completely understand how it works to use it. We will create a PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () This class inherits from a special internal class used by Peewee. It has all the logic to make Peewee use contextvars instead of threading.local . contextvars works a bit differently than threading.local . But the rest of Peewee's internal code assumes that this class works with threading.local . So, we need to do some extra tricks to make it work as if it was just using threading.local . The __init__ , __setattr__ , and __getattr__ implement all the required tricks for this to be used by Peewee without knowing that it is now compatible with FastAPI. Tip This will just make Peewee behave correctly when used with FastAPI. Not randomly opening or closing connections that are being used, creating errors, etc. But it doesn't give Peewee async super-powers. You should still use normal def functions and not async def .","title":"Make Peewee async-compatible PeeweeConnectionState"},{"location":"advanced/sql-databases-peewee/#use-the-custom-peeweeconnectionstate-class","text":"Now, overwrite the ._state internal attribute in the Peewee database db object using the new PeeweeConnectionState : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () Tip Make sure you overwrite db._state after creating db . Tip You would do the same for any other Peewee database, including PostgresqlDatabase , MySQLDatabase , etc.","title":"Use the custom PeeweeConnectionState class"},{"location":"advanced/sql-databases-peewee/#create-the-database-models","text":"Let's now see the file sql_app/models.py .","title":"Create the database models"},{"location":"advanced/sql-databases-peewee/#create-peewee-models-for-our-data","text":"Now create the Peewee models (classes) for User and Item . This is the same you would do if you followed the Peewee tutorial and updated the models to have the same data as in the SQLAlchemy tutorial. Tip Peewee also uses the term \" model \" to refer to these classes and instances that interact with the database. But Pydantic also uses the term \" model \" to refer to something different, the data validation, conversion, and documentation classes and instances. Import db from database (the file database.py from above) and use it here. import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db Tip Peewee creates several magic attributes. It will automatically add an id attribute as an integer to be the primary key. It will chose the name of the tables based on the class names. For the Item , it will create an attribute owner_id with the integer ID of the User . But we don't declare it anywhere.","title":"Create Peewee models for our data"},{"location":"advanced/sql-databases-peewee/#create-the-pydantic-models","text":"Now let's check the file sql_app/schemas.py . Tip To avoid confusion between the Peewee models and the Pydantic models , we will have the file models.py with the Peewee models, and the file schemas.py with the Pydantic models. These Pydantic models define more or less a \"schema\" (a valid data shape). So this will help us avoiding confusion while using both.","title":"Create the Pydantic models"},{"location":"advanced/sql-databases-peewee/#create-the-pydantic-models-schemas","text":"Create all the same Pydantic models as in the SQLAlchemy tutorial: from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Tip Here we are creating the models with an id . We didn't explicitly specify an id attribute in the Peewee models, but Peewee adds one automatically. We are also adding the magic owner_id attribute to Item .","title":"Create the Pydantic models / schemas"},{"location":"advanced/sql-databases-peewee/#create-a-peeweegetterdict-for-the-pydantic-models-schemas","text":"When you access a relationship in a Peewee object, like in some_user.items , Peewee doesn't provide a list of Item . It provides a special custom object of class ModelSelect . It's possible to create a list of its items with list(some_user.items) . But the object itself is not a list . And it's also not an actual Python generator . Because of this, Pydantic doesn't know by default how to convert it to a list of Pydantic models / schemas. But recent versions of Pydantic allow providing a custom class that inherits from pydantic.utils.GetterDict , to provide the functionality used when using the orm_mode = True to retrieve the values for ORM model attributes. We are going to create a custom PeeweeGetterDict class and use it in all the same Pydantic models / schemas that use orm_mode : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict Here we are checking if the attribute that is being accessed (e.g. .items in some_user.items ) is an instance of peewee.ModelSelect . And if that's the case, just return a list with it. And then we use it in the Pydantic models / schemas that use orm_mode = True , with the configuration variable getter_dict = PeeweeGetterDict . Tip We only need to create one PeeweeGetterDict class, and we can use it in all the Pydantic models / schemas.","title":"Create a PeeweeGetterDict for the Pydantic models / schemas"},{"location":"advanced/sql-databases-peewee/#crud-utils","text":"Now let's see the file sql_app/crud.py .","title":"CRUD utils"},{"location":"advanced/sql-databases-peewee/#create-all-the-crud-utils","text":"Create all the same CRUD utils as in the SQLAlchemy tutorial, all the code is very similar: from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item There are some differences with the code for the SQLAlchemy tutorial. We don't pass a db attribute around. Instead we use the models directly. This is because the db object is a global object, that includes all the connection logic. That's why we had to do all the contextvars updates above. Aso, when returning several objects, like in get_users , we directly call list , like in: list ( models . User . select ()) This is for the same reason that we had to create a custom PeeweeGetterDict . But by returning something that is already a list instead of the peewee.ModelSelect the response_model in the path operation with List[models.User] (that we'll see later) will work correctly.","title":"Create all the CRUD utils"},{"location":"advanced/sql-databases-peewee/#main-fastapi-app","text":"And now in the file sql_app/main.py let's integrate and use all the other parts we created before.","title":"Main FastAPI app"},{"location":"advanced/sql-databases-peewee/#create-the-database-tables","text":"In a very simplistic way create the database tables: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create the database tables"},{"location":"advanced/sql-databases-peewee/#create-a-dependency","text":"Create a dependency that will connect the database right at the beginning of a request and disconnect it at the end: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users Here we have an empty yield because we are actually not using the database object directly. It is connecting to the database and storing the connection data in an internal variable that is independent for each request (using the contextvars tricks from above). Because the database connection is potentially I/O blocking, this dependency is created with a normal def function. And then, in each path operation function that needs to access the database we add it as a dependency. But we are not using the value given by this dependency (it actually doesn't give any value, as it has an empty yield ). So, we don't add it to the path operation function but to the path operation decorator in the dependencies parameter: import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create a dependency"},{"location":"advanced/sql-databases-peewee/#context-variable-sub-dependency","text":"For all the contextvars parts to work, we need to make sure we have an independent value in the ContextVar for each request that uses the database, and that value will be used as the database state (connection, transactions, etc) for the whole request. For that, we need to create another async dependency reset_db_state() that is used as a sub-dependency in get_db() . It will set the value for the context variable (with just a default dict ) that will be used as the database state for the whole request. And then the dependency get_db() will store in it the database state (connection, transactions, etc). import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users For the next request , as we will reset that context variable again in the async dependency reset_db_state() and then create a new connection in the get_db() dependency, that new request will have its own database state (connection, transactions, etc). Tip As FastAPI is an async framework, one request could start being processed, and before finishing, another request could be received and start processing as well, and it all could be processed in the same thread. But context variables are aware of these async features, so, a Peewee database state set in the async dependency reset_db_state() will keep its own data throughout the entire request. And at the same time, the other concurrent request will have its own database state that will be independent for the whole request.","title":"Context variable sub-dependency"},{"location":"advanced/sql-databases-peewee/#peewee-proxy","text":"If you are using a Peewee Proxy , the actual database is at db.obj . So, you would reset it with: async def reset_db_state (): database . db . obj . _state . _state . set ( db_state_default . copy ()) database . db . obj . _state . reset ()","title":"Peewee Proxy"},{"location":"advanced/sql-databases-peewee/#create-your-fastapi-path-operations","text":"Now, finally, here's the standard FastAPI path operations code. import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Create your FastAPI path operations"},{"location":"advanced/sql-databases-peewee/#about-def-vs-async-def","text":"The same as with SQLAlchemy, we are not doing something like: user = await models . User . select () . first () ...but instead we are using: user = models . User . select () . first () So, again, we should declare the path operation functions and the dependency without async def , just with a normal def , as: # Something goes here def read_users ( skip : int = 0 , limit : int = 100 ): # Something goes here","title":"About def vs async def"},{"location":"advanced/sql-databases-peewee/#testing-peewee-with-async","text":"This example includes an extra path operation that simulates a long processing request with time.sleep(sleep_time) . It will have the database connection open at the beginning and will just wait some seconds before replying back. And each new request will wait one second less. This will easily let you test that your app with Peewee and FastAPI is behaving correctly with all the stuff about threads. If you want to check how Peewee would break your app if used without modification, go the the sql_app/database.py file and comment the line: # db._state = PeeweeConnectionState() And in the file sql_app/main.py file, comment the body of the async dependency reset_db_state() and replace it with a pass : async def reset_db_state (): # database.db._state._state.set(db_state_default.copy()) # database.db._state.reset() pass Then run your app with Uvicorn: $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) Open your browser at http://127.0.0.1:8000/docs and create a couple of users. Then open 10 tabs at http://127.0.0.1:8000/docs#/default/read_slow_users_slowusers__get at the same time. Go to the path operation \"Get /slowusers/ \" in all of the tabs. Use the \"Try it out\" button and execute the request in each tab, one right after the other. The tabs will wait for a bit and then some of them will show Internal Server Error .","title":"Testing Peewee with async"},{"location":"advanced/sql-databases-peewee/#what-happens","text":"The first tab will make your app create a connection to the database and wait for some seconds before replying back and closing the database connection. Then, for the request in the next tab, your app will wait for one second less, and so on. This means that it will end up finishing some of the last tabs' requests earlier than some of the previous ones. Then one the last requests that wait less seconds will try to open a database connection, but as one of those previous requests for the other tabs will probably be handled in the same thread as the first one, it will have the same database connection that is already open, and Peewee will throw an error and you will see it in the terminal, and the response will have an Internal Server Error . This will probably happen for more than one of those tabs. If you had multiple clients talking to your app exactly at the same time, this is what could happen. And as your app starts to handle more and more clients at the same time, the waiting time in a single request needs to be shorter and shorter to trigger the error.","title":"What happens"},{"location":"advanced/sql-databases-peewee/#fix-peewee-with-fastapi","text":"Now go back to the file sql_app/database.py , and uncomment the line: db . _state = PeeweeConnectionState () And in the file sql_app/main.py file, uncomment the body of the async dependency reset_db_state() : async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () Terminate your running app and start it again. Repeat the same process with the 10 tabs. This time all of them will wait and you will get all the results without errors. ...You fixed it!","title":"Fix Peewee with FastAPI"},{"location":"advanced/sql-databases-peewee/#review-all-the-files","text":"Remember you should have a directory named my_super_project (or however you want) that contains a sub-directory called sql_app . sql_app should have the following files: sql_app/__init__.py : is an empty file. sql_app/database.py : from contextvars import ContextVar import peewee DATABASE_NAME = \"test.db\" db_state_default = { \"closed\" : None , \"conn\" : None , \"ctx\" : None , \"transactions\" : None } db_state = ContextVar ( \"db_state\" , default = db_state_default . copy ()) class PeeweeConnectionState ( peewee . _ConnectionState ): def __init__ ( self , ** kwargs ): super () . __setattr__ ( \"_state\" , db_state ) super () . __init__ ( ** kwargs ) def __setattr__ ( self , name , value ): self . _state . get ()[ name ] = value def __getattr__ ( self , name ): return self . _state . get ()[ name ] db = peewee . SqliteDatabase ( DATABASE_NAME , check_same_thread = False ) db . _state = PeeweeConnectionState () sql_app/models.py : import peewee from .database import db class User ( peewee . Model ): email = peewee . CharField ( unique = True , index = True ) hashed_password = peewee . CharField () is_active = peewee . BooleanField ( default = True ) class Meta : database = db class Item ( peewee . Model ): title = peewee . CharField ( index = True ) description = peewee . CharField ( index = True ) owner = peewee . ForeignKeyField ( User , backref = \"items\" ) class Meta : database = db sql_app/schemas.py : from typing import Any , List , Union import peewee from pydantic import BaseModel from pydantic.utils import GetterDict class PeeweeGetterDict ( GetterDict ): def get ( self , key : Any , default : Any = None ): res = getattr ( self . _obj , key , default ) if isinstance ( res , peewee . ModelSelect ): return list ( res ) return res class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True getter_dict = PeeweeGetterDict class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True getter_dict = PeeweeGetterDict sql_app/crud.py : from . import models , schemas def get_user ( user_id : int ): return models . User . filter ( models . User . id == user_id ) . first () def get_user_by_email ( email : str ): return models . User . filter ( models . User . email == email ) . first () def get_users ( skip : int = 0 , limit : int = 100 ): return list ( models . User . select () . offset ( skip ) . limit ( limit )) def create_user ( user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db_user . save () return db_user def get_items ( skip : int = 0 , limit : int = 100 ): return list ( models . Item . select () . offset ( skip ) . limit ( limit )) def create_user_item ( item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db_item . save () return db_item sql_app/main.py : import time from typing import List from fastapi import Depends , FastAPI , HTTPException from . import crud , database , models , schemas from .database import db_state_default database . db . connect () database . db . create_tables ([ models . User , models . Item ]) database . db . close () app = FastAPI () sleep_time = 10 async def reset_db_state (): database . db . _state . _state . set ( db_state_default . copy ()) database . db . _state . reset () def get_db ( db_state = Depends ( reset_db_state )): try : database . db . connect () yield finally : if not database . db . is_closed (): database . db . close () @app . post ( \"/users/\" , response_model = schemas . User , dependencies = [ Depends ( get_db )]) def create_user ( user : schemas . UserCreate ): db_user = crud . get_user_by_email ( email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )]) def read_users ( skip : int = 0 , limit : int = 100 ): users = crud . get_users ( skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User , dependencies = [ Depends ( get_db )] ) def read_user ( user_id : int ): db_user = crud . get_user ( user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item , dependencies = [ Depends ( get_db )], ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate ): return crud . create_user_item ( item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ], dependencies = [ Depends ( get_db )]) def read_items ( skip : int = 0 , limit : int = 100 ): items = crud . get_items ( skip = skip , limit = limit ) return items @app . get ( \"/slowusers/\" , response_model = List [ schemas . User ], dependencies = [ Depends ( get_db )] ) def read_slow_users ( skip : int = 0 , limit : int = 100 ): global sleep_time sleep_time = max ( 0 , sleep_time - 1 ) time . sleep ( sleep_time ) # Fake long processing request users = crud . get_users ( skip = skip , limit = limit ) return users","title":"Review all the files"},{"location":"advanced/sql-databases-peewee/#technical-details","text":"Warning These are very technical details that you probably don't need.","title":"Technical Details"},{"location":"advanced/sql-databases-peewee/#the-problem","text":"Peewee uses threading.local by default to store it's database \"state\" data (connection, transactions, etc). threading.local creates a value exclusive to the current thread, but an async framework would run all the code (e.g. for each request) in the same thread, and possibly not in order. On top of that, an async framework could run some sync code in a threadpool (using asyncio.run_in_executor ), but belonging to the same request. This means that, with Peewee's current implementation, multiple tasks could be using the same threading.local variable and end up sharing the same connection and data (that they shouldn't), and at the same time, if they execute sync I/O-blocking code in a threadpool (as with normal def functions in FastAPI, in path operations and dependencies), that code won't have access to the database state variables, even while it's part of the same request and it should be able to get access to the same database state.","title":"The problem"},{"location":"advanced/sql-databases-peewee/#context-variables","text":"Python 3.7 has contextvars that can create a local variable very similar to threading.local , but also supporting these async features. There are several things to have in mind. The ContextVar has to be created at the top of the module, like: some_var = ContextVar ( \"some_var\" , default = \"default value\" ) To set a value used in the current \"context\" (e.g. for the current request) use: some_var . set ( \"new value\" ) To get a value anywhere inside of the context (e.g. in any part handling the current request) use: some_var . get ()","title":"Context variables"},{"location":"advanced/sql-databases-peewee/#set-context-variables-in-the-async-dependency-reset_db_state","text":"If some part of the async code sets the value with some_var.set(\"updated in function\") (e.g. like the async dependency), the rest of the code in it and the code that goes after (including code inside of async functions called with await ) will see that new value. So, in our case, if we set the Peewee state variable (with a default dict ) in the async dependency, all the rest of the internal code in our app will see this value and will be able to reuse it for the whole request. And the context variable would be set again for the next request, even if they are concurrent.","title":"Set context variables in the async dependency reset_db_state()"},{"location":"advanced/sql-databases-peewee/#set-database-state-in-the-dependency-get_db","text":"As get_db() is a normal def function, FastAPI will make it run in a threadpool, with a copy of the \"context\", holding the same value for the context variable (the dict with the reset database state). Then it can add database state to that dict , like the connection, etc. But if the value of the context variable (the default dict ) was set in that normal def function, it would create a new value that would stay only in that thread of the threadpool, and the rest of the code (like the path operation functions ) wouldn't have access to it. In get_db() we can only set values in the dict , but not the entire dict itself. So, we need to have the async dependency reset_db_state() to set the dict in the context variable. That way, all the code has access to the same dict for the database state for a single request.","title":"Set database state in the dependency get_db()"},{"location":"advanced/sql-databases-peewee/#connect-and-disconnect-in-the-dependency-get_db","text":"Then the next question would be, why not just connect and disconnect the database in the async dependency itself, instead of in get_db() ? The async dependency has to be async for the context variable to be preserved for the rest of the request, but creating and closing the database connection is potentially blocking, so it could degrade performance if it was there. So we also need the normal def dependency get_db() .","title":"Connect and disconnect in the dependency get_db()"},{"location":"advanced/sub-applications/","text":"\u5b50\u5e94\u7528 - \u6302\u8f7d \u00b6 \u5982\u679c\u9700\u8981\u4e24\u4e2a\u72ec\u7acb\u7684 FastAPI \u5e94\u7528\uff0c\u62e5\u6709\u5404\u81ea\u72ec\u7acb\u7684 OpenAPI \u4e0e\u6587\u6863\uff0c\u5219\u9700\u8bbe\u7f6e\u4e00\u4e2a\u4e3b\u5e94\u7528\uff0c\u5e76 \u6302\u8f7d \u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u5b50\u5e94\u7528\u3002 \u6302\u8f7d FastAPI \u5e94\u7528 \u00b6 \u6302\u8f7d \u662f\u6307\u5728\u7279\u5b9a\u8def\u5f84\u4e2d\u6dfb\u52a0\u5b8c\u5168 \u72ec\u7acb \u7684\u5e94\u7528\uff0c\u7136\u540e\u5728\u8be5\u8def\u5f84\u4e0b\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u7684\u5b50\u5e94\u7528\u5904\u7406\u6240\u6709\u4e8b\u52a1\u3002 \u9876\u5c42\u5e94\u7528 \u00b6 \u9996\u5148\uff0c\u521b\u5efa FastAPI \uff08\u9876\u5c42\uff09\u4e3b\u5e94\u7528\u53ca\u5176 \u8def\u5f84\u64cd\u4f5c \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) \u5b50\u5e94\u7528 \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5b50\u5e94\u7528\u53ca\u5176 \u8def\u5f84\u64cd\u4f5c \u3002 \u5b50\u5e94\u7528\u53ea\u662f\u53e6\u4e00\u4e2a\u6807\u51c6 FastAPI \u5e94\u7528\uff0c\u4f46\u8fd9\u4e2a\u5e94\u7528\u662f\u8981 \u6302\u8f7d \u7684\u5e94\u7528\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) \u6302\u8f7d\u5b50\u5e94\u7528 \u00b6 \u5728\u9876\u5c42\u5e94\u7528 app \u4e2d\uff0c\u6302\u8f7d\u5b50\u5e94\u7528 subapi \u3002 \u672c\u4f8b\u7684\u5b50\u5e94\u7528\u6302\u8f7d\u5728 /subapi \u8def\u5f84\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi ) \u67e5\u770b\u6587\u6863 \u00b6 \u5982\u679c\u4e3b\u6587\u4ef6\u662f main.py \uff0c\u5219\u7528\u4ee5\u4e0b uvicorn \u547d\u4ee4\u8fd0\u884c\u4e3b\u5e94\u7528\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u67e5\u770b\u6587\u6863 http://127.0.0.1:8000/docs\u3002 \u4e0b\u56fe\u663e\u793a\u7684\u662f\u4e3b\u5e94\u7528 API \u6587\u6863\uff0c\u53ea\u5305\u62ec\u5176\u81ea\u6709\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u7136\u540e\u67e5\u770b\u5b50\u5e94\u7528\u6587\u6863 http://127.0.0.1:8000/subapi/docs\u3002 \u4e0b\u56fe\u663e\u793a\u7684\u662f\u5b50\u5e94\u7528\u7684 API \u6587\u6863\uff0c\u4e5f\u662f\u53ea\u5305\u62ec\u5176\u81ea\u6709\u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u6240\u6709\u8fd9\u4e9b\u8def\u5f84\u64cd\u4f5c\u90fd\u5728 /subapi \u5b50\u8def\u5f84\u524d\u7f00\u4e0b\u3002 \u4e24\u4e2a\u7528\u6237\u754c\u9762\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u56e0\u4e3a\u6d4f\u89c8\u5668\u80fd\u591f\u4e0e\u6bcf\u4e2a\u6307\u5b9a\u7684\u5e94\u7528\u6216\u5b50\u5e94\u7528\u4f1a\u8bdd\u3002 \u6280\u672f\u7ec6\u8282\uff1a root_path \u00b6 \u4ee5\u4e0a\u8ff0\u65b9\u5f0f\u6302\u8f7d\u5b50\u5e94\u7528\u65f6\uff0cFastAPI \u4f7f\u7528 ASGI \u89c4\u8303\u4e2d\u7684 root_path \u5904\u7406\u6302\u8f7d\u5b50\u5e94\u7528\u8def\u5f84\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 \u8fd9\u6837\uff0c\u5b50\u5e94\u7528\u5c31\u53ef\u4ee5\u4e3a\u81ea\u52a8\u6587\u6863\u4f7f\u7528\u8def\u5f84\u524d\u7f00\u3002 \u5e76\u4e14\u5b50\u5e94\u7528\u8fd8\u53ef\u4ee5\u518d\u6302\u8f7d\u5b50\u5e94\u7528\uff0c\u4e00\u5207\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0cFastAPI \u53ef\u4ee5\u81ea\u52a8\u5904\u7406\u6240\u6709 root_path \u3002 \u5173\u4e8e root_path \u53ca\u5982\u4f55\u663e\u5f0f\u4f7f\u7528 root_path \u7684\u5185\u5bb9\uff0c\u8be6\u89c1 \u4f7f\u7528\u4ee3\u7406 \u4e00\u7ae0\u3002","title":"\u5b50\u5e94\u7528 - \u6302\u8f7d"},{"location":"advanced/sub-applications/#-","text":"\u5982\u679c\u9700\u8981\u4e24\u4e2a\u72ec\u7acb\u7684 FastAPI \u5e94\u7528\uff0c\u62e5\u6709\u5404\u81ea\u72ec\u7acb\u7684 OpenAPI \u4e0e\u6587\u6863\uff0c\u5219\u9700\u8bbe\u7f6e\u4e00\u4e2a\u4e3b\u5e94\u7528\uff0c\u5e76 \u6302\u8f7d \u4e00\u4e2a\uff08\u6216\u591a\u4e2a\uff09\u5b50\u5e94\u7528\u3002","title":"\u5b50\u5e94\u7528 - \u6302\u8f7d"},{"location":"advanced/sub-applications/#fastapi","text":"\u6302\u8f7d \u662f\u6307\u5728\u7279\u5b9a\u8def\u5f84\u4e2d\u6dfb\u52a0\u5b8c\u5168 \u72ec\u7acb \u7684\u5e94\u7528\uff0c\u7136\u540e\u5728\u8be5\u8def\u5f84\u4e0b\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u7684\u5b50\u5e94\u7528\u5904\u7406\u6240\u6709\u4e8b\u52a1\u3002","title":"\u6302\u8f7d FastAPI \u5e94\u7528"},{"location":"advanced/sub-applications/#_1","text":"\u9996\u5148\uff0c\u521b\u5efa FastAPI \uff08\u9876\u5c42\uff09\u4e3b\u5e94\u7528\u53ca\u5176 \u8def\u5f84\u64cd\u4f5c \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"\u9876\u5c42\u5e94\u7528"},{"location":"advanced/sub-applications/#_2","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5b50\u5e94\u7528\u53ca\u5176 \u8def\u5f84\u64cd\u4f5c \u3002 \u5b50\u5e94\u7528\u53ea\u662f\u53e6\u4e00\u4e2a\u6807\u51c6 FastAPI \u5e94\u7528\uff0c\u4f46\u8fd9\u4e2a\u5e94\u7528\u662f\u8981 \u6302\u8f7d \u7684\u5e94\u7528\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"\u5b50\u5e94\u7528"},{"location":"advanced/sub-applications/#_3","text":"\u5728\u9876\u5c42\u5e94\u7528 app \u4e2d\uff0c\u6302\u8f7d\u5b50\u5e94\u7528 subapi \u3002 \u672c\u4f8b\u7684\u5b50\u5e94\u7528\u6302\u8f7d\u5728 /subapi \u8def\u5f84\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/app\" ) def read_main (): return { \"message\" : \"Hello World from main app\" } subapi = FastAPI () @subapi . get ( \"/sub\" ) def read_sub (): return { \"message\" : \"Hello World from sub API\" } app . mount ( \"/subapi\" , subapi )","title":"\u6302\u8f7d\u5b50\u5e94\u7528"},{"location":"advanced/sub-applications/#_4","text":"\u5982\u679c\u4e3b\u6587\u4ef6\u662f main.py \uff0c\u5219\u7528\u4ee5\u4e0b uvicorn \u547d\u4ee4\u8fd0\u884c\u4e3b\u5e94\u7528\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u67e5\u770b\u6587\u6863 http://127.0.0.1:8000/docs\u3002 \u4e0b\u56fe\u663e\u793a\u7684\u662f\u4e3b\u5e94\u7528 API \u6587\u6863\uff0c\u53ea\u5305\u62ec\u5176\u81ea\u6709\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u7136\u540e\u67e5\u770b\u5b50\u5e94\u7528\u6587\u6863 http://127.0.0.1:8000/subapi/docs\u3002 \u4e0b\u56fe\u663e\u793a\u7684\u662f\u5b50\u5e94\u7528\u7684 API \u6587\u6863\uff0c\u4e5f\u662f\u53ea\u5305\u62ec\u5176\u81ea\u6709\u7684 \u8def\u5f84\u64cd\u4f5c \uff0c\u6240\u6709\u8fd9\u4e9b\u8def\u5f84\u64cd\u4f5c\u90fd\u5728 /subapi \u5b50\u8def\u5f84\u524d\u7f00\u4e0b\u3002 \u4e24\u4e2a\u7528\u6237\u754c\u9762\u90fd\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u56e0\u4e3a\u6d4f\u89c8\u5668\u80fd\u591f\u4e0e\u6bcf\u4e2a\u6307\u5b9a\u7684\u5e94\u7528\u6216\u5b50\u5e94\u7528\u4f1a\u8bdd\u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/sub-applications/#root_path","text":"\u4ee5\u4e0a\u8ff0\u65b9\u5f0f\u6302\u8f7d\u5b50\u5e94\u7528\u65f6\uff0cFastAPI \u4f7f\u7528 ASGI \u89c4\u8303\u4e2d\u7684 root_path \u5904\u7406\u6302\u8f7d\u5b50\u5e94\u7528\u8def\u5f84\u4e4b\u95f4\u7684\u901a\u4fe1\u3002 \u8fd9\u6837\uff0c\u5b50\u5e94\u7528\u5c31\u53ef\u4ee5\u4e3a\u81ea\u52a8\u6587\u6863\u4f7f\u7528\u8def\u5f84\u524d\u7f00\u3002 \u5e76\u4e14\u5b50\u5e94\u7528\u8fd8\u53ef\u4ee5\u518d\u6302\u8f7d\u5b50\u5e94\u7528\uff0c\u4e00\u5207\u90fd\u4f1a\u6b63\u5e38\u8fd0\u884c\uff0cFastAPI \u53ef\u4ee5\u81ea\u52a8\u5904\u7406\u6240\u6709 root_path \u3002 \u5173\u4e8e root_path \u53ca\u5982\u4f55\u663e\u5f0f\u4f7f\u7528 root_path \u7684\u5185\u5bb9\uff0c\u8be6\u89c1 \u4f7f\u7528\u4ee3\u7406 \u4e00\u7ae0\u3002","title":"\u6280\u672f\u7ec6\u8282\uff1aroot_path"},{"location":"advanced/templates/","text":"\u6a21\u677f \u00b6 FastAPI \u652f\u6301\u591a\u79cd\u6a21\u677f\u5f15\u64ce\u3002 Flask \u7b49\u5de5\u5177\u4f7f\u7528\u7684 Jinja2 \u662f\u6700\u5e38\u7528\u7684\u6a21\u677f\u5f15\u64ce\u3002 \u5728 Starlette \u7684\u652f\u6301\u4e0b\uff0c FastAPI \u5e94\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5de5\u5177\u8f7b\u6613\u5730\u914d\u7f6e Jinja2\u3002 \u5b89\u88c5\u4f9d\u8d56\u9879 \u00b6 \u5b89\u88c5 jinja2 \uff1a $ pip install jinja2 ---> 100% \u5982\u9700\u4f7f\u7528\u9759\u6001\u6587\u4ef6\uff0c\u8fd8\u8981\u5b89\u88c5 aiofiles \uff1a $ pip install aiofiles ---> 100% \u4f7f\u7528 Jinja2Templates \u00b6 \u5bfc\u5165 Jinja2Templates \u521b\u5efa\u53ef\u590d\u7528\u7684 templates \u5bf9\u8c61 \u5728\u8fd4\u56de\u6a21\u677f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e Request \u53c2\u6570 \u4f7f\u7528 templates \u6e32\u67d3\u5e76\u8fd4\u56de TemplateResponse \uff0c \u4f7f\u7528\u952e\u503c\u5bf9\u5728 Jinja2 \u7684 context \u4e2d\u4f20\u9012 request from fastapi import FastAPI , Request from fastapi.responses import HTMLResponse from fastapi.staticfiles import StaticFiles from fastapi.templating import Jinja2Templates app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) templates = Jinja2Templates ( directory = \"templates\" ) @app . get ( \"/items/ {id} \" , response_class = HTMLResponse ) async def read_item ( request : Request , id : str ): return templates . TemplateResponse ( \"item.html\" , { \"request\" : request , \"id\" : id }) \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5fc5\u987b\u4e3a Jinja2 \u4f7f\u7528\u952e\u503c\u5bf9\u5728\u4e0a\u4e0b\u6587\u4e2d\u4f20\u9012 request \u3002\u56e0\u6b64\uff0c\u8fd8\u8981\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u3002 \u63d0\u793a \u901a\u8fc7\u58f0\u660e response_class=HTMLResponse \uff0cAPI \u6587\u6863\u5c31\u80fd\u8bc6\u522b\u54cd\u5e94\u7684\u5bf9\u8c61\u662f HTML\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.templating import Jinja2Templates \u3002 FastAPI \u7684 fastapi.templating \u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\u3002\u5b9e\u9645\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u53ef\u7528\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Request \u4e0e StaticFiles \u4e5f\u4e00\u6837\u3002 \u7f16\u5199\u6a21\u677f \u00b6 \u7f16\u5199\u6a21\u677f templates/item.html \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> \u5b83\u4f1a\u663e\u793a\u4ece context \u5b57\u5178\u4e2d\u63d0\u53d6\u7684 id \uff1a { \"request\" : request , \"id\" : id } \u6a21\u677f\u4e0e\u9759\u6001\u6587\u4ef6 \u00b6 \u5728\u6a21\u677f\u5185\u90e8\u4f7f\u7528 url_for() \uff0c\u4f8b\u5982\uff0c\u4e0e\u6302\u8f7d\u7684 StaticFiles \u4e00\u8d77\u4f7f\u7528\u3002 <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 url_for() \u4e3a\u6a21\u677f\u6dfb\u52a0 CSS \u6587\u4ef6 static/styles.css \u94fe\u63a5\uff1a h1 { color : green ; } \u56e0\u4e3a\u4f7f\u7528\u4e86 StaticFiles \uff0c FastAPI \u5e94\u7528\u81ea\u52a8\u63d0\u4f9b\u4f4d\u4e8e URL /static/styles.css \u7684 CSS \u6587\u4ef6\u3002 \u66f4\u591a\u8bf4\u660e \u00b6 \u5305\u62ec\u6d4b\u8bd5\u6a21\u677f\u7b49\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Starlette \u5b98\u6863 - \u6a21\u677f \u3002","title":"\u6a21\u677f"},{"location":"advanced/templates/#_1","text":"FastAPI \u652f\u6301\u591a\u79cd\u6a21\u677f\u5f15\u64ce\u3002 Flask \u7b49\u5de5\u5177\u4f7f\u7528\u7684 Jinja2 \u662f\u6700\u5e38\u7528\u7684\u6a21\u677f\u5f15\u64ce\u3002 \u5728 Starlette \u7684\u652f\u6301\u4e0b\uff0c FastAPI \u5e94\u7528\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5de5\u5177\u8f7b\u6613\u5730\u914d\u7f6e Jinja2\u3002","title":"\u6a21\u677f"},{"location":"advanced/templates/#_2","text":"\u5b89\u88c5 jinja2 \uff1a $ pip install jinja2 ---> 100% \u5982\u9700\u4f7f\u7528\u9759\u6001\u6587\u4ef6\uff0c\u8fd8\u8981\u5b89\u88c5 aiofiles \uff1a $ pip install aiofiles ---> 100%","title":"\u5b89\u88c5\u4f9d\u8d56\u9879"},{"location":"advanced/templates/#jinja2templates","text":"\u5bfc\u5165 Jinja2Templates \u521b\u5efa\u53ef\u590d\u7528\u7684 templates \u5bf9\u8c61 \u5728\u8fd4\u56de\u6a21\u677f\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e Request \u53c2\u6570 \u4f7f\u7528 templates \u6e32\u67d3\u5e76\u8fd4\u56de TemplateResponse \uff0c \u4f7f\u7528\u952e\u503c\u5bf9\u5728 Jinja2 \u7684 context \u4e2d\u4f20\u9012 request from fastapi import FastAPI , Request from fastapi.responses import HTMLResponse from fastapi.staticfiles import StaticFiles from fastapi.templating import Jinja2Templates app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) templates = Jinja2Templates ( directory = \"templates\" ) @app . get ( \"/items/ {id} \" , response_class = HTMLResponse ) async def read_item ( request : Request , id : str ): return templates . TemplateResponse ( \"item.html\" , { \"request\" : request , \"id\" : id }) \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5fc5\u987b\u4e3a Jinja2 \u4f7f\u7528\u952e\u503c\u5bf9\u5728\u4e0a\u4e0b\u6587\u4e2d\u4f20\u9012 request \u3002\u56e0\u6b64\uff0c\u8fd8\u8981\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u3002 \u63d0\u793a \u901a\u8fc7\u58f0\u660e response_class=HTMLResponse \uff0cAPI \u6587\u6863\u5c31\u80fd\u8bc6\u522b\u54cd\u5e94\u7684\u5bf9\u8c61\u662f HTML\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.templating import Jinja2Templates \u3002 FastAPI \u7684 fastapi.templating \u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\u3002\u5b9e\u9645\u4e0a\uff0c\u7edd\u5927\u591a\u6570\u53ef\u7528\u54cd\u5e94\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 Request \u4e0e StaticFiles \u4e5f\u4e00\u6837\u3002","title":"\u4f7f\u7528 Jinja2Templates"},{"location":"advanced/templates/#_3","text":"\u7f16\u5199\u6a21\u677f templates/item.html \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> \u5b83\u4f1a\u663e\u793a\u4ece context \u5b57\u5178\u4e2d\u63d0\u53d6\u7684 id \uff1a { \"request\" : request , \"id\" : id }","title":"\u7f16\u5199\u6a21\u677f"},{"location":"advanced/templates/#_4","text":"\u5728\u6a21\u677f\u5185\u90e8\u4f7f\u7528 url_for() \uff0c\u4f8b\u5982\uff0c\u4e0e\u6302\u8f7d\u7684 StaticFiles \u4e00\u8d77\u4f7f\u7528\u3002 <html> <head> <title>Item Details</title> <link href=\" {{ url_for ( 'static' , path = '/styles.css' ) }} \" rel=\"stylesheet\"> </head> <body> <h1>Item ID: {{ id }} </h1> </body> </html> \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528 url_for() \u4e3a\u6a21\u677f\u6dfb\u52a0 CSS \u6587\u4ef6 static/styles.css \u94fe\u63a5\uff1a h1 { color : green ; } \u56e0\u4e3a\u4f7f\u7528\u4e86 StaticFiles \uff0c FastAPI \u5e94\u7528\u81ea\u52a8\u63d0\u4f9b\u4f4d\u4e8e URL /static/styles.css \u7684 CSS \u6587\u4ef6\u3002","title":"\u6a21\u677f\u4e0e\u9759\u6001\u6587\u4ef6"},{"location":"advanced/templates/#_5","text":"\u5305\u62ec\u6d4b\u8bd5\u6a21\u677f\u7b49\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Starlette \u5b98\u6863 - \u6a21\u677f \u3002","title":"\u66f4\u591a\u8bf4\u660e"},{"location":"advanced/testing-database/","text":"\u6d4b\u8bd5\u6570\u636e\u5e93 \u00b6 \u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u6d4b\u8bd5\u4f9d\u8d56\u9879 \u4e2d\u7684\u8986\u76d6\u4f9d\u8d56\u9879\u65b9\u6cd5\u53d8\u66f4\u6d4b\u8bd5\u7684\u6570\u636e\u5e93\u3002 \u5b9e\u73b0\u8bbe\u7f6e\u5176\u4ed6\u6d4b\u8bd5\u6570\u636e\u5e93\u3001\u5728\u6d4b\u8bd5\u540e\u56de\u6eda\u6570\u636e\u3001\u6216\u9884\u586b\u6d4b\u8bd5\u6570\u636e\u7b49\u64cd\u4f5c\u3002 \u672c\u7ae0\u7684\u4e3b\u8981\u601d\u8def\u4e0e\u4e0a\u4e00\u7ae0\u5b8c\u5168\u76f8\u540c\u3002 \u4e3a SQL \u5e94\u7528\u6dfb\u52a0\u6d4b\u8bd5 \u00b6 \u4e3a\u4e86\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u5e93\uff0c\u6211\u4eec\u8981\u5347\u7ea7 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u4e00\u7ae0\u4e2d\u7684\u793a\u4f8b\u3002 \u5e94\u7528\u7684\u6240\u6709\u4ee3\u7801\u90fd\u4e00\u6837\uff0c\u76f4\u63a5\u67e5\u770b\u90a3\u4e00\u7ae0\u7684\u793a\u4f8b\u4ee3\u7801\u5373\u53ef\u3002 \u672c\u7ae0\u53ea\u662f\u65b0\u6dfb\u52a0\u4e86\u6d4b\u8bd5\u6587\u4ef6\u3002 \u6b63\u5e38\u7684\u4f9d\u8d56\u9879 get_db() \u8fd4\u56de\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u6d4b\u8bd5\u65f6\u4f7f\u7528\u8986\u76d6\u4f9d\u8d56\u9879\u8fd4\u56de\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4f1a\u8bdd\u4ee3\u66ff\u6b63\u5e38\u7684\u4f9d\u8d56\u9879\u3002 \u672c\u4f8b\u4e2d\uff0c\u8981\u521b\u5efa\u4ec5\u7528\u4e8e\u6d4b\u8bd5\u7684\u4e34\u65f6\u6570\u636e\u5e93\u3002 \u6587\u4ef6\u67b6\u6784 \u00b6 \u521b\u5efa\u65b0\u6587\u4ef6 sql_app/tests/test_sql_app.py \u3002 \u56e0\u6b64\uff0c\u65b0\u7684\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 schemas.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_sql_app.py \u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u4f1a\u8bdd \u00b6 \u9996\u5148\uff0c\u4e3a\u65b0\u5efa\u6570\u636e\u5e93\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u6d4b\u8bd5\u65f6\uff0c\u4f7f\u7528 test.db \u66ff\u4ee3 sql_app.db \u3002 \u4f46\u5176\u4f59\u7684\u4f1a\u8bdd\u4ee3\u7801\u57fa\u672c\u4e0a\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u8981\u590d\u5236\u5c31\u53ef\u4ee5\u4e86\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u63d0\u793a \u4e3a\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\uff0c\u6700\u597d\u628a\u8fd9\u6bb5\u4ee3\u7801\u5199\u6210\u51fd\u6570\uff0c\u5728 database.py \u4e0e tests/test_sql_app.py \u4e2d\u4f7f\u7528\u3002 \u4e3a\u4e86\u628a\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e0a\uff0c\u672c\u4f8b\u53ea\u662f\u590d\u5236\u4e86\u8fd9\u6bb5\u4ee3\u7801\u3002 \u521b\u5efa\u6570\u636e\u5e93 \u00b6 \u56e0\u4e3a\u73b0\u5728\u662f\u60f3\u5728\u65b0\u6587\u4ef6\u4e2d\u4f7f\u7528\u65b0\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u6570\u636e\u5e93\uff1a Base . metadata . create_all ( bind = engine ) \u4e00\u822c\u662f\u5728 main.py \u4e2d\u8c03\u7528\u8fd9\u884c\u4ee3\u7801\uff0c\u4f46\u5728 main.py \u91cc\uff0c\u8fd9\u884c\u4ee3\u7801\u7528\u4e8e\u521b\u5efa sql_app.db \uff0c\u4f46\u662f\u73b0\u5728\u8981\u4e3a\u6d4b\u8bd5\u521b\u5efa test.db \u3002 \u56e0\u6b64\uff0c\u8981\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u6dfb\u52a0\u8fd9\u884c\u4ee3\u7801\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u6587\u4ef6\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u8986\u76d6\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u5e76\u4e3a\u5e94\u7528\u6dfb\u52a0\u8986\u76d6\u5185\u5bb9\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u63d0\u793a override_get_db() \u4e0e get_db \u7684\u4ee3\u7801\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837\uff0c\u53ea\u662f override_get_db \u4e2d\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u5e93\u7684 TestingSessionLocal \u3002 \u6d4b\u8bd5\u5e94\u7528 \u00b6 \u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u6b63\u5e38\u6d4b\u8bd5\u4e86\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u6d4b\u8bd5\u671f\u95f4\uff0c\u6240\u6709\u5728\u6570\u636e\u5e93\u4e2d\u6240\u505a\u7684\u4fee\u6539\u90fd\u5728 test.db \u91cc\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e3b\u5e94\u7528\u7684 sql_app.db \u3002","title":"\u6d4b\u8bd5\u6570\u636e\u5e93"},{"location":"advanced/testing-database/#_1","text":"\u60a8\u8fd8\u53ef\u4ee5\u4f7f\u7528 \u6d4b\u8bd5\u4f9d\u8d56\u9879 \u4e2d\u7684\u8986\u76d6\u4f9d\u8d56\u9879\u65b9\u6cd5\u53d8\u66f4\u6d4b\u8bd5\u7684\u6570\u636e\u5e93\u3002 \u5b9e\u73b0\u8bbe\u7f6e\u5176\u4ed6\u6d4b\u8bd5\u6570\u636e\u5e93\u3001\u5728\u6d4b\u8bd5\u540e\u56de\u6eda\u6570\u636e\u3001\u6216\u9884\u586b\u6d4b\u8bd5\u6570\u636e\u7b49\u64cd\u4f5c\u3002 \u672c\u7ae0\u7684\u4e3b\u8981\u601d\u8def\u4e0e\u4e0a\u4e00\u7ae0\u5b8c\u5168\u76f8\u540c\u3002","title":"\u6d4b\u8bd5\u6570\u636e\u5e93"},{"location":"advanced/testing-database/#sql","text":"\u4e3a\u4e86\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u5e93\uff0c\u6211\u4eec\u8981\u5347\u7ea7 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u4e00\u7ae0\u4e2d\u7684\u793a\u4f8b\u3002 \u5e94\u7528\u7684\u6240\u6709\u4ee3\u7801\u90fd\u4e00\u6837\uff0c\u76f4\u63a5\u67e5\u770b\u90a3\u4e00\u7ae0\u7684\u793a\u4f8b\u4ee3\u7801\u5373\u53ef\u3002 \u672c\u7ae0\u53ea\u662f\u65b0\u6dfb\u52a0\u4e86\u6d4b\u8bd5\u6587\u4ef6\u3002 \u6b63\u5e38\u7684\u4f9d\u8d56\u9879 get_db() \u8fd4\u56de\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u6d4b\u8bd5\u65f6\u4f7f\u7528\u8986\u76d6\u4f9d\u8d56\u9879\u8fd4\u56de\u81ea\u5b9a\u4e49\u6570\u636e\u5e93\u4f1a\u8bdd\u4ee3\u66ff\u6b63\u5e38\u7684\u4f9d\u8d56\u9879\u3002 \u672c\u4f8b\u4e2d\uff0c\u8981\u521b\u5efa\u4ec5\u7528\u4e8e\u6d4b\u8bd5\u7684\u4e34\u65f6\u6570\u636e\u5e93\u3002","title":"\u4e3a SQL \u5e94\u7528\u6dfb\u52a0\u6d4b\u8bd5"},{"location":"advanced/testing-database/#_2","text":"\u521b\u5efa\u65b0\u6587\u4ef6 sql_app/tests/test_sql_app.py \u3002 \u56e0\u6b64\uff0c\u65b0\u7684\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u251c\u2500\u2500 schemas.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_sql_app.py","title":"\u6587\u4ef6\u67b6\u6784"},{"location":"advanced/testing-database/#_3","text":"\u9996\u5148\uff0c\u4e3a\u65b0\u5efa\u6570\u636e\u5e93\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u6d4b\u8bd5\u65f6\uff0c\u4f7f\u7528 test.db \u66ff\u4ee3 sql_app.db \u3002 \u4f46\u5176\u4f59\u7684\u4f1a\u8bdd\u4ee3\u7801\u57fa\u672c\u4e0a\u90fd\u662f\u4e00\u6837\u7684\uff0c\u53ea\u8981\u590d\u5236\u5c31\u53ef\u4ee5\u4e86\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u63d0\u793a \u4e3a\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\uff0c\u6700\u597d\u628a\u8fd9\u6bb5\u4ee3\u7801\u5199\u6210\u51fd\u6570\uff0c\u5728 database.py \u4e0e tests/test_sql_app.py \u4e2d\u4f7f\u7528\u3002 \u4e3a\u4e86\u628a\u6ce8\u610f\u529b\u96c6\u4e2d\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e0a\uff0c\u672c\u4f8b\u53ea\u662f\u590d\u5236\u4e86\u8fd9\u6bb5\u4ee3\u7801\u3002","title":"\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u4f1a\u8bdd"},{"location":"advanced/testing-database/#_4","text":"\u56e0\u4e3a\u73b0\u5728\u662f\u60f3\u5728\u65b0\u6587\u4ef6\u4e2d\u4f7f\u7528\u65b0\u6570\u636e\u5e93\uff0c\u6240\u4ee5\u8981\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u6570\u636e\u5e93\uff1a Base . metadata . create_all ( bind = engine ) \u4e00\u822c\u662f\u5728 main.py \u4e2d\u8c03\u7528\u8fd9\u884c\u4ee3\u7801\uff0c\u4f46\u5728 main.py \u91cc\uff0c\u8fd9\u884c\u4ee3\u7801\u7528\u4e8e\u521b\u5efa sql_app.db \uff0c\u4f46\u662f\u73b0\u5728\u8981\u4e3a\u6d4b\u8bd5\u521b\u5efa test.db \u3002 \u56e0\u6b64\uff0c\u8981\u5728\u6d4b\u8bd5\u4ee3\u7801\u4e2d\u6dfb\u52a0\u8fd9\u884c\u4ee3\u7801\u521b\u5efa\u65b0\u7684\u6570\u636e\u5e93\u6587\u4ef6\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id","title":"\u521b\u5efa\u6570\u636e\u5e93"},{"location":"advanced/testing-database/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u5e76\u4e3a\u5e94\u7528\u6dfb\u52a0\u8986\u76d6\u5185\u5bb9\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u63d0\u793a override_get_db() \u4e0e get_db \u7684\u4ee3\u7801\u51e0\u4e4e\u5b8c\u5168\u4e00\u6837\uff0c\u53ea\u662f override_get_db \u4e2d\u4f7f\u7528\u6d4b\u8bd5\u6570\u636e\u5e93\u7684 TestingSessionLocal \u3002","title":"\u8986\u76d6\u4f9d\u8d56\u9879"},{"location":"advanced/testing-database/#_6","text":"\u7136\u540e\uff0c\u5c31\u53ef\u4ee5\u6b63\u5e38\u6d4b\u8bd5\u4e86\u3002 from fastapi.testclient import TestClient from sqlalchemy import create_engine from sqlalchemy.orm import sessionmaker from ..database import Base from ..main import app , get_db SQLALCHEMY_DATABASE_URL = \"sqlite:///./test.db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) TestingSessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base . metadata . create_all ( bind = engine ) def override_get_db (): try : db = TestingSessionLocal () yield db finally : db . close () app . dependency_overrides [ get_db ] = override_get_db client = TestClient ( app ) def test_create_user (): response = client . post ( \"/users/\" , json = { \"email\" : \"deadpool@example.com\" , \"password\" : \"chimichangas4life\" }, ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert \"id\" in data user_id = data [ \"id\" ] response = client . get ( f \"/users/ { user_id } \" ) assert response . status_code == 200 , response . text data = response . json () assert data [ \"email\" ] == \"deadpool@example.com\" assert data [ \"id\" ] == user_id \u6d4b\u8bd5\u671f\u95f4\uff0c\u6240\u6709\u5728\u6570\u636e\u5e93\u4e2d\u6240\u505a\u7684\u4fee\u6539\u90fd\u5728 test.db \u91cc\uff0c\u4e0d\u4f1a\u5f71\u54cd\u4e3b\u5e94\u7528\u7684 sql_app.db \u3002","title":"\u6d4b\u8bd5\u5e94\u7528"},{"location":"advanced/testing-dependencies/","text":"\u6d4b\u8bd5\u4f9d\u8d56\u9879 \u00b6 \u6d4b\u8bd5\u65f6\u8986\u76d6\u4f9d\u8d56\u9879 \u00b6 \u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f9d\u8d56\u9879\u3002 \u5373\u4e0d\u5e0c\u671b\u8fd0\u884c\u539f\u6709\u4f9d\u8d56\u9879\uff08\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\uff09\u3002 \u53cd\u4e4b\uff0c\u8981\u5728\u6d4b\u8bd5\u671f\u95f4\uff08\u6216\u53ea\u662f\u4e3a\u67d0\u4e9b\u7279\u5b9a\u6d4b\u8bd5\uff09\u63d0\u4f9b\u53ea\u7528\u4e8e\u6d4b\u8bd5\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u4f7f\u7528\u6b64\u4f9d\u8d56\u9879\u7684\u503c\u66ff\u6362\u539f\u6709\u4f9d\u8d56\u9879\u7684\u503c\u3002 \u7528\u4f8b\uff1a\u5916\u90e8\u670d\u52a1 \u00b6 \u5e38\u89c1\u5b9e\u4f8b\u662f\u8c03\u7528\u5916\u90e8\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u3002 \u5411\u7b2c\u4e09\u65b9\u5e94\u7528\u53d1\u9001 Token\uff0c\u7136\u540e\u8fd4\u56de\u7ecf\u9a8c\u8bc1\u7684\u7528\u6237\u3002 \u4f46\u7b2c\u4e09\u65b9\u670d\u52a1\u5546\u5904\u7406\u6bcf\u6b21\u8bf7\u6c42\u90fd\u53ef\u80fd\u4f1a\u6536\u8d39\uff0c\u5e76\u4e14\u8017\u65f6\u901a\u5e38\u4e5f\u6bd4\u8c03\u7528\u5199\u6b7b\u7684\u6a21\u62df\u6d4b\u8bd5\u7528\u6237\u66f4\u957f\u3002 \u4e00\u822c\u53ea\u8981\u6d4b\u8bd5\u4e00\u6b21\u5916\u90e8\u9a8c\u8bc1\u5e94\u7528\u5c31\u591f\u4e86\uff0c\u4e0d\u5fc5\u6bcf\u6b21\u6d4b\u8bd5\u90fd\u53bb\u8c03\u7528\u3002 \u6b64\u65f6\uff0c\u6700\u597d\u8986\u76d6\u8c03\u7528\u5916\u90e8\u9a8c\u8bc1\u5e94\u7528\u7684\u4f9d\u8d56\u9879\uff0c\u4f7f\u7528\u8fd4\u56de\u6a21\u62df\u6d4b\u8bd5\u7528\u6237\u7684\u81ea\u5b9a\u4e49\u4f9d\u8d56\u9879\u5c31\u53ef\u4ee5\u4e86\u3002 \u4f7f\u7528 app.dependency_overrides \u5c5e\u6027 \u00b6 \u5bf9\u4e8e\u8fd9\u4e9b\u7528\u4f8b\uff0c FastAPI \u5e94\u7528\u652f\u6301 app.dependency_overrides \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5c31\u662f \u5b57\u5178 \u3002 \u8981\u5728\u6d4b\u8bd5\u65f6\u8986\u76d6\u539f\u6709\u4f9d\u8d56\u9879\uff0c\u8fd9\u4e2a\u5b57\u5178\u7684\u952e\u5e94\u5f53\u662f\u539f\u4f9d\u8d56\u9879\uff08\u51fd\u6570\uff09\uff0c\u503c\u662f\u8986\u76d6\u4f9d\u8d56\u9879\uff08\u53e6\u4e00\u4e2a\u51fd\u6570\uff09\u3002 \u8fd9\u6837\u4e00\u6765\uff0c FastAPI \u5c31\u4f1a\u8c03\u7528\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u4e0d\u518d\u8c03\u7528\u539f\u4f9d\u8d56\u9879\u3002 from typing import Union from fastapi import Depends , FastAPI from fastapi.testclient import TestClient app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Items!\" , \"params\" : commons } @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Users!\" , \"params\" : commons } client = TestClient ( app ) async def override_dependency ( q : Union [ str , None ] = None ): return { \"q\" : q , \"skip\" : 5 , \"limit\" : 10 } app . dependency_overrides [ common_parameters ] = override_dependency def test_override_in_items (): response = client . get ( \"/items/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : None , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_q (): response = client . get ( \"/items/?q=foo\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_params (): response = client . get ( \"/items/?q=foo&skip=100&limit=200\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } \u63d0\u793a FastAPI \u5e94\u7528\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u5b9e\u73b0\u8986\u76d6\u4f9d\u8d56\u9879\u3002 \u539f\u4f9d\u8d56\u9879\u53ef\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3001 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff08\u4e0d\u9700\u8981\u8fd4\u56de\u503c\u65f6\uff09\u3001 .include_router() \u8c03\u7528\u7b49\u3002 FastAPI \u53ef\u4ee5\u8986\u76d6\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u4f9d\u8d56\u9879\u3002 \u7136\u540e\uff0c\u4f7f\u7528 app.dependency_overrides \u628a\u8986\u76d6\u4f9d\u8d56\u9879\u91cd\u7f6e\u4e3a\u7a7a \u5b57\u5178 \uff1a app . dependency_overrides = {} \u63d0\u793a \u5982\u679c\u53ea\u5728\u67d0\u4e9b\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4b\u8bd5\u5f00\u59cb\u65f6\uff08\u5728\u6d4b\u8bd5\u51fd\u6570\u5185\uff09\u8bbe\u7f6e\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u5e76\u5728\u7ed3\u675f\u65f6\uff08\u5728\u6d4b\u8bd5\u51fd\u6570\u7ed3\u5c3e\uff09\u91cd\u7f6e\u8986\u76d6\u4f9d\u8d56\u9879\u3002","title":"\u6d4b\u8bd5\u4f9d\u8d56\u9879"},{"location":"advanced/testing-dependencies/#_1","text":"","title":"\u6d4b\u8bd5\u4f9d\u8d56\u9879"},{"location":"advanced/testing-dependencies/#_2","text":"\u6709\u4e9b\u573a\u666f\u4e0b\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u5728\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f9d\u8d56\u9879\u3002 \u5373\u4e0d\u5e0c\u671b\u8fd0\u884c\u539f\u6709\u4f9d\u8d56\u9879\uff08\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\uff09\u3002 \u53cd\u4e4b\uff0c\u8981\u5728\u6d4b\u8bd5\u671f\u95f4\uff08\u6216\u53ea\u662f\u4e3a\u67d0\u4e9b\u7279\u5b9a\u6d4b\u8bd5\uff09\u63d0\u4f9b\u53ea\u7528\u4e8e\u6d4b\u8bd5\u7684\u4f9d\u8d56\u9879\uff0c\u5e76\u4f7f\u7528\u6b64\u4f9d\u8d56\u9879\u7684\u503c\u66ff\u6362\u539f\u6709\u4f9d\u8d56\u9879\u7684\u503c\u3002","title":"\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f9d\u8d56\u9879"},{"location":"advanced/testing-dependencies/#_3","text":"\u5e38\u89c1\u5b9e\u4f8b\u662f\u8c03\u7528\u5916\u90e8\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u3002 \u5411\u7b2c\u4e09\u65b9\u5e94\u7528\u53d1\u9001 Token\uff0c\u7136\u540e\u8fd4\u56de\u7ecf\u9a8c\u8bc1\u7684\u7528\u6237\u3002 \u4f46\u7b2c\u4e09\u65b9\u670d\u52a1\u5546\u5904\u7406\u6bcf\u6b21\u8bf7\u6c42\u90fd\u53ef\u80fd\u4f1a\u6536\u8d39\uff0c\u5e76\u4e14\u8017\u65f6\u901a\u5e38\u4e5f\u6bd4\u8c03\u7528\u5199\u6b7b\u7684\u6a21\u62df\u6d4b\u8bd5\u7528\u6237\u66f4\u957f\u3002 \u4e00\u822c\u53ea\u8981\u6d4b\u8bd5\u4e00\u6b21\u5916\u90e8\u9a8c\u8bc1\u5e94\u7528\u5c31\u591f\u4e86\uff0c\u4e0d\u5fc5\u6bcf\u6b21\u6d4b\u8bd5\u90fd\u53bb\u8c03\u7528\u3002 \u6b64\u65f6\uff0c\u6700\u597d\u8986\u76d6\u8c03\u7528\u5916\u90e8\u9a8c\u8bc1\u5e94\u7528\u7684\u4f9d\u8d56\u9879\uff0c\u4f7f\u7528\u8fd4\u56de\u6a21\u62df\u6d4b\u8bd5\u7528\u6237\u7684\u81ea\u5b9a\u4e49\u4f9d\u8d56\u9879\u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u7528\u4f8b\uff1a\u5916\u90e8\u670d\u52a1"},{"location":"advanced/testing-dependencies/#appdependency_overrides","text":"\u5bf9\u4e8e\u8fd9\u4e9b\u7528\u4f8b\uff0c FastAPI \u5e94\u7528\u652f\u6301 app.dependency_overrides \u5c5e\u6027\uff0c\u8be5\u5c5e\u6027\u5c31\u662f \u5b57\u5178 \u3002 \u8981\u5728\u6d4b\u8bd5\u65f6\u8986\u76d6\u539f\u6709\u4f9d\u8d56\u9879\uff0c\u8fd9\u4e2a\u5b57\u5178\u7684\u952e\u5e94\u5f53\u662f\u539f\u4f9d\u8d56\u9879\uff08\u51fd\u6570\uff09\uff0c\u503c\u662f\u8986\u76d6\u4f9d\u8d56\u9879\uff08\u53e6\u4e00\u4e2a\u51fd\u6570\uff09\u3002 \u8fd9\u6837\u4e00\u6765\uff0c FastAPI \u5c31\u4f1a\u8c03\u7528\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u4e0d\u518d\u8c03\u7528\u539f\u4f9d\u8d56\u9879\u3002 from typing import Union from fastapi import Depends , FastAPI from fastapi.testclient import TestClient app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Items!\" , \"params\" : commons } @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return { \"message\" : \"Hello Users!\" , \"params\" : commons } client = TestClient ( app ) async def override_dependency ( q : Union [ str , None ] = None ): return { \"q\" : q , \"skip\" : 5 , \"limit\" : 10 } app . dependency_overrides [ common_parameters ] = override_dependency def test_override_in_items (): response = client . get ( \"/items/\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : None , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_q (): response = client . get ( \"/items/?q=foo\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } def test_override_in_items_with_params (): response = client . get ( \"/items/?q=foo&skip=100&limit=200\" ) assert response . status_code == 200 assert response . json () == { \"message\" : \"Hello Items!\" , \"params\" : { \"q\" : \"foo\" , \"skip\" : 5 , \"limit\" : 10 }, } \u63d0\u793a FastAPI \u5e94\u7528\u4e2d\u7684\u4efb\u4f55\u4f4d\u7f6e\u90fd\u53ef\u4ee5\u5b9e\u73b0\u8986\u76d6\u4f9d\u8d56\u9879\u3002 \u539f\u4f9d\u8d56\u9879\u53ef\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3001 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff08\u4e0d\u9700\u8981\u8fd4\u56de\u503c\u65f6\uff09\u3001 .include_router() \u8c03\u7528\u7b49\u3002 FastAPI \u53ef\u4ee5\u8986\u76d6\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u4f9d\u8d56\u9879\u3002 \u7136\u540e\uff0c\u4f7f\u7528 app.dependency_overrides \u628a\u8986\u76d6\u4f9d\u8d56\u9879\u91cd\u7f6e\u4e3a\u7a7a \u5b57\u5178 \uff1a app . dependency_overrides = {} \u63d0\u793a \u5982\u679c\u53ea\u5728\u67d0\u4e9b\u6d4b\u8bd5\u65f6\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u60a8\u53ef\u4ee5\u5728\u6d4b\u8bd5\u5f00\u59cb\u65f6\uff08\u5728\u6d4b\u8bd5\u51fd\u6570\u5185\uff09\u8bbe\u7f6e\u8986\u76d6\u4f9d\u8d56\u9879\uff0c\u5e76\u5728\u7ed3\u675f\u65f6\uff08\u5728\u6d4b\u8bd5\u51fd\u6570\u7ed3\u5c3e\uff09\u91cd\u7f6e\u8986\u76d6\u4f9d\u8d56\u9879\u3002","title":"\u4f7f\u7528 app.dependency_overrides \u5c5e\u6027"},{"location":"advanced/testing-events/","text":"\u6d4b\u8bd5\u4e8b\u4ef6\uff1a\u542f\u52a8 - \u5173\u95ed \u00b6 \u4f7f\u7528 TestClient \u548c with \u8bed\u53e5\uff0c\u5728\u6d4b\u8bd5\u4e2d\u8fd0\u884c\u4e8b\u4ef6\u5904\u7406\u5668\uff08 startup \u4e0e shutdown \uff09\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] def test_read_items (): with TestClient ( app ) as client : response = client . get ( \"/items/foo\" ) assert response . status_code == 200 assert response . json () == { \"name\" : \"Fighters\" }","title":"\u6d4b\u8bd5\u4e8b\u4ef6\uff1a\u542f\u52a8 - \u5173\u95ed"},{"location":"advanced/testing-events/#-","text":"\u4f7f\u7528 TestClient \u548c with \u8bed\u53e5\uff0c\u5728\u6d4b\u8bd5\u4e2d\u8fd0\u884c\u4e8b\u4ef6\u5904\u7406\u5668\uff08 startup \u4e0e shutdown \uff09\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () items = {} @app . on_event ( \"startup\" ) async def startup_event (): items [ \"foo\" ] = { \"name\" : \"Fighters\" } items [ \"bar\" ] = { \"name\" : \"Tenders\" } @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : str ): return items [ item_id ] def test_read_items (): with TestClient ( app ) as client : response = client . get ( \"/items/foo\" ) assert response . status_code == 200 assert response . json () == { \"name\" : \"Fighters\" }","title":"\u6d4b\u8bd5\u4e8b\u4ef6\uff1a\u542f\u52a8 - \u5173\u95ed"},{"location":"advanced/testing-websockets/","text":"\u6d4b\u8bd5 WebSockets \u00b6 \u6d4b\u8bd5 WebSockets \u4e5f\u4f7f\u7528 TestClient \u3002 \u4e3a\u6b64\uff0c\u8981\u5728 with \u8bed\u53e5\u4e2d\u4f7f\u7528 TestClient \u8fde\u63a5 WebSocket\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient from fastapi.websockets import WebSocket app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } @app . websocket_route ( \"/ws\" ) async def websocket ( websocket : WebSocket ): await websocket . accept () await websocket . send_json ({ \"msg\" : \"Hello WebSocket\" }) await websocket . close () def test_read_main (): client = TestClient ( app ) response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } def test_websocket (): client = TestClient ( app ) with client . websocket_connect ( \"/ws\" ) as websocket : data = websocket . receive_json () assert data == { \"msg\" : \"Hello WebSocket\" } \u7b14\u8bb0 \u66f4\u591a\u7ec6\u8282\u8be6\u89c1 Starlette \u5b98\u6863 - \u6d4b\u8bd5 WebSockets \u3002","title":"\u6d4b\u8bd5 WebSockets"},{"location":"advanced/testing-websockets/#websockets","text":"\u6d4b\u8bd5 WebSockets \u4e5f\u4f7f\u7528 TestClient \u3002 \u4e3a\u6b64\uff0c\u8981\u5728 with \u8bed\u53e5\u4e2d\u4f7f\u7528 TestClient \u8fde\u63a5 WebSocket\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient from fastapi.websockets import WebSocket app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } @app . websocket_route ( \"/ws\" ) async def websocket ( websocket : WebSocket ): await websocket . accept () await websocket . send_json ({ \"msg\" : \"Hello WebSocket\" }) await websocket . close () def test_read_main (): client = TestClient ( app ) response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } def test_websocket (): client = TestClient ( app ) with client . websocket_connect ( \"/ws\" ) as websocket : data = websocket . receive_json () assert data == { \"msg\" : \"Hello WebSocket\" } \u7b14\u8bb0 \u66f4\u591a\u7ec6\u8282\u8be6\u89c1 Starlette \u5b98\u6863 - \u6d4b\u8bd5 WebSockets \u3002","title":"\u6d4b\u8bd5 WebSockets"},{"location":"advanced/using-request-directly/","text":"\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42 \u00b6 \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u591a\u79cd\u7c7b\u578b\u58f0\u660e\u4e86\u8bf7\u6c42\u7684\u5404\u79cd\u7ec4\u4ef6\u3002 \u5e76\u4ece\u4ee5\u4e0b\u5bf9\u8c61\u4e2d\u63d0\u53d6\u6570\u636e\uff1a \u8def\u5f84\u53c2\u6570 \u8bf7\u6c42\u5934 Cookies \u7b49 FastAPI \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u9a8c\u8bc1\u6570\u636e\u3001\u8f6c\u6362\u6570\u636e\uff0c\u5e76\u81ea\u52a8\u751f\u6210 API \u6587\u6863\u3002 \u4f46\u6709\u65f6\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u76f4\u63a5\u8bbf\u95ee Request \u5bf9\u8c61\u3002 Request \u5bf9\u8c61\u7684\u7ec6\u8282 \u00b6 \u5b9e\u9645\u4e0a\uff0c FastAPI \u7684\u5e95\u5c42\u662f Starlette \uff0c FastAPI \u53ea\u4e0d\u8fc7\u662f\u5728 Starlette \u9876\u5c42\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u4f7f\u7528 Starlette \u7684 Request \u5bf9\u8c61\u3002 \u4f46\u76f4\u63a5\u4ece Request \u5bf9\u8c61\u63d0\u53d6\u6570\u636e\u65f6\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6\u8bf7\u6c42\u4f53\uff09\uff0c FastAPI \u4e0d\u4f1a\u9a8c\u8bc1\u3001\u8f6c\u6362\u548c\u5b58\u6863\u6570\u636e\uff08\u4e3a API \u6587\u6863\u4f7f\u7528 OpenAPI\uff09\u3002 \u4e0d\u8fc7\uff0c\u4ecd\u53ef\u4ee5\u9a8c\u8bc1\u3001\u8f6c\u6362\u4e0e\u6ce8\u91ca\uff08\u4f7f\u7528 Pydantic \u6a21\u578b\u7684\u8bf7\u6c42\u4f53\u7b49\uff09\u5176\u4ed6\u6b63\u5e38\u58f0\u660e\u7684\u53c2\u6570\u3002 \u4f46\u5728\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u8fd8\u662f\u9700\u8981\u63d0\u53d6 Request \u5bf9\u8c61\u3002 \u76f4\u63a5\u4f7f\u7528 Request \u5bf9\u8c61 \u00b6 \u5047\u8bbe\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5ba2\u6237\u7aef IP \u5730\u5740\u548c\u4e3b\u673a\u3002 \u6b64\u65f6\uff0c\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u3002 from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def read_root ( item_id : str , request : Request ): client_host = request . client . host return { \"client_host\" : client_host , \"item_id\" : item_id } \u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u7c7b\u578b\u58f0\u660e\u4e3a Request \uff0c FastAPI \u5c31\u80fd\u628a Request \u4f20\u9012\u5230\u53c2\u6570\u91cc\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u672c\u4f8b\u9664\u4e86\u58f0\u660e\u8bf7\u6c42\u53c2\u6570\u4e4b\u5916\uff0c\u8fd8\u58f0\u660e\u4e86\u8def\u5f84\u53c2\u6570\u3002 \u56e0\u6b64\uff0c\u80fd\u591f\u63d0\u53d6\u3001\u9a8c\u8bc1\u8def\u5f84\u53c2\u6570\u3001\u5e76\u8f6c\u6362\u4e3a\u6307\u5b9a\u7c7b\u578b\uff0c\u8fd8\u53ef\u4ee5\u7528 OpenAPI \u6ce8\u91ca\u3002 \u540c\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u6b63\u5e38\u58f0\u660e\u5176\u4ed6\u53c2\u6570\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63d0\u53d6 Request \u3002 Request \u6587\u6863 \u00b6 \u66f4\u591a\u7ec6\u8282\u8be6\u89c1 Starlette \u5b98\u6863 - Request \u5bf9\u8c61 \u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.requests import Request \u3002 FastAPI \u7684 from fastapi import Request \u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u5b9e\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42"},{"location":"advanced/using-request-directly/#_1","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u4f7f\u7528\u591a\u79cd\u7c7b\u578b\u58f0\u660e\u4e86\u8bf7\u6c42\u7684\u5404\u79cd\u7ec4\u4ef6\u3002 \u5e76\u4ece\u4ee5\u4e0b\u5bf9\u8c61\u4e2d\u63d0\u53d6\u6570\u636e\uff1a \u8def\u5f84\u53c2\u6570 \u8bf7\u6c42\u5934 Cookies \u7b49 FastAPI \u4f7f\u7528\u8fd9\u79cd\u65b9\u5f0f\u9a8c\u8bc1\u6570\u636e\u3001\u8f6c\u6362\u6570\u636e\uff0c\u5e76\u81ea\u52a8\u751f\u6210 API \u6587\u6863\u3002 \u4f46\u6709\u65f6\uff0c\u6211\u4eec\u4e5f\u9700\u8981\u76f4\u63a5\u8bbf\u95ee Request \u5bf9\u8c61\u3002","title":"\u76f4\u63a5\u4f7f\u7528\u8bf7\u6c42"},{"location":"advanced/using-request-directly/#request","text":"\u5b9e\u9645\u4e0a\uff0c FastAPI \u7684\u5e95\u5c42\u662f Starlette \uff0c FastAPI \u53ea\u4e0d\u8fc7\u662f\u5728 Starlette \u9876\u5c42\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\uff0c\u6240\u4ee5\u80fd\u76f4\u63a5\u4f7f\u7528 Starlette \u7684 Request \u5bf9\u8c61\u3002 \u4f46\u76f4\u63a5\u4ece Request \u5bf9\u8c61\u63d0\u53d6\u6570\u636e\u65f6\uff08\u4f8b\u5982\uff0c\u8bfb\u53d6\u8bf7\u6c42\u4f53\uff09\uff0c FastAPI \u4e0d\u4f1a\u9a8c\u8bc1\u3001\u8f6c\u6362\u548c\u5b58\u6863\u6570\u636e\uff08\u4e3a API \u6587\u6863\u4f7f\u7528 OpenAPI\uff09\u3002 \u4e0d\u8fc7\uff0c\u4ecd\u53ef\u4ee5\u9a8c\u8bc1\u3001\u8f6c\u6362\u4e0e\u6ce8\u91ca\uff08\u4f7f\u7528 Pydantic \u6a21\u578b\u7684\u8bf7\u6c42\u4f53\u7b49\uff09\u5176\u4ed6\u6b63\u5e38\u58f0\u660e\u7684\u53c2\u6570\u3002 \u4f46\u5728\u67d0\u4e9b\u7279\u5b9a\u60c5\u51b5\u4e0b\uff0c\u8fd8\u662f\u9700\u8981\u63d0\u53d6 Request \u5bf9\u8c61\u3002","title":"Request \u5bf9\u8c61\u7684\u7ec6\u8282"},{"location":"advanced/using-request-directly/#request_1","text":"\u5047\u8bbe\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5ba2\u6237\u7aef IP \u5730\u5740\u548c\u4e3b\u673a\u3002 \u6b64\u65f6\uff0c\u9700\u8981\u76f4\u63a5\u8bbf\u95ee\u8bf7\u6c42\u3002 from fastapi import FastAPI , Request app = FastAPI () @app . get ( \"/items/ {item_id} \" ) def read_root ( item_id : str , request : Request ): client_host = request . client . host return { \"client_host\" : client_host , \"item_id\" : item_id } \u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u7c7b\u578b\u58f0\u660e\u4e3a Request \uff0c FastAPI \u5c31\u80fd\u628a Request \u4f20\u9012\u5230\u53c2\u6570\u91cc\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u672c\u4f8b\u9664\u4e86\u58f0\u660e\u8bf7\u6c42\u53c2\u6570\u4e4b\u5916\uff0c\u8fd8\u58f0\u660e\u4e86\u8def\u5f84\u53c2\u6570\u3002 \u56e0\u6b64\uff0c\u80fd\u591f\u63d0\u53d6\u3001\u9a8c\u8bc1\u8def\u5f84\u53c2\u6570\u3001\u5e76\u8f6c\u6362\u4e3a\u6307\u5b9a\u7c7b\u578b\uff0c\u8fd8\u53ef\u4ee5\u7528 OpenAPI \u6ce8\u91ca\u3002 \u540c\u6837\uff0c\u60a8\u4e5f\u53ef\u4ee5\u6b63\u5e38\u58f0\u660e\u5176\u4ed6\u53c2\u6570\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u63d0\u53d6 Request \u3002","title":"\u76f4\u63a5\u4f7f\u7528 Request \u5bf9\u8c61"},{"location":"advanced/using-request-directly/#request_2","text":"\u66f4\u591a\u7ec6\u8282\u8be6\u89c1 Starlette \u5b98\u6863 - Request \u5bf9\u8c61 \u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.requests import Request \u3002 FastAPI \u7684 from fastapi import Request \u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5176\u5b9e\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"Request \u6587\u6863"},{"location":"advanced/websockets/","text":"WebSockets \u63a5\u53e3 \u00b6 FastAPI \u652f\u6301\u4f7f\u7528 WebSocket \u3002 WebSocket \u5ba2\u6237\u7aef \u00b6 \u751f\u4ea7\u73af\u5883 \u00b6 \u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u60a8\u53ef\u80fd\u8981\u4f7f\u7528 React\u3001Vue.js\u3001Angular \u7b49\u73b0\u4ee3\u524d\u7aef\u6846\u67b6\u3002 \u5e76\u4e14\u4f7f\u7528 WebSocket \u4e0e\u540e\u7aef\u901a\u4fe1\u65f6\uff0c\u8fd8\u53ef\u80fd\u8981\u4f7f\u7528\u524d\u7aef\u5de5\u5177\u3002 \u672c\u5730\u79fb\u52a8\u5e94\u7528\u4e5f\u6709\u53ef\u80fd\u5728\u672c\u5730\u4ee3\u7801\uff08native code\uff09\u4e2d\u4f7f\u7528 WebSocket \u4e0e\u540e\u7aef\u76f4\u63a5\u901a\u4fe1\u3002 \u5f53\u7136\u60a8\u8fd8\u6709\u53ef\u80fd\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e0e WebSocket \u7aef\u70b9\u901a\u4fe1\u3002 \u4f46\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u7684 HTML \u6587\u6863\uff0c\u8be5\u6587\u6863\u53ea\u5305\u542b\u4e86\u4e00\u4e9b JavaScript\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u5728\u4e00\u4e2a\u957f\u5b57\u7b26\u4e32\u4e2d\u3002 \u8fd9\u79cd\u65b9\u5f0f\u80af\u5b9a\u4e0d\u597d\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u6700\u597d\u4e0d\u8981\u8fd9\u6837\u505a\u3002 \u751f\u4ea7\u73af\u5883\u4e0b\u8981\u4f7f\u7528\u524d\u7aef\u6846\u67b6\u7b49\u65b9\u5f0f\u3002 \u4f46\u672c\u4f8b\u7684\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u7528\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u8ba9\u6211\u4eec\u96c6\u4e2d\u7cbe\u529b\u4e86\u89e3\u670d\u52a1\u5668\u7aef\u7684 WebSocket\uff0c\u800c\u4e14\u8fd8\u80fd\u6b63\u5e38\u8fd0\u884c\uff1a from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) \u521b\u5efa websocket \u00b6 \u5728 FastAPI \u5e94\u7528\u4e2d\u521b\u5efa websocket \uff1a from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.websockets import WebSocket \u3002 FastAPI \u7684 WebSocket \u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5b83\u5176\u5b9e\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 \u7b49\u5f85\u4fe1\u606f\u4e0e\u53d1\u9001\u4fe1\u606f \u00b6 \u5728 WebSocket \u8def\u7531\u91cc\u53ef\u4ee5\u4f7f\u7528 await \u63a5\u6536\u6216\u53d1\u9001\u4fe1\u606f\u3002 from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) \u5e76\u53ef\u4ee5\u63a5\u6536\u548c\u53d1\u9001\u4e8c\u8fdb\u5236\u3001\u6587\u672c\u3001JSON \u7b49\u683c\u5f0f\u7684\u6570\u636e\u3002 \u8fd0\u884c \u00b6 \u5982\u679c\u6587\u4ef6\u540d\u4e3a main.py \uff0c\u5219\u4ee5\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\u5e94\u7528\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00\u6d4f\u89c8\u5668 http://127.0.0.1:8000\u3002 \u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u7b80\u5355\u9875\u9762\uff1a \u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u5e76\u53d1\u9001\u4fe1\u606f\uff1a FastAPI \u5e94\u7528\u4f7f\u7528 WebSocket \u8fd4\u56de\u5982\u4e0b\u54cd\u5e94\uff1a \u53d1\u9001\u4e0e\u63a5\u6536\u4fe1\u606f\uff1a \u6240\u6709\u64cd\u4f5c\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a WebSocket \u8fde\u63a5\u3002 \u4f7f\u7528 Depends \u7b49\u51fd\u6570 \u00b6 \u5728 WebSocket \u7aef\u70b9\u4e2d\uff0c\u4ece fastapi \u5bfc\u5165\u5e76\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a Depends Security Cookie Header Path Query \u6b64\u5904\u4e0e\u5176\u4ed6 FastAPI \u7aef\u70b9/\u8def\u5f84\u64cd\u4f5c\u7684\u5de5\u4f5c\u65b9\u5f0f\u76f8\u540c\uff1a from typing import Union from fastapi import ( Cookie , Depends , FastAPI , Query , WebSocket , WebSocketException , status , ) from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label> <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label> <button onclick=\"connect(event)\">Connect</button> <hr> <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = null; function connect(event) { var itemId = document.getElementById(\"itemId\") var token = document.getElementById(\"token\") ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; event.preventDefault() } function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) async def get_cookie_or_token ( websocket : WebSocket , session : Union [ str , None ] = Cookie ( default = None ), token : Union [ str , None ] = Query ( default = None ), ): if session is None and token is None : raise WebSocketException ( code = status . WS_1008_POLICY_VIOLATION ) return session or token @app . websocket ( \"/items/ {item_id} /ws\" ) async def websocket_endpoint ( websocket : WebSocket , item_id : str , q : Union [ int , None ] = None , cookie_or_token : str = Depends ( get_cookie_or_token ), ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Session cookie or query token value is: { cookie_or_token } \" ) if q is not None : await websocket . send_text ( f \"Query parameter q is: { q } \" ) await websocket . send_text ( f \"Message text was: { data } , for item ID: { item_id } \" ) \u8bf4\u660e Websocket \u4e0d\u4f1a\u771f\u7684\u89e6\u53d1 HTTPException \uff0c\u56e0\u6b64\u6700\u597d\u76f4\u63a5\u5173\u95ed WebSocket \u8fde\u63a5\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 \u89c4\u8303\u5b9a\u4e49\u7684\u6709\u6548\u4ee3\u7801 \u4e2d\u7684\u5173\u95ed\u4ee3\u7801\u3002 \u4eca\u540e, \u8fd8\u6709\u53ef\u80fd\u6dfb\u52a0\u53ef\u5728\u4efb\u610f\u4f4d\u7f6e\u89e6\u53d1\u7684 WebSocketException \u53ca\u5176\u5f02\u5e38\u5904\u7406\u5668\u3002\u4f46\u8fd9\u4e9b\u90fd\u53d6\u51b3\u4e8e Starlette \u7684 PR #527 \u3002 WebSocket \u4e0e\u4f9d\u8d56\u9879 \u00b6 \u5982\u679c\u6587\u4ef6\u540d\u4e3a main.py \uff0c\u5219\u4ee5\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00\u6d4f\u89c8\u5668 http://127.0.0.1:8000\u3002 \u8bbe\u7f6e\uff1a Item ID , \u5728\u8def\u5f84\u4e2d\u4f7f\u7528 Token \uff0c\u7528\u4f5c\u67e5\u8be2\u53c2\u6570 \u63d0\u793a \u6ce8\u610f\uff0c\u67e5\u8be2 token \u7531\u4f9d\u8d56\u9879\u5904\u7406\u3002 \u4f7f\u7528\u8be5\u4f9d\u8d56\u9879\u53ef\u4ee5\u8fde\u63a5 WebSocket\uff0c\u7136\u540e\u53d1\u9001\u4e0e\u63a5\u6536\u4fe1\u606f\uff1a \u5904\u7406\u65ad\u5f00\u8fde\u63a5\u4e0e\u591a\u4e2a\u5ba2\u6237\u7aef \u00b6 WebSocket \u8fde\u63a5\u5173\u95ed\u65f6\uff0c await websocket.receive_text() \u89e6\u53d1 WebSocketDisconnect \u5f02\u5e38\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u50cf\u672c\u4f8b\u4e00\u6837\u6355\u83b7\u548c\u5904\u7406\u5f02\u5e38\u3002 from typing import List from fastapi import FastAPI , WebSocket , WebSocketDisconnect from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <h2>Your ID: <span id=\"ws-id\"></span></h2> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var client_id = Date.now() document.querySelector(\"#ws-id\").textContent = client_id; var ws = new WebSocket(`ws://localhost:8000/ws/$ {client_id} `); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" class ConnectionManager : def __init__ ( self ): self . active_connections : List [ WebSocket ] = [] async def connect ( self , websocket : WebSocket ): await websocket . accept () self . active_connections . append ( websocket ) def disconnect ( self , websocket : WebSocket ): self . active_connections . remove ( websocket ) async def send_personal_message ( self , message : str , websocket : WebSocket ): await websocket . send_text ( message ) async def broadcast ( self , message : str ): for connection in self . active_connections : await connection . send_text ( message ) manager = ConnectionManager () @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws/ {client_id} \" ) async def websocket_endpoint ( websocket : WebSocket , client_id : int ): await manager . connect ( websocket ) try : while True : data = await websocket . receive_text () await manager . send_personal_message ( f \"You wrote: { data } \" , websocket ) await manager . broadcast ( f \"Client # { client_id } says: { data } \" ) except WebSocketDisconnect : manager . disconnect ( websocket ) await manager . broadcast ( f \"Client # { client_id } left the chat\" ) \u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u7528\u591a\u4e2a\u6d4f\u89c8\u5668\u6807\u7b7e\u9875\u6253\u5f00\u5e94\u7528 \u5728\u591a\u4e2a\u6807\u7b7e\u9875\u4e2d\u5199\u5165\u4fe1\u606f \u7136\u540e\u5173\u95ed\u5176\u4e2d\u4e00\u4e2a\u6807\u7b7e\u9875 \u6b64\u65f6\u4f1a\u89e6\u53d1 WebSocketDisconnect \u5f02\u5e38\uff0c\u5176\u4ed6\u5ba2\u6237\u7aef\u4f1a\u63a5\u6536\u5230\u5982\u4e0b\u4fe1\u606f\uff1a Client #1596980209979 left the chat \u63d0\u793a \u4e0a\u8ff0\u5e94\u7528\u662f\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u5982\u4f55\u5904\u7406\u4e0e\u5e7f\u64ad\u4fe1\u606f\u7ed9\u591a\u4e2a WebSocket \u8fde\u63a5\u3002 \u6ce8\u610f\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5728\u5185\u5b58\u7684\u5355\u5217\u8868\u4e2d\u5904\u7406\uff0c\u56e0\u6b64\u5b83\u53ea\u5728\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5de5\u4f5c\uff0c\u4e14\u53ea\u4f7f\u7528\u5355\u8fdb\u7a0b\u5de5\u4f5c\u3002 \u5982\u679c\u9700\u8981\u4e3a FastAPI \u96c6\u6210\u4e00\u4e9b\u7531 Redis\u3001PostgreSQL \u7b49\u6570\u636e\u5e93\u652f\u6301\u7684\u3001\u4e14\u66f4\u6210\u719f\u7a33\u5b9a\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u9605 \u7f16\u7801/\u5e7f\u64ad \u3002 \u66f4\u591a\u4fe1\u606f \u00b6 \u66f4\u591a\u9009\u9879\u8be6\u89c1 Starlette \u6587\u6863\uff1a WebSocket \u7c7b \u57fa\u4e8e\u7c7b\u7684 WebSocket \u5904\u7406\u65b9\u5f0f","title":"WebSockets \u63a5\u53e3"},{"location":"advanced/websockets/#websockets","text":"FastAPI \u652f\u6301\u4f7f\u7528 WebSocket \u3002","title":"WebSockets \u63a5\u53e3"},{"location":"advanced/websockets/#websocket","text":"","title":"WebSocket \u5ba2\u6237\u7aef"},{"location":"advanced/websockets/#_1","text":"\u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u60a8\u53ef\u80fd\u8981\u4f7f\u7528 React\u3001Vue.js\u3001Angular \u7b49\u73b0\u4ee3\u524d\u7aef\u6846\u67b6\u3002 \u5e76\u4e14\u4f7f\u7528 WebSocket \u4e0e\u540e\u7aef\u901a\u4fe1\u65f6\uff0c\u8fd8\u53ef\u80fd\u8981\u4f7f\u7528\u524d\u7aef\u5de5\u5177\u3002 \u672c\u5730\u79fb\u52a8\u5e94\u7528\u4e5f\u6709\u53ef\u80fd\u5728\u672c\u5730\u4ee3\u7801\uff08native code\uff09\u4e2d\u4f7f\u7528 WebSocket \u4e0e\u540e\u7aef\u76f4\u63a5\u901a\u4fe1\u3002 \u5f53\u7136\u60a8\u8fd8\u6709\u53ef\u80fd\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e0e WebSocket \u7aef\u70b9\u901a\u4fe1\u3002 \u4f46\u5728\u672c\u4f8b\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u975e\u5e38\u7b80\u5355\u7684 HTML \u6587\u6863\uff0c\u8be5\u6587\u6863\u53ea\u5305\u542b\u4e86\u4e00\u4e9b JavaScript\uff0c\u6240\u6709\u5185\u5bb9\u90fd\u5728\u4e00\u4e2a\u957f\u5b57\u7b26\u4e32\u4e2d\u3002 \u8fd9\u79cd\u65b9\u5f0f\u80af\u5b9a\u4e0d\u597d\uff0c\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u6700\u597d\u4e0d\u8981\u8fd9\u6837\u505a\u3002 \u751f\u4ea7\u73af\u5883\u4e0b\u8981\u4f7f\u7528\u524d\u7aef\u6846\u67b6\u7b49\u65b9\u5f0f\u3002 \u4f46\u672c\u4f8b\u7684\u8fd9\u79cd\u65b9\u5f0f\u53ef\u4ee5\u7528\u6700\u7b80\u5355\u7684\u5f62\u5f0f\uff0c\u8ba9\u6211\u4eec\u96c6\u4e2d\u7cbe\u529b\u4e86\u89e3\u670d\u52a1\u5668\u7aef\u7684 WebSocket\uff0c\u800c\u4e14\u8fd8\u80fd\u6b63\u5e38\u8fd0\u884c\uff1a from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" )","title":"\u751f\u4ea7\u73af\u5883"},{"location":"advanced/websockets/#websocket_1","text":"\u5728 FastAPI \u5e94\u7528\u4e2d\u521b\u5efa websocket \uff1a from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.websockets import WebSocket \u3002 FastAPI \u7684 WebSocket \u53ea\u662f\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u7684\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5b83\u5176\u5b9e\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u521b\u5efa websocket"},{"location":"advanced/websockets/#_2","text":"\u5728 WebSocket \u8def\u7531\u91cc\u53ef\u4ee5\u4f7f\u7528 await \u63a5\u6536\u6216\u53d1\u9001\u4fe1\u606f\u3002 from fastapi import FastAPI , WebSocket from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = new WebSocket(\"ws://localhost:8000/ws\"); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws\" ) async def websocket_endpoint ( websocket : WebSocket ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Message text was: { data } \" ) \u5e76\u53ef\u4ee5\u63a5\u6536\u548c\u53d1\u9001\u4e8c\u8fdb\u5236\u3001\u6587\u672c\u3001JSON \u7b49\u683c\u5f0f\u7684\u6570\u636e\u3002","title":"\u7b49\u5f85\u4fe1\u606f\u4e0e\u53d1\u9001\u4fe1\u606f"},{"location":"advanced/websockets/#_3","text":"\u5982\u679c\u6587\u4ef6\u540d\u4e3a main.py \uff0c\u5219\u4ee5\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\u5e94\u7528\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00\u6d4f\u89c8\u5668 http://127.0.0.1:8000\u3002 \u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u7b80\u5355\u9875\u9762\uff1a \u5728\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u5e76\u53d1\u9001\u4fe1\u606f\uff1a FastAPI \u5e94\u7528\u4f7f\u7528 WebSocket \u8fd4\u56de\u5982\u4e0b\u54cd\u5e94\uff1a \u53d1\u9001\u4e0e\u63a5\u6536\u4fe1\u606f\uff1a \u6240\u6709\u64cd\u4f5c\u90fd\u4f7f\u7528\u540c\u4e00\u4e2a WebSocket \u8fde\u63a5\u3002","title":"\u8fd0\u884c"},{"location":"advanced/websockets/#depends","text":"\u5728 WebSocket \u7aef\u70b9\u4e2d\uff0c\u4ece fastapi \u5bfc\u5165\u5e76\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\uff1a Depends Security Cookie Header Path Query \u6b64\u5904\u4e0e\u5176\u4ed6 FastAPI \u7aef\u70b9/\u8def\u5f84\u64cd\u4f5c\u7684\u5de5\u4f5c\u65b9\u5f0f\u76f8\u540c\uff1a from typing import Union from fastapi import ( Cookie , Depends , FastAPI , Query , WebSocket , WebSocketException , status , ) from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <form action=\"\" onsubmit=\"sendMessage(event)\"> <label>Item ID: <input type=\"text\" id=\"itemId\" autocomplete=\"off\" value=\"foo\"/></label> <label>Token: <input type=\"text\" id=\"token\" autocomplete=\"off\" value=\"some-key-token\"/></label> <button onclick=\"connect(event)\">Connect</button> <hr> <label>Message: <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/></label> <button>Send</button> </form> <ul id='messages'> </ul> <script> var ws = null; function connect(event) { var itemId = document.getElementById(\"itemId\") var token = document.getElementById(\"token\") ws = new WebSocket(\"ws://localhost:8000/items/\" + itemId.value + \"/ws?token=\" + token.value); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; event.preventDefault() } function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) async def get_cookie_or_token ( websocket : WebSocket , session : Union [ str , None ] = Cookie ( default = None ), token : Union [ str , None ] = Query ( default = None ), ): if session is None and token is None : raise WebSocketException ( code = status . WS_1008_POLICY_VIOLATION ) return session or token @app . websocket ( \"/items/ {item_id} /ws\" ) async def websocket_endpoint ( websocket : WebSocket , item_id : str , q : Union [ int , None ] = None , cookie_or_token : str = Depends ( get_cookie_or_token ), ): await websocket . accept () while True : data = await websocket . receive_text () await websocket . send_text ( f \"Session cookie or query token value is: { cookie_or_token } \" ) if q is not None : await websocket . send_text ( f \"Query parameter q is: { q } \" ) await websocket . send_text ( f \"Message text was: { data } , for item ID: { item_id } \" ) \u8bf4\u660e Websocket \u4e0d\u4f1a\u771f\u7684\u89e6\u53d1 HTTPException \uff0c\u56e0\u6b64\u6700\u597d\u76f4\u63a5\u5173\u95ed WebSocket \u8fde\u63a5\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 \u89c4\u8303\u5b9a\u4e49\u7684\u6709\u6548\u4ee3\u7801 \u4e2d\u7684\u5173\u95ed\u4ee3\u7801\u3002 \u4eca\u540e, \u8fd8\u6709\u53ef\u80fd\u6dfb\u52a0\u53ef\u5728\u4efb\u610f\u4f4d\u7f6e\u89e6\u53d1\u7684 WebSocketException \u53ca\u5176\u5f02\u5e38\u5904\u7406\u5668\u3002\u4f46\u8fd9\u4e9b\u90fd\u53d6\u51b3\u4e8e Starlette \u7684 PR #527 \u3002","title":"\u4f7f\u7528 Depends \u7b49\u51fd\u6570"},{"location":"advanced/websockets/#websocket_2","text":"\u5982\u679c\u6587\u4ef6\u540d\u4e3a main.py \uff0c\u5219\u4ee5\u5982\u4e0b\u547d\u4ee4\u8fd0\u884c\u670d\u52a1\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00\u6d4f\u89c8\u5668 http://127.0.0.1:8000\u3002 \u8bbe\u7f6e\uff1a Item ID , \u5728\u8def\u5f84\u4e2d\u4f7f\u7528 Token \uff0c\u7528\u4f5c\u67e5\u8be2\u53c2\u6570 \u63d0\u793a \u6ce8\u610f\uff0c\u67e5\u8be2 token \u7531\u4f9d\u8d56\u9879\u5904\u7406\u3002 \u4f7f\u7528\u8be5\u4f9d\u8d56\u9879\u53ef\u4ee5\u8fde\u63a5 WebSocket\uff0c\u7136\u540e\u53d1\u9001\u4e0e\u63a5\u6536\u4fe1\u606f\uff1a","title":"WebSocket \u4e0e\u4f9d\u8d56\u9879"},{"location":"advanced/websockets/#_4","text":"WebSocket \u8fde\u63a5\u5173\u95ed\u65f6\uff0c await websocket.receive_text() \u89e6\u53d1 WebSocketDisconnect \u5f02\u5e38\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u50cf\u672c\u4f8b\u4e00\u6837\u6355\u83b7\u548c\u5904\u7406\u5f02\u5e38\u3002 from typing import List from fastapi import FastAPI , WebSocket , WebSocketDisconnect from fastapi.responses import HTMLResponse app = FastAPI () html = \"\"\" <!DOCTYPE html> <html> <head> <title>Chat</title> </head> <body> <h1>WebSocket Chat</h1> <h2>Your ID: <span id=\"ws-id\"></span></h2> <form action=\"\" onsubmit=\"sendMessage(event)\"> <input type=\"text\" id=\"messageText\" autocomplete=\"off\"/> <button>Send</button> </form> <ul id='messages'> </ul> <script> var client_id = Date.now() document.querySelector(\"#ws-id\").textContent = client_id; var ws = new WebSocket(`ws://localhost:8000/ws/$ {client_id} `); ws.onmessage = function(event) { var messages = document.getElementById('messages') var message = document.createElement('li') var content = document.createTextNode(event.data) message.appendChild(content) messages.appendChild(message) }; function sendMessage(event) { var input = document.getElementById(\"messageText\") ws.send(input.value) input.value = '' event.preventDefault() } </script> </body> </html> \"\"\" class ConnectionManager : def __init__ ( self ): self . active_connections : List [ WebSocket ] = [] async def connect ( self , websocket : WebSocket ): await websocket . accept () self . active_connections . append ( websocket ) def disconnect ( self , websocket : WebSocket ): self . active_connections . remove ( websocket ) async def send_personal_message ( self , message : str , websocket : WebSocket ): await websocket . send_text ( message ) async def broadcast ( self , message : str ): for connection in self . active_connections : await connection . send_text ( message ) manager = ConnectionManager () @app . get ( \"/\" ) async def get (): return HTMLResponse ( html ) @app . websocket ( \"/ws/ {client_id} \" ) async def websocket_endpoint ( websocket : WebSocket , client_id : int ): await manager . connect ( websocket ) try : while True : data = await websocket . receive_text () await manager . send_personal_message ( f \"You wrote: { data } \" , websocket ) await manager . broadcast ( f \"Client # { client_id } says: { data } \" ) except WebSocketDisconnect : manager . disconnect ( websocket ) await manager . broadcast ( f \"Client # { client_id } left the chat\" ) \u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c\uff1a \u7528\u591a\u4e2a\u6d4f\u89c8\u5668\u6807\u7b7e\u9875\u6253\u5f00\u5e94\u7528 \u5728\u591a\u4e2a\u6807\u7b7e\u9875\u4e2d\u5199\u5165\u4fe1\u606f \u7136\u540e\u5173\u95ed\u5176\u4e2d\u4e00\u4e2a\u6807\u7b7e\u9875 \u6b64\u65f6\u4f1a\u89e6\u53d1 WebSocketDisconnect \u5f02\u5e38\uff0c\u5176\u4ed6\u5ba2\u6237\u7aef\u4f1a\u63a5\u6536\u5230\u5982\u4e0b\u4fe1\u606f\uff1a Client #1596980209979 left the chat \u63d0\u793a \u4e0a\u8ff0\u5e94\u7528\u662f\u6700\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u5982\u4f55\u5904\u7406\u4e0e\u5e7f\u64ad\u4fe1\u606f\u7ed9\u591a\u4e2a WebSocket \u8fde\u63a5\u3002 \u6ce8\u610f\uff0c\u6240\u6709\u64cd\u4f5c\u90fd\u662f\u5728\u5185\u5b58\u7684\u5355\u5217\u8868\u4e2d\u5904\u7406\uff0c\u56e0\u6b64\u5b83\u53ea\u5728\u8fdb\u7a0b\u8fd0\u884c\u65f6\u5de5\u4f5c\uff0c\u4e14\u53ea\u4f7f\u7528\u5355\u8fdb\u7a0b\u5de5\u4f5c\u3002 \u5982\u679c\u9700\u8981\u4e3a FastAPI \u96c6\u6210\u4e00\u4e9b\u7531 Redis\u3001PostgreSQL \u7b49\u6570\u636e\u5e93\u652f\u6301\u7684\u3001\u4e14\u66f4\u6210\u719f\u7a33\u5b9a\u7684\u529f\u80fd\uff0c\u8bf7\u53c2\u9605 \u7f16\u7801/\u5e7f\u64ad \u3002","title":"\u5904\u7406\u65ad\u5f00\u8fde\u63a5\u4e0e\u591a\u4e2a\u5ba2\u6237\u7aef"},{"location":"advanced/websockets/#_5","text":"\u66f4\u591a\u9009\u9879\u8be6\u89c1 Starlette \u6587\u6863\uff1a WebSocket \u7c7b \u57fa\u4e8e\u7c7b\u7684 WebSocket \u5904\u7406\u65b9\u5f0f","title":"\u66f4\u591a\u4fe1\u606f"},{"location":"advanced/wsgi/","text":"\u5305\u542b WSGI - Flask\u3001Django \u7b49 \u00b6 \u5728 FastAPI \u4e2d\u6302\u8f7d WSGI \u5e94\u7528\uff0c\u8981\u53c2\u7167 \u5b50\u5e94\u7528 - \u6302\u8f7d \u4e0e \u4f7f\u7528\u4ee3\u7406 \u4e24\u7ae0\u7684\u5185\u5bb9\u3002 \u6302\u8f7d WSGI \u5e94\u7528\u8981\u4f7f\u7528 WSGIMiddleware \uff0c\u5e76\u7528\u5b83\u6253\u5305 Flask\u3001Django \u7b49 WSGI \u5e94\u7528\u3002 \u4f7f\u7528 WSGIMiddleware \u00b6 \u5bfc\u5165 WSGIMiddleware \u3002 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u6253\u5305 Flask \u7b49 WSGI \u5e94\u7528\u3002 \u7136\u540e\uff0c\u5728\u8def\u5f84\u4e0b\u6302\u8f7d\u8be5\u5e94\u7528\u3002 from fastapi import FastAPI from fastapi.middleware.wsgi import WSGIMiddleware from flask import Flask , escape , request flask_app = Flask ( __name__ ) @flask_app . route ( \"/\" ) def flask_main (): name = request . args . get ( \"name\" , \"World\" ) return f \"Hello, { escape ( name ) } from Flask!\" app = FastAPI () @app . get ( \"/v2\" ) def read_main (): return { \"message\" : \"Hello World\" } app . mount ( \"/v1\" , WSGIMiddleware ( flask_app )) \u67e5\u770b\u6587\u6863 \u00b6 \u73b0\u5728\uff0c\u5c31\u80fd\u7528 Flask \u5e94\u7528\u5904\u7406 /v1/ \u8def\u5f84\u4e0b\u7684\u6bcf\u4e2a\u8bf7\u6c42\u3002 \u5176\u4f59\u7684\u4e8b\u60c5\u5219\u7531 FastAPI \u5904\u7406\u3002 \u8fd0\u884c Uvicorn \u5e76\u6253\u5f00 http://localhost:8000/v1/ \uff0c\u67e5\u770b\u6765\u81ea Flask \u7684\u54cd\u5e94\uff1a Hello, World from Flask! \u6253\u5f00 http://localhost:8000/v2 \uff0c\u67e5\u770b\u6765\u81ea FastAPI \u7684\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" }","title":"\u5305\u542b WSGI - Flask\u3001Django \u7b49"},{"location":"advanced/wsgi/#wsgi-flaskdjango","text":"\u5728 FastAPI \u4e2d\u6302\u8f7d WSGI \u5e94\u7528\uff0c\u8981\u53c2\u7167 \u5b50\u5e94\u7528 - \u6302\u8f7d \u4e0e \u4f7f\u7528\u4ee3\u7406 \u4e24\u7ae0\u7684\u5185\u5bb9\u3002 \u6302\u8f7d WSGI \u5e94\u7528\u8981\u4f7f\u7528 WSGIMiddleware \uff0c\u5e76\u7528\u5b83\u6253\u5305 Flask\u3001Django \u7b49 WSGI \u5e94\u7528\u3002","title":"\u5305\u542b WSGI - Flask\u3001Django \u7b49"},{"location":"advanced/wsgi/#wsgimiddleware","text":"\u5bfc\u5165 WSGIMiddleware \u3002 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u6253\u5305 Flask \u7b49 WSGI \u5e94\u7528\u3002 \u7136\u540e\uff0c\u5728\u8def\u5f84\u4e0b\u6302\u8f7d\u8be5\u5e94\u7528\u3002 from fastapi import FastAPI from fastapi.middleware.wsgi import WSGIMiddleware from flask import Flask , escape , request flask_app = Flask ( __name__ ) @flask_app . route ( \"/\" ) def flask_main (): name = request . args . get ( \"name\" , \"World\" ) return f \"Hello, { escape ( name ) } from Flask!\" app = FastAPI () @app . get ( \"/v2\" ) def read_main (): return { \"message\" : \"Hello World\" } app . mount ( \"/v1\" , WSGIMiddleware ( flask_app ))","title":"\u4f7f\u7528 WSGIMiddleware"},{"location":"advanced/wsgi/#_1","text":"\u73b0\u5728\uff0c\u5c31\u80fd\u7528 Flask \u5e94\u7528\u5904\u7406 /v1/ \u8def\u5f84\u4e0b\u7684\u6bcf\u4e2a\u8bf7\u6c42\u3002 \u5176\u4f59\u7684\u4e8b\u60c5\u5219\u7531 FastAPI \u5904\u7406\u3002 \u8fd0\u884c Uvicorn \u5e76\u6253\u5f00 http://localhost:8000/v1/ \uff0c\u67e5\u770b\u6765\u81ea Flask \u7684\u54cd\u5e94\uff1a Hello, World from Flask! \u6253\u5f00 http://localhost:8000/v2 \uff0c\u67e5\u770b\u6765\u81ea FastAPI \u7684\u54cd\u5e94\uff1a { \"message\" : \"Hello World\" }","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/security/","text":"\u9ad8\u7ea7\u5b89\u5168 - \u7b80\u4ecb \u00b6 \u66f4\u591a\u529f\u80fd \u00b6 \u9664\u4e86 \u7528\u6237\u6307\u5357\uff1a\u5b89\u5168 \u4e2d\u7684\u5b89\u5168\u673a\u5236\u4e4b\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u5904\u7406\u5b89\u5168\u7684\u529f\u80fd\u3002 \u63d0\u793a \u540e\u7eed\u51e0\u7ae0 \u5e76\u6ca1\u6709\u90a3\u4e48\u9ad8\u6df1 \u3002 \u4f46\u5728\u9047\u5230\u7c7b\u4f3c\u7684\u7528\u4f8b\u65f6\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u6216\u8bb8\u4f1a\u7528\u5f97\u4e0a\u3002 \u8bf7\u5148\u9605\u8bfb\u6559\u7a0b \u00b6 \u8981\u5b66\u4e60\u4ee5\u4e0b\u51e0\u7ae0\uff0c\u8bf7\u5148\u5b66\u4e60 \u7528\u6237\u6307\u5357\uff1a\u5b89\u5168 \u4e2d\u7684\u5185\u5bb9\u3002 \u4ee5\u4e0b\u51e0\u7ae0\u7684\u5185\u5bb9\u57fa\u4e8e\u4e0e\u7528\u6237\u6307\u5357\u4e2d\u76f8\u540c\u7684\u6982\u5ff5\uff0c\u53ea\u662f\u652f\u6301\u66f4\u591a\u529f\u80fd\u3002","title":"\u9ad8\u7ea7\u5b89\u5168 - \u7b80\u4ecb"},{"location":"advanced/security/#-","text":"","title":"\u9ad8\u7ea7\u5b89\u5168 - \u7b80\u4ecb"},{"location":"advanced/security/#_1","text":"\u9664\u4e86 \u7528\u6237\u6307\u5357\uff1a\u5b89\u5168 \u4e2d\u7684\u5b89\u5168\u673a\u5236\u4e4b\u5916\uff0c\u8fd8\u6709\u5f88\u591a\u5904\u7406\u5b89\u5168\u7684\u529f\u80fd\u3002 \u63d0\u793a \u540e\u7eed\u51e0\u7ae0 \u5e76\u6ca1\u6709\u90a3\u4e48\u9ad8\u6df1 \u3002 \u4f46\u5728\u9047\u5230\u7c7b\u4f3c\u7684\u7528\u4f8b\u65f6\uff0c\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u6216\u8bb8\u4f1a\u7528\u5f97\u4e0a\u3002","title":"\u66f4\u591a\u529f\u80fd"},{"location":"advanced/security/#_2","text":"\u8981\u5b66\u4e60\u4ee5\u4e0b\u51e0\u7ae0\uff0c\u8bf7\u5148\u5b66\u4e60 \u7528\u6237\u6307\u5357\uff1a\u5b89\u5168 \u4e2d\u7684\u5185\u5bb9\u3002 \u4ee5\u4e0b\u51e0\u7ae0\u7684\u5185\u5bb9\u57fa\u4e8e\u4e0e\u7528\u6237\u6307\u5357\u4e2d\u76f8\u540c\u7684\u6982\u5ff5\uff0c\u53ea\u662f\u652f\u6301\u66f4\u591a\u529f\u80fd\u3002","title":"\u8bf7\u5148\u9605\u8bfb\u6559\u7a0b"},{"location":"advanced/security/http-basic-auth/","text":"HTTP \u57fa\u7840\u6388\u6743 \u00b6 \u6700\u7b80\u5355\u7684\u7528\u4f8b\u662f\u4f7f\u7528 HTTP \u57fa\u7840\u6388\u6743\uff08HTTP Basic Auth\uff09\u3002 \u5728 HTTP \u57fa\u7840\u6388\u6743\u4e2d\uff0c\u5e94\u7528\u9700\u8981\u8bf7\u6c42\u5934\u5305\u542b\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 \u5982\u679c\u6ca1\u6709\u63a5\u6536\u5230 HTTP \u57fa\u7840\u6388\u6743\uff0c\u5c31\u8fd4\u56de HTTP 401 \"Unauthorized\" \u9519\u8bef\u3002 \u5e76\u8fd4\u56de\u542b Basic \u503c\u7684\u8bf7\u6c42\u5934 WWW-Authenticate \u4ee5\u53ca\u53ef\u9009\u7684 realm \u53c2\u6570\u3002 HTTP \u57fa\u7840\u6388\u6743\u8ba9\u6d4f\u89c8\u5668\u663e\u793a\u5185\u7f6e\u7684\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u63d0\u793a\u3002 \u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u540e\uff0c\u6d4f\u89c8\u5668\u4f1a\u628a\u5b83\u4eec\u81ea\u52a8\u53d1\u9001\u81f3\u8bf7\u6c42\u5934\u3002 \u7b80\u5355\u7684 HTTP \u57fa\u7840\u6388\u6743 \u00b6 \u5bfc\u5165 HTTPBasic \u4e0e HTTPBasicCredentials \u4f7f\u7528 HTTPBasic \u521b\u5efa \u5b89\u5168\u6982\u56fe \u5728 \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528 security \u8fd4\u56de\u7c7b\u578b\u4e3a HTTPBasicCredentials \u7684\u5bf9\u8c61\uff1a \u5305\u542b\u53d1\u9001\u7684 username \u4e0e password from fastapi import Depends , FastAPI from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () @app . get ( \"/users/me\" ) def read_current_user ( credentials : HTTPBasicCredentials = Depends ( security )): return { \"username\" : credentials . username , \"password\" : credentials . password } \u7b2c\u4e00\u6b21\u6253\u5f00 URL\uff08\u6216\u5728 API \u6587\u6863\u4e2d\u70b9\u51fb Execute \u6309\u94ae\uff09\u65f6\uff0c\u6d4f\u89c8\u5668\u8981\u6c42\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff1a \u68c0\u67e5\u7528\u6237\u540d \u00b6 \u4ee5\u4e0b\u662f\u66f4\u5b8c\u6574\u7684\u793a\u4f8b\u3002 \u4f7f\u7528\u4f9d\u8d56\u9879\u68c0\u67e5\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u662f\u5426\u6b63\u786e\u3002 \u4e3a\u6b64\u8981\u4f7f\u7528 Python \u6807\u51c6\u6a21\u5757 secrets \u68c0\u67e5\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff1a import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): current_username_bytes = credentials . username . encode ( \"utf8\" ) correct_username_bytes = b \"stanleyjobson\" is_correct_username = secrets . compare_digest ( current_username_bytes , correct_username_bytes ) current_password_bytes = credentials . password . encode ( \"utf8\" ) correct_password_bytes = b \"swordfish\" is_correct_password = secrets . compare_digest ( current_password_bytes , correct_password_bytes ) if not ( is_correct_username and is_correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username } \u8fd9\u6bb5\u4ee3\u7801\u786e\u4fdd credentials.username \u662f \"stanleyjobson\" \uff0c\u4e14 credentials.password \u662f \"swordfish\" \u3002\u4e0e\u4ee5\u4e0b\u4ee3\u7801\u7c7b\u4f3c\uff1a if not ( credentials . username == \"stanleyjobson\" ) or not ( credentials . password == \"swordfish\" ): # Return some error ... \u4f46\u4f7f\u7528 secrets.compare_digest() \u53ef\u4ee5\u9632\u5fa1 \u65f6\u5dee\u653b\u51fb \uff0c\u66f4\u5b89\u5168\u3002 \u65f6\u5dee\u653b\u51fb \u00b6 \u4ec0\u4e48\u662f \u65f6\u5dee\u653b\u51fb \uff1f \u5047\u8bbe\u653b\u51fb\u8005\u8bd5\u56fe\u731c\u51fa\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 \u4ed6\u4eec\u53d1\u9001\u7528\u6237\u540d\u4e3a johndoe \uff0c\u5bc6\u7801\u4e3a love123 \u7684\u8bf7\u6c42\u3002 \u7136\u540e\uff0cPython \u4ee3\u7801\u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... \u4f46\u5c31\u5728 Python \u6bd4\u8f83\u5b8c johndoe \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd j \u4e0e stanleyjobson \u7684 s \u65f6\uff0cPython \u5c31\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u76f8\u540c\u4e86\uff0c\u5b83\u4f1a\u8fd9\u4e48\u60f3\uff0c \u6ca1\u5fc5\u8981\u6d6a\u8d39\u66f4\u591a\u65f6\u95f4\u6267\u884c\u5269\u4f59\u5b57\u6bcd\u7684\u5bf9\u6bd4\u8ba1\u7b97\u4e86 \u3002\u5e94\u7528\u7acb\u523b\u5c31\u4f1a\u8fd4\u56de \u9519\u8bef\u7684\u7528\u6237\u6216\u5bc6\u7801 \u3002 \u4f46\u63a5\u4e0b\u6765\uff0c\u653b\u51fb\u8005\u7ee7\u7eed\u5c1d\u8bd5 stanleyjobsox \u548c \u5bc6\u7801 love123 \u3002 \u5e94\u7528\u4ee3\u7801\u4f1a\u6267\u884c\u7c7b\u4f3c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... \u6b64\u65f6\uff0cPython \u8981\u5bf9\u6bd4 stanleyjobsox \u4e0e stanleyjobson \u4e2d\u7684 stanleyjobso \uff0c\u624d\u80fd\u77e5\u9053\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4e00\u6837\u3002\u56e0\u6b64\u4f1a\u591a\u82b1\u8d39\u51e0\u5fae\u79d2\u6765\u8fd4\u56de \u9519\u8bef\u7684\u7528\u6237\u6216\u5bc6\u7801 \u3002 \u53cd\u5e94\u65f6\u95f4\u5bf9\u653b\u51fb\u8005\u7684\u5e2e\u52a9 \u00b6 \u901a\u8fc7\u670d\u52a1\u5668\u82b1\u8d39\u4e86\u66f4\u591a\u5fae\u79d2\u624d\u53d1\u9001 \u9519\u8bef\u7684\u7528\u6237\u6216\u5bc6\u7801 \u54cd\u5e94\uff0c\u653b\u51fb\u8005\u4f1a\u77e5\u9053\u731c\u5bf9\u4e86\u4e00\u4e9b\u5185\u5bb9\uff0c\u8d77\u7801\u5f00\u5934\u5b57\u6bcd\u662f\u6b63\u786e\u7684\u3002 \u7136\u540e\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u653e\u5f03 johndoe \uff0c\u518d\u7528\u7c7b\u4f3c stanleyjobsox \u7684\u5185\u5bb9\u8fdb\u884c\u5c1d\u8bd5\u3002 \u4e13\u4e1a \u653b\u51fb \u00b6 \u5f53\u7136\uff0c\u653b\u51fb\u8005\u4e0d\u7528\u624b\u52a8\u64cd\u4f5c\uff0c\u800c\u662f\u7f16\u5199\u6bcf\u79d2\u80fd\u6267\u884c\u6210\u5343\u4e0a\u4e07\u6b21\u6d4b\u8bd5\u7684\u653b\u51fb\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u90fd\u4f1a\u627e\u5230\u66f4\u591a\u6b63\u786e\u5b57\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u60a8\u7684\u5e94\u7528\u7684 \u5e2e\u52a9 \u4e0b\uff0c\u653b\u51fb\u8005\u5229\u7528\u65f6\u95f4\u5dee\uff0c\u5c31\u80fd\u5728\u51e0\u5206\u949f\u6216\u51e0\u5c0f\u65f6\u5185\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u731c\u51fa\u6b63\u786e\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002 \u4f7f\u7528 secrets.compare_digest() \u4fee\u8865 \u00b6 \u5728\u6b64\uff0c\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 secrets.compare_digest() \u3002 \u7b80\u5355\u7684\u8bf4\uff0c\u5b83\u4f7f\u7528\u76f8\u540c\u7684\u65f6\u95f4\u5bf9\u6bd4 stanleyjobsox \u548c stanleyjobson \uff0c\u8fd8\u6709 johndoe \u548c stanleyjobson \u3002\u5bf9\u6bd4\u5bc6\u7801\u65f6\u4e5f\u4e00\u6837\u3002 \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 secrets.compare_digest() \uff0c\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u9632\u5fa1\u5168\u9762\u653b\u51fb\u4e86\u3002 \u8fd4\u56de\u9519\u8bef \u00b6 \u68c0\u6d4b\u5230\u51ed\u8bc1\u4e0d\u6b63\u786e\u540e\uff0c\u8fd4\u56de HTTPException \u53ca\u72b6\u6001\u7801 401\uff08\u4e0e\u65e0\u51ed\u8bc1\u65f6\u8fd4\u56de\u7684\u5185\u5bb9\u4e00\u6837\uff09\uff0c\u5e76\u6dfb\u52a0\u8bf7\u6c42\u5934 WWW-Authenticate \uff0c\u8ba9\u6d4f\u89c8\u5668\u518d\u6b21\u663e\u793a\u767b\u5f55\u63d0\u793a\uff1a import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): current_username_bytes = credentials . username . encode ( \"utf8\" ) correct_username_bytes = b \"stanleyjobson\" is_correct_username = secrets . compare_digest ( current_username_bytes , correct_username_bytes ) current_password_bytes = credentials . password . encode ( \"utf8\" ) correct_password_bytes = b \"swordfish\" is_correct_password = secrets . compare_digest ( current_password_bytes , correct_password_bytes ) if not ( is_correct_username and is_correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username }","title":"HTTP \u57fa\u7840\u6388\u6743"},{"location":"advanced/security/http-basic-auth/#http","text":"\u6700\u7b80\u5355\u7684\u7528\u4f8b\u662f\u4f7f\u7528 HTTP \u57fa\u7840\u6388\u6743\uff08HTTP Basic Auth\uff09\u3002 \u5728 HTTP \u57fa\u7840\u6388\u6743\u4e2d\uff0c\u5e94\u7528\u9700\u8981\u8bf7\u6c42\u5934\u5305\u542b\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 \u5982\u679c\u6ca1\u6709\u63a5\u6536\u5230 HTTP \u57fa\u7840\u6388\u6743\uff0c\u5c31\u8fd4\u56de HTTP 401 \"Unauthorized\" \u9519\u8bef\u3002 \u5e76\u8fd4\u56de\u542b Basic \u503c\u7684\u8bf7\u6c42\u5934 WWW-Authenticate \u4ee5\u53ca\u53ef\u9009\u7684 realm \u53c2\u6570\u3002 HTTP \u57fa\u7840\u6388\u6743\u8ba9\u6d4f\u89c8\u5668\u663e\u793a\u5185\u7f6e\u7684\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u63d0\u793a\u3002 \u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u540e\uff0c\u6d4f\u89c8\u5668\u4f1a\u628a\u5b83\u4eec\u81ea\u52a8\u53d1\u9001\u81f3\u8bf7\u6c42\u5934\u3002","title":"HTTP \u57fa\u7840\u6388\u6743"},{"location":"advanced/security/http-basic-auth/#http_1","text":"\u5bfc\u5165 HTTPBasic \u4e0e HTTPBasicCredentials \u4f7f\u7528 HTTPBasic \u521b\u5efa \u5b89\u5168\u6982\u56fe \u5728 \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528 security \u8fd4\u56de\u7c7b\u578b\u4e3a HTTPBasicCredentials \u7684\u5bf9\u8c61\uff1a \u5305\u542b\u53d1\u9001\u7684 username \u4e0e password from fastapi import Depends , FastAPI from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () @app . get ( \"/users/me\" ) def read_current_user ( credentials : HTTPBasicCredentials = Depends ( security )): return { \"username\" : credentials . username , \"password\" : credentials . password } \u7b2c\u4e00\u6b21\u6253\u5f00 URL\uff08\u6216\u5728 API \u6587\u6863\u4e2d\u70b9\u51fb Execute \u6309\u94ae\uff09\u65f6\uff0c\u6d4f\u89c8\u5668\u8981\u6c42\u8f93\u5165\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff1a","title":"\u7b80\u5355\u7684 HTTP \u57fa\u7840\u6388\u6743"},{"location":"advanced/security/http-basic-auth/#_1","text":"\u4ee5\u4e0b\u662f\u66f4\u5b8c\u6574\u7684\u793a\u4f8b\u3002 \u4f7f\u7528\u4f9d\u8d56\u9879\u68c0\u67e5\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u662f\u5426\u6b63\u786e\u3002 \u4e3a\u6b64\u8981\u4f7f\u7528 Python \u6807\u51c6\u6a21\u5757 secrets \u68c0\u67e5\u7528\u6237\u540d\u4e0e\u5bc6\u7801\uff1a import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): current_username_bytes = credentials . username . encode ( \"utf8\" ) correct_username_bytes = b \"stanleyjobson\" is_correct_username = secrets . compare_digest ( current_username_bytes , correct_username_bytes ) current_password_bytes = credentials . password . encode ( \"utf8\" ) correct_password_bytes = b \"swordfish\" is_correct_password = secrets . compare_digest ( current_password_bytes , correct_password_bytes ) if not ( is_correct_username and is_correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username } \u8fd9\u6bb5\u4ee3\u7801\u786e\u4fdd credentials.username \u662f \"stanleyjobson\" \uff0c\u4e14 credentials.password \u662f \"swordfish\" \u3002\u4e0e\u4ee5\u4e0b\u4ee3\u7801\u7c7b\u4f3c\uff1a if not ( credentials . username == \"stanleyjobson\" ) or not ( credentials . password == \"swordfish\" ): # Return some error ... \u4f46\u4f7f\u7528 secrets.compare_digest() \u53ef\u4ee5\u9632\u5fa1 \u65f6\u5dee\u653b\u51fb \uff0c\u66f4\u5b89\u5168\u3002","title":"\u68c0\u67e5\u7528\u6237\u540d"},{"location":"advanced/security/http-basic-auth/#_2","text":"\u4ec0\u4e48\u662f \u65f6\u5dee\u653b\u51fb \uff1f \u5047\u8bbe\u653b\u51fb\u8005\u8bd5\u56fe\u731c\u51fa\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 \u4ed6\u4eec\u53d1\u9001\u7528\u6237\u540d\u4e3a johndoe \uff0c\u5bc6\u7801\u4e3a love123 \u7684\u8bf7\u6c42\u3002 \u7136\u540e\uff0cPython \u4ee3\u7801\u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a if \"johndoe\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... \u4f46\u5c31\u5728 Python \u6bd4\u8f83\u5b8c johndoe \u7684\u7b2c\u4e00\u4e2a\u5b57\u6bcd j \u4e0e stanleyjobson \u7684 s \u65f6\uff0cPython \u5c31\u5df2\u7ecf\u77e5\u9053\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u76f8\u540c\u4e86\uff0c\u5b83\u4f1a\u8fd9\u4e48\u60f3\uff0c \u6ca1\u5fc5\u8981\u6d6a\u8d39\u66f4\u591a\u65f6\u95f4\u6267\u884c\u5269\u4f59\u5b57\u6bcd\u7684\u5bf9\u6bd4\u8ba1\u7b97\u4e86 \u3002\u5e94\u7528\u7acb\u523b\u5c31\u4f1a\u8fd4\u56de \u9519\u8bef\u7684\u7528\u6237\u6216\u5bc6\u7801 \u3002 \u4f46\u63a5\u4e0b\u6765\uff0c\u653b\u51fb\u8005\u7ee7\u7eed\u5c1d\u8bd5 stanleyjobsox \u548c \u5bc6\u7801 love123 \u3002 \u5e94\u7528\u4ee3\u7801\u4f1a\u6267\u884c\u7c7b\u4f3c\u4e0b\u9762\u7684\u64cd\u4f5c\uff1a if \"stanleyjobsox\" == \"stanleyjobson\" and \"love123\" == \"swordfish\" : ... \u6b64\u65f6\uff0cPython \u8981\u5bf9\u6bd4 stanleyjobsox \u4e0e stanleyjobson \u4e2d\u7684 stanleyjobso \uff0c\u624d\u80fd\u77e5\u9053\u8fd9\u4e24\u4e2a\u5b57\u7b26\u4e32\u4e0d\u4e00\u6837\u3002\u56e0\u6b64\u4f1a\u591a\u82b1\u8d39\u51e0\u5fae\u79d2\u6765\u8fd4\u56de \u9519\u8bef\u7684\u7528\u6237\u6216\u5bc6\u7801 \u3002","title":"\u65f6\u5dee\u653b\u51fb"},{"location":"advanced/security/http-basic-auth/#_3","text":"\u901a\u8fc7\u670d\u52a1\u5668\u82b1\u8d39\u4e86\u66f4\u591a\u5fae\u79d2\u624d\u53d1\u9001 \u9519\u8bef\u7684\u7528\u6237\u6216\u5bc6\u7801 \u54cd\u5e94\uff0c\u653b\u51fb\u8005\u4f1a\u77e5\u9053\u731c\u5bf9\u4e86\u4e00\u4e9b\u5185\u5bb9\uff0c\u8d77\u7801\u5f00\u5934\u5b57\u6bcd\u662f\u6b63\u786e\u7684\u3002 \u7136\u540e\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u653e\u5f03 johndoe \uff0c\u518d\u7528\u7c7b\u4f3c stanleyjobsox \u7684\u5185\u5bb9\u8fdb\u884c\u5c1d\u8bd5\u3002","title":"\u53cd\u5e94\u65f6\u95f4\u5bf9\u653b\u51fb\u8005\u7684\u5e2e\u52a9"},{"location":"advanced/security/http-basic-auth/#_4","text":"\u5f53\u7136\uff0c\u653b\u51fb\u8005\u4e0d\u7528\u624b\u52a8\u64cd\u4f5c\uff0c\u800c\u662f\u7f16\u5199\u6bcf\u79d2\u80fd\u6267\u884c\u6210\u5343\u4e0a\u4e07\u6b21\u6d4b\u8bd5\u7684\u653b\u51fb\u7a0b\u5e8f\uff0c\u6bcf\u6b21\u90fd\u4f1a\u627e\u5230\u66f4\u591a\u6b63\u786e\u5b57\u7b26\u3002 \u4f46\u662f\uff0c\u5728\u60a8\u7684\u5e94\u7528\u7684 \u5e2e\u52a9 \u4e0b\uff0c\u653b\u51fb\u8005\u5229\u7528\u65f6\u95f4\u5dee\uff0c\u5c31\u80fd\u5728\u51e0\u5206\u949f\u6216\u51e0\u5c0f\u65f6\u5185\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u731c\u51fa\u6b63\u786e\u7684\u7528\u6237\u540d\u548c\u5bc6\u7801\u3002","title":"\u4e13\u4e1a\u653b\u51fb"},{"location":"advanced/security/http-basic-auth/#secretscompare_digest","text":"\u5728\u6b64\uff0c\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86 secrets.compare_digest() \u3002 \u7b80\u5355\u7684\u8bf4\uff0c\u5b83\u4f7f\u7528\u76f8\u540c\u7684\u65f6\u95f4\u5bf9\u6bd4 stanleyjobsox \u548c stanleyjobson \uff0c\u8fd8\u6709 johndoe \u548c stanleyjobson \u3002\u5bf9\u6bd4\u5bc6\u7801\u65f6\u4e5f\u4e00\u6837\u3002 \u5728\u4ee3\u7801\u4e2d\u4f7f\u7528 secrets.compare_digest() \uff0c\u5c31\u53ef\u4ee5\u5b89\u5168\u5730\u9632\u5fa1\u5168\u9762\u653b\u51fb\u4e86\u3002","title":"\u4f7f\u7528 secrets.compare_digest() \u4fee\u8865"},{"location":"advanced/security/http-basic-auth/#_5","text":"\u68c0\u6d4b\u5230\u51ed\u8bc1\u4e0d\u6b63\u786e\u540e\uff0c\u8fd4\u56de HTTPException \u53ca\u72b6\u6001\u7801 401\uff08\u4e0e\u65e0\u51ed\u8bc1\u65f6\u8fd4\u56de\u7684\u5185\u5bb9\u4e00\u6837\uff09\uff0c\u5e76\u6dfb\u52a0\u8bf7\u6c42\u5934 WWW-Authenticate \uff0c\u8ba9\u6d4f\u89c8\u5668\u518d\u6b21\u663e\u793a\u767b\u5f55\u63d0\u793a\uff1a import secrets from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import HTTPBasic , HTTPBasicCredentials app = FastAPI () security = HTTPBasic () def get_current_username ( credentials : HTTPBasicCredentials = Depends ( security )): current_username_bytes = credentials . username . encode ( \"utf8\" ) correct_username_bytes = b \"stanleyjobson\" is_correct_username = secrets . compare_digest ( current_username_bytes , correct_username_bytes ) current_password_bytes = credentials . password . encode ( \"utf8\" ) correct_password_bytes = b \"swordfish\" is_correct_password = secrets . compare_digest ( current_password_bytes , correct_password_bytes ) if not ( is_correct_username and is_correct_password ): raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect email or password\" , headers = { \"WWW-Authenticate\" : \"Basic\" }, ) return credentials . username @app . get ( \"/users/me\" ) def read_current_user ( username : str = Depends ( get_current_username )): return { \"username\" : username }","title":"\u8fd4\u56de\u9519\u8bef"},{"location":"advanced/security/oauth2-scopes/","text":"OAuth2 \u4f5c\u7528\u57df \u00b6 FastAPI \u65e0\u7f1d\u96c6\u6210 OAuth2 \u4f5c\u7528\u57df\uff08 Scopes \uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u4f5c\u7528\u57df\u662f\u66f4\u7cbe\u5bc6\u7684\u6743\u9650\u7cfb\u7edf\uff0c\u9075\u5faa OAuth2 \u6807\u51c6\uff0c\u4e0e OpenAPI \u5e94\u7528\uff08\u548c API \u81ea\u52a8\u6587\u6863\uff09\u96c6\u6210\u3002 OAuth2 \u4e5f\u662f\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub\u3001\u5fae\u8f6f\u3001\u63a8\u7279\u7b49\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u4f7f\u7528\u7684\u673a\u5236\u3002\u8fd9\u4e9b\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u5728\u7528\u6237\u767b\u5f55\u5e94\u7528\u65f6\u4f7f\u7528 OAuth2 \u63d0\u4f9b\u6307\u5b9a\u6743\u9650\u3002 \u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub\u3001\u5fae\u8f6f\u3001\u63a8\u7279\u5c31\u662f\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\u767b\u5f55\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u5728 FastAPI \u5e94\u7528\u4e2d\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\u7ba1\u7406\u9a8c\u8bc1\u4e0e\u6388\u6743\u3002 \u8b66\u544a \u672c\u7ae0\u5185\u5bb9\u8f83\u96be\uff0c\u521a\u63a5\u89e6 FastAPI \u7684\u65b0\u624b\u53ef\u4ee5\u8df3\u8fc7\u3002 OAuth2 \u4f5c\u7528\u57df\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u6ca1\u6709\u5b83\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u4e0e\u6388\u6743\u3002 \u4f46 OAuth2 \u4f5c\u7528\u57df\u4e0e API\uff08\u901a\u8fc7 OpenAPI\uff09\u53ca API \u6587\u6863\u96c6\u6210\u5730\u66f4\u597d\u3002 \u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c FastAPI \u652f\u6301\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u6216\u5176\u4ed6\u5b89\u5168/\u6388\u6743\u9700\u6c42\u9879\u3002 \u5f88\u591a\u60c5\u51b5\u4e0b\uff0cOAuth2 \u4f5c\u7528\u57df\u5c31\u50cf\u4e00\u628a\u725b\u5200\u3002 \u4f46\u5982\u679c\u60a8\u786e\u5b9a\u8981\u4f7f\u7528\u4f5c\u7528\u57df\uff0c\u6216\u5bf9\u5b83\u6709\u5174\u8da3\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002 OAuth2 \u4f5c\u7528\u57df\u4e0e OpenAPI \u00b6 OAuth2 \u89c4\u8303\u7684 \u4f5c\u7528\u57df \u662f\u7531\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5217\u8868\u3002 \u8fd9\u4e9b\u5b57\u7b26\u4e32\u652f\u6301\u4efb\u4f55\u683c\u5f0f\uff0c\u4f46\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\u3002 \u4f5c\u7528\u57df\u8868\u793a\u7684\u662f \u6743\u9650 \u3002 OpenAPI \u4e2d\uff08\u4f8b\u5982 API \u6587\u6863\uff09\u53ef\u4ee5\u5b9a\u4e49 \u5b89\u5168\u65b9\u6848 \u3002 \u8fd9\u4e9b\u5b89\u5168\u65b9\u6848\u5728\u4f7f\u7528 OAuth2 \u65f6\uff0c\u8fd8\u53ef\u4ee5\u58f0\u660e\u548c\u4f7f\u7528\u4f5c\u7528\u57df\u3002 \u4f5c\u7528\u57df \u53ea\u662f\uff08\u4e0d\u5e26\u7a7a\u683c\u7684\uff09\u5b57\u7b26\u4e32\u3002 \u5e38\u7528\u4e8e\u58f0\u660e\u7279\u5b9a\u5b89\u5168\u6743\u9650\uff0c\u4f8b\u5982\uff1a \u5e38\u89c1\u7528\u4f8b\u4e3a\uff0c users:read \u6216 users:write \u8138\u4e66\u548c Instagram \u4f7f\u7528 instagram_basic \u8c37\u6b4c\u4f7f\u7528 https://www.googleapis.com/auth/drive \u8bf4\u660e OAuth2 \u4e2d\uff0c \u4f5c\u7528\u57df \u53ea\u662f\u58f0\u660e\u7279\u5b9a\u6743\u9650\u7684\u5b57\u7b26\u4e32\u3002 \u662f\u5426\u4f7f\u7528\u5192\u53f7 : \u7b49\u7b26\u53f7\uff0c\u6216\u8005\u662f\u4e0d\u662f URL \u5e76\u4e0d\u91cd\u8981\u3002 \u8fd9\u4e9b\u7ec6\u8282\u53ea\u662f\u7279\u5b9a\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u5bf9 OAuth2 \u6765\u8bf4\uff0c\u5b83\u4eec\u90fd\u53ea\u662f\u5b57\u7b26\u4e32\u800c\u5df2\u3002 \u5168\u5c40\u7eb5\u89c8 \u00b6 \u9996\u5148\uff0c\u5feb\u901f\u6d4f\u89c8\u4e00\u4e0b\u4ee5\u4e0b\u4ee3\u7801\u4e0e \u7528\u6237\u6307\u5357 \u4e2d OAuth2 \u5b9e\u73b0\u5bc6\u7801\u54c8\u5e0c\u4e0e Bearer + JWT Token \u9a8c\u8bc1 \u4e00\u7ae0\u4e2d\u4ee3\u7801\u7684\u533a\u522b\u3002\u4ee5\u4e0b\u4ee3\u7801\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\uff1a from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u4e0b\u9762\uff0c\u6211\u4eec\u9010\u6b65\u8bf4\u660e\u4fee\u6539\u7684\u4ee3\u7801\u5185\u5bb9\u3002 OAuth2 \u5b89\u5168\u65b9\u6848 \u00b6 \u7b2c\u4e00\u4e2a\u4fee\u6539\u7684\u5730\u65b9\u662f\uff0c\u4f7f\u7528\u4e24\u4e2a\u4f5c\u7528\u57df me \u548c items \u58f0\u660e OAuth2 \u5b89\u5168\u65b9\u6848\u3002 scopes \u53c2\u6570\u63a5\u6536 \u5b57\u5178 \uff0c\u952e\u662f\u4f5c\u7528\u57df\u3001\u503c\u662f\u4f5c\u7528\u57df\u7684\u63cf\u8ff0\uff1a from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u56e0\u4e3a\u58f0\u660e\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u767b\u5f55\u6216\u6388\u6743\u65f6\u4f1a\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u3002 \u6b64\u5904\uff0c\u9009\u62e9\u7ed9\u4e88\u8bbf\u95ee\u6743\u9650\u7684\u4f5c\u7528\u57df\uff1a me \u548c items \u3002 \u8fd9\u4e5f\u662f\u4f7f\u7528\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub \u767b\u5f55\u65f6\u7684\u6388\u6743\u673a\u5236\u3002 JWT Token \u4f5c\u7528\u57df \u00b6 \u73b0\u5728\uff0c\u4fee\u6539 Token \u8def\u5f84\u64cd\u4f5c\uff0c\u8fd4\u56de\u8bf7\u6c42\u7684\u4f5c\u7528\u57df\u3002 \u6b64\u5904\u4ecd\u7136\u4f7f\u7528 OAuth2PasswordRequestForm \u3002\u5b83\u5305\u542b\u7c7b\u578b\u4e3a \u5b57\u7b26\u4e32\u5217\u8868 \u7684 scopes \u5c5e\u6027\uff0c\u4e14 scopes \u5c5e\u6027\u4e2d\u5305\u542b\u8981\u5728\u8bf7\u6c42\u91cc\u63a5\u6536\u7684\u6bcf\u4e2a\u4f5c\u7528\u57df\u3002 \u8fd9\u6837\uff0c\u8fd4\u56de\u7684 JWT Token \u4e2d\u5c31\u5305\u542b\u4e86\u4f5c\u7528\u57df\u3002 \u5371\u9669 \u4e3a\u4e86\u7b80\u660e\u8d77\u89c1\uff0c\u672c\u4f8b\u628a\u63a5\u6536\u7684\u4f5c\u7528\u57df\u76f4\u63a5\u6dfb\u52a0\u5230\u4e86 Token \u91cc\u3002 \u4f46\u5728\u60a8\u7684\u5e94\u7528\u4e2d\uff0c\u4e3a\u4e86\u5b89\u5168\uff0c\u5e94\u8be5\u53ea\u628a\u4f5c\u7528\u57df\u6dfb\u52a0\u5230\u786e\u5b9e\u9700\u8981\u4f5c\u7528\u57df\u7684\u7528\u6237\uff0c\u6216\u9884\u5b9a\u4e49\u7684\u7528\u6237\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u5728 \u8def\u5f84\u64cd\u4f5c \u4e0e\u4f9d\u8d56\u9879\u4e2d\u58f0\u660e\u4f5c\u7528\u57df \u00b6 \u63a5\u4e0b\u6765\uff0c\u4e3a \u8def\u5f84\u64cd\u4f5c /users/me/items/ \u58f0\u660e\u4f5c\u7528\u57df items \u3002 \u4e3a\u6b64\uff0c\u8981\u4ece fastapi \u4e2d\u5bfc\u5165\u5e76\u4f7f\u7528 Security \u3002 Security \u58f0\u660e\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u548c Depends \u4e00\u6837\uff0c\u4f46 Security \u8fd8\u80fd\u63a5\u6536\u4f5c\u7528\u57df\uff08\u5b57\u7b26\u4e32\uff09\u5217\u8868\u7c7b\u578b\u7684\u53c2\u6570 scopes \u3002 \u6b64\u5904\u4f7f\u7528\u4e0e Depends \u76f8\u540c\u7684\u65b9\u5f0f\uff0c\u628a\u4f9d\u8d56\u9879\u51fd\u6570 get_current_active_user \u4f20\u9012\u7ed9 Security \u3002 \u540c\u65f6\uff0c\u8fd8\u4f20\u9012\u4e86\u4f5c\u7528\u57df \u5217\u8868 \uff0c\u672c\u4f8b\u4e2d\u53ea\u4f20\u9012\u4e86\u4e00\u4e2a\u4f5c\u7528\u57df\uff1a items \uff08\u6b64\u5904\u652f\u6301\u4f20\u9012\u66f4\u591a\u4f5c\u7528\u57df\uff09\u3002 \u4f9d\u8d56\u9879\u51fd\u6570 get_current_active_user \u8fd8\u80fd\u58f0\u660e\u5b50\u4f9d\u8d56\u9879\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u4f7f\u7528 Depends \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Security \u3002\u58f0\u660e\u5b50\u4f9d\u8d56\u9879\u51fd\u6570\uff08 get_current_user \uff09\u53ca\u66f4\u591a\u4f5c\u7528\u57df\u3002 \u672c\u4f8b\u8981\u6c42\u4f7f\u7528\u4f5c\u7528\u57df me \uff08\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u4f5c\u7528\u57df\uff09\u3002 \u7b14\u8bb0 \u4e0d\u5fc5\u5728\u4e0d\u540c\u4f4d\u7f6e\u6dfb\u52a0\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u3002 \u672c\u4f8b\u4f7f\u7528\u7684\u8fd9\u79cd\u65b9\u5f0f\u53ea\u662f\u4e3a\u4e86\u5c55\u793a FastAPI \u5982\u4f55\u5904\u7406\u5728\u4e0d\u540c\u5c42\u7ea7\u58f0\u660e\u7684\u4f5c\u7528\u57df\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u6280\u672f\u7ec6\u8282 Security \u5b9e\u9645\u4e0a\u662f Depends \u7684\u5b50\u7c7b\uff0c\u800c\u4e14\u53ea\u6bd4 Depends \u591a\u4e00\u4e2a\u53c2\u6570\u3002 \u4f46\u4f7f\u7528 Security \u4ee3\u66ff Depends \uff0c FastAPI \u53ef\u4ee5\u58f0\u660e\u5b89\u5168\u4f5c\u7528\u57df\uff0c\u5e76\u5728\u5185\u90e8\u4f7f\u7528\u8fd9\u4e9b\u4f5c\u7528\u57df\uff0c\u540c\u65f6\uff0c\u4f7f\u7528 OpenAPI \u5b58\u6863 API\u3002 \u4f46\u5b9e\u9645\u4e0a\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Depends \u3001 Security \u7b49\u5bf9\u8c61\uff0c\u53ea\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u4f7f\u7528 SecurityScopes \u00b6 \u4fee\u6539\u4f9d\u8d56\u9879 get_current_user \u3002 \u8fd9\u662f\u4e0a\u9762\u7684\u4f9d\u8d56\u9879\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u3002 \u8fd9\u91cc\u4f7f\u7528\u7684\u4e5f\u662f\u4e4b\u524d\u521b\u5efa\u7684 OAuth2 \u65b9\u6848\uff0c\u5e76\u628a\u5b83\u58f0\u660e\u4e3a\u4f9d\u8d56\u9879\uff1a oauth2_scheme \u3002 \u8be5\u4f9d\u8d56\u9879\u51fd\u6570\u672c\u8eab\u4e0d\u9700\u8981\u4f5c\u7528\u57df\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 Depends \u548c oauth2_scheme \u3002\u4e0d\u9700\u8981\u6307\u5b9a\u5b89\u5168\u4f5c\u7528\u57df\u65f6\uff0c\u4e0d\u5fc5\u4f7f\u7528 Security \u3002 \u6b64\u5904\u8fd8\u58f0\u660e\u4e86\u4ece fastapi.security \u5bfc\u5165\u7684 SecurityScopes \u7c7b\u578b\u7684\u7279\u6b8a\u53c2\u6570\u3002 SecurityScopes \u7c7b\u4e0e Request \u7c7b\u4f3c\uff08 Request \u7528\u4e8e\u76f4\u63a5\u63d0\u53d6\u8bf7\u6c42\u5bf9\u8c61\uff09\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u4f7f\u7528 scopes \u00b6 \u53c2\u6570 security_scopes \u7684\u7c7b\u578b\u662f SecurityScopes \u3002 \u5b83\u7684\u5c5e\u6027 scopes \u662f\u4f5c\u7528\u57df\u5217\u8868\uff0c\u6240\u6709\u4f9d\u8d56\u9879\u90fd\u628a\u5b83\u4f5c\u4e3a\u5b50\u4f9d\u8d56\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\u6240\u6709 \u4f9d\u8d56 \u2026\u2026\u8fd9\u542c\u8d77\u6765\u6709\u4e9b\u7ed5\uff0c\u540e\u6587\u4f1a\u6709\u89e3\u91ca\u3002 \uff08\u7c7b SecurityScopes \u7684\uff09 security_scopes \u5bf9\u8c61\u8fd8\u63d0\u4f9b\u4e86\u5355\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5c5e\u6027 scope_str \uff0c\u8be5\u5c5e\u6027\u662f\uff08\u8981\u5728\u672c\u4f8b\u4e2d\u4f7f\u7528\u7684\uff09\u7528\u7a7a\u683c\u5206\u5272\u7684\u4f5c\u7528\u57df\u3002 \u6b64\u5904\u8fd8\u521b\u5efa\u4e86\u540e\u7eed\u4ee3\u7801\u4e2d\u8981\u590d\u7528\uff08 raise \uff09\u7684 HTTPException \u3002 \u8be5\u5f02\u5e38\u5305\u542b\u4e86\u4f5c\u7528\u57df\u6240\u9700\u7684\uff08\u5982\u6709\uff09\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\uff08\u4f7f\u7528 scope_str \uff09\u3002\u8be5\u5b57\u7b26\u4e32\u8981\u653e\u5230\u5305\u542b\u4f5c\u7528\u57df\u7684 WWW-Authenticate \u8bf7\u6c42\u5934\u4e2d\uff08\u8fd9\u4e5f\u662f\u89c4\u8303\u7684\u8981\u6c42\uff09\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u6821\u9a8c username \u4e0e\u6570\u636e\u5f62\u72b6 \u00b6 \u6211\u4eec\u53ef\u4ee5\u6821\u9a8c\u662f\u5426\u83b7\u53d6\u4e86 username \uff0c\u5e76\u62bd\u53d6\u4f5c\u7528\u57df\u3002 \u7136\u540e\uff0c\u4f7f\u7528 Pydantic \u6a21\u578b\u6821\u9a8c\u6570\u636e\uff08\u6355\u83b7 ValidationError \u5f02\u5e38\uff09\uff0c\u5982\u679c\u8bfb\u53d6 JWT Token \u6216\u4f7f\u7528 Pydantic \u6a21\u578b\u9a8c\u8bc1\u6570\u636e\u65f6\u51fa\u9519\uff0c\u5c31\u4f1a\u89e6\u53d1\u4e4b\u524d\u521b\u5efa\u7684 HTTPException \u5f02\u5e38\u3002 \u5bf9\u6b64\uff0c\u8981\u4f7f\u7528\u65b0\u7684\u5c5e\u6027 scopes \u66f4\u65b0 Pydantic \u6a21\u578b TokenData \u3002 \u4f7f\u7528 Pydantic \u9a8c\u8bc1\u6570\u636e\u53ef\u4ee5\u786e\u4fdd\u6570\u636e\u4e2d\u542b\u6709\u7531\u4f5c\u7528\u57df\u7ec4\u6210\u7684 \u5b57\u7b26\u4e32\u5217\u8868 \uff0c\u4ee5\u53ca username \u5b57\u7b26\u4e32\u7b49\u5185\u5bb9\u3002 \u53cd\u4e4b\uff0c\u5982\u679c\u4f7f\u7528 \u5b57\u5178 \u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u5c31\u6709\u53ef\u80fd\u5728\u540e\u9762\u67d0\u4e9b\u4f4d\u7f6e\u7834\u574f\u5e94\u7528\uff0c\u5f62\u6210\u5b89\u5168\u9690\u60a3\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u540d\u9a8c\u8bc1\u7528\u6237\uff0c\u5982\u679c\u6ca1\u6709\u7528\u6237\uff0c\u4e5f\u4f1a\u89e6\u53d1\u4e4b\u524d\u521b\u5efa\u7684\u5f02\u5e38\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u6821\u9a8c scopes \u00b6 \u63a5\u4e0b\u6765\uff0c\u6821\u9a8c\u6240\u6709\u4f9d\u8d56\u9879\u548c\u4f9d\u8d56\u8981\u7d20\uff08\u5305\u62ec \u8def\u5f84\u64cd\u4f5c \uff09\u6240\u9700\u7684\u4f5c\u7528\u57df\u3002\u8fd9\u4e9b\u4f5c\u7528\u57df\u5305\u542b\u5728 Token \u7684 scopes \u91cc\uff0c\u5982\u679c\u4e0d\u5728\u5176\u4e2d\u5c31\u4f1a\u89e6\u53d1 HTTPException \u5f02\u5e38\u3002 \u4e3a\u6b64\uff0c\u8981\u4f7f\u7528\u5305\u542b\u6240\u6709\u4f5c\u7528\u57df \u5b57\u7b26\u4e32\u5217\u8868 \u7684 security_scopes.scopes \uff0c \u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u4f9d\u8d56\u9879\u6811\u4e0e\u4f5c\u7528\u57df \u00b6 \u518d\u6b21\u67e5\u770b\u8fd9\u4e2a\u4f9d\u8d56\u9879\u6811\u4e0e\u4f5c\u7528\u57df\u3002 get_current_active_user \u4f9d\u8d56\u9879\u5305\u542b\u5b50\u4f9d\u8d56\u9879 get_current_user \uff0c\u5e76\u5728 get_current_active_user \u4e2d\u58f0\u660e\u4e86\u4f5c\u7528\u57df \"me\" \u5305\u542b\u6240\u9700\u4f5c\u7528\u57df\u5217\u8868 \uff0c\u5728 security_scopes.scopes \u4e2d\u4f20\u9012\u7ed9 get_current_user \u3002 \u8def\u5f84\u64cd\u4f5c \u81ea\u8eab\u4e5f\u58f0\u660e\u4e86\u4f5c\u7528\u57df\uff0c \"items\" \uff0c\u8fd9\u4e5f\u662f security_scopes.scopes \u5217\u8868\u4f20\u9012\u7ed9 get_current_user \u7684\u3002 \u4f9d\u8d56\u9879\u4e0e\u4f5c\u7528\u57df\u7684\u5c42\u7ea7\u67b6\u6784\u5982\u4e0b\uff1a \u8def\u5f84\u64cd\u4f5c read_own_items \u5305\u542b\uff1a \u4f9d\u8d56\u9879\u6240\u9700\u7684\u4f5c\u7528\u57df [\"items\"] \uff1a get_current_active_user : \u4f9d\u8d56\u9879\u51fd\u6570 get_current_active_user \u5305\u542b\uff1a \u6240\u9700\u7684\u4f5c\u7528\u57df \"me\" \u5305\u542b\u4f9d\u8d56\u9879\uff1a get_current_user : \u4f9d\u8d56\u9879\u51fd\u6570 get_current_user \u5305\u542b\uff1a \u6ca1\u6709\u4f5c\u7528\u57df\u9700\u6c42\u5176\u81ea\u8eab \u4f9d\u8d56\u9879\u4f7f\u7528 oauth2_scheme security_scopes \u53c2\u6570\u7684\u7c7b\u578b\u662f SecurityScopes \uff1a security_scopes \u53c2\u6570\u7684\u5c5e\u6027 scopes \u662f\u5305\u542b\u4e0a\u8ff0\u58f0\u660e\u7684\u6240\u6709\u4f5c\u7528\u57df\u7684 \u5217\u8868 \uff0c\u56e0\u6b64\uff1a security_scopes.scopes \u5305\u542b\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c \u7684 [\"me\", \"items\"] security_scopes.scopes \u5305\u542b \u8def\u5f84\u64cd\u4f5c read_users_me \u7684 [\"me\"] \uff0c\u56e0\u4e3a\u5b83\u5728\u4f9d\u8d56\u9879\u91cc\u88ab\u58f0\u660e security_scopes.scopes \u5305\u542b\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c read_system_status \u7684 [] \uff08\u7a7a\u5217\u8868\uff09\uff0c\u5e76\u4e14\u5b83\u7684\u4f9d\u8d56\u9879 get_current_user \u4e5f\u6ca1\u6709\u58f0\u660e\u4efb\u4f55 scope \u63d0\u793a \u6b64\u5904\u91cd\u8981\u4e14 \u795e\u5947 \u7684\u4e8b\u60c5\u662f\uff0c get_current_user \u68c0\u67e5\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u65f6\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684 scopes \u5217\u8868\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u4f9d\u8d56\u4e8e\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u548c\u6307\u5b9a \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u6811\u4e2d\u7684\u6bcf\u4e2a\u4f9d\u8d56\u9879\u3002 SecurityScopes \u7684\u66f4\u591a\u7ec6\u8282 \u00b6 \u60a8\u53ef\u4ee5\u4efb\u4f55\u4f4d\u7f6e\u6216\u591a\u4e2a\u4f4d\u7f6e\u4f7f\u7528 SecurityScopes \uff0c\u4e0d\u4e00\u5b9a\u975e\u5f97\u5728 \u6839 \u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528\u3002 \u5b83\u603b\u662f\u5728\u5f53\u524d Security \u4f9d\u8d56\u9879\u4e2d\u548c\u6240\u6709\u4f9d\u8d56\u56e0\u5b50\u5bf9\u4e8e \u7279\u5b9a \u8def\u5f84\u64cd\u4f5c \u548c \u7279\u5b9a \u4f9d\u8d56\u6811\u4e2d\u5b89\u5168\u4f5c\u7528\u57df \u56e0\u4e3a SecurityScopes \u5305\u542b\u6240\u6709\u7531\u4f9d\u8d56\u9879\u58f0\u660e\u7684\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u5728\u6838\u5fc3\u4f9d\u8d56\u51fd\u6570\u4e2d\u7528\u5b83\u9a8c\u8bc1\u6240\u9700\u4f5c\u7528\u57df\u7684 Token\uff0c\u7136\u540e\u518d\u5728\u4e0d\u540c\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u4e0d\u540c\u4f5c\u7528\u57df\u9700\u6c42\u3002 \u5b83\u4eec\u4f1a\u4e3a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u8fdb\u884c\u5355\u72ec\u68c0\u67e5\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u6253\u5f00 API \u6587\u6863\uff0c\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u6307\u5b9a\u8981\u6388\u6743\u7684\u4f5c\u7528\u57df\u3002 \u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u4f5c\u7528\u57df\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c \u8eab\u4efd\u9a8c\u8bc1 \uff0c\u4f46\u8bbf\u95ee /uses/me \u6216 /users/me/items \u65f6\uff0c\u4f1a\u663e\u793a\u6ca1\u6709\u8db3\u591f\u7684\u6743\u9650\u3002\u4f46\u4ecd\u53ef\u4ee5\u8bbf\u95ee /status/ \u3002 \u5982\u679c\u9009\u62e9\u4e86\u4f5c\u7528\u57df me \uff0c\u4f46\u6ca1\u6709\u9009\u62e9\u4f5c\u7528\u57df items \uff0c\u5219\u53ef\u4ee5\u8bbf\u95ee /users/me/ \uff0c\u4f46\u4e0d\u80fd\u8bbf\u95ee /users/me/items \u3002 \u8fd9\u5c31\u662f\u901a\u8fc7\u7528\u6237\u63d0\u4f9b\u7684 Token \u4f7f\u7528\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u8fd9\u4e9b \u8def\u5f84\u64cd\u4f5c \u65f6\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u5177\u4f53\u600e\u6837\u53d6\u51b3\u4e8e\u7528\u6237\u6388\u4e88\u7b2c\u4e09\u65b9\u5e94\u7528\u7684\u6743\u9650\u3002 \u5173\u4e8e\u7b2c\u4e09\u65b9\u96c6\u6210 \u00b6 \u672c\u4f8b\u4f7f\u7528 OAuth2 \u5bc6\u7801\u6d41 \u3002 \u8fd9\u79cd\u65b9\u5f0f\u9002\u7528\u4e8e\u767b\u5f55\u6211\u4eec\u81ea\u5df1\u7684\u5e94\u7528\uff0c\u6700\u597d\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u524d\u7aef\u3002 \u56e0\u4e3a\u6211\u4eec\u80fd\u63a7\u5236\u81ea\u5df1\u7684\u524d\u7aef\u5e94\u7528\uff0c\u53ef\u4ee5\u4fe1\u4efb\u5b83\u63a5\u6536 username \u4e0e password \u3002 \u4f46\u5982\u679c\u6784\u5efa\u7684\u662f\u8fde\u63a5\u5176\u4ed6\u5e94\u7528\u7684 OAuth2 \u5e94\u7528\uff0c\u6bd4\u5982\u5177\u6709\u4e0e\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub \u76f8\u540c\u529f\u80fd\u7684\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u3002\u90a3\u60a8\u5c31\u5e94\u8be5\u4f7f\u7528\u5176\u4ed6\u5b89\u5168\u6d41\u3002 \u6700\u5e38\u7528\u7684\u662f\u9690\u5f0f\u6d41\u3002 \u6700\u5b89\u5168\u7684\u662f\u4ee3\u7801\u6d41\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u66f4\u590d\u6742\uff0c\u800c\u4e14\u9700\u8981\u66f4\u591a\u6b65\u9aa4\u3002\u56e0\u4e3a\u5b83\u66f4\u590d\u6742\uff0c\u5f88\u591a\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u6700\u7ec8\u5efa\u8bae\u4f7f\u7528\u9690\u5f0f\u6d41\u3002 \u7b14\u8bb0 \u6bcf\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u90fd\u4f1a\u91c7\u7528\u4e0d\u540c\u65b9\u5f0f\u4f1a\u547d\u540d\u6d41\uff0c\u4ee5\u4fbf\u878d\u5408\u5165\u81ea\u5df1\u7684\u54c1\u724c\u3002 \u4f46\u5f52\u6839\u7ed3\u5e95\uff0c\u5b83\u4eec\u4f7f\u7528\u7684\u90fd\u662f OAuth2 \u6807\u51c6\u3002 FastAPI \u7684 fastapi.security.oauth2 \u91cc\u5305\u542b\u4e86\u6240\u6709 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u6d41\u5de5\u5177\u3002 \u88c5\u9970\u5668 dependencies \u4e2d\u7684 Security \u00b6 \u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u5728\u88c5\u9970\u5668\u7684 dependencies \u53c2\u6570\u4e2d\u5b9a\u4e49 Depends \u5217\u8868\uff0c\uff08\u8be6\u89c1 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879 )\uff09\uff0c\u4e5f\u53ef\u4ee5\u628a scopes \u4e0e Security \u4e00\u8d77\u4f7f\u7528\u3002","title":"OAuth2 \u4f5c\u7528\u57df"},{"location":"advanced/security/oauth2-scopes/#oauth2","text":"FastAPI \u65e0\u7f1d\u96c6\u6210 OAuth2 \u4f5c\u7528\u57df\uff08 Scopes \uff09\uff0c\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u3002 \u4f5c\u7528\u57df\u662f\u66f4\u7cbe\u5bc6\u7684\u6743\u9650\u7cfb\u7edf\uff0c\u9075\u5faa OAuth2 \u6807\u51c6\uff0c\u4e0e OpenAPI \u5e94\u7528\uff08\u548c API \u81ea\u52a8\u6587\u6863\uff09\u96c6\u6210\u3002 OAuth2 \u4e5f\u662f\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub\u3001\u5fae\u8f6f\u3001\u63a8\u7279\u7b49\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u4f7f\u7528\u7684\u673a\u5236\u3002\u8fd9\u4e9b\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u5728\u7528\u6237\u767b\u5f55\u5e94\u7528\u65f6\u4f7f\u7528 OAuth2 \u63d0\u4f9b\u6307\u5b9a\u6743\u9650\u3002 \u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub\u3001\u5fae\u8f6f\u3001\u63a8\u7279\u5c31\u662f\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\u767b\u5f55\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u5728 FastAPI \u5e94\u7528\u4e2d\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\u7ba1\u7406\u9a8c\u8bc1\u4e0e\u6388\u6743\u3002 \u8b66\u544a \u672c\u7ae0\u5185\u5bb9\u8f83\u96be\uff0c\u521a\u63a5\u89e6 FastAPI \u7684\u65b0\u624b\u53ef\u4ee5\u8df3\u8fc7\u3002 OAuth2 \u4f5c\u7528\u57df\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u6ca1\u6709\u5b83\uff0c\u60a8\u4e5f\u53ef\u4ee5\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u4e0e\u6388\u6743\u3002 \u4f46 OAuth2 \u4f5c\u7528\u57df\u4e0e API\uff08\u901a\u8fc7 OpenAPI\uff09\u53ca API \u6587\u6863\u96c6\u6210\u5730\u66f4\u597d\u3002 \u4e0d\u7ba1\u600e\u4e48\u8bf4\uff0c FastAPI \u652f\u6301\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4f5c\u7528\u57df\u6216\u5176\u4ed6\u5b89\u5168/\u6388\u6743\u9700\u6c42\u9879\u3002 \u5f88\u591a\u60c5\u51b5\u4e0b\uff0cOAuth2 \u4f5c\u7528\u57df\u5c31\u50cf\u4e00\u628a\u725b\u5200\u3002 \u4f46\u5982\u679c\u60a8\u786e\u5b9a\u8981\u4f7f\u7528\u4f5c\u7528\u57df\uff0c\u6216\u5bf9\u5b83\u6709\u5174\u8da3\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u3002","title":"OAuth2 \u4f5c\u7528\u57df"},{"location":"advanced/security/oauth2-scopes/#oauth2-openapi","text":"OAuth2 \u89c4\u8303\u7684 \u4f5c\u7528\u57df \u662f\u7531\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u5217\u8868\u3002 \u8fd9\u4e9b\u5b57\u7b26\u4e32\u652f\u6301\u4efb\u4f55\u683c\u5f0f\uff0c\u4f46\u4e0d\u80fd\u5305\u542b\u7a7a\u683c\u3002 \u4f5c\u7528\u57df\u8868\u793a\u7684\u662f \u6743\u9650 \u3002 OpenAPI \u4e2d\uff08\u4f8b\u5982 API \u6587\u6863\uff09\u53ef\u4ee5\u5b9a\u4e49 \u5b89\u5168\u65b9\u6848 \u3002 \u8fd9\u4e9b\u5b89\u5168\u65b9\u6848\u5728\u4f7f\u7528 OAuth2 \u65f6\uff0c\u8fd8\u53ef\u4ee5\u58f0\u660e\u548c\u4f7f\u7528\u4f5c\u7528\u57df\u3002 \u4f5c\u7528\u57df \u53ea\u662f\uff08\u4e0d\u5e26\u7a7a\u683c\u7684\uff09\u5b57\u7b26\u4e32\u3002 \u5e38\u7528\u4e8e\u58f0\u660e\u7279\u5b9a\u5b89\u5168\u6743\u9650\uff0c\u4f8b\u5982\uff1a \u5e38\u89c1\u7528\u4f8b\u4e3a\uff0c users:read \u6216 users:write \u8138\u4e66\u548c Instagram \u4f7f\u7528 instagram_basic \u8c37\u6b4c\u4f7f\u7528 https://www.googleapis.com/auth/drive \u8bf4\u660e OAuth2 \u4e2d\uff0c \u4f5c\u7528\u57df \u53ea\u662f\u58f0\u660e\u7279\u5b9a\u6743\u9650\u7684\u5b57\u7b26\u4e32\u3002 \u662f\u5426\u4f7f\u7528\u5192\u53f7 : \u7b49\u7b26\u53f7\uff0c\u6216\u8005\u662f\u4e0d\u662f URL \u5e76\u4e0d\u91cd\u8981\u3002 \u8fd9\u4e9b\u7ec6\u8282\u53ea\u662f\u7279\u5b9a\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u5bf9 OAuth2 \u6765\u8bf4\uff0c\u5b83\u4eec\u90fd\u53ea\u662f\u5b57\u7b26\u4e32\u800c\u5df2\u3002","title":"OAuth2 \u4f5c\u7528\u57df\u4e0e OpenAPI"},{"location":"advanced/security/oauth2-scopes/#_1","text":"\u9996\u5148\uff0c\u5feb\u901f\u6d4f\u89c8\u4e00\u4e0b\u4ee5\u4e0b\u4ee3\u7801\u4e0e \u7528\u6237\u6307\u5357 \u4e2d OAuth2 \u5b9e\u73b0\u5bc6\u7801\u54c8\u5e0c\u4e0e Bearer + JWT Token \u9a8c\u8bc1 \u4e00\u7ae0\u4e2d\u4ee3\u7801\u7684\u533a\u522b\u3002\u4ee5\u4e0b\u4ee3\u7801\u4f7f\u7528 OAuth2 \u4f5c\u7528\u57df\uff1a from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u4e0b\u9762\uff0c\u6211\u4eec\u9010\u6b65\u8bf4\u660e\u4fee\u6539\u7684\u4ee3\u7801\u5185\u5bb9\u3002","title":"\u5168\u5c40\u7eb5\u89c8"},{"location":"advanced/security/oauth2-scopes/#oauth2_1","text":"\u7b2c\u4e00\u4e2a\u4fee\u6539\u7684\u5730\u65b9\u662f\uff0c\u4f7f\u7528\u4e24\u4e2a\u4f5c\u7528\u57df me \u548c items \u58f0\u660e OAuth2 \u5b89\u5168\u65b9\u6848\u3002 scopes \u53c2\u6570\u63a5\u6536 \u5b57\u5178 \uff0c\u952e\u662f\u4f5c\u7528\u57df\u3001\u503c\u662f\u4f5c\u7528\u57df\u7684\u63cf\u8ff0\uff1a from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u56e0\u4e3a\u58f0\u660e\u4e86\u4f5c\u7528\u57df\uff0c\u6240\u4ee5\u767b\u5f55\u6216\u6388\u6743\u65f6\u4f1a\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u3002 \u6b64\u5904\uff0c\u9009\u62e9\u7ed9\u4e88\u8bbf\u95ee\u6743\u9650\u7684\u4f5c\u7528\u57df\uff1a me \u548c items \u3002 \u8fd9\u4e5f\u662f\u4f7f\u7528\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub \u767b\u5f55\u65f6\u7684\u6388\u6743\u673a\u5236\u3002","title":"OAuth2 \u5b89\u5168\u65b9\u6848"},{"location":"advanced/security/oauth2-scopes/#jwt-token","text":"\u73b0\u5728\uff0c\u4fee\u6539 Token \u8def\u5f84\u64cd\u4f5c\uff0c\u8fd4\u56de\u8bf7\u6c42\u7684\u4f5c\u7528\u57df\u3002 \u6b64\u5904\u4ecd\u7136\u4f7f\u7528 OAuth2PasswordRequestForm \u3002\u5b83\u5305\u542b\u7c7b\u578b\u4e3a \u5b57\u7b26\u4e32\u5217\u8868 \u7684 scopes \u5c5e\u6027\uff0c\u4e14 scopes \u5c5e\u6027\u4e2d\u5305\u542b\u8981\u5728\u8bf7\u6c42\u91cc\u63a5\u6536\u7684\u6bcf\u4e2a\u4f5c\u7528\u57df\u3002 \u8fd9\u6837\uff0c\u8fd4\u56de\u7684 JWT Token \u4e2d\u5c31\u5305\u542b\u4e86\u4f5c\u7528\u57df\u3002 \u5371\u9669 \u4e3a\u4e86\u7b80\u660e\u8d77\u89c1\uff0c\u672c\u4f8b\u628a\u63a5\u6536\u7684\u4f5c\u7528\u57df\u76f4\u63a5\u6dfb\u52a0\u5230\u4e86 Token \u91cc\u3002 \u4f46\u5728\u60a8\u7684\u5e94\u7528\u4e2d\uff0c\u4e3a\u4e86\u5b89\u5168\uff0c\u5e94\u8be5\u53ea\u628a\u4f5c\u7528\u57df\u6dfb\u52a0\u5230\u786e\u5b9e\u9700\u8981\u4f5c\u7528\u57df\u7684\u7528\u6237\uff0c\u6216\u9884\u5b9a\u4e49\u7684\u7528\u6237\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"JWT Token \u4f5c\u7528\u57df"},{"location":"advanced/security/oauth2-scopes/#_2","text":"\u63a5\u4e0b\u6765\uff0c\u4e3a \u8def\u5f84\u64cd\u4f5c /users/me/items/ \u58f0\u660e\u4f5c\u7528\u57df items \u3002 \u4e3a\u6b64\uff0c\u8981\u4ece fastapi \u4e2d\u5bfc\u5165\u5e76\u4f7f\u7528 Security \u3002 Security \u58f0\u660e\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u548c Depends \u4e00\u6837\uff0c\u4f46 Security \u8fd8\u80fd\u63a5\u6536\u4f5c\u7528\u57df\uff08\u5b57\u7b26\u4e32\uff09\u5217\u8868\u7c7b\u578b\u7684\u53c2\u6570 scopes \u3002 \u6b64\u5904\u4f7f\u7528\u4e0e Depends \u76f8\u540c\u7684\u65b9\u5f0f\uff0c\u628a\u4f9d\u8d56\u9879\u51fd\u6570 get_current_active_user \u4f20\u9012\u7ed9 Security \u3002 \u540c\u65f6\uff0c\u8fd8\u4f20\u9012\u4e86\u4f5c\u7528\u57df \u5217\u8868 \uff0c\u672c\u4f8b\u4e2d\u53ea\u4f20\u9012\u4e86\u4e00\u4e2a\u4f5c\u7528\u57df\uff1a items \uff08\u6b64\u5904\u652f\u6301\u4f20\u9012\u66f4\u591a\u4f5c\u7528\u57df\uff09\u3002 \u4f9d\u8d56\u9879\u51fd\u6570 get_current_active_user \u8fd8\u80fd\u58f0\u660e\u5b50\u4f9d\u8d56\u9879\uff0c\u4e0d\u4ec5\u53ef\u4ee5\u4f7f\u7528 Depends \uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528 Security \u3002\u58f0\u660e\u5b50\u4f9d\u8d56\u9879\u51fd\u6570\uff08 get_current_user \uff09\u53ca\u66f4\u591a\u4f5c\u7528\u57df\u3002 \u672c\u4f8b\u8981\u6c42\u4f7f\u7528\u4f5c\u7528\u57df me \uff08\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u4f5c\u7528\u57df\uff09\u3002 \u7b14\u8bb0 \u4e0d\u5fc5\u5728\u4e0d\u540c\u4f4d\u7f6e\u6dfb\u52a0\u4e0d\u540c\u7684\u4f5c\u7528\u57df\u3002 \u672c\u4f8b\u4f7f\u7528\u7684\u8fd9\u79cd\u65b9\u5f0f\u53ea\u662f\u4e3a\u4e86\u5c55\u793a FastAPI \u5982\u4f55\u5904\u7406\u5728\u4e0d\u540c\u5c42\u7ea7\u58f0\u660e\u7684\u4f5c\u7528\u57df\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" } \u6280\u672f\u7ec6\u8282 Security \u5b9e\u9645\u4e0a\u662f Depends \u7684\u5b50\u7c7b\uff0c\u800c\u4e14\u53ea\u6bd4 Depends \u591a\u4e00\u4e2a\u53c2\u6570\u3002 \u4f46\u4f7f\u7528 Security \u4ee3\u66ff Depends \uff0c FastAPI \u53ef\u4ee5\u58f0\u660e\u5b89\u5168\u4f5c\u7528\u57df\uff0c\u5e76\u5728\u5185\u90e8\u4f7f\u7528\u8fd9\u4e9b\u4f5c\u7528\u57df\uff0c\u540c\u65f6\uff0c\u4f7f\u7528 OpenAPI \u5b58\u6863 API\u3002 \u4f46\u5b9e\u9645\u4e0a\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Depends \u3001 Security \u7b49\u5bf9\u8c61\uff0c\u53ea\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002","title":"\u5728\u8def\u5f84\u64cd\u4f5c\u4e0e\u4f9d\u8d56\u9879\u4e2d\u58f0\u660e\u4f5c\u7528\u57df"},{"location":"advanced/security/oauth2-scopes/#securityscopes","text":"\u4fee\u6539\u4f9d\u8d56\u9879 get_current_user \u3002 \u8fd9\u662f\u4e0a\u9762\u7684\u4f9d\u8d56\u9879\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u3002 \u8fd9\u91cc\u4f7f\u7528\u7684\u4e5f\u662f\u4e4b\u524d\u521b\u5efa\u7684 OAuth2 \u65b9\u6848\uff0c\u5e76\u628a\u5b83\u58f0\u660e\u4e3a\u4f9d\u8d56\u9879\uff1a oauth2_scheme \u3002 \u8be5\u4f9d\u8d56\u9879\u51fd\u6570\u672c\u8eab\u4e0d\u9700\u8981\u4f5c\u7528\u57df\uff0c\u56e0\u6b64\uff0c\u53ef\u4ee5\u4f7f\u7528 Depends \u548c oauth2_scheme \u3002\u4e0d\u9700\u8981\u6307\u5b9a\u5b89\u5168\u4f5c\u7528\u57df\u65f6\uff0c\u4e0d\u5fc5\u4f7f\u7528 Security \u3002 \u6b64\u5904\u8fd8\u58f0\u660e\u4e86\u4ece fastapi.security \u5bfc\u5165\u7684 SecurityScopes \u7c7b\u578b\u7684\u7279\u6b8a\u53c2\u6570\u3002 SecurityScopes \u7c7b\u4e0e Request \u7c7b\u4f3c\uff08 Request \u7528\u4e8e\u76f4\u63a5\u63d0\u53d6\u8bf7\u6c42\u5bf9\u8c61\uff09\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"\u4f7f\u7528 SecurityScopes"},{"location":"advanced/security/oauth2-scopes/#scopes","text":"\u53c2\u6570 security_scopes \u7684\u7c7b\u578b\u662f SecurityScopes \u3002 \u5b83\u7684\u5c5e\u6027 scopes \u662f\u4f5c\u7528\u57df\u5217\u8868\uff0c\u6240\u6709\u4f9d\u8d56\u9879\u90fd\u628a\u5b83\u4f5c\u4e3a\u5b50\u4f9d\u8d56\u9879\u3002\u4e5f\u5c31\u662f\u8bf4\u6240\u6709 \u4f9d\u8d56 \u2026\u2026\u8fd9\u542c\u8d77\u6765\u6709\u4e9b\u7ed5\uff0c\u540e\u6587\u4f1a\u6709\u89e3\u91ca\u3002 \uff08\u7c7b SecurityScopes \u7684\uff09 security_scopes \u5bf9\u8c61\u8fd8\u63d0\u4f9b\u4e86\u5355\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u5c5e\u6027 scope_str \uff0c\u8be5\u5c5e\u6027\u662f\uff08\u8981\u5728\u672c\u4f8b\u4e2d\u4f7f\u7528\u7684\uff09\u7528\u7a7a\u683c\u5206\u5272\u7684\u4f5c\u7528\u57df\u3002 \u6b64\u5904\u8fd8\u521b\u5efa\u4e86\u540e\u7eed\u4ee3\u7801\u4e2d\u8981\u590d\u7528\uff08 raise \uff09\u7684 HTTPException \u3002 \u8be5\u5f02\u5e38\u5305\u542b\u4e86\u4f5c\u7528\u57df\u6240\u9700\u7684\uff08\u5982\u6709\uff09\uff0c\u4ee5\u7a7a\u683c\u5206\u5272\u7684\u5b57\u7b26\u4e32\uff08\u4f7f\u7528 scope_str \uff09\u3002\u8be5\u5b57\u7b26\u4e32\u8981\u653e\u5230\u5305\u542b\u4f5c\u7528\u57df\u7684 WWW-Authenticate \u8bf7\u6c42\u5934\u4e2d\uff08\u8fd9\u4e5f\u662f\u89c4\u8303\u7684\u8981\u6c42\uff09\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"\u4f7f\u7528 scopes"},{"location":"advanced/security/oauth2-scopes/#username","text":"\u6211\u4eec\u53ef\u4ee5\u6821\u9a8c\u662f\u5426\u83b7\u53d6\u4e86 username \uff0c\u5e76\u62bd\u53d6\u4f5c\u7528\u57df\u3002 \u7136\u540e\uff0c\u4f7f\u7528 Pydantic \u6a21\u578b\u6821\u9a8c\u6570\u636e\uff08\u6355\u83b7 ValidationError \u5f02\u5e38\uff09\uff0c\u5982\u679c\u8bfb\u53d6 JWT Token \u6216\u4f7f\u7528 Pydantic \u6a21\u578b\u9a8c\u8bc1\u6570\u636e\u65f6\u51fa\u9519\uff0c\u5c31\u4f1a\u89e6\u53d1\u4e4b\u524d\u521b\u5efa\u7684 HTTPException \u5f02\u5e38\u3002 \u5bf9\u6b64\uff0c\u8981\u4f7f\u7528\u65b0\u7684\u5c5e\u6027 scopes \u66f4\u65b0 Pydantic \u6a21\u578b TokenData \u3002 \u4f7f\u7528 Pydantic \u9a8c\u8bc1\u6570\u636e\u53ef\u4ee5\u786e\u4fdd\u6570\u636e\u4e2d\u542b\u6709\u7531\u4f5c\u7528\u57df\u7ec4\u6210\u7684 \u5b57\u7b26\u4e32\u5217\u8868 \uff0c\u4ee5\u53ca username \u5b57\u7b26\u4e32\u7b49\u5185\u5bb9\u3002 \u53cd\u4e4b\uff0c\u5982\u679c\u4f7f\u7528 \u5b57\u5178 \u6216\u5176\u4ed6\u6570\u636e\u7ed3\u6784\uff0c\u5c31\u6709\u53ef\u80fd\u5728\u540e\u9762\u67d0\u4e9b\u4f4d\u7f6e\u7834\u574f\u5e94\u7528\uff0c\u5f62\u6210\u5b89\u5168\u9690\u60a3\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528\u7528\u6237\u540d\u9a8c\u8bc1\u7528\u6237\uff0c\u5982\u679c\u6ca1\u6709\u7528\u6237\uff0c\u4e5f\u4f1a\u89e6\u53d1\u4e4b\u524d\u521b\u5efa\u7684\u5f02\u5e38\u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"\u6821\u9a8c username \u4e0e\u6570\u636e\u5f62\u72b6"},{"location":"advanced/security/oauth2-scopes/#scopes_1","text":"\u63a5\u4e0b\u6765\uff0c\u6821\u9a8c\u6240\u6709\u4f9d\u8d56\u9879\u548c\u4f9d\u8d56\u8981\u7d20\uff08\u5305\u62ec \u8def\u5f84\u64cd\u4f5c \uff09\u6240\u9700\u7684\u4f5c\u7528\u57df\u3002\u8fd9\u4e9b\u4f5c\u7528\u57df\u5305\u542b\u5728 Token \u7684 scopes \u91cc\uff0c\u5982\u679c\u4e0d\u5728\u5176\u4e2d\u5c31\u4f1a\u89e6\u53d1 HTTPException \u5f02\u5e38\u3002 \u4e3a\u6b64\uff0c\u8981\u4f7f\u7528\u5305\u542b\u6240\u6709\u4f5c\u7528\u57df \u5b57\u7b26\u4e32\u5217\u8868 \u7684 security_scopes.scopes \uff0c \u3002 from datetime import datetime , timedelta from typing import List , Union from fastapi import Depends , FastAPI , HTTPException , Security , status from fastapi.security import ( OAuth2PasswordBearer , OAuth2PasswordRequestForm , SecurityScopes , ) from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel , ValidationError # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Chains\" , \"email\" : \"alicechains@example.com\" , \"hashed_password\" : \"$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm\" , \"disabled\" : True , }, } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None scopes : List [ str ] = [] class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" , scopes = { \"me\" : \"Read information about the current user.\" , \"items\" : \"Read items.\" }, ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( security_scopes : SecurityScopes , token : str = Depends ( oauth2_scheme ) ): if security_scopes . scopes : authenticate_value = f 'Bearer scope=\" { security_scopes . scope_str } \"' else : authenticate_value = \"Bearer\" credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_scopes = payload . get ( \"scopes\" , []) token_data = TokenData ( scopes = token_scopes , username = username ) except ( JWTError , ValidationError ): raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception for scope in security_scopes . scopes : if scope not in token_data . scopes : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Not enough permissions\" , headers = { \"WWW-Authenticate\" : authenticate_value }, ) return user async def get_current_active_user ( current_user : User = Security ( get_current_user , scopes = [ \"me\" ]) ): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username , \"scopes\" : form_data . scopes }, expires_delta = access_token_expires , ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Security ( get_current_active_user , scopes = [ \"items\" ]) ): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] @app . get ( \"/status/\" ) async def read_system_status ( current_user : User = Depends ( get_current_user )): return { \"status\" : \"ok\" }","title":"\u6821\u9a8c scopes"},{"location":"advanced/security/oauth2-scopes/#_3","text":"\u518d\u6b21\u67e5\u770b\u8fd9\u4e2a\u4f9d\u8d56\u9879\u6811\u4e0e\u4f5c\u7528\u57df\u3002 get_current_active_user \u4f9d\u8d56\u9879\u5305\u542b\u5b50\u4f9d\u8d56\u9879 get_current_user \uff0c\u5e76\u5728 get_current_active_user \u4e2d\u58f0\u660e\u4e86\u4f5c\u7528\u57df \"me\" \u5305\u542b\u6240\u9700\u4f5c\u7528\u57df\u5217\u8868 \uff0c\u5728 security_scopes.scopes \u4e2d\u4f20\u9012\u7ed9 get_current_user \u3002 \u8def\u5f84\u64cd\u4f5c \u81ea\u8eab\u4e5f\u58f0\u660e\u4e86\u4f5c\u7528\u57df\uff0c \"items\" \uff0c\u8fd9\u4e5f\u662f security_scopes.scopes \u5217\u8868\u4f20\u9012\u7ed9 get_current_user \u7684\u3002 \u4f9d\u8d56\u9879\u4e0e\u4f5c\u7528\u57df\u7684\u5c42\u7ea7\u67b6\u6784\u5982\u4e0b\uff1a \u8def\u5f84\u64cd\u4f5c read_own_items \u5305\u542b\uff1a \u4f9d\u8d56\u9879\u6240\u9700\u7684\u4f5c\u7528\u57df [\"items\"] \uff1a get_current_active_user : \u4f9d\u8d56\u9879\u51fd\u6570 get_current_active_user \u5305\u542b\uff1a \u6240\u9700\u7684\u4f5c\u7528\u57df \"me\" \u5305\u542b\u4f9d\u8d56\u9879\uff1a get_current_user : \u4f9d\u8d56\u9879\u51fd\u6570 get_current_user \u5305\u542b\uff1a \u6ca1\u6709\u4f5c\u7528\u57df\u9700\u6c42\u5176\u81ea\u8eab \u4f9d\u8d56\u9879\u4f7f\u7528 oauth2_scheme security_scopes \u53c2\u6570\u7684\u7c7b\u578b\u662f SecurityScopes \uff1a security_scopes \u53c2\u6570\u7684\u5c5e\u6027 scopes \u662f\u5305\u542b\u4e0a\u8ff0\u58f0\u660e\u7684\u6240\u6709\u4f5c\u7528\u57df\u7684 \u5217\u8868 \uff0c\u56e0\u6b64\uff1a security_scopes.scopes \u5305\u542b\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c \u7684 [\"me\", \"items\"] security_scopes.scopes \u5305\u542b \u8def\u5f84\u64cd\u4f5c read_users_me \u7684 [\"me\"] \uff0c\u56e0\u4e3a\u5b83\u5728\u4f9d\u8d56\u9879\u91cc\u88ab\u58f0\u660e security_scopes.scopes \u5305\u542b\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c read_system_status \u7684 [] \uff08\u7a7a\u5217\u8868\uff09\uff0c\u5e76\u4e14\u5b83\u7684\u4f9d\u8d56\u9879 get_current_user \u4e5f\u6ca1\u6709\u58f0\u660e\u4efb\u4f55 scope \u63d0\u793a \u6b64\u5904\u91cd\u8981\u4e14 \u795e\u5947 \u7684\u4e8b\u60c5\u662f\uff0c get_current_user \u68c0\u67e5\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u65f6\u53ef\u4ee5\u4f7f\u7528\u4e0d\u540c\u7684 scopes \u5217\u8868\u3002 \u6240\u6709\u8fd9\u4e9b\u90fd\u4f9d\u8d56\u4e8e\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u548c\u6307\u5b9a \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u6811\u4e2d\u7684\u6bcf\u4e2a\u4f9d\u8d56\u9879\u3002","title":"\u4f9d\u8d56\u9879\u6811\u4e0e\u4f5c\u7528\u57df"},{"location":"advanced/security/oauth2-scopes/#securityscopes_1","text":"\u60a8\u53ef\u4ee5\u4efb\u4f55\u4f4d\u7f6e\u6216\u591a\u4e2a\u4f4d\u7f6e\u4f7f\u7528 SecurityScopes \uff0c\u4e0d\u4e00\u5b9a\u975e\u5f97\u5728 \u6839 \u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528\u3002 \u5b83\u603b\u662f\u5728\u5f53\u524d Security \u4f9d\u8d56\u9879\u4e2d\u548c\u6240\u6709\u4f9d\u8d56\u56e0\u5b50\u5bf9\u4e8e \u7279\u5b9a \u8def\u5f84\u64cd\u4f5c \u548c \u7279\u5b9a \u4f9d\u8d56\u6811\u4e2d\u5b89\u5168\u4f5c\u7528\u57df \u56e0\u4e3a SecurityScopes \u5305\u542b\u6240\u6709\u7531\u4f9d\u8d56\u9879\u58f0\u660e\u7684\u4f5c\u7528\u57df\uff0c\u53ef\u4ee5\u5728\u6838\u5fc3\u4f9d\u8d56\u51fd\u6570\u4e2d\u7528\u5b83\u9a8c\u8bc1\u6240\u9700\u4f5c\u7528\u57df\u7684 Token\uff0c\u7136\u540e\u518d\u5728\u4e0d\u540c\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u4e0d\u540c\u4f5c\u7528\u57df\u9700\u6c42\u3002 \u5b83\u4eec\u4f1a\u4e3a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u8fdb\u884c\u5355\u72ec\u68c0\u67e5\u3002","title":"SecurityScopes \u7684\u66f4\u591a\u7ec6\u8282"},{"location":"advanced/security/oauth2-scopes/#_4","text":"\u6253\u5f00 API \u6587\u6863\uff0c\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u6307\u5b9a\u8981\u6388\u6743\u7684\u4f5c\u7528\u57df\u3002 \u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u4f5c\u7528\u57df\uff0c\u4e5f\u53ef\u4ee5\u8fdb\u884c \u8eab\u4efd\u9a8c\u8bc1 \uff0c\u4f46\u8bbf\u95ee /uses/me \u6216 /users/me/items \u65f6\uff0c\u4f1a\u663e\u793a\u6ca1\u6709\u8db3\u591f\u7684\u6743\u9650\u3002\u4f46\u4ecd\u53ef\u4ee5\u8bbf\u95ee /status/ \u3002 \u5982\u679c\u9009\u62e9\u4e86\u4f5c\u7528\u57df me \uff0c\u4f46\u6ca1\u6709\u9009\u62e9\u4f5c\u7528\u57df items \uff0c\u5219\u53ef\u4ee5\u8bbf\u95ee /users/me/ \uff0c\u4f46\u4e0d\u80fd\u8bbf\u95ee /users/me/items \u3002 \u8fd9\u5c31\u662f\u901a\u8fc7\u7528\u6237\u63d0\u4f9b\u7684 Token \u4f7f\u7528\u7b2c\u4e09\u65b9\u5e94\u7528\u8bbf\u95ee\u8fd9\u4e9b \u8def\u5f84\u64cd\u4f5c \u65f6\u4f1a\u53d1\u751f\u7684\u60c5\u51b5\uff0c\u5177\u4f53\u600e\u6837\u53d6\u51b3\u4e8e\u7528\u6237\u6388\u4e88\u7b2c\u4e09\u65b9\u5e94\u7528\u7684\u6743\u9650\u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"advanced/security/oauth2-scopes/#_5","text":"\u672c\u4f8b\u4f7f\u7528 OAuth2 \u5bc6\u7801\u6d41 \u3002 \u8fd9\u79cd\u65b9\u5f0f\u9002\u7528\u4e8e\u767b\u5f55\u6211\u4eec\u81ea\u5df1\u7684\u5e94\u7528\uff0c\u6700\u597d\u4f7f\u7528\u6211\u4eec\u81ea\u5df1\u7684\u524d\u7aef\u3002 \u56e0\u4e3a\u6211\u4eec\u80fd\u63a7\u5236\u81ea\u5df1\u7684\u524d\u7aef\u5e94\u7528\uff0c\u53ef\u4ee5\u4fe1\u4efb\u5b83\u63a5\u6536 username \u4e0e password \u3002 \u4f46\u5982\u679c\u6784\u5efa\u7684\u662f\u8fde\u63a5\u5176\u4ed6\u5e94\u7528\u7684 OAuth2 \u5e94\u7528\uff0c\u6bd4\u5982\u5177\u6709\u4e0e\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub \u76f8\u540c\u529f\u80fd\u7684\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u3002\u90a3\u60a8\u5c31\u5e94\u8be5\u4f7f\u7528\u5176\u4ed6\u5b89\u5168\u6d41\u3002 \u6700\u5e38\u7528\u7684\u662f\u9690\u5f0f\u6d41\u3002 \u6700\u5b89\u5168\u7684\u662f\u4ee3\u7801\u6d41\uff0c\u4f46\u5b9e\u73b0\u8d77\u6765\u66f4\u590d\u6742\uff0c\u800c\u4e14\u9700\u8981\u66f4\u591a\u6b65\u9aa4\u3002\u56e0\u4e3a\u5b83\u66f4\u590d\u6742\uff0c\u5f88\u591a\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u6700\u7ec8\u5efa\u8bae\u4f7f\u7528\u9690\u5f0f\u6d41\u3002 \u7b14\u8bb0 \u6bcf\u4e2a\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u90fd\u4f1a\u91c7\u7528\u4e0d\u540c\u65b9\u5f0f\u4f1a\u547d\u540d\u6d41\uff0c\u4ee5\u4fbf\u878d\u5408\u5165\u81ea\u5df1\u7684\u54c1\u724c\u3002 \u4f46\u5f52\u6839\u7ed3\u5e95\uff0c\u5b83\u4eec\u4f7f\u7528\u7684\u90fd\u662f OAuth2 \u6807\u51c6\u3002 FastAPI \u7684 fastapi.security.oauth2 \u91cc\u5305\u542b\u4e86\u6240\u6709 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u6d41\u5de5\u5177\u3002","title":"\u5173\u4e8e\u7b2c\u4e09\u65b9\u96c6\u6210"},{"location":"advanced/security/oauth2-scopes/#dependencies-security","text":"\u540c\u6837\uff0c\u60a8\u53ef\u4ee5\u5728\u88c5\u9970\u5668\u7684 dependencies \u53c2\u6570\u4e2d\u5b9a\u4e49 Depends \u5217\u8868\uff0c\uff08\u8be6\u89c1 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879 )\uff09\uff0c\u4e5f\u53ef\u4ee5\u628a scopes \u4e0e Security \u4e00\u8d77\u4f7f\u7528\u3002","title":"\u88c5\u9970\u5668 dependencies \u4e2d\u7684 Security"},{"location":"deployment/","text":"\u90e8\u7f72 - \u7b80\u4ecb \u00b6 \u90e8\u7f72 FastAPI \u5e94\u7528\u76f8\u5bf9\u7b80\u5355\u3002 \u6839\u636e\u4e0d\u540c\u7528\u4f8b\u548c\u8981\u4f7f\u7528\u7684\u5de5\u5177\uff0c\u6709\u591a\u79cd\u90e8\u7f72\u65b9\u5f0f\u3002 \u8be6\u89c1\u4e0b\u4e00\u8282\u3002","title":"\u90e8\u7f72 - \u7b80\u4ecb"},{"location":"deployment/#-","text":"\u90e8\u7f72 FastAPI \u5e94\u7528\u76f8\u5bf9\u7b80\u5355\u3002 \u6839\u636e\u4e0d\u540c\u7528\u4f8b\u548c\u8981\u4f7f\u7528\u7684\u5de5\u5177\uff0c\u6709\u591a\u79cd\u90e8\u7f72\u65b9\u5f0f\u3002 \u8be6\u89c1\u4e0b\u4e00\u8282\u3002","title":"\u90e8\u7f72 - \u7b80\u4ecb"},{"location":"deployment/concepts/","text":"\u90e8\u7f72\u7684\u6982\u5ff5 \u00b6 When deploying a FastAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application . Some of the important concepts are: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting We'll see how they would affect deployments . In the end, the ultimate objective is to be able to serve your API clients in a way that is secure , to avoid disruptions , and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80 I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet. By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs . In the next chapters, I'll give you more concrete recipes to deploy FastAPI applications. But for now, let's check these important conceptual ideas . These concepts also apply to any other type of web API. \ud83d\udca1 Security - HTTPS \u00b6 In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API. We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy . And there has to be something in charge of renewing the HTTPS certificates , it could be the same component or it could be something different. Example Tools for HTTPS \u00b6 Some of the tools you could use as a TLS Termination Proxy are: Traefik Automatically handles certificates renewals \u2728 Caddy Automatically handles certificates renewals \u2728 Nginx With an external component like Certbot for certificate renewals HAProxy With an external component like Certbot for certificate renewals Kubernetes with an Ingress Controller like Nginx With an external component like cert-manager for certificate renewals Handled internally by a cloud provider as part of their services (read below \ud83d\udc47) Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself. I'll show you some concrete examples in the next chapters. Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn). Program and Process \u00b6 We will talk a lot about the running \" process \", so it's useful to have clarity about what it means, and what's the difference with the word \" program \". What is a Program \u00b6 The word program is commonly used to describe many things: The code that you write, the Python files . The file that can be executed by the operating system, for example: python , python.exe or uvicorn . A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process . What is a Process \u00b6 The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above): A particular program while it is running on the operating system. This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system. Any program, any code, can only do things when it is being executed . So, when there's a process running . The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things . Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on. There can be multiple processes of the same program running at the same time. If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running. And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes. Now that we know the difference between the terms process and program , let's continue talking about deployments. Running on Startup \u00b6 In most cases, when you create a web API, you want it to be always running , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available . In a Remote Server \u00b6 When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally. And it will work and will be useful during development . But if your connection to the server is lost, the running process will probably die. And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it . And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31 Run Automatically on Startup \u00b6 In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention , to have a process always running with your API (e.g. Uvicorn running your FastAPI app). Separate Program \u00b6 To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database. Example Tools to Run at Startup \u00b6 Some examples of the tools that can do this job are: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... I'll give you more concrete examples in the next chapters. Restarts \u00b6 Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures. We Make Mistakes \u00b6 We, as humans, make mistakes , all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05). Small Errors Automatically Handled \u00b6 When building web APIs with FastAPI, if there's an error in our code, FastAPI will normally contain it to the single request that triggered the error. \ud83d\udee1 The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely. Bigger Errors - Crashes \u00b6 Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5 And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken. Restart After Crash \u00b6 But in those cases with really bad errors that crash the running process , you would want an external component that is in charge of restarting the process, at least a couple of times... Tip ...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment. So let's focus on the main cases, where it could crash entirely in some particular cases in the future , and it still makes sense to restart it. You would probably want to have the thing in charge of restarting your application as an external component , because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it. Example Tools to Restart Automatically \u00b6 In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts . For example, this could be handled by: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... Replication - Processes and Memory \u00b6 With a FastAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently. But in many cases, you will want to run several worker processes at the same time. Multiple Processes - Workers \u00b6 If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them. When you run multiple processes of the same API program, they are commonly called workers . Worker Processes and Ports \u00b6 Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server? This is still true. So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way. Memory per Process \u00b6 Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server. And multiple processes normally don't share any memory . This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory. Server Memory \u00b6 For example, if your code loads a Machine Learning model with 1 GB in size , when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM . And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8 Multiple Processes - An Example \u00b6 In this example, there's a Manager Process that starts and controls two Worker Processes . This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes. Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response , and they would load anything you put in variables in RAM. And of course, the same machine would probably have other processes running as well, apart from your application. An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable . If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly). Examples of Replication Tools and Strategies \u00b6 There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers. The main constraint to consider is that there has to be a single component handling the port in the public IP . And then it has to have a way to transmit the communication to the replicated processes/workers . Here are some possible combinations and strategies: Gunicorn managing Uvicorn workers Gunicorn would be the process manager listening on the IP and port , the replication would be by having multiple Uvicorn worker processes Uvicorn managing Uvicorn workers One Uvicorn process manager would listen on the IP and port , and it would start multiple Uvicorn worker processes Kubernetes and other distributed container systems Something in the Kubernetes layer would listen on the IP and port . The replication would be by having multiple containers , each with one Uvicorn process running Cloud services that handle this for your The cloud service will probably handle replication for you . It would possibly let you define a process to run , or a container image to use, in any case, it would most probably be a single Uvicorn process , and the cloud service would be in charge of replicating it. Tip Don't worry if some of these items about containers , Docker, or Kubernetes don't make a lot of sense yet. I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: FastAPI in Containers - Docker . Previous Steps Before Starting \u00b6 There are many cases where you want to perform some steps before starting your application. For example, you might want to run database migrations . But in most cases, you will want to perform these steps only once . So, you will want to have a single process to perform those previous steps , before starting the application. And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes , they would duplicate the work by running it on parallel , and if the steps were something delicate like a database migration, they could cause conflicts with each other. Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle. Tip Also, have in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application. In that case, you wouldn't have to worry about any of this. \ud83e\udd37 Examples of Previous Steps Strategies \u00b6 This will depend heavily on the way you deploy your system , and it would probably be connected to the way you start programs, handling restarts, etc. Here are some possible ideas: An \"Init Container\" in Kubernetes that runs before your app container A bash script that runs the previous steps and then starts your application You would still need a way to start/restart that bash script, detect errors, etc. Tip I'll give you more concrete examples for doing this with containers in a future chapter: FastAPI in Containers - Docker . Resource Utilization \u00b6 Your server(s) is (are) a resource , you can consume or utilize , with your programs, the computation time on the CPUs, and the RAM memory available. How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing . If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc. In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc). On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM , at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash . Or one process might need to do some computation and would have to wait until the CPU is free again. In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time . There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases. You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments. You can use simple tools like htop to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc. Recap \u00b6 You have been reading here some of the main concepts that you would probably need to have in mind when deciding how to deploy your application: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13 In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80","title":"\u90e8\u7f72\u7684\u6982\u5ff5"},{"location":"deployment/concepts/#_1","text":"When deploying a FastAPI application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the most appropriate way to deploy your application . Some of the important concepts are: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting We'll see how they would affect deployments . In the end, the ultimate objective is to be able to serve your API clients in a way that is secure , to avoid disruptions , and to use the compute resources (for example remote servers/virtual machines) as efficiently as possible. \ud83d\ude80 I'll tell you a bit more about these concepts here, and that would hopefully give you the intuition you would need to decide how to deploy your API in very different environments, possibly even in future ones that don't exist yet. By considering these concepts, you will be able to evaluate and design the best way to deploy your own APIs . In the next chapters, I'll give you more concrete recipes to deploy FastAPI applications. But for now, let's check these important conceptual ideas . These concepts also apply to any other type of web API. \ud83d\udca1","title":"\u90e8\u7f72\u7684\u6982\u5ff5"},{"location":"deployment/concepts/#security-https","text":"In the previous chapter about HTTPS we learned about how HTTPS provides encryption for your API. We also saw that HTTPS is normally provided by a component external to your application server, a TLS Termination Proxy . And there has to be something in charge of renewing the HTTPS certificates , it could be the same component or it could be something different.","title":"Security - HTTPS"},{"location":"deployment/concepts/#example-tools-for-https","text":"Some of the tools you could use as a TLS Termination Proxy are: Traefik Automatically handles certificates renewals \u2728 Caddy Automatically handles certificates renewals \u2728 Nginx With an external component like Certbot for certificate renewals HAProxy With an external component like Certbot for certificate renewals Kubernetes with an Ingress Controller like Nginx With an external component like cert-manager for certificate renewals Handled internally by a cloud provider as part of their services (read below \ud83d\udc47) Another option is that you could use a cloud service that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself. I'll show you some concrete examples in the next chapters. Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn).","title":"Example Tools for HTTPS"},{"location":"deployment/concepts/#program-and-process","text":"We will talk a lot about the running \" process \", so it's useful to have clarity about what it means, and what's the difference with the word \" program \".","title":"Program and Process"},{"location":"deployment/concepts/#what-is-a-program","text":"The word program is commonly used to describe many things: The code that you write, the Python files . The file that can be executed by the operating system, for example: python , python.exe or uvicorn . A particular program while it is running on the operating system, using the CPU, and storing things on memory. This is also called a process .","title":"What is a Program"},{"location":"deployment/concepts/#what-is-a-process","text":"The word process is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above): A particular program while it is running on the operating system. This doesn't refer to the file, nor to the code, it refers specifically to the thing that is being executed and managed by the operating system. Any program, any code, can only do things when it is being executed . So, when there's a process running . The process can be terminated (or \"killed\") by you, or by the operating system. At that point, it stops running/being executed, and it can no longer do things . Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running at the same time while a computer is on. There can be multiple processes of the same program running at the same time. If you check out the \"task manager\" or \"system monitor\" (or similar tools) in your operating system, you will be able to see many of those processes running. And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes. Now that we know the difference between the terms process and program , let's continue talking about deployments.","title":"What is a Process"},{"location":"deployment/concepts/#running-on-startup","text":"In most cases, when you create a web API, you want it to be always running , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and available .","title":"Running on Startup"},{"location":"deployment/concepts/#in-a-remote-server","text":"When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is to run Uvicorn (or similar) manually, the same way you do when developing locally. And it will work and will be useful during development . But if your connection to the server is lost, the running process will probably die. And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably won't notice it . And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. \ud83d\ude31","title":"In a Remote Server"},{"location":"deployment/concepts/#run-automatically-on-startup","text":"In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any human intervention , to have a process always running with your API (e.g. Uvicorn running your FastAPI app).","title":"Run Automatically on Startup"},{"location":"deployment/concepts/#separate-program","text":"To achieve this, you will normally have a separate program that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database.","title":"Separate Program"},{"location":"deployment/concepts/#example-tools-to-run-at-startup","text":"Some examples of the tools that can do this job are: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others... I'll give you more concrete examples in the next chapters.","title":"Example Tools to Run at Startup"},{"location":"deployment/concepts/#restarts","text":"Similar to making sure your application is run on startup, you probably also want to make sure it is restarted after failures.","title":"Restarts"},{"location":"deployment/concepts/#we-make-mistakes","text":"We, as humans, make mistakes , all the time. Software almost always has bugs hidden in different places. \ud83d\udc1b And we as developers keep improving the code as we find those bugs and as we implement new features (possibly adding new bugs too \ud83d\ude05).","title":"We Make Mistakes"},{"location":"deployment/concepts/#small-errors-automatically-handled","text":"When building web APIs with FastAPI, if there's an error in our code, FastAPI will normally contain it to the single request that triggered the error. \ud83d\udee1 The client will get a 500 Internal Server Error for that request, but the application will continue working for the next requests instead of just crashing completely.","title":"Small Errors Automatically Handled"},{"location":"deployment/concepts/#bigger-errors-crashes","text":"Nevertheless, there might be cases where we write some code that crashes the entire application making Uvicorn and Python crash. \ud83d\udca5 And still, you would probably not want the application to stay dead because there was an error in one place, you probably want it to continue running at least for the path operations that are not broken.","title":"Bigger Errors - Crashes"},{"location":"deployment/concepts/#restart-after-crash","text":"But in those cases with really bad errors that crash the running process , you would want an external component that is in charge of restarting the process, at least a couple of times... Tip ...Although if the whole application is just crashing immediately it probably doesn't make sense to keep restarting it forever. But in those cases, you will probably notice it during development, or at least right after deployment. So let's focus on the main cases, where it could crash entirely in some particular cases in the future , and it still makes sense to restart it. You would probably want to have the thing in charge of restarting your application as an external component , because by that point, the same application with Uvicorn and Python already crashed, so there's nothing in the same code of the same app that could do anything about it.","title":"Restart After Crash"},{"location":"deployment/concepts/#example-tools-to-restart-automatically","text":"In most cases, the same tool that is used to run the program on startup is also used to handle automatic restarts . For example, this could be handled by: Docker Kubernetes Docker Compose Docker in Swarm Mode Systemd Supervisor Handled internally by a cloud provider as part of their services Others...","title":"Example Tools to Restart Automatically"},{"location":"deployment/concepts/#replication-processes-and-memory","text":"With a FastAPI application, using a server program like Uvicorn, running it once in one process can serve multiple clients concurrently. But in many cases, you will want to run several worker processes at the same time.","title":"Replication - Processes and Memory"},{"location":"deployment/concepts/#multiple-processes-workers","text":"If you have more clients than what a single process can handle (for example if the virtual machine is not too big) and you have multiple cores in the server's CPU, then you could have multiple processes running with the same application at the same time, and distribute all the requests among them. When you run multiple processes of the same API program, they are commonly called workers .","title":"Multiple Processes - Workers"},{"location":"deployment/concepts/#worker-processes-and-ports","text":"Remember from the docs About HTTPS that only one process can be listening on one combination of port and IP address in a server? This is still true. So, to be able to have multiple processes at the same time, there has to be a single process listening on a port that then transmits the communication to each worker process in some way.","title":"Worker Processes and Ports"},{"location":"deployment/concepts/#memory-per-process","text":"Now, when the program loads things in memory, for example, a machine learning model in a variable, or the contents of a large file in a variable, all that consumes a bit of the memory (RAM) of the server. And multiple processes normally don't share any memory . This means that each running process has its own things, variables, and memory. And if you are consuming a large amount of memory in your code, each process will consume an equivalent amount of memory.","title":"Memory per Process"},{"location":"deployment/concepts/#server-memory","text":"For example, if your code loads a Machine Learning model with 1 GB in size , when you run one process with your API, it will consume at least 1 GB of RAM. And if you start 4 processes (4 workers), each will consume 1 GB of RAM. So in total, your API will consume 4 GB of RAM . And if your remote server or virtual machine only has 3 GB of RAM, trying to load more than 4 GB of RAM will cause problems. \ud83d\udea8","title":"Server Memory"},{"location":"deployment/concepts/#multiple-processes-an-example","text":"In this example, there's a Manager Process that starts and controls two Worker Processes . This Manager Process would probably be the one listening on the port in the IP. And it would transmit all the communication to the worker processes. Those worker processes would be the ones running your application, they would perform the main computations to receive a request and return a response , and they would load anything you put in variables in RAM. And of course, the same machine would probably have other processes running as well, apart from your application. An interesting detail is that the percentage of the CPU used by each process can vary a lot over time, but the memory (RAM) normally stays more or less stable . If you have an API that does a comparable amount of computations every time and you have a lot of clients, then the CPU utilization will probably also be stable (instead of constantly going up and down quickly).","title":"Multiple Processes - An Example"},{"location":"deployment/concepts/#examples-of-replication-tools-and-strategies","text":"There can be several approaches to achieve this, and I'll tell you more about specific strategies in the next chapters, for example when talking about Docker and containers. The main constraint to consider is that there has to be a single component handling the port in the public IP . And then it has to have a way to transmit the communication to the replicated processes/workers . Here are some possible combinations and strategies: Gunicorn managing Uvicorn workers Gunicorn would be the process manager listening on the IP and port , the replication would be by having multiple Uvicorn worker processes Uvicorn managing Uvicorn workers One Uvicorn process manager would listen on the IP and port , and it would start multiple Uvicorn worker processes Kubernetes and other distributed container systems Something in the Kubernetes layer would listen on the IP and port . The replication would be by having multiple containers , each with one Uvicorn process running Cloud services that handle this for your The cloud service will probably handle replication for you . It would possibly let you define a process to run , or a container image to use, in any case, it would most probably be a single Uvicorn process , and the cloud service would be in charge of replicating it. Tip Don't worry if some of these items about containers , Docker, or Kubernetes don't make a lot of sense yet. I'll tell you more about container images, Docker, Kubernetes, etc. in a future chapter: FastAPI in Containers - Docker .","title":"Examples of Replication Tools and Strategies"},{"location":"deployment/concepts/#previous-steps-before-starting","text":"There are many cases where you want to perform some steps before starting your application. For example, you might want to run database migrations . But in most cases, you will want to perform these steps only once . So, you will want to have a single process to perform those previous steps , before starting the application. And you will have to make sure that it's a single process running those previous steps even if afterwards, you start multiple processes (multiple workers) for the application itself. If those steps were run by multiple processes , they would duplicate the work by running it on parallel , and if the steps were something delicate like a database migration, they could cause conflicts with each other. Of course, there are some cases where there's no problem in running the previous steps multiple times, in that case, it's a lot easier to handle. Tip Also, have in mind that depending on your setup, in some cases you might not even need any previous steps before starting your application. In that case, you wouldn't have to worry about any of this. \ud83e\udd37","title":"Previous Steps Before Starting"},{"location":"deployment/concepts/#examples-of-previous-steps-strategies","text":"This will depend heavily on the way you deploy your system , and it would probably be connected to the way you start programs, handling restarts, etc. Here are some possible ideas: An \"Init Container\" in Kubernetes that runs before your app container A bash script that runs the previous steps and then starts your application You would still need a way to start/restart that bash script, detect errors, etc. Tip I'll give you more concrete examples for doing this with containers in a future chapter: FastAPI in Containers - Docker .","title":"Examples of Previous Steps Strategies"},{"location":"deployment/concepts/#resource-utilization","text":"Your server(s) is (are) a resource , you can consume or utilize , with your programs, the computation time on the CPUs, and the RAM memory available. How much of the system resources do you want to be consuming/utilizing? It might be easy to think \"not much\", but in reality, you will probably want to consume as much as possible without crashing . If you are paying for 3 servers but you are using only a little bit of their RAM and CPU, you are probably wasting money \ud83d\udcb8, and probably wasting server electric power \ud83c\udf0e, etc. In that case, it could be better to have only 2 servers and use a higher percentage of their resources (CPU, memory, disk, network bandwidth, etc). On the other hand, if you have 2 servers and you are using 100% of their CPU and RAM , at some point one process will ask for more memory, and the server will have to use the disk as \"memory\" (which can be thousands of times slower), or even crash . Or one process might need to do some computation and would have to wait until the CPU is free again. In this case, it would be better to get one extra server and run some processes on it so that they all have enough RAM and CPU time . There's also the chance that for some reason you have a spike of usage of your API. Maybe it went viral, or maybe some other services or bots start using it. And you might want to have extra resources to be safe in those cases. You could put an arbitrary number to target, for example, something between 50% to 90% of resource utilization. The point is that those are probably the main things you will want to measure and use to tweak your deployments. You can use simple tools like htop to see the CPU and RAM used in your server or the amount used by each process. Or you can use more complex monitoring tools, which may be distributed across servers, etc.","title":"Resource Utilization"},{"location":"deployment/concepts/#recap","text":"You have been reading here some of the main concepts that you would probably need to have in mind when deciding how to deploy your application: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Understanding these ideas and how to apply them should give you the intuition necessary to take any decisions when configuring and tweaking your deployments. \ud83e\udd13 In the next sections, I'll give you more concrete examples of possible strategies you can follow. \ud83d\ude80","title":"Recap"},{"location":"deployment/deta/","text":"\u5728 Deta \u4e0a\u90e8\u7f72 FastAPI \u00b6 \u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Deta \u514d\u8d39\u65b9\u6848\u90e8\u7f72 FastAPI \u5e94\u7528\u3002\ud83c\udf81 \u90e8\u7f72\u64cd\u4f5c\u9700\u8981\u5927\u7ea6 10 \u5206\u949f\u3002 \u8bf4\u660e Deta \u662f FastAPI \u7684\u8d5e\u52a9\u5546\u3002 \ud83c\udf89 \u57fa\u7840 FastAPI \u5e94\u7528 \u00b6 \u521b\u5efa\u5e94\u7528\u6587\u4ef6\u5939\uff0c\u4f8b\u5982 ./fastapideta/ \uff0c\u8fdb\u5165\u6587\u4ef6\u5939 FastAPI \u4ee3\u7801 \u00b6 \u521b\u5efa\u5305\u542b\u5982\u4e0b\u4ee3\u7801\u7684 main.py \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int ): return { \"item_id\" : item_id } \u9700\u6c42\u9879 \u00b6 \u5728\u6587\u4ef6\u5939\u91cc\u65b0\u5efa\u5305\u542b\u5982\u4e0b\u5185\u5bb9\u7684 requirements.txt \u6587\u4ef6\uff1a fastapi \u63d0\u793a \u5728 Deta \u4e0a\u90e8\u7f72\u65f6\u65e0\u9700\u5b89\u88c5 Uvicorn\uff0c\u867d\u7136\u5728\u672c\u5730\u6d4b\u8bd5\u5e94\u7528\u65f6\u9700\u8981\u5b89\u88c5\u3002 \u6587\u4ef6\u5939\u67b6\u6784 \u00b6 ./fastapideta/ \u6587\u4ef6\u5939\u4e2d\u73b0\u5728\u6709\u4e24\u4e2a\u6587\u4ef6\uff1a . \u2514\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt \u521b\u5efa\u514d\u8d39 Deta \u8d26\u53f7 \u00b6 \u521b\u5efa \u514d\u8d39\u7684 Deta \u8d26\u53f7 \uff0c\u53ea\u9700\u8981\u7535\u5b50\u90ae\u4ef6\u548c\u5bc6\u7801\u3002 \u751a\u81f3\u4e0d\u9700\u8981\u4fe1\u7528\u5361\u3002 \u5b89\u88c5 CLI \u00b6 \u521b\u5efa\u8d26\u53f7\u540e\uff0c\u5b89\u88c5 Deta CLI \uff1a Linux, macOS Windows PowerShell $ curl -fsSL https://get.deta.dev/cli.sh | sh $ iwr https://get.deta.dev/cli.ps1 -useb | iex \u5b89\u88c5\u5b8c CLI \u540e\uff0c\u6253\u5f00\u65b0\u7684 Terminal\uff0c\u5c31\u80fd\u68c0\u6d4b\u5230\u521a\u5b89\u88c5\u7684 CLI\u3002 \u5728\u65b0\u7684 Terminal \u91cc\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u786e\u8ba4 CLI \u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a $ deta --help Deta command line interface for managing deta micros. Complete documentation available at https://docs.deta.sh Usage: deta [flags] deta [command] Available Commands: auth Change auth settings for a deta micro ... \u63d0\u793a \u5b89\u88c5 CLI \u9047\u5230\u95ee\u9898\u65f6\uff0c\u8bf7\u53c2\u9605 Deta \u5b98\u6863 \u3002 \u4f7f\u7528 CLI \u767b\u5f55 \u00b6 \u73b0\u5728\uff0c\u4f7f\u7528 CLI \u767b\u5f55 Deta\uff1a $ deta login Please, log in from the web page. Waiting.. Logged in successfully. \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u81ea\u52a8\u9a8c\u8bc1\u8eab\u4efd\u3002 \u4f7f\u7528 Deta \u90e8\u7f72 \u00b6 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Deta CLI \u90e8\u7f72\u5e94\u7528\uff1a $ deta new Successfully created a new micro // Notice the \"endpoint\" \ud83d\udd0d { \"name\": \"fastapideta\", \"runtime\": \"python3.7\", \"endpoint\": \"https://qltnci.deta.dev\", \"visor\": \"enabled\", \"http_auth\": \"enabled\" } Adding dependencies... ---> 100% Successfully installed fastapi-0.61.1 pydantic-1.7.2 starlette-0.13.6 \u60a8\u4f1a\u770b\u5230\u5982\u4e0b JSON \u4fe1\u606f\uff1a { \"name\" : \"fastapideta\" , \"runtime\" : \"python3.7\" , \"endpoint\" : \"https://qltnci.deta.dev\" , \"visor\" : \"enabled\" , \"http_auth\" : \"enabled\" } \u63d0\u793a \u60a8\u90e8\u7f72\u65f6\u7684 \"endpoint\" URL \u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002 \u67e5\u770b\u6548\u679c \u00b6 \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8df3\u8f6c\u5230 endpoint URL\u3002\u672c\u4f8b\u4e2d\u662f https://qltnci.deta.dev \uff0c\u4f46\u60a8\u7684\u94fe\u63a5\u53ef\u80fd\u4e0e\u6b64\u4e0d\u540c\u3002 FastAPI \u5e94\u7528\u4f1a\u8fd4\u56de\u5982\u4e0b JSON \u54cd\u5e94\uff1a { \"Hello\" : \"World\" } \u63a5\u4e0b\u6765\uff0c\u8df3\u8f6c\u5230 API \u6587\u6863 /docs \uff0c\u672c\u4f8b\u4e2d\u662f https://qltnci.deta.dev/docs \u3002 \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a \u542f\u7528\u516c\u5f00\u8bbf\u95ee \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDeta \u4f7f\u7528\u60a8\u7684\u8d26\u53f7 Cookies \u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u3002 \u5e94\u7528\u4e00\u5207\u5c31\u7eea\u4e4b\u540e\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u8ba9\u516c\u4f17\u4e5f\u80fd\u770b\u5230\u60a8\u7684\u5e94\u7528\uff1a $ deta auth disable Successfully disabled http auth \u628a URL \u5206\u4eab\u7ed9\u5927\u5bb6\uff0c\u5c31\u80fd\u8bbf\u95ee\u60a8\u7684 API \u4e86\u3002\ud83d\ude80 HTTPS \u00b6 \u606d\u559c\uff01\u60a8\u5df2\u7ecf\u5728 Deta \u4e0a\u90e8\u7f72\u4e86 FastAPI \u5e94\u7528\uff01\ud83c\udf89 \ud83c\udf70 \u8fd8\u8981\u6ce8\u610f\uff0cDeta \u80fd\u591f\u6b63\u786e\u5904\u7406 HTTPS\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u64cd\u5fc3 HTTPS\uff0c\u60a8\u7684\u5ba2\u6237\u7aef\u80af\u5b9a\u80fd\u6709\u5b89\u5168\u52a0\u5bc6\u7684\u8fde\u63a5\u3002 \u2705 \ud83d\udd12 \u67e5\u770b Visor \u00b6 \u4ece API \u6587\u6863\uff08URL \u662f https://gltnci.deta.dev/docs \uff09\u53d1\u9001\u8bf7\u6c42\u81f3 \u8def\u5f84\u64cd\u4f5c /items/{item_id} \u3002 \u4f8b\u5982\uff0cID 5 \u3002 \u73b0\u5728\u8df3\u8f6c\u81f3 https://web.deta.sh\u3002 \u5de6\u8fb9\u680f\u6709\u4e2a \"Micros\" \u6807\u7b7e\uff0c\u91cc\u9762\u662f\u6240\u6709\u7684\u5e94\u7528\u3002 \u8fd8\u6709\u4e00\u4e2a Details \u548c Visor \u6807\u7b7e\uff0c\u8df3\u8f6c\u5230 Visor \u6807\u7b7e\u3002 \u5728\u8fd9\u91cc\u67e5\u770b\u6700\u8fd1\u53d1\u9001\u7ed9\u5e94\u7528\u7684\u8bf7\u6c42\u3002 \u60a8\u53ef\u4ee5\u7f16\u8f91\u6216\u91cd\u65b0\u4f7f\u7528\u8fd9\u4e9b\u8bf7\u6c42\u3002 \u66f4\u591a\u5185\u5bb9 \u00b6 \u5982\u679c\u8981\u6301\u4e45\u5316\u4fdd\u5b58\u5e94\u7528\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u4e86 \u514d\u8d39\u65b9\u6848 \u7684 Deta Base \u3002 \u8be6\u89c1 Deta \u5b98\u6863 \u3002","title":"\u5728 Deta \u4e0a\u90e8\u7f72 FastAPI"},{"location":"deployment/deta/#deta-fastapi","text":"\u672c\u8282\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Deta \u514d\u8d39\u65b9\u6848\u90e8\u7f72 FastAPI \u5e94\u7528\u3002\ud83c\udf81 \u90e8\u7f72\u64cd\u4f5c\u9700\u8981\u5927\u7ea6 10 \u5206\u949f\u3002 \u8bf4\u660e Deta \u662f FastAPI \u7684\u8d5e\u52a9\u5546\u3002 \ud83c\udf89","title":"\u5728 Deta \u4e0a\u90e8\u7f72 FastAPI"},{"location":"deployment/deta/#fastapi","text":"\u521b\u5efa\u5e94\u7528\u6587\u4ef6\u5939\uff0c\u4f8b\u5982 ./fastapideta/ \uff0c\u8fdb\u5165\u6587\u4ef6\u5939","title":"\u57fa\u7840 FastAPI \u5e94\u7528"},{"location":"deployment/deta/#fastapi_1","text":"\u521b\u5efa\u5305\u542b\u5982\u4e0b\u4ee3\u7801\u7684 main.py \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int ): return { \"item_id\" : item_id }","title":"FastAPI \u4ee3\u7801"},{"location":"deployment/deta/#_1","text":"\u5728\u6587\u4ef6\u5939\u91cc\u65b0\u5efa\u5305\u542b\u5982\u4e0b\u5185\u5bb9\u7684 requirements.txt \u6587\u4ef6\uff1a fastapi \u63d0\u793a \u5728 Deta \u4e0a\u90e8\u7f72\u65f6\u65e0\u9700\u5b89\u88c5 Uvicorn\uff0c\u867d\u7136\u5728\u672c\u5730\u6d4b\u8bd5\u5e94\u7528\u65f6\u9700\u8981\u5b89\u88c5\u3002","title":"\u9700\u6c42\u9879"},{"location":"deployment/deta/#_2","text":"./fastapideta/ \u6587\u4ef6\u5939\u4e2d\u73b0\u5728\u6709\u4e24\u4e2a\u6587\u4ef6\uff1a . \u2514\u2500\u2500 main.py \u2514\u2500\u2500 requirements.txt","title":"\u6587\u4ef6\u5939\u67b6\u6784"},{"location":"deployment/deta/#deta","text":"\u521b\u5efa \u514d\u8d39\u7684 Deta \u8d26\u53f7 \uff0c\u53ea\u9700\u8981\u7535\u5b50\u90ae\u4ef6\u548c\u5bc6\u7801\u3002 \u751a\u81f3\u4e0d\u9700\u8981\u4fe1\u7528\u5361\u3002","title":"\u521b\u5efa\u514d\u8d39 Deta \u8d26\u53f7"},{"location":"deployment/deta/#cli","text":"\u521b\u5efa\u8d26\u53f7\u540e\uff0c\u5b89\u88c5 Deta CLI \uff1a Linux, macOS Windows PowerShell $ curl -fsSL https://get.deta.dev/cli.sh | sh $ iwr https://get.deta.dev/cli.ps1 -useb | iex \u5b89\u88c5\u5b8c CLI \u540e\uff0c\u6253\u5f00\u65b0\u7684 Terminal\uff0c\u5c31\u80fd\u68c0\u6d4b\u5230\u521a\u5b89\u88c5\u7684 CLI\u3002 \u5728\u65b0\u7684 Terminal \u91cc\uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u786e\u8ba4 CLI \u662f\u5426\u6b63\u786e\u5b89\u88c5\uff1a $ deta --help Deta command line interface for managing deta micros. Complete documentation available at https://docs.deta.sh Usage: deta [flags] deta [command] Available Commands: auth Change auth settings for a deta micro ... \u63d0\u793a \u5b89\u88c5 CLI \u9047\u5230\u95ee\u9898\u65f6\uff0c\u8bf7\u53c2\u9605 Deta \u5b98\u6863 \u3002","title":"\u5b89\u88c5 CLI"},{"location":"deployment/deta/#cli_1","text":"\u73b0\u5728\uff0c\u4f7f\u7528 CLI \u767b\u5f55 Deta\uff1a $ deta login Please, log in from the web page. Waiting.. Logged in successfully. \u8fd9\u4e2a\u547d\u4ee4\u4f1a\u6253\u5f00\u6d4f\u89c8\u5668\u5e76\u81ea\u52a8\u9a8c\u8bc1\u8eab\u4efd\u3002","title":"\u4f7f\u7528 CLI \u767b\u5f55"},{"location":"deployment/deta/#deta_1","text":"\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Deta CLI \u90e8\u7f72\u5e94\u7528\uff1a $ deta new Successfully created a new micro // Notice the \"endpoint\" \ud83d\udd0d { \"name\": \"fastapideta\", \"runtime\": \"python3.7\", \"endpoint\": \"https://qltnci.deta.dev\", \"visor\": \"enabled\", \"http_auth\": \"enabled\" } Adding dependencies... ---> 100% Successfully installed fastapi-0.61.1 pydantic-1.7.2 starlette-0.13.6 \u60a8\u4f1a\u770b\u5230\u5982\u4e0b JSON \u4fe1\u606f\uff1a { \"name\" : \"fastapideta\" , \"runtime\" : \"python3.7\" , \"endpoint\" : \"https://qltnci.deta.dev\" , \"visor\" : \"enabled\" , \"http_auth\" : \"enabled\" } \u63d0\u793a \u60a8\u90e8\u7f72\u65f6\u7684 \"endpoint\" URL \u53ef\u80fd\u4f1a\u6709\u6240\u4e0d\u540c\u3002","title":"\u4f7f\u7528 Deta \u90e8\u7f72"},{"location":"deployment/deta/#_3","text":"\u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8df3\u8f6c\u5230 endpoint URL\u3002\u672c\u4f8b\u4e2d\u662f https://qltnci.deta.dev \uff0c\u4f46\u60a8\u7684\u94fe\u63a5\u53ef\u80fd\u4e0e\u6b64\u4e0d\u540c\u3002 FastAPI \u5e94\u7528\u4f1a\u8fd4\u56de\u5982\u4e0b JSON \u54cd\u5e94\uff1a { \"Hello\" : \"World\" } \u63a5\u4e0b\u6765\uff0c\u8df3\u8f6c\u5230 API \u6587\u6863 /docs \uff0c\u672c\u4f8b\u4e2d\u662f https://qltnci.deta.dev/docs \u3002 \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a","title":"\u67e5\u770b\u6548\u679c"},{"location":"deployment/deta/#_4","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cDeta \u4f7f\u7528\u60a8\u7684\u8d26\u53f7 Cookies \u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\u3002 \u5e94\u7528\u4e00\u5207\u5c31\u7eea\u4e4b\u540e\uff0c\u4f7f\u7528\u5982\u4e0b\u547d\u4ee4\u8ba9\u516c\u4f17\u4e5f\u80fd\u770b\u5230\u60a8\u7684\u5e94\u7528\uff1a $ deta auth disable Successfully disabled http auth \u628a URL \u5206\u4eab\u7ed9\u5927\u5bb6\uff0c\u5c31\u80fd\u8bbf\u95ee\u60a8\u7684 API \u4e86\u3002\ud83d\ude80","title":"\u542f\u7528\u516c\u5f00\u8bbf\u95ee"},{"location":"deployment/deta/#https","text":"\u606d\u559c\uff01\u60a8\u5df2\u7ecf\u5728 Deta \u4e0a\u90e8\u7f72\u4e86 FastAPI \u5e94\u7528\uff01\ud83c\udf89 \ud83c\udf70 \u8fd8\u8981\u6ce8\u610f\uff0cDeta \u80fd\u591f\u6b63\u786e\u5904\u7406 HTTPS\uff0c\u56e0\u6b64\u60a8\u4e0d\u5fc5\u64cd\u5fc3 HTTPS\uff0c\u60a8\u7684\u5ba2\u6237\u7aef\u80af\u5b9a\u80fd\u6709\u5b89\u5168\u52a0\u5bc6\u7684\u8fde\u63a5\u3002 \u2705 \ud83d\udd12","title":"HTTPS"},{"location":"deployment/deta/#visor","text":"\u4ece API \u6587\u6863\uff08URL \u662f https://gltnci.deta.dev/docs \uff09\u53d1\u9001\u8bf7\u6c42\u81f3 \u8def\u5f84\u64cd\u4f5c /items/{item_id} \u3002 \u4f8b\u5982\uff0cID 5 \u3002 \u73b0\u5728\u8df3\u8f6c\u81f3 https://web.deta.sh\u3002 \u5de6\u8fb9\u680f\u6709\u4e2a \"Micros\" \u6807\u7b7e\uff0c\u91cc\u9762\u662f\u6240\u6709\u7684\u5e94\u7528\u3002 \u8fd8\u6709\u4e00\u4e2a Details \u548c Visor \u6807\u7b7e\uff0c\u8df3\u8f6c\u5230 Visor \u6807\u7b7e\u3002 \u5728\u8fd9\u91cc\u67e5\u770b\u6700\u8fd1\u53d1\u9001\u7ed9\u5e94\u7528\u7684\u8bf7\u6c42\u3002 \u60a8\u53ef\u4ee5\u7f16\u8f91\u6216\u91cd\u65b0\u4f7f\u7528\u8fd9\u4e9b\u8bf7\u6c42\u3002","title":"\u67e5\u770b Visor"},{"location":"deployment/deta/#_5","text":"\u5982\u679c\u8981\u6301\u4e45\u5316\u4fdd\u5b58\u5e94\u7528\u6570\u636e\uff0c\u53ef\u4ee5\u4f7f\u7528\u63d0\u4f9b\u4e86 \u514d\u8d39\u65b9\u6848 \u7684 Deta Base \u3002 \u8be6\u89c1 Deta \u5b98\u6863 \u3002","title":"\u66f4\u591a\u5185\u5bb9"},{"location":"deployment/docker/","text":"\u4f7f\u7528 Docker \u90e8\u7f72 \u00b6 \u672c\u7ae0\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a \u521b\u5efa\u6700\u9ad8\u6027\u80fd\u7684 FastAPI \u5e94\u7528 Docker \u955c\u50cf/\u5bb9\u5668\u3002 \u7ea6 5 \u5206\u949f \uff1b \uff08\u53ef\u9009\uff09\u5f00\u53d1\u8005\u9700\u8981\u4e86\u89e3\u7684 HTTPS \u77e5\u8bc6\uff1b \u4f7f\u7528\u81ea\u52a8 HTTPS \u8bbe\u7f6e Docker Swarm \u6a21\u5f0f\u96c6\u7fa4\uff0c\u540c\u6837\u9002\u7528\u4e8e 5\u7f8e\u5143/\u6708\u7684\u7b80\u5355\u670d\u52a1\u5668\u3002 \u7ea6 20 \u5206\u949f \uff1b \u4f7f\u7528 Docker Swarm \u4e0e HTTPS \u751f\u6210\u5e76\u90e8\u7f72\u5b8c\u6574\u7684 FastAPI \u5e94\u7528\u3002 \u7ea6 10 \u5206\u949f \u3002 \u4f7f\u7528 Docker \u90e8\u7f72\u5e94\u7528\u5177\u6709\u5b89\u5168\u3001\u53ef\u590d\u5236\u3001\u5f00\u53d1\u7b80\u5355\u7b49\u4f18\u52bf\u3002 \u5982\u679c\u4f7f\u7528 Docker\uff0c\u63a8\u8350\u4f7f\u7528\u5b98\u65b9 Docker \u955c\u50cf\uff1a tiangolo/uvicorn-gunicorn-fastapi \u00b6 \u8fd9\u4e2a\u955c\u50cf\u5185\u7f6e\u4e86 \u81ea\u52a8\u8c03\u4f18 \u673a\u5236\uff0c\u53ea\u9700\u6dfb\u52a0\u4ee3\u7801\uff0c\u5c31\u80fd\u5f00\u53d1\u51fa\u9ad8\u6027\u80fd\u7684\u5e94\u7528\uff0c\u800c\u4e14\u4e0d\u7528\u4ed8\u51fa\u4efb\u4f55\u4ee3\u4ef7\u3002 \u60a8\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u6216\u914d\u7f6e\u6587\u4ef6\u66f4\u6539\u914d\u7f6e\u3002 \u63d0\u793a \u8981\u67e5\u770b\u6240\u6709\u914d\u7f6e\u548c\u9009\u9879\uff0c\u8bf7\u53c2\u9605 Docker \u955c\u50cf\u9875\u9762: tiangolo/uvicorn-gunicorn-fastapi \u3002 \u521b\u5efa Dockerfile \u00b6 \u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939 \u521b\u5efa\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684 Dockerfile \uff1a FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7 COPY ./app /app \u5927\u578b\u5e94\u7528 \u00b6 \u53c2\u7167\u521b\u5efa \u591a\u6587\u4ef6\u5927\u578b\u5e94\u7528 \u4e00\u7ae0\uff0c Dockerfile \u7684\u5185\u5bb9\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\uff1a FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7 COPY ./app /app/app \u6811\u8393\u6d3e\u4e0e\u5176\u4ed6\u67b6\u6784 \u00b6 \u5982\u679c\u5728\uff08\u4f7f\u7528 ARM \u5904\u7406\u5668\u7684\uff09\u6811\u8393\u6d3e\u6216\u5176\u4ed6\u4efb\u4f55\u67b6\u6784\u4e2d\u8fd0\u884c Docker\uff0c\u8981\u57fa\u4e8e Python \u57fa\u7840\u955c\u50cf\uff08\u591a\u67b6\u6784\uff09\u4ece\u5934\u521b\u5efa Dockerfile \uff0c\u5e76\u5355\u72ec\u4f7f\u7528 Uvicorn\u3002 \u672c\u4f8b\u4e2d\uff0c Dockerfile \u7684\u5185\u5bb9\u5982\u4e0b\uff1a FROM python:3.7 RUN pip install fastapi uvicorn EXPOSE 80 COPY ./app /app CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ] \u521b\u5efa FastAPI \u4ee3\u7801 \u00b6 \u521b\u5efa app \u6587\u4ef6\u5939\uff0c\u5e76\u8fdb\u5165\u6587\u4ef6\u5939 \u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa main.py \uff1a from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u6587\u4ef6\u5939\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 main.py \u2514\u2500\u2500 Dockerfile \u6784\u5efa Docker \u955c\u50cf \u00b6 \u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939\uff08 Dockerfile \u6240\u5728\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b app \u6587\u4ef6\u5939\uff09 \u6784\u5efa FastAPI \u955c\u50cf\uff1a $ docker build -t myimage . ---> 100% \u542f\u52a8 Docker \u5bb9\u5668 \u00b6 \u8fd0\u884c\u57fa\u4e8e\u955c\u50cf\u7684\u5bb9\u5668\uff1a $ docker run -d --name mycontainer -p 80 :80 myimage \u8fd9\u6837\uff0c\u5c31\u5728 Docker \u5bb9\u5668\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u4f18\u5316\u8fc7\u7684 FastAPI \u670d\u52a1\u5668\u3002\u5e76\u5bf9\u5f53\u524d\u670d\u52a1\u5668\uff08\u548c CPU \u5185\u6838\u6570\uff09\u8fdb\u884c\u4e86\u81ea\u52a8\u8c03\u4f18\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u67e5\u770bDocker\u5bb9\u5668\u7684 URL\uff0c\u4f8b\u5982\uff1a http://192.168.99.100/items/5?q=somequery \u6216 http://127.0.0.1/items/5?q=somequery \uff08\u6216\u4f7f\u7528 Docker \u4e3b\u673a\uff09\u3002 \u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"item_id\" : 5 , \"q\" : \"somequery\" } API \u6587\u6863 \u00b6 \u73b0\u5728\u8df3\u8f6c\u81f3 http://192.168.99.100/docs \u6216 http://127.0.0.1/docs \uff08\u6216\u4f7f\u7528 Docker \u4e3b\u673a\uff09\u3002 \u67e5\u770b\u81ea\u52a8\u4ea4\u4e92\u7684\uff08 Swagger UI \uff09 API \u6587\u6863\u3002 \u5907\u9009 API \u6587\u6863 \u00b6 \u8df3\u8f6c\u81f3 http://192.168.99.100/redoc \u6216 http://127.0.0.1/redoc \uff08\u6216 Docker \u4e3b\u673a\uff09\u3002 \u67e5\u770b\uff08 ReDoc \uff09\u5907\u9009 API \u6587\u6863\uff1a Traefik \u00b6 Traefik \u662f\u9ad8\u6027\u80fd\u53cd\u5411\u4ee3\u7406/\u52a0\u8f7d\u5747\u8861\u5668\uff0c\u7528\u4e8e\u6267\u884c TLS \u7ec8\u6b62\u4ee3\u7406 \u4efb\u52a1\uff08\u5176\u4ed6\u529f\u80fd\u9664\u5916\uff09\u3002 \u5b83\u96c6\u6210\u4e86 Let's Encrypt\uff0c\u53ef\u4ee5\u5904\u7406\u6240\u6709 HTTPS \u7ec4\u4ef6\uff0c\u5305\u62ec\u83b7\u53d6\u4e0e\u66f4\u65b0\u8bc1\u4e66\u3002 Traefik \u8fd8\u96c6\u6210\u4e86 Docker\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e2a\u5e94\u7528\u914d\u7f6e\u4e2d\u58f0\u660e\u57df\uff0c\u7528\u5b83\u8bfb\u53d6\u914d\u7f6e\uff0c\u751f\u6210 HTTPS \u8bc1\u4e66\uff0c\u4e3a\u5e94\u7528\u81ea\u52a8\u63d0\u4f9b HTTPS \u670d\u52a1\uff0c\u800c\u4e14\u65e0\u9700\u5728\u914d\u7f6e\u4e2d\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u3002 \u6709\u4e86\u8fd9\u4e9b\u4fe1\u606f\u4e0e\u5de5\u5177\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4e0b\u4e00\u8282\u7ec4\u5408\u6240\u6709\u5185\u5bb9\u3002 \u652f\u6301 Traefik \u4e0e HTTPS \u7684 Docker Swarm mode \u96c6\u7fa4 \u00b6 \u8bbe\u7f6e Docker Swarm Mode \u96c6\u7fa4\u5927\u7ea6\u9700\u8981 20 \u5206\u949f\uff0c\u8fd8\u5305\u62ec\u4f7f\u7528 Traefik \u5904\u7406 HTTPS\uff08\u5305\u62ec\u8bc1\u4e66\u83b7\u53d6\u4e0e\u66f4\u65b0\uff09\u3002 \u4f7f\u7528 Docker Swarm Mode \u53ef\u4ee5\u542f\u7528\u5355\u673a \u201c\u96c6\u7fa4\u201d\uff08\u4ec5 5 \u7f8e\u5143/\u6708 \u670d\u52a1\u5668\uff09\uff0c\u7136\u540e\u518d\u6309\u9700\u6dfb\u52a0\u66f4\u591a\u670d\u52a1\u5668\u3002 \u4f7f\u7528 Traefik \u4e0e HTTPS \u8bbe\u7f6e Docker Swarm Mode \u96c6\u7fa4\uff0c\u8981\u9075\u5faa\u4ee5\u4e0b\u6307\u5357\uff1a \u7528\u4e8e HTTPS \u96c6\u7fa4\u7684 Docker Swarm Mode \u4e0e Traefik \u90e8\u7f72 FastAPI \u5e94\u7528 \u00b6 \u5b8c\u6210\u8fd9\u4e9b\u8bbe\u7f6e\u7684\u6700\u7b80\u5355\u65b9\u5f0f\u662f\u4f7f\u7528 FastAPI \u9879\u76ee\u751f\u6210\u5668 \u3002 \u9879\u76ee\u751f\u6210\u5668\u96c6\u6210\u4e86 Docker Swarm \u96c6\u7fa4\u4e0e Traefik \u4e0e HTTPS\u3002 \u751f\u6210\u9879\u76ee\u53ea\u9700\u8981\u5927\u7ea6 2 \u5206\u949f\u3002 \u751f\u6210\u7684\u9879\u76ee\u63d0\u4f9b\u4e86\u90e8\u7f72\u8bf4\u660e\uff0c\u518d\u7528 2 \u5206\u949f\u5c31\u53ef\u4ee5\u5b8c\u6210\u90e8\u7f72\u3002","title":"\u4f7f\u7528 Docker \u90e8\u7f72"},{"location":"deployment/docker/#docker","text":"\u672c\u7ae0\u7684\u4e3b\u8981\u5185\u5bb9\u5982\u4e0b\uff1a \u521b\u5efa\u6700\u9ad8\u6027\u80fd\u7684 FastAPI \u5e94\u7528 Docker \u955c\u50cf/\u5bb9\u5668\u3002 \u7ea6 5 \u5206\u949f \uff1b \uff08\u53ef\u9009\uff09\u5f00\u53d1\u8005\u9700\u8981\u4e86\u89e3\u7684 HTTPS \u77e5\u8bc6\uff1b \u4f7f\u7528\u81ea\u52a8 HTTPS \u8bbe\u7f6e Docker Swarm \u6a21\u5f0f\u96c6\u7fa4\uff0c\u540c\u6837\u9002\u7528\u4e8e 5\u7f8e\u5143/\u6708\u7684\u7b80\u5355\u670d\u52a1\u5668\u3002 \u7ea6 20 \u5206\u949f \uff1b \u4f7f\u7528 Docker Swarm \u4e0e HTTPS \u751f\u6210\u5e76\u90e8\u7f72\u5b8c\u6574\u7684 FastAPI \u5e94\u7528\u3002 \u7ea6 10 \u5206\u949f \u3002 \u4f7f\u7528 Docker \u90e8\u7f72\u5e94\u7528\u5177\u6709\u5b89\u5168\u3001\u53ef\u590d\u5236\u3001\u5f00\u53d1\u7b80\u5355\u7b49\u4f18\u52bf\u3002 \u5982\u679c\u4f7f\u7528 Docker\uff0c\u63a8\u8350\u4f7f\u7528\u5b98\u65b9 Docker \u955c\u50cf\uff1a","title":"\u4f7f\u7528 Docker \u90e8\u7f72"},{"location":"deployment/docker/#tiangolouvicorn-gunicorn-fastapi","text":"\u8fd9\u4e2a\u955c\u50cf\u5185\u7f6e\u4e86 \u81ea\u52a8\u8c03\u4f18 \u673a\u5236\uff0c\u53ea\u9700\u6dfb\u52a0\u4ee3\u7801\uff0c\u5c31\u80fd\u5f00\u53d1\u51fa\u9ad8\u6027\u80fd\u7684\u5e94\u7528\uff0c\u800c\u4e14\u4e0d\u7528\u4ed8\u51fa\u4efb\u4f55\u4ee3\u4ef7\u3002 \u60a8\u4f9d\u7136\u53ef\u4ee5\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u6216\u914d\u7f6e\u6587\u4ef6\u66f4\u6539\u914d\u7f6e\u3002 \u63d0\u793a \u8981\u67e5\u770b\u6240\u6709\u914d\u7f6e\u548c\u9009\u9879\uff0c\u8bf7\u53c2\u9605 Docker \u955c\u50cf\u9875\u9762: tiangolo/uvicorn-gunicorn-fastapi \u3002","title":"tiangolo/uvicorn-gunicorn-fastapi"},{"location":"deployment/docker/#dockerfile","text":"\u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939 \u521b\u5efa\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\u7684 Dockerfile \uff1a FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7 COPY ./app /app","title":"\u521b\u5efa Dockerfile"},{"location":"deployment/docker/#_1","text":"\u53c2\u7167\u521b\u5efa \u591a\u6587\u4ef6\u5927\u578b\u5e94\u7528 \u4e00\u7ae0\uff0c Dockerfile \u7684\u5185\u5bb9\u662f\u7c7b\u4f3c\u8fd9\u6837\u7684\uff1a FROM tiangolo/uvicorn-gunicorn-fastapi:python3.7 COPY ./app /app/app","title":"\u5927\u578b\u5e94\u7528"},{"location":"deployment/docker/#_2","text":"\u5982\u679c\u5728\uff08\u4f7f\u7528 ARM \u5904\u7406\u5668\u7684\uff09\u6811\u8393\u6d3e\u6216\u5176\u4ed6\u4efb\u4f55\u67b6\u6784\u4e2d\u8fd0\u884c Docker\uff0c\u8981\u57fa\u4e8e Python \u57fa\u7840\u955c\u50cf\uff08\u591a\u67b6\u6784\uff09\u4ece\u5934\u521b\u5efa Dockerfile \uff0c\u5e76\u5355\u72ec\u4f7f\u7528 Uvicorn\u3002 \u672c\u4f8b\u4e2d\uff0c Dockerfile \u7684\u5185\u5bb9\u5982\u4e0b\uff1a FROM python:3.7 RUN pip install fastapi uvicorn EXPOSE 80 COPY ./app /app CMD [ \"uvicorn\" , \"app.main:app\" , \"--host\" , \"0.0.0.0\" , \"--port\" , \"80\" ]","title":"\u6811\u8393\u6d3e\u4e0e\u5176\u4ed6\u67b6\u6784"},{"location":"deployment/docker/#fastapi","text":"\u521b\u5efa app \u6587\u4ef6\u5939\uff0c\u5e76\u8fdb\u5165\u6587\u4ef6\u5939 \u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa main.py \uff1a from typing import Optional from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def read_root (): return { \"Hello\" : \"World\" } @app . get ( \"/items/ {item_id} \" ) def read_item ( item_id : int , q : Optional [ str ] = None ): return { \"item_id\" : item_id , \"q\" : q } \u6587\u4ef6\u5939\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u2514\u2500\u2500 main.py \u2514\u2500\u2500 Dockerfile","title":"\u521b\u5efa FastAPI \u4ee3\u7801"},{"location":"deployment/docker/#docker_1","text":"\u8fdb\u5165\u9879\u76ee\u6587\u4ef6\u5939\uff08 Dockerfile \u6240\u5728\u7684\u6587\u4ef6\u5939\uff0c\u5305\u542b app \u6587\u4ef6\u5939\uff09 \u6784\u5efa FastAPI \u955c\u50cf\uff1a $ docker build -t myimage . ---> 100%","title":"\u6784\u5efa Docker \u955c\u50cf"},{"location":"deployment/docker/#docker_2","text":"\u8fd0\u884c\u57fa\u4e8e\u955c\u50cf\u7684\u5bb9\u5668\uff1a $ docker run -d --name mycontainer -p 80 :80 myimage \u8fd9\u6837\uff0c\u5c31\u5728 Docker \u5bb9\u5668\u4e2d\u521b\u5efa\u4e86\u4e00\u4e2a\u4f18\u5316\u8fc7\u7684 FastAPI \u670d\u52a1\u5668\u3002\u5e76\u5bf9\u5f53\u524d\u670d\u52a1\u5668\uff08\u548c CPU \u5185\u6838\u6570\uff09\u8fdb\u884c\u4e86\u81ea\u52a8\u8c03\u4f18\u3002","title":"\u542f\u52a8 Docker \u5bb9\u5668"},{"location":"deployment/docker/#_3","text":"\u67e5\u770bDocker\u5bb9\u5668\u7684 URL\uff0c\u4f8b\u5982\uff1a http://192.168.99.100/items/5?q=somequery \u6216 http://127.0.0.1/items/5?q=somequery \uff08\u6216\u4f7f\u7528 Docker \u4e3b\u673a\uff09\u3002 \u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"item_id\" : 5 , \"q\" : \"somequery\" }","title":"\u67e5\u770b\u6587\u6863"},{"location":"deployment/docker/#api","text":"\u73b0\u5728\u8df3\u8f6c\u81f3 http://192.168.99.100/docs \u6216 http://127.0.0.1/docs \uff08\u6216\u4f7f\u7528 Docker \u4e3b\u673a\uff09\u3002 \u67e5\u770b\u81ea\u52a8\u4ea4\u4e92\u7684\uff08 Swagger UI \uff09 API \u6587\u6863\u3002","title":"API \u6587\u6863"},{"location":"deployment/docker/#api_1","text":"\u8df3\u8f6c\u81f3 http://192.168.99.100/redoc \u6216 http://127.0.0.1/redoc \uff08\u6216 Docker \u4e3b\u673a\uff09\u3002 \u67e5\u770b\uff08 ReDoc \uff09\u5907\u9009 API \u6587\u6863\uff1a","title":"\u5907\u9009 API \u6587\u6863"},{"location":"deployment/docker/#traefik","text":"Traefik \u662f\u9ad8\u6027\u80fd\u53cd\u5411\u4ee3\u7406/\u52a0\u8f7d\u5747\u8861\u5668\uff0c\u7528\u4e8e\u6267\u884c TLS \u7ec8\u6b62\u4ee3\u7406 \u4efb\u52a1\uff08\u5176\u4ed6\u529f\u80fd\u9664\u5916\uff09\u3002 \u5b83\u96c6\u6210\u4e86 Let's Encrypt\uff0c\u53ef\u4ee5\u5904\u7406\u6240\u6709 HTTPS \u7ec4\u4ef6\uff0c\u5305\u62ec\u83b7\u53d6\u4e0e\u66f4\u65b0\u8bc1\u4e66\u3002 Traefik \u8fd8\u96c6\u6210\u4e86 Docker\uff0c\u53ef\u4ee5\u5728\u6bcf\u4e2a\u5e94\u7528\u914d\u7f6e\u4e2d\u58f0\u660e\u57df\uff0c\u7528\u5b83\u8bfb\u53d6\u914d\u7f6e\uff0c\u751f\u6210 HTTPS \u8bc1\u4e66\uff0c\u4e3a\u5e94\u7528\u81ea\u52a8\u63d0\u4f9b HTTPS \u670d\u52a1\uff0c\u800c\u4e14\u65e0\u9700\u5728\u914d\u7f6e\u4e2d\u8fdb\u884c\u4efb\u4f55\u66f4\u6539\u3002 \u6709\u4e86\u8fd9\u4e9b\u4fe1\u606f\u4e0e\u5de5\u5177\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u4e0b\u4e00\u8282\u7ec4\u5408\u6240\u6709\u5185\u5bb9\u3002","title":"Traefik"},{"location":"deployment/docker/#traefik-https-docker-swarm-mode","text":"\u8bbe\u7f6e Docker Swarm Mode \u96c6\u7fa4\u5927\u7ea6\u9700\u8981 20 \u5206\u949f\uff0c\u8fd8\u5305\u62ec\u4f7f\u7528 Traefik \u5904\u7406 HTTPS\uff08\u5305\u62ec\u8bc1\u4e66\u83b7\u53d6\u4e0e\u66f4\u65b0\uff09\u3002 \u4f7f\u7528 Docker Swarm Mode \u53ef\u4ee5\u542f\u7528\u5355\u673a \u201c\u96c6\u7fa4\u201d\uff08\u4ec5 5 \u7f8e\u5143/\u6708 \u670d\u52a1\u5668\uff09\uff0c\u7136\u540e\u518d\u6309\u9700\u6dfb\u52a0\u66f4\u591a\u670d\u52a1\u5668\u3002 \u4f7f\u7528 Traefik \u4e0e HTTPS \u8bbe\u7f6e Docker Swarm Mode \u96c6\u7fa4\uff0c\u8981\u9075\u5faa\u4ee5\u4e0b\u6307\u5357\uff1a \u7528\u4e8e HTTPS \u96c6\u7fa4\u7684 Docker Swarm Mode \u4e0e Traefik","title":"\u652f\u6301 Traefik \u4e0e HTTPS \u7684 Docker Swarm  mode \u96c6\u7fa4"},{"location":"deployment/docker/#fastapi_1","text":"\u5b8c\u6210\u8fd9\u4e9b\u8bbe\u7f6e\u7684\u6700\u7b80\u5355\u65b9\u5f0f\u662f\u4f7f\u7528 FastAPI \u9879\u76ee\u751f\u6210\u5668 \u3002 \u9879\u76ee\u751f\u6210\u5668\u96c6\u6210\u4e86 Docker Swarm \u96c6\u7fa4\u4e0e Traefik \u4e0e HTTPS\u3002 \u751f\u6210\u9879\u76ee\u53ea\u9700\u8981\u5927\u7ea6 2 \u5206\u949f\u3002 \u751f\u6210\u7684\u9879\u76ee\u63d0\u4f9b\u4e86\u90e8\u7f72\u8bf4\u660e\uff0c\u518d\u7528 2 \u5206\u949f\u5c31\u53ef\u4ee5\u5b8c\u6210\u90e8\u7f72\u3002","title":"\u90e8\u7f72 FastAPI \u5e94\u7528"},{"location":"deployment/https/","text":"\u5173\u4e8e HTTPS \u00b6 \u4e0d\u5c11\u4eba\u4f1a\u60f3\u5f53\u7136\u5730\u8ba4\u4e3a HTTPS \u53ea\u6d89\u53ca \u542f\u7528 \u548c \u7981\u7528 \u3002 \u4f46\u5176\u5b9e HTTPS \u8981\u590d\u6742\u5f97\u591a\u3002 \u63d0\u793a \u5982\u679c\u60a8\u65f6\u95f4\u7d27\u6216\u4e0d\u5728\u610f\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u4e00\u8282\uff0c\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4e0d\u540c\u6280\u672f\u5206\u6b65\u8bbe\u7f6e\u6240\u6709\u90e8\u7f72\u64cd\u4f5c\u3002 \u4ece\u6d88\u8d39\u8005\u89d2\u5ea6\u4e86\u89e3 HTTPS \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8bf7\u53c2\u9605 https://howhttps.works/\u3002 \u73b0\u5728\uff0c\u4ece\u5f00\u53d1\u8005\u89d2\u5ea6\u4ecb\u7ecd HTTPS \u7684\u4e00\u4e9b\u77e5\u8bc6\u8981\u70b9\uff1a \u5bf9\u4e8e HTTPS\uff0c\u670d\u52a1\u5668\u9700\u8981\u6709\u7b2c\u4e09\u65b9\u751f\u6210\u7684 \u8bc1\u4e66 \u8fd9\u4e9b\u8bc1\u4e66\u5b9e\u9645\u4e0a\u662f\u4ece\u7b2c\u4e09\u65b9\u83b7\u5f97\u7684\uff0c\u800c\u4e0d\u662f \u751f\u6210 \u7684 \u8bc1\u4e66\u6709\u751f\u547d\u5468\u671f \u8bc1\u4e66\u4f1a\u8fc7\u671f \u8fc7\u671f\u540e\uff0c\u9700\u8981\u91cd\u65b0\u4ece\u7b2c\u4e09\u65b9\u83b7\u53d6\u66f4\u65b0\u7684\u8bc1\u4e66 \u5728 TCP \u5c42\u8fdb\u884c\u8fde\u63a5\u52a0\u5bc6 TCP \u5728 HTTP \u4e4b\u4e0b \u56e0\u6b64\uff0c\u8bc1\u4e66\u4e0e\u52a0\u5bc6\u662f\u5728 HTTP \u4e4b\u524d\u5904\u7406\u5b8c\u6210\u7684 TCP \u4e0d\u5173\u5fc3 \u57df \uff0c\u53ea\u5173\u6ce8 IP \u5730\u5740 \u6709\u5173\u8bf7\u6c42\u7684\u7279\u5b9a\u57df\u7684\u4fe1\u606f\u5728 HTTP \u6570\u636e\u91cc HTTPS \u8bc1\u4e66 \u9a8c\u8bc1 \u67d0\u4e2a\u57df\uff0c\u4f46\u5728\u77e5\u9053\u5904\u7406\u54ea\u4e2a\u57df\u4e4b\u524d\uff0c\u534f\u8bae\u4e0e\u52a0\u5bc6\u5c31\u53d1\u751f\u5728 TCP \u5c42\u4e86 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a IP \u5730\u5740\u53ea\u80fd\u6709\u4e00\u4e2a HTTPS \u8bc1\u4e66 \u4e0d\u8bba\u670d\u52a1\u5668\u6709\u591a\u5927\uff0c\u6216\u6bcf\u4e2a\u5e94\u7528\u6709\u591a\u5c0f \u53ea\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848 TLS \u534f\u8bae\uff08\u5728 HTTP \u524d\uff0c\u7528\u4e8e\u5728 TCP \u5c42\u5904\u7406\u52a0\u5bc6\u7684\u534f\u8bae\uff09\u652f\u6301 SNI \u6269\u5c55 SNI \u6269\u5c55\u5141\u8bb8\u8ba9\u4e00\u53f0\u670d\u52a1\u5668\uff08\u53ea\u6709\u5355\u4e2a IP \u5730\u5740\uff09\u62e5\u6709\u591a\u4e2a HTTPS \u8bc1\u4e66\u5e76\u670d\u52a1\u591a\u4e2a HTTPS \u57df/\u5e94\u7528 \u4e3a\u6b64\uff0c\u8fd0\u884c\u5728\u670d\u52a1\u5668\u4e0a\u7684\uff0c\u76d1\u542c\u516c\u5171 IP \u5730\u5740\u7684\u5355\u4e2a\u7ec4\u4ef6\uff08\u7a0b\u5e8f\uff09\u5fc5\u987b\u5177\u6709\u670d\u52a1\u5668\u91cc\u7684\u5168\u90e8 HTTPS \u8bc1\u4e66 \u83b7\u5f97\u5b89\u5168\u8fde\u63a5\u540e\uff0c\u901a\u4fe1\u534f\u8bae\u4ecd\u662f HTTP \u5373\u4fbf\u7531 HTTP \u534f\u8bae\u53d1\u9001\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u4e5f\u662f\u52a0\u5bc6\u7684 \u5728\u670d\u52a1\u5668\uff08\u673a\u5668\u3001\u4e3b\u673a\u7b49\uff09\u4e0a\u8fd0\u884c\u7a0b\u5e8f/HTTP \u670d\u52a1\u5668\uff0c\u5e76\u7ba1\u7406\u6240\u6709 HTTPS \u7ec4\u4ef6\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\uff1a\u628a\u89e3\u5bc6\u7684 HTTP \u8bf7\u6c42\u53d1\u9001\u81f3\u8fd0\u884c\u540c\u4e00\u4e2a\u670d\u52a1\u5668\uff08\u672c\u4f8b\u4e2d\u662f FastAPI \u5e94\u7528\uff09\u7684\u5b9e\u9645 HTTP \u5e94\u7528\uff0c\u4ece\u5e94\u7528\u4e2d\u83b7\u53d6 HTTP \u54cd\u5e94\uff0c\u4f7f\u7528\u9002\u5f53\u7684\u8bc1\u4e66\u52a0\u5bc6\uff0c\u518d\u4f7f\u7528 HTTPS \u628a\u5b83\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002\u8fd9\u79cd\u670d\u52a1\u5668\u5c31\u662f\u5e38\u8bf4\u7684 TLS \u7ec8\u6b62\u4ee3\u7406 \u3002 Let's Encrypt \u00b6 \u5728 Let's Encrypt \u4e4b\u524d\uff0c HTTPS \u8bc1\u4e66\u662f\u7531\u503c\u5f97\u4fe1\u8d56\u7684\u7b2c\u4e09\u65b9\u51fa\u552e\u7684\u3002 \u4f46\u83b7\u53d6\u8bc1\u4e66\u7684\u624b\u7eed\u5341\u5206\u7e41\u6742\uff0c\u8fd8\u8981\u505a\u5f88\u591a\u4e66\u9762\u5de5\u4f5c\uff0c\u8bc1\u4e66\u4e5f\u5341\u5206\u6602\u8d35\u3002 \u4f46\u540e\u6765 Let's Encrypt \u6a2a\u7a7a\u51fa\u4e16\u4e86\u3002 \u5b83\u662f Linux \u57fa\u91d1\u4f1a\u7684\u9879\u76ee\uff0c\u81ea\u52a8\u63d0\u4f9b\u514d\u8d39 HTTPS \u8bc1\u4e66\u3002\u8fd9\u4e9b\u8bc1\u4e66\u4f7f\u7528\u4e86\u6240\u6709\u6807\u51c6\u5b89\u5168\u52a0\u5bc6\u63aa\u65bd\uff0c\u751f\u547d\u5468\u671f\u4e5f\u5f88\u77ed\uff08\u7ea6 3 \u4e2a\u6708\uff09\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f\u77ed\uff0c\u5b9e\u9645\u4e0a\u53cd\u800c\u66f4\u5b89\u5168\u3002 \u57df\u7ecf\u8fc7\u5b89\u5168\u9a8c\u8bc1\uff0c\u8bc1\u4e66\u662f\u81ea\u52a8\u751f\u6210\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0\u8bc1\u4e66\u3002 \u5b83\u7684\u601d\u8def\u662f\u81ea\u52a8\u83b7\u53d6\u5e76\u66f4\u65b0\u8bc1\u4e66\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u60a8\u5c31\u53ef\u4ee5\u6c38\u4e45\u514d\u8d39\u4f7f\u7528\u5b89\u5168\u7684 HTTPS \u4e86\u3002","title":"\u5173\u4e8e HTTPS"},{"location":"deployment/https/#https","text":"\u4e0d\u5c11\u4eba\u4f1a\u60f3\u5f53\u7136\u5730\u8ba4\u4e3a HTTPS \u53ea\u6d89\u53ca \u542f\u7528 \u548c \u7981\u7528 \u3002 \u4f46\u5176\u5b9e HTTPS \u8981\u590d\u6742\u5f97\u591a\u3002 \u63d0\u793a \u5982\u679c\u60a8\u65f6\u95f4\u7d27\u6216\u4e0d\u5728\u610f\uff0c\u8bf7\u7ee7\u7eed\u9605\u8bfb\u4e0b\u4e00\u8282\uff0c\u4e86\u89e3\u5982\u4f55\u4f7f\u7528\u4e0d\u540c\u6280\u672f\u5206\u6b65\u8bbe\u7f6e\u6240\u6709\u90e8\u7f72\u64cd\u4f5c\u3002 \u4ece\u6d88\u8d39\u8005\u89d2\u5ea6\u4e86\u89e3 HTTPS \u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u8bf7\u53c2\u9605 https://howhttps.works/\u3002 \u73b0\u5728\uff0c\u4ece\u5f00\u53d1\u8005\u89d2\u5ea6\u4ecb\u7ecd HTTPS \u7684\u4e00\u4e9b\u77e5\u8bc6\u8981\u70b9\uff1a \u5bf9\u4e8e HTTPS\uff0c\u670d\u52a1\u5668\u9700\u8981\u6709\u7b2c\u4e09\u65b9\u751f\u6210\u7684 \u8bc1\u4e66 \u8fd9\u4e9b\u8bc1\u4e66\u5b9e\u9645\u4e0a\u662f\u4ece\u7b2c\u4e09\u65b9\u83b7\u5f97\u7684\uff0c\u800c\u4e0d\u662f \u751f\u6210 \u7684 \u8bc1\u4e66\u6709\u751f\u547d\u5468\u671f \u8bc1\u4e66\u4f1a\u8fc7\u671f \u8fc7\u671f\u540e\uff0c\u9700\u8981\u91cd\u65b0\u4ece\u7b2c\u4e09\u65b9\u83b7\u53d6\u66f4\u65b0\u7684\u8bc1\u4e66 \u5728 TCP \u5c42\u8fdb\u884c\u8fde\u63a5\u52a0\u5bc6 TCP \u5728 HTTP \u4e4b\u4e0b \u56e0\u6b64\uff0c\u8bc1\u4e66\u4e0e\u52a0\u5bc6\u662f\u5728 HTTP \u4e4b\u524d\u5904\u7406\u5b8c\u6210\u7684 TCP \u4e0d\u5173\u5fc3 \u57df \uff0c\u53ea\u5173\u6ce8 IP \u5730\u5740 \u6709\u5173\u8bf7\u6c42\u7684\u7279\u5b9a\u57df\u7684\u4fe1\u606f\u5728 HTTP \u6570\u636e\u91cc HTTPS \u8bc1\u4e66 \u9a8c\u8bc1 \u67d0\u4e2a\u57df\uff0c\u4f46\u5728\u77e5\u9053\u5904\u7406\u54ea\u4e2a\u57df\u4e4b\u524d\uff0c\u534f\u8bae\u4e0e\u52a0\u5bc6\u5c31\u53d1\u751f\u5728 TCP \u5c42\u4e86 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u6bcf\u4e2a IP \u5730\u5740\u53ea\u80fd\u6709\u4e00\u4e2a HTTPS \u8bc1\u4e66 \u4e0d\u8bba\u670d\u52a1\u5668\u6709\u591a\u5927\uff0c\u6216\u6bcf\u4e2a\u5e94\u7528\u6709\u591a\u5c0f \u53ea\u6709\u4e00\u79cd\u89e3\u51b3\u65b9\u6848 TLS \u534f\u8bae\uff08\u5728 HTTP \u524d\uff0c\u7528\u4e8e\u5728 TCP \u5c42\u5904\u7406\u52a0\u5bc6\u7684\u534f\u8bae\uff09\u652f\u6301 SNI \u6269\u5c55 SNI \u6269\u5c55\u5141\u8bb8\u8ba9\u4e00\u53f0\u670d\u52a1\u5668\uff08\u53ea\u6709\u5355\u4e2a IP \u5730\u5740\uff09\u62e5\u6709\u591a\u4e2a HTTPS \u8bc1\u4e66\u5e76\u670d\u52a1\u591a\u4e2a HTTPS \u57df/\u5e94\u7528 \u4e3a\u6b64\uff0c\u8fd0\u884c\u5728\u670d\u52a1\u5668\u4e0a\u7684\uff0c\u76d1\u542c\u516c\u5171 IP \u5730\u5740\u7684\u5355\u4e2a\u7ec4\u4ef6\uff08\u7a0b\u5e8f\uff09\u5fc5\u987b\u5177\u6709\u670d\u52a1\u5668\u91cc\u7684\u5168\u90e8 HTTPS \u8bc1\u4e66 \u83b7\u5f97\u5b89\u5168\u8fde\u63a5\u540e\uff0c\u901a\u4fe1\u534f\u8bae\u4ecd\u662f HTTP \u5373\u4fbf\u7531 HTTP \u534f\u8bae\u53d1\u9001\uff0c\u8fd9\u4e9b\u7ec4\u4ef6\u4e5f\u662f\u52a0\u5bc6\u7684 \u5728\u670d\u52a1\u5668\uff08\u673a\u5668\u3001\u4e3b\u673a\u7b49\uff09\u4e0a\u8fd0\u884c\u7a0b\u5e8f/HTTP \u670d\u52a1\u5668\uff0c\u5e76\u7ba1\u7406\u6240\u6709 HTTPS \u7ec4\u4ef6\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u505a\u6cd5\uff1a\u628a\u89e3\u5bc6\u7684 HTTP \u8bf7\u6c42\u53d1\u9001\u81f3\u8fd0\u884c\u540c\u4e00\u4e2a\u670d\u52a1\u5668\uff08\u672c\u4f8b\u4e2d\u662f FastAPI \u5e94\u7528\uff09\u7684\u5b9e\u9645 HTTP \u5e94\u7528\uff0c\u4ece\u5e94\u7528\u4e2d\u83b7\u53d6 HTTP \u54cd\u5e94\uff0c\u4f7f\u7528\u9002\u5f53\u7684\u8bc1\u4e66\u52a0\u5bc6\uff0c\u518d\u4f7f\u7528 HTTPS \u628a\u5b83\u53d1\u9001\u56de\u5ba2\u6237\u7aef\u3002\u8fd9\u79cd\u670d\u52a1\u5668\u5c31\u662f\u5e38\u8bf4\u7684 TLS \u7ec8\u6b62\u4ee3\u7406 \u3002","title":"\u5173\u4e8e HTTPS"},{"location":"deployment/https/#lets-encrypt","text":"\u5728 Let's Encrypt \u4e4b\u524d\uff0c HTTPS \u8bc1\u4e66\u662f\u7531\u503c\u5f97\u4fe1\u8d56\u7684\u7b2c\u4e09\u65b9\u51fa\u552e\u7684\u3002 \u4f46\u83b7\u53d6\u8bc1\u4e66\u7684\u624b\u7eed\u5341\u5206\u7e41\u6742\uff0c\u8fd8\u8981\u505a\u5f88\u591a\u4e66\u9762\u5de5\u4f5c\uff0c\u8bc1\u4e66\u4e5f\u5341\u5206\u6602\u8d35\u3002 \u4f46\u540e\u6765 Let's Encrypt \u6a2a\u7a7a\u51fa\u4e16\u4e86\u3002 \u5b83\u662f Linux \u57fa\u91d1\u4f1a\u7684\u9879\u76ee\uff0c\u81ea\u52a8\u63d0\u4f9b\u514d\u8d39 HTTPS \u8bc1\u4e66\u3002\u8fd9\u4e9b\u8bc1\u4e66\u4f7f\u7528\u4e86\u6240\u6709\u6807\u51c6\u5b89\u5168\u52a0\u5bc6\u63aa\u65bd\uff0c\u751f\u547d\u5468\u671f\u4e5f\u5f88\u77ed\uff08\u7ea6 3 \u4e2a\u6708\uff09\uff0c\u56e0\u4e3a\u751f\u547d\u5468\u671f\u77ed\uff0c\u5b9e\u9645\u4e0a\u53cd\u800c\u66f4\u5b89\u5168\u3002 \u57df\u7ecf\u8fc7\u5b89\u5168\u9a8c\u8bc1\uff0c\u8bc1\u4e66\u662f\u81ea\u52a8\u751f\u6210\u7684\uff0c\u56e0\u6b64\u53ef\u4ee5\u81ea\u52a8\u66f4\u65b0\u8bc1\u4e66\u3002 \u5b83\u7684\u601d\u8def\u662f\u81ea\u52a8\u83b7\u53d6\u5e76\u66f4\u65b0\u8bc1\u4e66\uff0c\u8fd9\u6837\u4e00\u6765\uff0c\u60a8\u5c31\u53ef\u4ee5\u6c38\u4e45\u514d\u8d39\u4f7f\u7528\u5b89\u5168\u7684 HTTPS \u4e86\u3002","title":"Let's Encrypt"},{"location":"deployment/manually/","text":"Run a Server Manually - Uvicorn \u00b6 The main thing you need to run a FastAPI application in a remote server machine is an ASGI server program like Uvicorn . There are 3 main alternatives: Uvicorn : a high performance ASGI server. Hypercorn : an ASGI server compatible with HTTP/2 and Trio among other features. Daphne : the ASGI server built for Django Channels. Server Machine and Server Program \u00b6 There's a small detail about names to have in mind. \ud83d\udca1 The word \" server \" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn). Just have that in mind when you read \"server\" in general, it could refer to one of those two things. When referring to the remote machine, it's common to call it server , but also machine , VM (virtual machine), node . Those all refer to some type of remote machine, normally running Linux, where you run programs. Install the Server Program \u00b6 You can install an ASGI compatible server with: Uvicorn Hypercorn Uvicorn , a lightning-fast ASGI server, built on uvloop and httptools. $ pip install \"uvicorn[standard]\" ---> 100% Tip By adding the standard , Uvicorn will install and use some recommended extra dependencies. That including uvloop , the high-performance drop-in replacement for asyncio , that provides the big concurrency performance boost. Hypercorn , an ASGI server also compatible with HTTP/2. $ pip install hypercorn ---> 100% ...or any other ASGI server. Run the Server Program \u00b6 You can then run your application the same way you have done in the tutorials, but without the --reload option, e.g.: Uvicorn Hypercorn $ uvicorn main:app --host 0 .0.0.0 --port 80 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) $ hypercorn main:app --bind 0 .0.0.0:80 Running on 0.0.0.0:8080 over http (CTRL + C to quit) Warning Remember to remove the --reload option if you were using it. The --reload option consumes much more resources, is more unstable, etc. It helps a lot during development , but you shouldn't use it in production . Hypercorn with Trio \u00b6 Starlette and FastAPI are based on AnyIO , which makes them compatible with both Python's standard library asyncio and Trio . Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses uvloop , the high-performance drop-in replacement for asyncio . But if you want to directly use Trio , then you can use Hypercorn as it supports it. \u2728 Install Hypercorn with Trio \u00b6 First you need to install Hypercorn with Trio support: $ pip install \"hypercorn[trio]\" ---> 100% Run with Trio \u00b6 Then you can pass the command line option --worker-class with the value trio : $ hypercorn main:app --worker-class trio And that will start Hypercorn with your app using Trio as the backend. Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89 Deployment Concepts \u00b6 These examples run the server program (e.g Uvicorn), starting a single process , listening on all the IPs ( 0.0.0.0 ) on a predefined port (e.g. 80 ). This is the basic idea. But you will probably want to take care of some additional things, like: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80","title":"Run a Server Manually - Uvicorn"},{"location":"deployment/manually/#run-a-server-manually-uvicorn","text":"The main thing you need to run a FastAPI application in a remote server machine is an ASGI server program like Uvicorn . There are 3 main alternatives: Uvicorn : a high performance ASGI server. Hypercorn : an ASGI server compatible with HTTP/2 and Trio among other features. Daphne : the ASGI server built for Django Channels.","title":"Run a Server Manually - Uvicorn"},{"location":"deployment/manually/#server-machine-and-server-program","text":"There's a small detail about names to have in mind. \ud83d\udca1 The word \" server \" is commonly used to refer to both the remote/cloud computer (the physical or virtual machine) and also the program that is running on that machine (e.g. Uvicorn). Just have that in mind when you read \"server\" in general, it could refer to one of those two things. When referring to the remote machine, it's common to call it server , but also machine , VM (virtual machine), node . Those all refer to some type of remote machine, normally running Linux, where you run programs.","title":"Server Machine and Server Program"},{"location":"deployment/manually/#install-the-server-program","text":"You can install an ASGI compatible server with: Uvicorn Hypercorn Uvicorn , a lightning-fast ASGI server, built on uvloop and httptools. $ pip install \"uvicorn[standard]\" ---> 100% Tip By adding the standard , Uvicorn will install and use some recommended extra dependencies. That including uvloop , the high-performance drop-in replacement for asyncio , that provides the big concurrency performance boost. Hypercorn , an ASGI server also compatible with HTTP/2. $ pip install hypercorn ---> 100% ...or any other ASGI server.","title":"Install the Server Program"},{"location":"deployment/manually/#run-the-server-program","text":"You can then run your application the same way you have done in the tutorials, but without the --reload option, e.g.: Uvicorn Hypercorn $ uvicorn main:app --host 0 .0.0.0 --port 80 <span style=\"color: green;\">INFO</span>: Uvicorn running on http://0.0.0.0:80 (Press CTRL+C to quit) $ hypercorn main:app --bind 0 .0.0.0:80 Running on 0.0.0.0:8080 over http (CTRL + C to quit) Warning Remember to remove the --reload option if you were using it. The --reload option consumes much more resources, is more unstable, etc. It helps a lot during development , but you shouldn't use it in production .","title":"Run the Server Program"},{"location":"deployment/manually/#hypercorn-with-trio","text":"Starlette and FastAPI are based on AnyIO , which makes them compatible with both Python's standard library asyncio and Trio . Nevertheless, Uvicorn is currently only compatible with asyncio, and it normally uses uvloop , the high-performance drop-in replacement for asyncio . But if you want to directly use Trio , then you can use Hypercorn as it supports it. \u2728","title":"Hypercorn with Trio"},{"location":"deployment/manually/#install-hypercorn-with-trio","text":"First you need to install Hypercorn with Trio support: $ pip install \"hypercorn[trio]\" ---> 100%","title":"Install Hypercorn with Trio"},{"location":"deployment/manually/#run-with-trio","text":"Then you can pass the command line option --worker-class with the value trio : $ hypercorn main:app --worker-class trio And that will start Hypercorn with your app using Trio as the backend. Now you can use Trio internally in your app. Or even better, you can use AnyIO, to keep your code compatible with both Trio and asyncio. \ud83c\udf89","title":"Run with Trio"},{"location":"deployment/manually/#deployment-concepts","text":"These examples run the server program (e.g Uvicorn), starting a single process , listening on all the IPs ( 0.0.0.0 ) on a predefined port (e.g. 80 ). This is the basic idea. But you will probably want to take care of some additional things, like: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting I'll tell you more about each of these concepts, how to think about them, and some concrete examples with strategies to handle them in the next chapters. \ud83d\ude80","title":"Deployment Concepts"},{"location":"deployment/server-workers/","text":"Server Workers - Gunicorn with Uvicorn \u00b6 Let's check back those deployment concepts from before: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Up to this point, with all the tutorials in the docs, you have probably been running a server program like Uvicorn, running a single process . When deploying applications you will probably want to have some replication of processes to take advantage of multiple cores and to be able to handle more requests. As you saw in the previous chapter about Deployment Concepts , there are multiple strategies you can use. Here I'll show you how to use Gunicorn with Uvicorn worker processes . Info If you are using containers, for example with Docker or Kubernetes, I'll tell you more about that in the next chapter: FastAPI in Containers - Docker . In particular, when running on Kubernetes you will probably not want to use Gunicorn and instead run a single Uvicorn process per container , but I'll tell you about it later in that chapter. Gunicorn with Uvicorn Workers \u00b6 Gunicorn is mainly an application server using the WSGI standard . That means that Gunicorn can serve applications like Flask and Django. Gunicorn by itself is not compatible with FastAPI , as FastAPI uses the newest ASGI standard . But Gunicorn supports working as a process manager and allowing users to tell it which specific worker process class to use. Then Gunicorn would start one or more worker processes using that class. And Uvicorn has a Gunicorn-compatible worker class . Using that combination, Gunicorn would act as a process manager , listening on the port and the IP . And it would transmit the communication to the worker processes running the Uvicorn class . And then the Gunicorn-compatible Uvicorn worker class would be in charge of converting the data sent by Gunicorn to the ASGI standard for FastAPI to use it. Install Gunicorn and Uvicorn \u00b6 $ pip install \"uvicorn[standard]\" gunicorn ---> 100% That will install both Uvicorn with the standard extra packages (to get high performance) and Gunicorn. Run Gunicorn with Uvicorn Workers \u00b6 Then you can run Gunicorn with: $ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0 .0.0.0:80 [19499] [INFO] Starting gunicorn 20.1.0 [19499] [INFO] Listening at: http://0.0.0.0:80 (19499) [19499] [INFO] Using worker: uvicorn.workers.UvicornWorker [19511] [INFO] Booting worker with pid: 19511 [19513] [INFO] Booting worker with pid: 19513 [19514] [INFO] Booting worker with pid: 19514 [19515] [INFO] Booting worker with pid: 19515 [19511] [INFO] Started server process [19511] [19511] [INFO] Waiting for application startup. [19511] [INFO] Application startup complete. [19513] [INFO] Started server process [19513] [19513] [INFO] Waiting for application startup. [19513] [INFO] Application startup complete. [19514] [INFO] Started server process [19514] [19514] [INFO] Waiting for application startup. [19514] [INFO] Application startup complete. [19515] [INFO] Started server process [19515] [19515] [INFO] Waiting for application startup. [19515] [INFO] Application startup complete. Let's see what each of those options mean: main:app : This is the same syntax used by Uvicorn, main means the Python module named \" main \", so, a file main.py . And app is the name of the variable that is the FastAPI application. You can imagine that main:app is equivalent to a Python import statement like: from main import app So, the colon in main:app would be equivalent to the Python import part in from main import app . --workers : The number of worker processes to use, each will run a Uvicorn worker, in this case, 4 workers. --worker-class : The Gunicorn-compatible worker class to use in the worker processes. Here we pass the class that Gunicorn can import and use with: import uvicorn.workers.UvicornWorker --bind : This tells Gunicorn the IP and the port to listen to, using a colon ( : ) to separate the IP and the port. If you were running Uvicorn directly, instead of --bind 0.0.0.0:80 (the Gunicorn option) you would use --host 0.0.0.0 and --port 80 . In the output, you can see that it shows the PID (process ID) of each process (it's just a number). You can see that: The Gunicorn process manager starts with PID 19499 (in your case it will be a different number). Then it starts Listening at: http://0.0.0.0:80 . Then it detects that it has to use the worker class at uvicorn.workers.UvicornWorker . And then it starts 4 workers , each with its own PID: 19511 , 19513 , 19514 , and 19515 . Gunicorn would also take care of managing dead processes and restarting new ones if needed to keep the number of workers. So that helps in part with the restart concept from the list above. Nevertheless, you would probably also want to have something outside making sure to restart Gunicorn if necessary, and also to run it on startup , etc. Uvicorn with Workers \u00b6 Uvicorn also has an option to start and run several worker processes . Nevertheless, as of now, Uvicorn's capabilities for handling worker processes are more limited than Gunicorn's. So, if you want to have a process manager at this level (at the Python level), then it might be better to try with Gunicorn as the process manager. In any case, you would run it like this: $ uvicorn main:app --host 0 .0.0.0 --port 8080 --workers 4 <font color=\"#A6E22E\">INFO</font>: Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit) <font color=\"#A6E22E\">INFO</font>: Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>] <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27368</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27369</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27370</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27367</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. The only new option here is --workers telling Uvicorn to start 4 worker processes. You can also see that it shows the PID of each process, 27365 for the parent process (this is the process manager ) and one for each worker process: 27368 , 27369 , 27370 , and 27367 . Deployment Concepts \u00b6 Here you saw how to use Gunicorn (or Uvicorn) managing Uvicorn worker processes to parallelize the execution of the application, take advantage of multiple cores in the CPU, and be able to serve more requests . From the list of deployment concepts from above, using workers would mainly help with the replication part, and a little bit with the restarts , but you still need to take care of the others: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Containers and Docker \u00b6 In the next chapter about FastAPI in Containers - Docker I'll tell some strategies you could use to handle the other deployment concepts . I'll also show you the official Docker image that includes Gunicorn with Uvicorn workers and some default configurations that can be useful for simple cases. There I'll also show you how to build your own image from scratch to run a single Uvicorn process (without Gunicorn). It is a simple process and is probably what you would want to do when using a distributed container management system like Kubernetes . Recap \u00b6 You can use Gunicorn (or also Uvicorn) as a process manager with Uvicorn workers to take advantage of multi-core CPUs , to run multiple processes in parallel . You could use these tools and ideas if you are setting up your own deployment system while taking care of the other deployment concepts yourself. Check out the next chapter to learn about FastAPI with containers (e.g. Docker and Kubernetes). You will see that those tools have simple ways to solve the other deployment concepts as well. \u2728","title":"Server Workers - Gunicorn with Uvicorn"},{"location":"deployment/server-workers/#server-workers-gunicorn-with-uvicorn","text":"Let's check back those deployment concepts from before: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting Up to this point, with all the tutorials in the docs, you have probably been running a server program like Uvicorn, running a single process . When deploying applications you will probably want to have some replication of processes to take advantage of multiple cores and to be able to handle more requests. As you saw in the previous chapter about Deployment Concepts , there are multiple strategies you can use. Here I'll show you how to use Gunicorn with Uvicorn worker processes . Info If you are using containers, for example with Docker or Kubernetes, I'll tell you more about that in the next chapter: FastAPI in Containers - Docker . In particular, when running on Kubernetes you will probably not want to use Gunicorn and instead run a single Uvicorn process per container , but I'll tell you about it later in that chapter.","title":"Server Workers - Gunicorn with Uvicorn"},{"location":"deployment/server-workers/#gunicorn-with-uvicorn-workers","text":"Gunicorn is mainly an application server using the WSGI standard . That means that Gunicorn can serve applications like Flask and Django. Gunicorn by itself is not compatible with FastAPI , as FastAPI uses the newest ASGI standard . But Gunicorn supports working as a process manager and allowing users to tell it which specific worker process class to use. Then Gunicorn would start one or more worker processes using that class. And Uvicorn has a Gunicorn-compatible worker class . Using that combination, Gunicorn would act as a process manager , listening on the port and the IP . And it would transmit the communication to the worker processes running the Uvicorn class . And then the Gunicorn-compatible Uvicorn worker class would be in charge of converting the data sent by Gunicorn to the ASGI standard for FastAPI to use it.","title":"Gunicorn with Uvicorn Workers"},{"location":"deployment/server-workers/#install-gunicorn-and-uvicorn","text":"$ pip install \"uvicorn[standard]\" gunicorn ---> 100% That will install both Uvicorn with the standard extra packages (to get high performance) and Gunicorn.","title":"Install Gunicorn and Uvicorn"},{"location":"deployment/server-workers/#run-gunicorn-with-uvicorn-workers","text":"Then you can run Gunicorn with: $ gunicorn main:app --workers 4 --worker-class uvicorn.workers.UvicornWorker --bind 0 .0.0.0:80 [19499] [INFO] Starting gunicorn 20.1.0 [19499] [INFO] Listening at: http://0.0.0.0:80 (19499) [19499] [INFO] Using worker: uvicorn.workers.UvicornWorker [19511] [INFO] Booting worker with pid: 19511 [19513] [INFO] Booting worker with pid: 19513 [19514] [INFO] Booting worker with pid: 19514 [19515] [INFO] Booting worker with pid: 19515 [19511] [INFO] Started server process [19511] [19511] [INFO] Waiting for application startup. [19511] [INFO] Application startup complete. [19513] [INFO] Started server process [19513] [19513] [INFO] Waiting for application startup. [19513] [INFO] Application startup complete. [19514] [INFO] Started server process [19514] [19514] [INFO] Waiting for application startup. [19514] [INFO] Application startup complete. [19515] [INFO] Started server process [19515] [19515] [INFO] Waiting for application startup. [19515] [INFO] Application startup complete. Let's see what each of those options mean: main:app : This is the same syntax used by Uvicorn, main means the Python module named \" main \", so, a file main.py . And app is the name of the variable that is the FastAPI application. You can imagine that main:app is equivalent to a Python import statement like: from main import app So, the colon in main:app would be equivalent to the Python import part in from main import app . --workers : The number of worker processes to use, each will run a Uvicorn worker, in this case, 4 workers. --worker-class : The Gunicorn-compatible worker class to use in the worker processes. Here we pass the class that Gunicorn can import and use with: import uvicorn.workers.UvicornWorker --bind : This tells Gunicorn the IP and the port to listen to, using a colon ( : ) to separate the IP and the port. If you were running Uvicorn directly, instead of --bind 0.0.0.0:80 (the Gunicorn option) you would use --host 0.0.0.0 and --port 80 . In the output, you can see that it shows the PID (process ID) of each process (it's just a number). You can see that: The Gunicorn process manager starts with PID 19499 (in your case it will be a different number). Then it starts Listening at: http://0.0.0.0:80 . Then it detects that it has to use the worker class at uvicorn.workers.UvicornWorker . And then it starts 4 workers , each with its own PID: 19511 , 19513 , 19514 , and 19515 . Gunicorn would also take care of managing dead processes and restarting new ones if needed to keep the number of workers. So that helps in part with the restart concept from the list above. Nevertheless, you would probably also want to have something outside making sure to restart Gunicorn if necessary, and also to run it on startup , etc.","title":"Run Gunicorn with Uvicorn Workers"},{"location":"deployment/server-workers/#uvicorn-with-workers","text":"Uvicorn also has an option to start and run several worker processes . Nevertheless, as of now, Uvicorn's capabilities for handling worker processes are more limited than Gunicorn's. So, if you want to have a process manager at this level (at the Python level), then it might be better to try with Gunicorn as the process manager. In any case, you would run it like this: $ uvicorn main:app --host 0 .0.0.0 --port 8080 --workers 4 <font color=\"#A6E22E\">INFO</font>: Uvicorn running on <b>http://0.0.0.0:8080</b> (Press CTRL+C to quit) <font color=\"#A6E22E\">INFO</font>: Started parent process [<font color=\"#A1EFE4\"><b>27365</b></font>] <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27368</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27369</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27370</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. <font color=\"#A6E22E\">INFO</font>: Started server process [<font color=\"#A1EFE4\">27367</font>] <font color=\"#A6E22E\">INFO</font>: Waiting for application startup. <font color=\"#A6E22E\">INFO</font>: Application startup complete. The only new option here is --workers telling Uvicorn to start 4 worker processes. You can also see that it shows the PID of each process, 27365 for the parent process (this is the process manager ) and one for each worker process: 27368 , 27369 , 27370 , and 27367 .","title":"Uvicorn with Workers"},{"location":"deployment/server-workers/#deployment-concepts","text":"Here you saw how to use Gunicorn (or Uvicorn) managing Uvicorn worker processes to parallelize the execution of the application, take advantage of multiple cores in the CPU, and be able to serve more requests . From the list of deployment concepts from above, using workers would mainly help with the replication part, and a little bit with the restarts , but you still need to take care of the others: Security - HTTPS Running on startup Restarts Replication (the number of processes running) Memory Previous steps before starting","title":"Deployment Concepts"},{"location":"deployment/server-workers/#containers-and-docker","text":"In the next chapter about FastAPI in Containers - Docker I'll tell some strategies you could use to handle the other deployment concepts . I'll also show you the official Docker image that includes Gunicorn with Uvicorn workers and some default configurations that can be useful for simple cases. There I'll also show you how to build your own image from scratch to run a single Uvicorn process (without Gunicorn). It is a simple process and is probably what you would want to do when using a distributed container management system like Kubernetes .","title":"Containers and Docker"},{"location":"deployment/server-workers/#recap","text":"You can use Gunicorn (or also Uvicorn) as a process manager with Uvicorn workers to take advantage of multi-core CPUs , to run multiple processes in parallel . You could use these tools and ideas if you are setting up your own deployment system while taking care of the other deployment concepts yourself. Check out the next chapter to learn about FastAPI with containers (e.g. Docker and Kubernetes). You will see that those tools have simple ways to solve the other deployment concepts as well. \u2728","title":"Recap"},{"location":"deployment/versions/","text":"FastAPI \u7248\u672c \u00b6 \u73b0\u5df2\u6709\u5f88\u591a\u5e94\u7528\u548c\u7cfb\u7edf\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528 FastAPI \uff0c\u5e76\u4e14\u6d4b\u8bd5\u8986\u76d6\u7387\u4fdd\u6301\u5728 100%\u3002\u4f46 FastAPI \u7684\u5f00\u53d1\u901f\u5ea6\u4f9d\u7136\u5f88\u5feb\u3002 \u65b0\u7279\u6027\u5728\u9891\u9891\u589e\u52a0\uff0cbug \u5728\u5b9a\u671f\u4fee\u590d\uff0c\u4ee3\u7801\u8d28\u91cf\u4e5f\u5728\u4e0d\u65ad\u6539\u8fdb\u3002 \u56e0\u6b64\u5f53\u524d\u7248\u672c\u4ecd\u662f 0.x.x \uff0c\u8fd9\u8bf4\u660e\u6bcf\u6b21\u7248\u672c\u66f4\u65b0\u90fd\u53ef\u80fd\u63a8\u51fa\u6f5c\u5728\u7684\u7834\u574f\u6027\u66f4\u6539\u3002\u8fd9\u4e5f\u662f\u9075\u5faa \u8bed\u4e49\u7248\u672c\u63a7\u5236 \u7684\u60ef\u4f8b\u3002 \u76ee\u524d\uff0c\u60a8\u5c3d\u53ef\u653e\u5fc3\u4f7f\u7528 FastAPI \u521b\u5efa\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u5e94\u7528\uff08\u53ef\u80fd\u60a8\u5df2\u7ecf\u8fd9\u4e48\u505a\u4e86\uff09\uff0c\u53ea\u8981\u4fdd\u8bc1\u4f7f\u7528\u7684\u7248\u672c\u80fd\u8ba9\u4ee3\u7801\u6b63\u5e38\u8fd0\u884c\u5c31\u53ef\u4ee5\u4e86\u3002 \u9650\u5b9a fastapi \u7248\u672c \u00b6 \u9996\u5148\uff0c\u8981\u628a FastAPI \u7684\u7248\u672c \u9650\u5b9a \u4e3a\u80fd\u8ba9\u60a8\u7684\u5e94\u7528\u6b63\u5e38\u8fd0\u884c\u7684\u6700\u65b0\u7248\u672c\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u7684\u5e94\u7528\u4f7f\u7528\u7684\u662f 0.45.0 \u7248\u3002 \u4f7f\u7528 requirements.txt \u6587\u4ef6\u65f6\u9700\u8981\u6307\u5b9a\u7248\u672c\uff1a fastapi==0.45.0 \u8fd9\u6837\u4f7f\u7528\u7684\u7248\u672c\u5c31\u662f 0.45.0 \u3002 \u6216\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u9650\u5b9a\u7248\u672c\uff1a fastapi>=0.45.0,<0.46.0 \u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528 0.45.0 \u4e0e 0.46.0 \u4e4b\u95f4\u7684\u7248\u672c\uff0c\u6bd4\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528 0.45.2 \u7248\u3002 \u5982\u679c\u4f7f\u7528 Poetry\u3001Pipenv \u7b49\u5de5\u5177\u5b89\u88c5\u652f\u6301\u5e93\uff0c\u8fd9\u4e9b\u5de5\u5177\u90fd\u652f\u6301\u6309\u6307\u5b9a\u7248\u672c\u5b89\u88c5\u652f\u6301\u5e93\u3002 \u53ef\u7528\u7248\u672c \u00b6 \u67e5\u770b \u53d1\u5e03\u8bf4\u660e \u4e86\u89e3\u53ef\u7528\u7684\u7248\u672c\uff08\u6bd4\u5982\u67e5\u770b\u5f53\u524d\u6700\u65b0\u7248\uff09\u3002 \u5173\u4e8e\u7248\u672c \u00b6 \u9075\u5faa\u8bed\u4e49\u7248\u672c\u63a7\u5236\u60ef\u4f8b\uff0c\u4f4e\u4e8e 1.0.0 \u7684\u4efb\u4f55\u7248\u672c\u90fd\u53ef\u80fd\u5b58\u5728\u6f5c\u5728\u7684\u7834\u574f\u6027\u66f4\u6539\u3002 FastAPI \u8fd8\u9075\u5faa\u4e3a\u4fee\u590d bug \u548c\u975e\u7834\u574f\u6027\u66f4\u6539\u7684 \u8865\u4e01 \u7248\u672c\u53d8\u66f4\u60ef\u4f8b\u3002 \u63d0\u793a \u8865\u4e01\u53f7 \u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\u5728 0.2.3 \u4e2d\uff0c\u8865\u4e01\u53f7\u662f 3 \u3002 \u56e0\u6b64\uff0c\u63a8\u8350\u4ee5\u5982\u4e0b\u65b9\u5f0f\u9650\u5b9a\u7248\u672c\uff1a fastapi>=0.45.0,<0.46.0 \u7834\u574f\u6027\u53d8\u66f4\u4e0e\u65b0\u529f\u80fd\u5728 \u6b21\u7248\u672c \u4e2d\u6dfb\u52a0\u3002 \u63d0\u793a \u6b21\u7248\u672c\u53f7 \u662f\u4e2d\u95f4\u7684\u6570\u5b57\uff0c\u4f8b\u5982\u5728 0.2.3 \u4e2d\uff0c\u6b21\u7248\u672c\u53f7\u662f 2 \u3002 \u66f4\u65b0 FastAPI \u7248\u672c \u00b6 \u6d4b\u8bd5\u5e94\u7528\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002 \u501f\u52a9\u4e8e Starlette\uff0c\u6d4b\u8bd5 FastAPI \u5e94\u7528\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u8be6\u89c1\u6587\u6863\uff1a \u6d4b\u8bd5 \u3002 \u6d4b\u8bd5\u4e4b\u540e\uff0c\u8981\u628a FastAPI \u5347\u7ea7\u5230\u66f4\u65b0\u7684\u7248\u672c\uff0c\u6b64\u65f6\u8981\u786e\u4fdd\u6240\u6709\u4ee3\u7801\u90fd\u80fd\u901a\u8fc7\u6d4b\u8bd5\u3002 \u53ea\u8981\u6240\u6709\u529f\u80fd\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u6216\u8fdb\u884c\u4e86\u5fc5\u8981\u7684\u8c03\u6574\uff0c\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u540e\uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u628a\u60a8\u4f7f\u7528\u7684 fastapi \u5347\u7ea7\u4e3a\u6700\u65b0\u7248\u3002 \u5173\u4e8e Starlette \u00b6 \u4e0d\u8981\u9650\u5b9a starlette \u7684\u7248\u672c\u3002 FastAPI \u5404\u4e2a\u7248\u672c\u5747\u4f7f\u7528\u6307\u5b9a\u7248\u672c\u7684 Starlette\u3002 \u56e0\u6b64\uff0c\u8ba9 FastAPI \u9009\u62e9\u6b63\u786e\u7248\u672c\u7684 Starlette \u5c31\u53ef\u4ee5\u4e86\u3002 \u5173\u4e8e Pydantic \u00b6 Pydantic \u5728\u5176\u81ea\u8eab\u7684\u6d4b\u8bd5\u4e2d\u5305\u542b\u5bf9 FastAPI \u7684\u6d4b\u8bd5\uff0c\u56e0\u6b64\u65b0\u7248 Pydantic \uff08 1.0.0 \u4ee5\u4e0a\uff09\u90fd\u517c\u5bb9 FastAPI\u3002 \u60a8\u53ef\u4ee5\u9650\u5b9a\u4f7f\u7528\u4efb\u4f55 1.0.0 \u7248\u4ee5\u4e0a\u81f3 2.0.0 \u7248\u4ee5\u4e0b\u7684 Pydantic\u3002 \u4f8b\u5982\uff1a pydantic>=1.2.0,<2.0.0","title":"FastAPI \u7248\u672c"},{"location":"deployment/versions/#fastapi","text":"\u73b0\u5df2\u6709\u5f88\u591a\u5e94\u7528\u548c\u7cfb\u7edf\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u4f7f\u7528 FastAPI \uff0c\u5e76\u4e14\u6d4b\u8bd5\u8986\u76d6\u7387\u4fdd\u6301\u5728 100%\u3002\u4f46 FastAPI \u7684\u5f00\u53d1\u901f\u5ea6\u4f9d\u7136\u5f88\u5feb\u3002 \u65b0\u7279\u6027\u5728\u9891\u9891\u589e\u52a0\uff0cbug \u5728\u5b9a\u671f\u4fee\u590d\uff0c\u4ee3\u7801\u8d28\u91cf\u4e5f\u5728\u4e0d\u65ad\u6539\u8fdb\u3002 \u56e0\u6b64\u5f53\u524d\u7248\u672c\u4ecd\u662f 0.x.x \uff0c\u8fd9\u8bf4\u660e\u6bcf\u6b21\u7248\u672c\u66f4\u65b0\u90fd\u53ef\u80fd\u63a8\u51fa\u6f5c\u5728\u7684\u7834\u574f\u6027\u66f4\u6539\u3002\u8fd9\u4e5f\u662f\u9075\u5faa \u8bed\u4e49\u7248\u672c\u63a7\u5236 \u7684\u60ef\u4f8b\u3002 \u76ee\u524d\uff0c\u60a8\u5c3d\u53ef\u653e\u5fc3\u4f7f\u7528 FastAPI \u521b\u5efa\u751f\u4ea7\u73af\u5883\u4e0b\u7684\u5e94\u7528\uff08\u53ef\u80fd\u60a8\u5df2\u7ecf\u8fd9\u4e48\u505a\u4e86\uff09\uff0c\u53ea\u8981\u4fdd\u8bc1\u4f7f\u7528\u7684\u7248\u672c\u80fd\u8ba9\u4ee3\u7801\u6b63\u5e38\u8fd0\u884c\u5c31\u53ef\u4ee5\u4e86\u3002","title":"FastAPI \u7248\u672c"},{"location":"deployment/versions/#fastapi_1","text":"\u9996\u5148\uff0c\u8981\u628a FastAPI \u7684\u7248\u672c \u9650\u5b9a \u4e3a\u80fd\u8ba9\u60a8\u7684\u5e94\u7528\u6b63\u5e38\u8fd0\u884c\u7684\u6700\u65b0\u7248\u672c\u3002 \u4f8b\u5982\uff0c\u5047\u8bbe\u60a8\u7684\u5e94\u7528\u4f7f\u7528\u7684\u662f 0.45.0 \u7248\u3002 \u4f7f\u7528 requirements.txt \u6587\u4ef6\u65f6\u9700\u8981\u6307\u5b9a\u7248\u672c\uff1a fastapi==0.45.0 \u8fd9\u6837\u4f7f\u7528\u7684\u7248\u672c\u5c31\u662f 0.45.0 \u3002 \u6216\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u9650\u5b9a\u7248\u672c\uff1a fastapi>=0.45.0,<0.46.0 \u8fd9\u79cd\u65b9\u5f0f\u4f7f\u7528 0.45.0 \u4e0e 0.46.0 \u4e4b\u95f4\u7684\u7248\u672c\uff0c\u6bd4\u5982\uff0c\u53ef\u4ee5\u4f7f\u7528 0.45.2 \u7248\u3002 \u5982\u679c\u4f7f\u7528 Poetry\u3001Pipenv \u7b49\u5de5\u5177\u5b89\u88c5\u652f\u6301\u5e93\uff0c\u8fd9\u4e9b\u5de5\u5177\u90fd\u652f\u6301\u6309\u6307\u5b9a\u7248\u672c\u5b89\u88c5\u652f\u6301\u5e93\u3002","title":"\u9650\u5b9a fastapi \u7248\u672c"},{"location":"deployment/versions/#_1","text":"\u67e5\u770b \u53d1\u5e03\u8bf4\u660e \u4e86\u89e3\u53ef\u7528\u7684\u7248\u672c\uff08\u6bd4\u5982\u67e5\u770b\u5f53\u524d\u6700\u65b0\u7248\uff09\u3002","title":"\u53ef\u7528\u7248\u672c"},{"location":"deployment/versions/#_2","text":"\u9075\u5faa\u8bed\u4e49\u7248\u672c\u63a7\u5236\u60ef\u4f8b\uff0c\u4f4e\u4e8e 1.0.0 \u7684\u4efb\u4f55\u7248\u672c\u90fd\u53ef\u80fd\u5b58\u5728\u6f5c\u5728\u7684\u7834\u574f\u6027\u66f4\u6539\u3002 FastAPI \u8fd8\u9075\u5faa\u4e3a\u4fee\u590d bug \u548c\u975e\u7834\u574f\u6027\u66f4\u6539\u7684 \u8865\u4e01 \u7248\u672c\u53d8\u66f4\u60ef\u4f8b\u3002 \u63d0\u793a \u8865\u4e01\u53f7 \u662f\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u4f8b\u5982\u5728 0.2.3 \u4e2d\uff0c\u8865\u4e01\u53f7\u662f 3 \u3002 \u56e0\u6b64\uff0c\u63a8\u8350\u4ee5\u5982\u4e0b\u65b9\u5f0f\u9650\u5b9a\u7248\u672c\uff1a fastapi>=0.45.0,<0.46.0 \u7834\u574f\u6027\u53d8\u66f4\u4e0e\u65b0\u529f\u80fd\u5728 \u6b21\u7248\u672c \u4e2d\u6dfb\u52a0\u3002 \u63d0\u793a \u6b21\u7248\u672c\u53f7 \u662f\u4e2d\u95f4\u7684\u6570\u5b57\uff0c\u4f8b\u5982\u5728 0.2.3 \u4e2d\uff0c\u6b21\u7248\u672c\u53f7\u662f 2 \u3002","title":"\u5173\u4e8e\u7248\u672c"},{"location":"deployment/versions/#fastapi_2","text":"\u6d4b\u8bd5\u5e94\u7528\u662f\u975e\u5e38\u5fc5\u8981\u7684\u3002 \u501f\u52a9\u4e8e Starlette\uff0c\u6d4b\u8bd5 FastAPI \u5e94\u7528\u53d8\u5f97\u975e\u5e38\u5bb9\u6613\uff0c\u8be6\u89c1\u6587\u6863\uff1a \u6d4b\u8bd5 \u3002 \u6d4b\u8bd5\u4e4b\u540e\uff0c\u8981\u628a FastAPI \u5347\u7ea7\u5230\u66f4\u65b0\u7684\u7248\u672c\uff0c\u6b64\u65f6\u8981\u786e\u4fdd\u6240\u6709\u4ee3\u7801\u90fd\u80fd\u901a\u8fc7\u6d4b\u8bd5\u3002 \u53ea\u8981\u6240\u6709\u529f\u80fd\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u6216\u8fdb\u884c\u4e86\u5fc5\u8981\u7684\u8c03\u6574\uff0c\u901a\u8fc7\u6240\u6709\u6d4b\u8bd5\u540e\uff0c\u5c31\u53ef\u4ee5\u653e\u5fc3\u628a\u60a8\u4f7f\u7528\u7684 fastapi \u5347\u7ea7\u4e3a\u6700\u65b0\u7248\u3002","title":"\u66f4\u65b0 FastAPI \u7248\u672c"},{"location":"deployment/versions/#starlette","text":"\u4e0d\u8981\u9650\u5b9a starlette \u7684\u7248\u672c\u3002 FastAPI \u5404\u4e2a\u7248\u672c\u5747\u4f7f\u7528\u6307\u5b9a\u7248\u672c\u7684 Starlette\u3002 \u56e0\u6b64\uff0c\u8ba9 FastAPI \u9009\u62e9\u6b63\u786e\u7248\u672c\u7684 Starlette \u5c31\u53ef\u4ee5\u4e86\u3002","title":"\u5173\u4e8e Starlette"},{"location":"deployment/versions/#pydantic","text":"Pydantic \u5728\u5176\u81ea\u8eab\u7684\u6d4b\u8bd5\u4e2d\u5305\u542b\u5bf9 FastAPI \u7684\u6d4b\u8bd5\uff0c\u56e0\u6b64\u65b0\u7248 Pydantic \uff08 1.0.0 \u4ee5\u4e0a\uff09\u90fd\u517c\u5bb9 FastAPI\u3002 \u60a8\u53ef\u4ee5\u9650\u5b9a\u4f7f\u7528\u4efb\u4f55 1.0.0 \u7248\u4ee5\u4e0a\u81f3 2.0.0 \u7248\u4ee5\u4e0b\u7684 Pydantic\u3002 \u4f8b\u5982\uff1a pydantic>=1.2.0,<2.0.0","title":"\u5173\u4e8e Pydantic"},{"location":"tutorial/","text":"\u7528\u6237\u6307\u5357 - \u7b80\u4ecb \u00b6 \u672c\u6307\u5357\u5c06\u9010\u6b65\u4ecb\u7ecd FastAPI \u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\u3002 \u5404\u7ae0\u8282\u5faa\u5e8f\u6e10\u8fdb\uff0c\u4f46\u53c8\u56f4\u7ed5\u5404\u81ea\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u9605\u8bfb\u6240\u9700\u7ae0\u8282\uff0c\u5b9e\u73b0\u7279\u5b9a\u7684 API \u9700\u6c42\u3002 \u672c\u6307\u5357\u8fd8\u662f\u53c2\u8003\u624b\u518c\u3002 \u4f9b\u60a8\u968f\u65f6\u67e5\u9605\u3002 \u8fd0\u884c\u4ee3\u7801 \u00b6 \u672c\u6307\u5357\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u90fd\u80fd\u76f4\u63a5\u590d\u5236\u4f7f\u7528\uff08\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u90fd\u662f\u7ecf\u8fc7\u6d4b\u8bd5\u7684 Python \u6587\u4ef6\uff09\u3002 \u8981\u8fd0\u884c\u793a\u4f8b\uff0c\u53ea\u9700\u628a\u4ee3\u7801\u590d\u5236\u5230 main.py \uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 uvicorn \uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u5f3a\u70c8\u5efa\u8bae \u60a8\u5728\u672c\u673a\u7f16\u8f91\u5e76\u8fd0\u884c\u8fd9\u4e9b\u4ee3\u7801\u3002 \u53ea\u5728\u6709\u7f16\u8f91\u5668\u4e2d\u8f93\u5165\u4ee3\u7801\u65f6\uff0c\u60a8\u624d\u80fd\u771f\u6b63\u611f\u53d7\u5230 FastAPI \u7684\u4f18\u52bf\uff0c\u4f53\u9a8c\u5230\u9700\u8981\u8f93\u5165\u7684\u4ee3\u7801\u5230\u5e95\u6709\u591a\u5c11\uff0c\u8fd8\u6709\u7c7b\u578b\u68c0\u67e5\u3001\u81ea\u52a8\u8865\u5168\u7b49\u529f\u80fd\u3002 \u5b89\u88c5 FastAPI \u00b6 \u7b2c\u4e00\u6b65\u662f\u5b89\u88c5 FastAPI\u3002 \u5b66\u4e60\u672c\u6559\u7a0b\uff0c\u9700\u8981\u5b89\u88c5\u6240\u6709\u53ef\u9009\u4f9d\u8d56\u652f\u6301\u5e93\uff1a $ pip install fastapi [ all ] ---> 100% ......\u4e0a\u8ff0\u547d\u4ee4\u8fd8\u5b89\u88c5\u4e86\u8fd0\u884c FastAPI \u5e94\u7528\u7684\u670d\u52a1\u5668 - uvicorn \u3002 \u7b14\u8bb0 \u60a8\u53ef\u4ee5\u5355\u72ec\u5b89\u88c5\u5404\u4e2a\u652f\u6301\u5e93\u3002 \u9700\u8981\u628a\u5e94\u7528\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u65f6\uff0c\u9996\u5148\u8981\u5b89\u88c5 FastAPI\uff1a pip install fastapi \u7136\u540e\uff0c\u8fd8\u8981\u5b89\u88c5\u670d\u52a1\u5668 uvicorn \uff1a pip install uvicorn[standard] \u6309\u9700\u5355\u72ec\u5b89\u88c5\u5176\u4ed6\u53ef\u9009\u4f9d\u8d56\u652f\u6301\u5e93\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u00b6 \u5b66\u5b8c \u7528\u6237\u6307\u5357 \u540e\uff0c\u60a8\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5b66\u4e60 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u57fa\u4e8e\u672c\u6307\u5357\uff0c\u6838\u5fc3\u6982\u5ff5\u90fd\u4e00\u6837\uff0c\u4f46\u4ecb\u7ecd\u4e86\u66f4\u591a\u529f\u80fd\u3002 \u5efa\u8bae\u60a8\u5148\u9605\u8bfb \u7528\u6237\u6307\u5357 \u3002 \u5b66\u5b8c \u7528\u6237\u6307\u5357 \u5c31\u80fd\u5f00\u53d1\u5b8c\u6574\u7684 FastAPI \u5e94\u7528\u3002\u7136\u540e\uff0c\u518d\u4f7f\u7528 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u7684\u529f\u80fd\u6269\u5c55\u5e94\u7528\u3002","title":"\u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"tutorial/#-","text":"\u672c\u6307\u5357\u5c06\u9010\u6b65\u4ecb\u7ecd FastAPI \u7684\u7edd\u5927\u90e8\u5206\u529f\u80fd\u3002 \u5404\u7ae0\u8282\u5faa\u5e8f\u6e10\u8fdb\uff0c\u4f46\u53c8\u56f4\u7ed5\u5404\u81ea\u7684\u4e3b\u9898\uff0c\u60a8\u53ef\u4ee5\u76f4\u63a5\u9605\u8bfb\u6240\u9700\u7ae0\u8282\uff0c\u5b9e\u73b0\u7279\u5b9a\u7684 API \u9700\u6c42\u3002 \u672c\u6307\u5357\u8fd8\u662f\u53c2\u8003\u624b\u518c\u3002 \u4f9b\u60a8\u968f\u65f6\u67e5\u9605\u3002","title":"\u7528\u6237\u6307\u5357 - \u7b80\u4ecb"},{"location":"tutorial/#_1","text":"\u672c\u6307\u5357\u4e2d\u7684\u6240\u6709\u4ee3\u7801\u90fd\u80fd\u76f4\u63a5\u590d\u5236\u4f7f\u7528\uff08\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e9b\u4ee3\u7801\u90fd\u662f\u7ecf\u8fc7\u6d4b\u8bd5\u7684 Python \u6587\u4ef6\uff09\u3002 \u8981\u8fd0\u884c\u793a\u4f8b\uff0c\u53ea\u9700\u628a\u4ee3\u7801\u590d\u5236\u5230 main.py \uff0c\u7528\u4ee5\u4e0b\u547d\u4ee4\u542f\u52a8 uvicorn \uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u5f3a\u70c8\u5efa\u8bae \u60a8\u5728\u672c\u673a\u7f16\u8f91\u5e76\u8fd0\u884c\u8fd9\u4e9b\u4ee3\u7801\u3002 \u53ea\u5728\u6709\u7f16\u8f91\u5668\u4e2d\u8f93\u5165\u4ee3\u7801\u65f6\uff0c\u60a8\u624d\u80fd\u771f\u6b63\u611f\u53d7\u5230 FastAPI \u7684\u4f18\u52bf\uff0c\u4f53\u9a8c\u5230\u9700\u8981\u8f93\u5165\u7684\u4ee3\u7801\u5230\u5e95\u6709\u591a\u5c11\uff0c\u8fd8\u6709\u7c7b\u578b\u68c0\u67e5\u3001\u81ea\u52a8\u8865\u5168\u7b49\u529f\u80fd\u3002","title":"\u8fd0\u884c\u4ee3\u7801"},{"location":"tutorial/#fastapi","text":"\u7b2c\u4e00\u6b65\u662f\u5b89\u88c5 FastAPI\u3002 \u5b66\u4e60\u672c\u6559\u7a0b\uff0c\u9700\u8981\u5b89\u88c5\u6240\u6709\u53ef\u9009\u4f9d\u8d56\u652f\u6301\u5e93\uff1a $ pip install fastapi [ all ] ---> 100% ......\u4e0a\u8ff0\u547d\u4ee4\u8fd8\u5b89\u88c5\u4e86\u8fd0\u884c FastAPI \u5e94\u7528\u7684\u670d\u52a1\u5668 - uvicorn \u3002 \u7b14\u8bb0 \u60a8\u53ef\u4ee5\u5355\u72ec\u5b89\u88c5\u5404\u4e2a\u652f\u6301\u5e93\u3002 \u9700\u8981\u628a\u5e94\u7528\u90e8\u7f72\u5230\u751f\u4ea7\u73af\u5883\u65f6\uff0c\u9996\u5148\u8981\u5b89\u88c5 FastAPI\uff1a pip install fastapi \u7136\u540e\uff0c\u8fd8\u8981\u5b89\u88c5\u670d\u52a1\u5668 uvicorn \uff1a pip install uvicorn[standard] \u6309\u9700\u5355\u72ec\u5b89\u88c5\u5176\u4ed6\u53ef\u9009\u4f9d\u8d56\u652f\u6301\u5e93\u3002","title":"\u5b89\u88c5 FastAPI"},{"location":"tutorial/#_2","text":"\u5b66\u5b8c \u7528\u6237\u6307\u5357 \u540e\uff0c\u60a8\u8fd8\u53ef\u4ee5\u7ee7\u7eed\u5b66\u4e60 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u57fa\u4e8e\u672c\u6307\u5357\uff0c\u6838\u5fc3\u6982\u5ff5\u90fd\u4e00\u6837\uff0c\u4f46\u4ecb\u7ecd\u4e86\u66f4\u591a\u529f\u80fd\u3002 \u5efa\u8bae\u60a8\u5148\u9605\u8bfb \u7528\u6237\u6307\u5357 \u3002 \u5b66\u5b8c \u7528\u6237\u6307\u5357 \u5c31\u80fd\u5f00\u53d1\u5b8c\u6574\u7684 FastAPI \u5e94\u7528\u3002\u7136\u540e\uff0c\u518d\u4f7f\u7528 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u7684\u529f\u80fd\u6269\u5c55\u5e94\u7528\u3002","title":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357"},{"location":"tutorial/background-tasks/","text":"\u540e\u53f0\u4efb\u52a1 \u00b6 FastAPI \u53ef\u4ee5\u5b9a\u4e49\u8fd4\u56de\u54cd\u5e94\u540e\u8fd0\u884c\u7684\u540e\u53f0\u4efb\u52a1\u3002 \u5982\u679c\u8981\u5728\u8bf7\u6c42\u540e\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4f46\u5728\u63a5\u6536\u54cd\u5e94\u4e4b\u524d\u4e0d\u5e0c\u671b\u5ba2\u6237\u7aef\u7b49\u5f85\u64cd\u4f5c\u6267\u884c\u5b8c\u6bd5\uff0c\u5c31\u8981\u4f7f\u7528\u540e\u53f0\u4efb\u52a1\u3002 \u5305\u62ec\u5982\u4e0b\u573a\u666f\uff1a \u6267\u884c\u64cd\u4f5c\u540e\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u901a\u77e5\uff1a \u8fde\u63a5\u90ae\u4ef6\u670d\u52a1\u5668\u4e0e\u53d1\u9001\u90ae\u4ef6\u76f8\u5bf9 \u8f83\u6162 \uff08\u51e0\u79d2\uff09\uff0c\u6b64\u65f6\u5e94\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\uff0c\u5728\u540e\u53f0\u53d1\u9001\u90ae\u4ef6\u901a\u77e5 \u5904\u7406\u6570\u636e\uff1a \u63a5\u6536\u6587\u4ef6\u7f13\u6162\u65f6\uff0c\u5e94\u5148\u8fd4\u56de Accepted \uff08 HTTP 202 \uff09\uff0c\u5728\u540e\u53f0\u5904\u7406\u6587\u4ef6 \u4f7f\u7528 BackgroundTasks \u00b6 \u9996\u5148\uff0c\u5bfc\u5165 BackgroundTasks \uff0c\u58f0\u660e BackgroundTasks \u7c7b\u578b\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\uff1a from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } FastAPI \u521b\u5efa BackgroundTasks \u7c7b\u578b\u7684\u5bf9\u8c61\u53c2\u6570\u3002 \u521b\u5efa\u4efb\u52a1\u51fd\u6570 \u00b6 \u521b\u5efa\u8fd0\u884c\u540e\u53f0\u4efb\u52a1\u7684\u51fd\u6570\u3002 \u4efb\u52a1\u51fd\u6570\u662f\u80fd\u63a5\u6536\u53c2\u6570\u7684\u6807\u51c6\u51fd\u6570\u3002 \u4efb\u52a1\u51fd\u6570\u65e2\u53ef\u4ee5\u662f\u5f02\u6b65\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c FastAPI \u90fd\u80fd\u6b63\u786e\u5904\u7406\u3002 \u672c\u4f8b\u4e2d\uff0c\u4efb\u52a1\u51fd\u6570\uff08\u6a21\u62df\u53d1\u9001\u90ae\u4ef6\uff09\u8f93\u51fa\u4e00\u4e2a\u6587\u4ef6\u3002 \u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c\u65e0\u9700\u4f7f\u7528 async \u548c await \uff0c \u6240\u4ee5\u4f7f\u7528 def \u5b9a\u4e49\u666e\u901a\u51fd\u6570\uff1a from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } \u6dfb\u52a0\u540e\u53f0\u4efb\u52a1 \u00b6 \u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u4f7f\u7528 .add_task() \u65b9\u6cd5\u628a\u4efb\u52a1\u51fd\u6570\u4f20\u9012\u7ed9 \u540e\u53f0\u4efb\u52a1 \u5bf9\u8c61\uff1a from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } .add_task() \u662f\u5b9e\u53c2\uff08 Argument \uff09\uff1a \u5728\u540e\u53f0\u8fd0\u884c\u7684\u4efb\u52a1\u51fd\u6570\uff08 write_notification \uff09 \u6309\u987a\u5e8f\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u5b9e\u53c2\u5e8f\u5217\uff08 email \uff09 \u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u5173\u952e\u5b57\u53c2\u6570\uff08 message=\"some notification\" \uff09 \u4f9d\u8d56\u6ce8\u5165 \u00b6 \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528 BackgroundTasks \uff0c\u53ef\u4ee5\u5728\u4e0d\u540c\u5c42\u7ea7\u58f0\u660e BackgroundTasks \u7c7b\u578b\u7684\u53c2\u6570\uff1a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3001\u4f9d\u8d56\u9879\u3001\u5b50\u4f9d\u8d56\u9879\u7b49\u3002 FastAPI \u77e5\u9053\u600e\u6837\u4e3a\u4e0d\u540c\u60c5\u51b5\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4ee5\u53ca\u5982\u4f55\u590d\u7528\u76f8\u540c\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u628a\u6240\u6709\u540e\u53f0\u4efb\u52a1\u5408\u5e76\u4e3a\u4e00\u4f53\uff0c\u5e76\u5728\u540e\u53f0\u8fd0\u884c\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : Union [ str , None ] = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : str | None = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } \u672c\u4f8b\u4e2d\uff0c\u54cd\u5e94\u53d1\u9001\u540e\u4f1a\u628a\u6240\u6709\u4fe1\u606f\u5199\u5165 log.txt \u3002 \u5982\u679c\u8bf7\u6c42\u4e2d\u5305\u542b\u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u4e5f\u4f1a\u88ab\u540e\u53f0\u4efb\u52a1\u5199\u5165\u65e5\u5fd7\u3002 \u7136\u540e\uff0c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u751f\u6210\u7684\u53e6\u4e00\u4e2a\u540e\u53f0\u4efb\u52a1\u4f1a\u4f7f\u7528 email \u8def\u5f84\u53c2\u6570\u5199\u5165\u4fe1\u606f\u3002 \u6280\u672f\u7ec6\u8282 \u00b6 BackgroundTasks \u7c7b\u76f4\u63a5\u7ee7\u627f\u81ea starlette.background \u3002 FastAPI \u4e2d\u76f4\u63a5\u63d0\u4f9b\u4e86 BackgroundTasks \u7c7b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece fastapi \u4e2d\u5bfc\u5165\uff0c\u907f\u514d\u4e0d\u5c0f\u5fc3\u4ece starlette.background \u4e2d\u5bfc\u5165\u5907\u7528\u7684 BackgroundTask \uff08\u7ed3\u5c3e\u6ca1\u6709 s \uff09\u3002 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u5e94\u5f53\u53ea\u4f7f\u7528 BackgroundTasks \uff08\u4e0d\u662f BackgroundTask \uff09\uff0c FastAPI \u4f1a\u5904\u7406\u5176\u4ed6\u64cd\u4f5c\uff0c\u8fd9\u70b9\u4e0e\u76f4\u63a5\u4f7f\u7528 Request \u4e00\u6837\u3002 FastAPI \u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528 BackgroundTask \uff0c\u4f46\u5fc5\u987b\u8981\u5728\u4ee3\u7801\u4e2d\u521b\u5efa\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u8be5\u5bf9\u8c61\u7684 Starlette Response \u3002 \u8be6\u89c1 Starlette \u5b98\u6863\uff1a\u540e\u53f0\u4efb\u52a1 \u3002 \u8b66\u544a \u00b6 \u5982\u679c\u9700\u8981\u6267\u884c\u7e41\u91cd\u7684\u540e\u53f0\u8ba1\u7b97\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u7531\u540c\u4e00\u8fdb\u7a0b\u6267\u884c\uff08\u4f8b\u5982\uff0c\u4e0d\u9700\u8981\u5171\u4eab\u5185\u5b58\u3001\u53d8\u91cf\uff09\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 Celery \u7b49\u5de5\u5177\u3002 \u8fd9\u4e9b\u5de5\u5177\u9700\u8981\u66f4\u590d\u6742\u7684\u914d\u7f6e\uff0c\u8fd8\u9700\u8981 RabbitMQ \u6216 Redis \u7b49\u4fe1\u606f/\u5de5\u4f5c\u961f\u5217\u7ba1\u7406\u5668\uff0c\u4f46\u5b83\u4eec\u80fd\u4f7f\u7528\u591a\u8fdb\u7a0b\uff0c\u5c24\u5176\u662f\u53ef\u4ee5\u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\u6267\u884c\u540e\u53f0\u4efb\u52a1\u3002 \u9879\u76ee\u751f\u6210\u5668 \u4e00\u7ae0\u4e2d\u63d0\u4f9b\u4e86\u5305\u542b\u6240\u6709\u914d\u7f6e\u597d\u7684 Celery \u5b9e\u4f8b\u3002 \u4f46\u5982\u679c\u53ea\u5728 FastAPI \u5e94\u7528\u4e2d\u8bbf\u95ee\u53d8\u91cf\u6216\u5bf9\u8c61\uff0c\u6216\u53ea\u662f\u6267\u884c\uff08\u53d1\u9001\u90ae\u4ef6\u901a\u77e5\u7b49\uff09\u5c0f\u578b\u540e\u53f0\u4efb\u52a1\uff0c\u53ea\u4f7f\u7528 BackgroundTasks \u5c31\u591f\u4e86\u3002 \u5c0f\u7ed3 \u00b6 \u672c\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u5bfc\u5165 BackgroundTasks \uff0c\u5e76\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u548c\u4f9d\u8d56\u9879\u7684\u53c2\u6570\u4e2d\u4f7f\u7528 BackgroundTasks \u6dfb\u52a0\u540e\u53f0\u4efb\u52a1\u3002","title":"\u540e\u53f0\u4efb\u52a1"},{"location":"tutorial/background-tasks/#_1","text":"FastAPI \u53ef\u4ee5\u5b9a\u4e49\u8fd4\u56de\u54cd\u5e94\u540e\u8fd0\u884c\u7684\u540e\u53f0\u4efb\u52a1\u3002 \u5982\u679c\u8981\u5728\u8bf7\u6c42\u540e\u6267\u884c\u67d0\u4e9b\u64cd\u4f5c\uff0c\u4f46\u5728\u63a5\u6536\u54cd\u5e94\u4e4b\u524d\u4e0d\u5e0c\u671b\u5ba2\u6237\u7aef\u7b49\u5f85\u64cd\u4f5c\u6267\u884c\u5b8c\u6bd5\uff0c\u5c31\u8981\u4f7f\u7528\u540e\u53f0\u4efb\u52a1\u3002 \u5305\u62ec\u5982\u4e0b\u573a\u666f\uff1a \u6267\u884c\u64cd\u4f5c\u540e\u53d1\u9001\u7535\u5b50\u90ae\u4ef6\u901a\u77e5\uff1a \u8fde\u63a5\u90ae\u4ef6\u670d\u52a1\u5668\u4e0e\u53d1\u9001\u90ae\u4ef6\u76f8\u5bf9 \u8f83\u6162 \uff08\u51e0\u79d2\uff09\uff0c\u6b64\u65f6\u5e94\u76f4\u63a5\u8fd4\u56de\u54cd\u5e94\uff0c\u5728\u540e\u53f0\u53d1\u9001\u90ae\u4ef6\u901a\u77e5 \u5904\u7406\u6570\u636e\uff1a \u63a5\u6536\u6587\u4ef6\u7f13\u6162\u65f6\uff0c\u5e94\u5148\u8fd4\u56de Accepted \uff08 HTTP 202 \uff09\uff0c\u5728\u540e\u53f0\u5904\u7406\u6587\u4ef6","title":"\u540e\u53f0\u4efb\u52a1"},{"location":"tutorial/background-tasks/#backgroundtasks","text":"\u9996\u5148\uff0c\u5bfc\u5165 BackgroundTasks \uff0c\u58f0\u660e BackgroundTasks \u7c7b\u578b\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\uff1a from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } FastAPI \u521b\u5efa BackgroundTasks \u7c7b\u578b\u7684\u5bf9\u8c61\u53c2\u6570\u3002","title":"\u4f7f\u7528 BackgroundTasks"},{"location":"tutorial/background-tasks/#_2","text":"\u521b\u5efa\u8fd0\u884c\u540e\u53f0\u4efb\u52a1\u7684\u51fd\u6570\u3002 \u4efb\u52a1\u51fd\u6570\u662f\u80fd\u63a5\u6536\u53c2\u6570\u7684\u6807\u51c6\u51fd\u6570\u3002 \u4efb\u52a1\u51fd\u6570\u65e2\u53ef\u4ee5\u662f\u5f02\u6b65\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u662f\u666e\u901a\u51fd\u6570\uff0c FastAPI \u90fd\u80fd\u6b63\u786e\u5904\u7406\u3002 \u672c\u4f8b\u4e2d\uff0c\u4efb\u52a1\u51fd\u6570\uff08\u6a21\u62df\u53d1\u9001\u90ae\u4ef6\uff09\u8f93\u51fa\u4e00\u4e2a\u6587\u4ef6\u3002 \u5199\u5165\u6587\u4ef6\u7684\u64cd\u4f5c\u65e0\u9700\u4f7f\u7528 async \u548c await \uff0c \u6240\u4ee5\u4f7f\u7528 def \u5b9a\u4e49\u666e\u901a\u51fd\u6570\uff1a from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" }","title":"\u521b\u5efa\u4efb\u52a1\u51fd\u6570"},{"location":"tutorial/background-tasks/#_3","text":"\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u4f7f\u7528 .add_task() \u65b9\u6cd5\u628a\u4efb\u52a1\u51fd\u6570\u4f20\u9012\u7ed9 \u540e\u53f0\u4efb\u52a1 \u5bf9\u8c61\uff1a from fastapi import BackgroundTasks , FastAPI app = FastAPI () def write_notification ( email : str , message = \"\" ): with open ( \"log.txt\" , mode = \"w\" ) as email_file : content = f \"notification for { email } : { message } \" email_file . write ( content ) @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks ): background_tasks . add_task ( write_notification , email , message = \"some notification\" ) return { \"message\" : \"Notification sent in the background\" } .add_task() \u662f\u5b9e\u53c2\uff08 Argument \uff09\uff1a \u5728\u540e\u53f0\u8fd0\u884c\u7684\u4efb\u52a1\u51fd\u6570\uff08 write_notification \uff09 \u6309\u987a\u5e8f\u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u5b9e\u53c2\u5e8f\u5217\uff08 email \uff09 \u4f20\u9012\u7ed9\u4efb\u52a1\u51fd\u6570\u7684\u5173\u952e\u5b57\u53c2\u6570\uff08 message=\"some notification\" \uff09","title":"\u6dfb\u52a0\u540e\u53f0\u4efb\u52a1"},{"location":"tutorial/background-tasks/#_4","text":"\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528 BackgroundTasks \uff0c\u53ef\u4ee5\u5728\u4e0d\u540c\u5c42\u7ea7\u58f0\u660e BackgroundTasks \u7c7b\u578b\u7684\u53c2\u6570\uff1a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3001\u4f9d\u8d56\u9879\u3001\u5b50\u4f9d\u8d56\u9879\u7b49\u3002 FastAPI \u77e5\u9053\u600e\u6837\u4e3a\u4e0d\u540c\u60c5\u51b5\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\uff0c\u4ee5\u53ca\u5982\u4f55\u590d\u7528\u76f8\u540c\u5bf9\u8c61\uff0c\u4ee5\u4fbf\u628a\u6240\u6709\u540e\u53f0\u4efb\u52a1\u5408\u5e76\u4e3a\u4e00\u4f53\uff0c\u5e76\u5728\u540e\u53f0\u8fd0\u884c\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : Union [ str , None ] = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } from fastapi import BackgroundTasks , Depends , FastAPI app = FastAPI () def write_log ( message : str ): with open ( \"log.txt\" , mode = \"a\" ) as log : log . write ( message ) def get_query ( background_tasks : BackgroundTasks , q : str | None = None ): if q : message = f \"found query: { q } \\n \" background_tasks . add_task ( write_log , message ) return q @app . post ( \"/send-notification/ {email} \" ) async def send_notification ( email : str , background_tasks : BackgroundTasks , q : str = Depends ( get_query ) ): message = f \"message to { email } \\n \" background_tasks . add_task ( write_log , message ) return { \"message\" : \"Message sent\" } \u672c\u4f8b\u4e2d\uff0c\u54cd\u5e94\u53d1\u9001\u540e\u4f1a\u628a\u6240\u6709\u4fe1\u606f\u5199\u5165 log.txt \u3002 \u5982\u679c\u8bf7\u6c42\u4e2d\u5305\u542b\u67e5\u8be2\uff0c\u8be5\u67e5\u8be2\u4e5f\u4f1a\u88ab\u540e\u53f0\u4efb\u52a1\u5199\u5165\u65e5\u5fd7\u3002 \u7136\u540e\uff0c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u751f\u6210\u7684\u53e6\u4e00\u4e2a\u540e\u53f0\u4efb\u52a1\u4f1a\u4f7f\u7528 email \u8def\u5f84\u53c2\u6570\u5199\u5165\u4fe1\u606f\u3002","title":"\u4f9d\u8d56\u6ce8\u5165"},{"location":"tutorial/background-tasks/#_5","text":"BackgroundTasks \u7c7b\u76f4\u63a5\u7ee7\u627f\u81ea starlette.background \u3002 FastAPI \u4e2d\u76f4\u63a5\u63d0\u4f9b\u4e86 BackgroundTasks \u7c7b\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u76f4\u63a5\u4ece fastapi \u4e2d\u5bfc\u5165\uff0c\u907f\u514d\u4e0d\u5c0f\u5fc3\u4ece starlette.background \u4e2d\u5bfc\u5165\u5907\u7528\u7684 BackgroundTask \uff08\u7ed3\u5c3e\u6ca1\u6709 s \uff09\u3002 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u5e94\u5f53\u53ea\u4f7f\u7528 BackgroundTasks \uff08\u4e0d\u662f BackgroundTask \uff09\uff0c FastAPI \u4f1a\u5904\u7406\u5176\u4ed6\u64cd\u4f5c\uff0c\u8fd9\u70b9\u4e0e\u76f4\u63a5\u4f7f\u7528 Request \u4e00\u6837\u3002 FastAPI \u4e2d\u4e5f\u53ef\u4ee5\u4f7f\u7528 BackgroundTask \uff0c\u4f46\u5fc5\u987b\u8981\u5728\u4ee3\u7801\u4e2d\u521b\u5efa\u8fd9\u4e2a\u5bf9\u8c61\uff0c\u5e76\u8fd4\u56de\u5305\u542b\u8be5\u5bf9\u8c61\u7684 Starlette Response \u3002 \u8be6\u89c1 Starlette \u5b98\u6863\uff1a\u540e\u53f0\u4efb\u52a1 \u3002","title":"\u6280\u672f\u7ec6\u8282"},{"location":"tutorial/background-tasks/#_6","text":"\u5982\u679c\u9700\u8981\u6267\u884c\u7e41\u91cd\u7684\u540e\u53f0\u8ba1\u7b97\uff0c\u800c\u4e14\u4e0d\u9700\u8981\u7531\u540c\u4e00\u8fdb\u7a0b\u6267\u884c\uff08\u4f8b\u5982\uff0c\u4e0d\u9700\u8981\u5171\u4eab\u5185\u5b58\u3001\u53d8\u91cf\uff09\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 Celery \u7b49\u5de5\u5177\u3002 \u8fd9\u4e9b\u5de5\u5177\u9700\u8981\u66f4\u590d\u6742\u7684\u914d\u7f6e\uff0c\u8fd8\u9700\u8981 RabbitMQ \u6216 Redis \u7b49\u4fe1\u606f/\u5de5\u4f5c\u961f\u5217\u7ba1\u7406\u5668\uff0c\u4f46\u5b83\u4eec\u80fd\u4f7f\u7528\u591a\u8fdb\u7a0b\uff0c\u5c24\u5176\u662f\u53ef\u4ee5\u5728\u591a\u4e2a\u670d\u52a1\u5668\u4e0a\u6267\u884c\u540e\u53f0\u4efb\u52a1\u3002 \u9879\u76ee\u751f\u6210\u5668 \u4e00\u7ae0\u4e2d\u63d0\u4f9b\u4e86\u5305\u542b\u6240\u6709\u914d\u7f6e\u597d\u7684 Celery \u5b9e\u4f8b\u3002 \u4f46\u5982\u679c\u53ea\u5728 FastAPI \u5e94\u7528\u4e2d\u8bbf\u95ee\u53d8\u91cf\u6216\u5bf9\u8c61\uff0c\u6216\u53ea\u662f\u6267\u884c\uff08\u53d1\u9001\u90ae\u4ef6\u901a\u77e5\u7b49\uff09\u5c0f\u578b\u540e\u53f0\u4efb\u52a1\uff0c\u53ea\u4f7f\u7528 BackgroundTasks \u5c31\u591f\u4e86\u3002","title":"\u8b66\u544a"},{"location":"tutorial/background-tasks/#_7","text":"\u672c\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u5bfc\u5165 BackgroundTasks \uff0c\u5e76\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u548c\u4f9d\u8d56\u9879\u7684\u53c2\u6570\u4e2d\u4f7f\u7528 BackgroundTasks \u6dfb\u52a0\u540e\u53f0\u4efb\u52a1\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/bigger-applications/","text":"\u5927\u578b\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6 \u00b6 \u5f00\u53d1\u5e94\u7528\u6216\u7f51\u7edc API\u65f6\uff0c\u6211\u4eec\u5f88\u5c11\u4f1a\u628a\u5168\u90e8\u4ee3\u7801\u90fd\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u3002 FastAPI \u63d0\u4f9b\u4e86\u65b9\u4fbf\u3001\u7075\u6d3b\u7684\u5e94\u7528\u6784\u5efa\u5de5\u5177\u3002 \u8bf4\u660e \u5982\u679c\u60a8\u4e4b\u524d\u4f7f\u7528\u8fc7 Flask\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7c7b\u4f3c\u4e8e Flask \u7684 Blueprints\u3002 \u6587\u4ef6\u67b6\u6784\u793a\u4f8b \u00b6 \u5047\u8bbe\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2514\u2500\u2500 routers \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 items.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u2514\u2500\u2500 internal \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 admin.py \u63d0\u793a __init__.py \uff1a\u6bcf\u4e2a\u6587\u4ef6\u5939\u6216\u5b50\u6587\u4ef6\u5939\u90fd\u5305\u542b __init__.py \u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u628a\u4ee3\u7801\u4ece\u4e00\u4e2a\u6587\u4ef6\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002 \u4f8b\u5982\uff0c app/main.py \u7684\u8fd9\u884c\u4ee3\u7801\uff1a from app.routers import items app \u6587\u4ef6\u5939\u5305\u542b\u4e86\u5168\u90e8\u6587\u4ef6\u3002\u5176\u4e2d\u6709\u4e00\u4e2a\u7a7a\u6587\u4ef6 app/__init__.py \uff0c\u56e0\u6b64\uff0c\u5b83\u662f Python \u5305 \uff08 Python \u6a21\u5757 \u96c6\u5408\uff09\uff1a app app/main.py \u662f Python \u5305\uff08\u5305\u542b __init__.py \u7684\u6587\u4ef6\u5939\uff09\u7684 \u6a21\u5757 \uff1a app.main app/dependencies.py \u548c app/main.py \u4e00\u6837\u4e5f\u662f \u6a21\u5757 \uff1a app.dependencies app/routers/ \u662f\u5305\u542b __init__.py \u7684 Python \u5b50\u5305 \uff1a app.routers app/routers/items.py \u662f app/routers/ \u7684\u5b50\u6a21\u5757\uff1a app.routers.items app/routers/users.py \u4e5f\u662f app/routers/ \u7684\u5b50\u6a21\u5757\uff1a app.routers.users app/internal/ \u662f\u5305\u542b __init__.py \u7684 Python \u5b50\u5305 \uff1a app.internal app/internal/admin.py \u662f app/internal/ \u7684\u5b50\u6a21\u5757\uff1a app.internal.admin \u5e26\u6ce8\u91ca\u7684\u6587\u4ef6\u67b6\u6784\uff1a . \u251c\u2500\u2500 app # `app` \u662f Python \u5305 \u2502 \u251c\u2500\u2500 __init__.py # \u628a `app` \u8bc6\u522b\u4e3a Python \u5305 \u2502 \u251c\u2500\u2500 main.py # `main` \u6a21\u5757\uff0c\u4f8b\u5982 import app.main \u2502 \u251c\u2500\u2500 dependencies.py # `dependencies` \u6a21\u5757\uff0c\u4f8b\u5982 import app.dependencies \u2502 \u2514\u2500\u2500 routers # `routers` \u662f Python \u5b50\u5305 \u2502 \u2502 \u251c\u2500\u2500 __init__.py # \u628a `routers` \u8bc6\u522b\u4e3a Python \u5b50\u5305 \u2502 \u2502 \u251c\u2500\u2500 items.py # `items` \u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.items \u2502 \u2502 \u2514\u2500\u2500 users.py # `users` \u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.users \u2502 \u2514\u2500\u2500 internal # `internal`\u662f Python \u5b50\u5305 \u2502 \u251c\u2500\u2500 __init__.py # \u628a `internal` \u8bc6\u522b\u4e3a Python \u5b50\u5305 \u2502 \u2514\u2500\u2500 admin.py # `admin` \u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.internal.admin APIRouter \u00b6 \u5047\u8bbe\u4e13\u95e8\u5904\u7406\u7528\u6237\u7684\u662f /app/routers/users.py \u5b50\u6a21\u5757\u3002 \u8be5\u6a21\u5757\u628a\u7528\u6237\u76f8\u5173\u7684 \u8def\u5f84\u64cd\u4f5c \u548c\u5176\u4ed6\u4ee3\u7801\u5206\u5f00\uff0c\u4f7f\u9879\u76ee\u6587\u4ef6\u4e95\u4e95\u6709\u6761\u3002 \u4f46\u5b83\u4ecd\u5c5e\u4e8e FastAPI \u5e94\u7528/\u7f51\u7edc API\uff08\u4e5f\u662f Python \u5305 \u7684\u4e00\u90e8\u5206\uff09\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 APIRouter \u4e3a\u8be5\u6a21\u5757\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u3002 \u5bfc\u5165 APIRouter \u00b6 \u4e0e\u521b\u5efa FastAPI \u7c7b\u5b9e\u4f8b\u76f8\u540c\uff0c\u5bfc\u5165 APIRouter \u5e76\u521b\u5efa \u5b9e\u4f8b \uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } \u4f7f\u7528 APIRouter \u7684 \u8def\u5f84\u64cd\u4f5c \u00b6 \u7136\u540e\uff0c\u7528\u5b83\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u3002 \u4f7f\u7528\u65b9\u5f0f\u4e0e FastAPI \u7c7b\u76f8\u540c\uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } APIRouter \u5c31\u50cf\u662f \u8ff7\u4f60 FastAPI \u7c7b\u3002 \u5b83\u652f\u6301\u4e0e FastAPI \u76f8\u540c\u7684\u9009\u9879\u3002 \u5305\u62ec parameters \u3001 responses \u3001 dependencies \u3001 tags \u7b49\u3002 \u63d0\u793a \u672c\u4f8b\u4e2d\uff0c\u8def\u7531\u53d8\u91cf\u547d\u540d\u4e3a router \uff0c\u4f46\u4e5f\u53ef\u4ee5\u968f\u610f\u547d\u540d\u3002 \u63a5\u4e0b\u6765\u8981\u5411 FastAPI \u4e3b\u5e94\u7528\u4e2d\u6dfb\u52a0 APIRouter \uff0c\u4f46\u6211\u4eec\u9996\u5148\u770b\u4e0b\u4f9d\u8d56\u9879\u548c\u53e6\u4e00\u4e2a APIRouter \u3002 \u4f9d\u8d56\u9879 \u00b6 \u4f9d\u8d56\u9879\u5728 FastAPI \u5e94\u7528\u7684\u591a\u4e2a\u5730\u65b9\u4f7f\u7528\u3002 \u56e0\u6b64\uff0c\u8981\u628a\u4f9d\u8d56\u9879\u653e\u5728\u4e13\u5c5e\u7684 dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u91cc\u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u4f9d\u8d56\u9879\u8bfb\u53d6\u81ea\u5b9a\u4e49 X-Token \u8bf7\u6c42\u5934\uff1a from fastapi import Header , HTTPException async def get_token_header ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def get_query_token ( token : str ): if token != \"jessica\" : raise HTTPException ( status_code = 400 , detail = \"No Jessica token provided\" ) \u63d0\u793a \u672c\u4f8b\u4f7f\u7528\u865a\u6784\u7684\u8bf7\u6c42\u5934\u8fdb\u884c\u4e86\u7b80\u5316\u3002 \u4f46\u5b9e\u9645\u5f00\u53d1\u65f6\u6700\u597d\u4f7f\u7528\u5185\u7f6e\u7684 \u5b89\u5168\u5de5\u5177 \u3002 \u5176\u4ed6\u4f7f\u7528 APIRouter \u7684\u6a21\u5757 \u00b6 \u5047\u8bbe app/routers/items.py \u6a21\u5757\u4e2d\u8fd8\u6709\u4e00\u4e2a\u4e13\u95e8\u5904\u7406 item \u7684\u7aef\u70b9\u3002 \u8def\u5f84\u64cd\u4f5c \u5982\u4e0b\uff1a /items/ /items/{item_id} \u4e0e app/routers/users.py \u7684\u67b6\u6784\u5b8c\u5168\u76f8\u540c\u3002 \u4f46\u6b64\u5904\u8fd8\u80fd\u8fdb\u4e00\u6b65\u7b80\u5316\u4ee3\u7801\u3002 \u8be5\u6a21\u5757\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u6709\u76f8\u540c\u7684\uff1a \u8def\u5f84 prefix \uff1a /items tags \uff1a\u4ec5\u6709\u4e00\u4e2a items \u6807\u7b7e \u9644\u52a0\u7684 responses dependencies \uff1a\u5171\u7528\u7684 X-Token \u4f9d\u8d56\u9879 \u4e0d\u7528\u5728\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u4e2d\u6dfb\u52a0\u8fd9\u4e9b\u5185\u5bb9\uff0c\u53ea\u5728 APIRouter \u91cc\u6dfb\u52a0\u5373\u53ef\u3002 from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u8def\u5f84\u64cd\u4f5c \u7684\u8def\u5f84\u5fc5\u987b\u4ee5 / \u5f00\u5934\uff0c\u4f8b\u5982\uff1a @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): ... \u2026\u2026\u524d\u7f00\u4e0d\u80fd\u4ee5 / \u7ed3\u5c3e\u3002 \u672c\u4f8b\u4e2d\u7684\u524d\u7f00\u662f /items \u3002 \u8fd9\u4e2a router \u91cc\u4e3a\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u4e86 tags \u5217\u8868\u548c\u9644\u52a0\u7684 responses \u3002 \u8fd8\u6dfb\u52a0\u4e86\u7528\u4e8e\u5904\u7406\u63a5\u6536\u8bf7\u6c42\u7684 dependencies \u5217\u8868\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u548c \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u7684\u4f9d\u8d56\u9879 \u7c7b\u4f3c\uff0c\u8fd9\u91cc\u7684\u4f9d\u8d56\u9879\u4e5f\u4e0d\u4f1a\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f20\u9012\u4efb\u4f55\u503c\u3002 \u6700\u7ec8\u7684 item \u8def\u5f84\u5982\u4e0b\uff1a /items/ /items/{item_id} \u2026\u2026\u8fd9\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002 \u8fd9\u4e9b\u8def\u5f84\u7531\u4ec5\u542b\u5355\u5b57\u7b26\u4e32 \"items\" \u7684\u6807\u7b7e\u5217\u8868\u6807\u8bb0 \u8fd9\u4e9b \u6807\u7b7e \u7528\u4e8e\uff08\u4f7f\u7528 OpenAPI \u7684\uff09 API \u6587\u6863 \u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u5305\u62ec\u9884\u5b9a\u4e49\u7684 responses \u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u6267\u884c\u524d\u90fd\u8981\u5148\u6267\u884c dependencies \u5217\u8868 \u5728\u6307\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u7684\u4f9d\u8d56\u9879 \u4e5f\u4f1a\u88ab\u6267\u884c \u9996\u5148\u6267\u884c\u7684\u662f router \u7684\u4f9d\u8d56\u9879\uff0c\u7136\u540e\u662f \u88c5\u9970\u5668\u7684 dependencies \uff0c\u6700\u540e\u662f\u666e\u901a\u7684\u53c2\u6570\u4f9d\u8d56\u9879 \u8fd8\u53ef\u4ee5\u6dfb\u52a0 \u542b scopes \u7684 Security \u4f9d\u8d56\u9879 \u63d0\u793a APIRouter \u4e2d\u7684 dependencies \u7528\u4e8e\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5373\u4fbf\u6ca1\u6709\u4e3a\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u5355\u72ec\u6dfb\u52a0\u4f9d\u8d56\u9879\u3002 \u68c0\u67e5 \u548c\u5176\u4ed6\u5f88\u591a\u529f\u80fd\u4e00\u6837\uff0c prefix \u3001 tags \u3001 responses \u3001 dependencies \u7b49\u53c2\u6570\u53ea\u662f FastAPI \u7528\u4e8e\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u7684\u7279\u6027\u3002 \u5bfc\u5165\u4f9d\u8d56\u9879 \u00b6 \u8fd9\u4e9b\u4ee3\u7801\u5728 app.routers.items \u6a21\u5757\u91cc\uff0c\u5373 app/routers/items.py \u3002 \u6b64\u65f6\uff0c\u9700\u8981\u4ece app.dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u91cc\u63d0\u53d6\u4f9d\u8d56\u51fd\u6570\u3002 \u901a\u8fc7 .. \u76f8\u5bf9\u5bfc\u5165\u4f9d\u8d56\u9879\uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u76f8\u5bf9\u5bfc\u5165\u5982\u4f55\u5de5\u4f5c \u00b6 \u63d0\u793a \u5982\u679c\u60a8\u5df2\u7ecf\u638c\u63e1\u4e86\u5bfc\u5165\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8bf7\u8df3\u8fc7\u6b64\u6bb5\u3002 \u5355\u70b9 . \uff0c\u4f8b\u5982\uff1a from .dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/routers/items.py \uff09\u6240\u5728\u7684\u5305\uff08 app/routers/ \uff09\u5f00\u59cb\u2026\u2026 \u67e5\u627e dependencies \u6a21\u5757\uff08\u4e0d\u5b58\u5728\u7684 app/routers/dependencies.py \u6587\u4ef6\uff09\u2026\u2026 \u7136\u540e\uff0c\u5bfc\u5165 get_token_header \u51fd\u6570 \u4f46\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f9d\u8d56\u9879\u5728 app/dependencies.py \u91cc\u3002 \u8bf7\u8bb0\u4f4f\u672c\u9879\u76ee\u7684\u6587\u4ef6\u67b6\u6784\u662f\uff1a \u4e24\u4e2a\u70b9 .. \uff0c\u4f8b\u5982\uff1a from ..dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/routers/items.py \uff09\u6240\u5728\u7684\u5305\uff08 app/routers/ \uff09\u5f00\u59cb\u2026\u2026 \u8df3\u8f6c\u5230\u7236\u5305\uff08 app/ \uff09\u2026\u2026 \u5728\u7236\u5305\u4e2d\u67e5\u627e dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u2026\u2026 \u7136\u540e\uff0c\u5bfc\u5165 get_token_header \u51fd\u6570 \u6210\u529f\u4e86\uff01\ud83c\udf89 \u4f7f\u7528\u4e09\u4e2a\u70b9 ... \uff0c\u4f8b\u5982\uff1a from ...dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/routers/items.py \uff09\u6240\u5728\u7684\u5305\uff08 app/routers/ \uff09\u5f00\u59cb\u2026\u2026 \u8df3\u8f6c\u5230\u7236\u5305\uff08 app/ \uff09\u2026\u2026 \u518d\u8df3\u8f6c\u5230\u7236\u5305\u7684\u7236\u5305\uff08\u8be5\u7236\u5305\u4e0d\u5b58\u5728\uff0c app \u5df2\u7ecf\u662f\u6700\u9876\u5c42\u7684\u5305\u4e86 \ud83d\ude31\uff09\u2026\u2026 \u5728\u7236\u5305\u7684\u7236\u5305\u4e2d\u67e5\u627e dependencies \u6a21\u5757\uff08 app/ \u4e0a\u7ea7\u6587\u4ef6\u5939\u4e2d\u7684 dependencies.py \uff09\u2026\u2026 \u7136\u540e\uff0c\u5bfc\u5165 get_token_header \u51fd\u6570 \u8fd9\u65f6\u6307\u5411\u7684\u662f app/ \u4e4b\u4e0a\u7684\u5305\uff0c\u4e14\u8981\u5305\u542b __init __.py \u3002\u4f46\u5176\u5b9e\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5305\uff0c\u56e0\u6b64\u793a\u4f8b\u4f1a\u62a5\u9519\u3002\ud83d\udea8 \u73b0\u5728\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u76f8\u5bf9\u5bfc\u5165\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4e0d\u7ba1\u9879\u76ee\u67b6\u6784\u591a\u590d\u6742\uff0c\u90fd\u80fd\u5728\u5e94\u7528\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\u3002\ud83e\udd13 \u6dfb\u52a0\u81ea\u5b9a\u4e49 tags \u3001 responses \u548c dependencies \u00b6 \u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u4e3a APIRouter \u6dfb\u52a0\u4e86\u524d\u7f00 /items \u548c tags =[\"items\"] \uff0c\u56e0\u6b64\uff0c\u4e0d\u5fc5\u518d\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u5355\u72ec\u6dfb\u52a0\u3002 \u4f46\u4ecd\u53ef\u4ee5\u4e3a\u6307\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u66f4\u591a tags \u548c responses \uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u63d0\u793a \u6700\u540e\uff0c\u8def\u5f84\u64cd\u4f5c\u7684\u6807\u7b7e\u7ec4\u5408\u662f\uff1a [\"items\",\"custom\"] \u3002 API \u6587\u6863\u4e2d\u4e5f\u6709\u4e24\u4e2a\u54cd\u5e94\uff0c\u4e00\u4e2a\u662f 404 \uff0c\u522b\u4e00\u4e2a\u662f 403 \u3002 FastAPI \u4e3b\u6a21\u5757 \u00b6 \u63a5\u4e0b\u6765\u662f app/main.py \u6a21\u5757\u3002 \u5728\u6b64\uff0c\u5bfc\u5165\u5e76\u4f7f\u7528 FastAPI \u7c7b\u3002 \u8fd9\u662f\u628a\u6240\u6709\u5e94\u7528\u7684\u5185\u5bb9\u8054\u7ed3\u5728\u4e00\u8d77\u7684\u4e3b\u6587\u4ef6\u3002 \u56e0\u4e3a\u7edd\u5927\u591a\u6570\u903b\u8f91\u90fd\u5728\u4e13\u5c5e\u7684\u6a21\u5757\u91cc\uff0c\u4e3b\u6587\u4ef6\u5c31\u663e\u5f97\u975e\u5e38\u7b80\u5355\u3002 \u5bfc\u5165 FastAPI \u00b6 \u5bfc\u5165 FastAPI \u5e76\u521b\u5efa\u7c7b\u5b9e\u4f8b\u3002 \u58f0\u660e\u4e0e APIRouter \u4f9d\u8d56\u9879\u7ec4\u5408\u5728\u4e00\u8d77\u4f7f\u7528\u7684 \u5168\u5c40\u4f9d\u8d56\u9879 \uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u5bfc\u5165 APIRouter \u00b6 \u5bfc\u5165\u5305\u542b APIRouter \u7684\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } app/routers/users.py \u548c app/routers/items.py \u90fd\u662f Python \u5305\uff08 app \uff09\u7684\u5b50\u6a21\u5757\uff0c\u53ef\u4f7f\u7528\u5355\u70b9 . \u76f8\u5bf9\u5bfc\u5165 \u3002 \u5bfc\u5165\u662f\u600e\u4e48\u8fd0\u4f5c\u7684 \u00b6 \u8fd9\u884c\u4ee3\u7801\uff1a from .routers import items , users \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/main.py \uff09\u6240\u5728\u7684\u5305\uff08 app/ \uff09\u5f00\u59cb\u2026\u2026 \u67e5\u627e routers \u5b50\u5305\uff08 app/routers/ \uff09\u2026\u2026 \u4ece\u5b50\u5305\u5bfc\u5165\u5b50\u6a21\u5757 items \uff08 app/routers/items.py \uff09\u4e0e users \uff08 app/routers/users.py \uff09\u2026\u2026 items \u6a21\u5757\u5305\u542b router \u53d8\u91cf\uff08 items.router \uff09\uff0c\u8fd9\u4e2a\u53d8\u91cf\u662f\u5728 app/routers/items.py \u4e2d\u521b\u5efa\u7684\uff0c\u662f APIRouter \u5bf9\u8c61\u3002 \u7136\u540e\u4e3a users \u6a21\u5757\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165\uff1a from app.routers import items , users \u8bf4\u660e \u7b2c\u4e00\u4e2a\u7248\u672c\u662f \u76f8\u5bf9\u5bfc\u5165 \uff1a from .routers import items , users \u7b2c\u4e8c\u4e2a\u7248\u672c\u662f \u7edd\u5bf9\u5bfc\u5165 \uff1a from app.routers import items , users Python \u5305\u548c\u6a21\u5757\u8be6\u89c1 Python \u5b98\u6863 - \u6a21\u5757 \u3002 \u907f\u514d\u540d\u79f0\u51b2\u7a81 \u00b6 \u8981\u76f4\u63a5\u5bfc\u5165 items \u5b50\u6a21\u5757\uff0c\u4e0d\u80fd\u53ea\u5bfc\u5165 router \u53d8\u91cf\u3002 \u56e0\u4e3a users \u5b50\u6a21\u5757\u4e5f\u6709 router \u53d8\u91cf\u3002 \u5982\u679c\u9010\u4e2a\u5bfc\u5165\uff0c\u4f8b\u5982\uff1a from .routers.items import router from .routers.users import router users \u7684 router \u4f1a\u8986\u76d6 items \u7684 router \uff0c\u5c31\u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u4e86\u3002 \u4e3a\u4e86\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e24\u4e2a router \uff0c\u9700\u8981\u76f4\u63a5\u5bfc\u5165\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u6dfb\u52a0 users \u548c items \u7684 APIRouter \u00b6 \u63a5\u4e0b\u6765\uff0c\u6dfb\u52a0 users \u548c items \u5b50\u6a21\u5757\u7684 router \u3002 from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8bf4\u660e users.router \u5305\u542b app/routers/users.py \u4e2d\u7684 APIRouter \u3002 items.router \u5305\u542b app/routers/items.py \u4e2d\u7684 APIRouter \u3002 app.include_router() \u628a APIRouter \u6dfb\u52a0\u5230 FastAPI \u4e3b\u5e94\u7528\u3002 \u5b83\u628a router \u4e2d\u7684\u6240\u6709\u8def\u7531\u90fd\u4f5c\u4e3a\u4e3b\u8def\u7531\u7684\u7ec4\u6210\u90e8\u5206\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c\u5b83\u5728\u5185\u90e8\u4e3a APIRouter \u91cc\u58f0\u660e\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u521b\u5efa\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u3002 \u6240\u4ee5\uff0c\u5728\u540e\u53f0\uff0c\u6240\u6709\u90e8\u4ef6\u5c31\u50cf\u662f\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u91cc\u8fd0\u884c\u3002 \u68c0\u67e5 \u4e0d\u7528\u62c5\u5fc3\u5305\u542b\u8def\u7531\u5668\u64cd\u4f5c\u7684\u6027\u80fd\uff0c \u8fd9\u9879\u64cd\u4f5c\u53ea\u9700\u8981\u51e0\u5fae\u79d2\uff0c\u800c\u4e14\u53ea\u5728\u5e94\u7528\u542f\u52a8\u65f6\u8fd0\u884c\u3002 \u4e0d\u4f1a\u5f71\u54cd\u6027\u80fd\u3002\u26a1 \u6dfb\u52a0\u81ea\u5b9a\u4e49 prefix \u3001 tags \u3001 responses \u548c dependencies \u7684 APIRouter \u00b6 \u5047\u8bbe\u516c\u53f8\u63d0\u4f9b\u4e86 app/internal/admin.py \u3002 \u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u516c\u53f8\u91cc\u591a\u4e2a\u9879\u76ee\u5171\u4eab\u7684\u7ba1\u7406\u5458 \u8def\u5f84\u64cd\u4f5c \u7684 APIRouter \u3002 \u8fd9\u4e2a\u4f8b\u5b50\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u5047\u8bbe\u5b83\u8981\u4e0e\u5176\u4ed6\u9879\u76ee\u5171\u4eab\uff0c\u4e0d\u80fd\u4fee\u6539\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5\u5728\u5b83\u7684 APIRouter \u4e2d\u6dfb\u52a0 prefix \u3001 dependencies \u3001 tags \u7b49\u5185\u5bb9\uff1a from fastapi import APIRouter router = APIRouter () @router . post ( \"/\" ) async def update_admin (): return { \"message\" : \"Admin getting schwifty\" } \u4f46\u6211\u4eec\u4f9d\u7136\u5e0c\u671b\u5728\u6dfb\u52a0 APIRouter \u65f6\u8bbe\u7f6e\u81ea\u5b9a\u4e49 prefix \uff0c\u8ba9\u7ba1\u7406\u5458\u9879\u4e0b\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u4ee5 /admin \u5f00\u5934\uff0c\u540c\u65f6\u8fd8\u8981\u4f7f\u7528\u5df2\u6709\u7684 dependencies \u4fdd\u62a4\u8def\u5f84\u64cd\u4f5c\uff0c\u5e76\u6dfb\u52a0\u81ea\u5b9a\u4e49 tags \u548c responses \u3002 \u6b64\u65f6\uff0c\u53ea\u9700\u628a\u53c2\u6570\u4f20\u9012\u7ed9 app.include_router() \uff0c\u4e0d\u7528\u4fee\u6539\u539f\u59cb APIRouter \uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8fd9\u6837\uff0c\u539f\u59cb APIRouter \u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u4ecd\u80fd\u4e0e\u5176\u4ed6\u9879\u76ee\u5171\u4eab\u76f8\u540c\u7684 app/internal/admin.py \u3002 \u6700\u540e\uff0c admin \u6a21\u5757\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u5305\u542b\uff1a /admin \u524d\u7f00 admin \u6807\u7b7e get_token_header \u4f9d\u8d56\u9879 418 \u54cd\u5e94 \ud83c\udf75 \u4f46\u8fd9\u53ea\u5f71\u54cd\u672c\u5e94\u7528\u4e2d\u7684 APIRouter \uff0c\u4e0d\u5f71\u54cd\u5176\u4ed6\u5e94\u7528\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u4ed6\u9879\u76ee\u53ef\u4ee5\u4e3a\u8fd9\u4e2a APIRouter \u4f7f\u7528\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u6cd5\u3002 \u6dfb\u52a0 \u8def\u5f84\u64cd\u4f5c \u00b6 \u76f4\u63a5\u628a \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528\u3002 \u4ee5\u4e0b\u4ee3\u7801\u53ea\u662f\u4e3a\u4e86\u8bc1\u660e FastAPI \u80fd\u505a\u5230\u8fd9\u4e00\u70b9\ud83e\udd37\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8fd9\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e0e app.include_router() \u6dfb\u52a0\u7684 \u8def\u5f84\u64cd\u4f5c \u80fd\u591f\u4e00\u8d77\u6b63\u5e38\u8fd0\u884c\u3002 \u7279\u522b\u7684\u6280\u672f\u7ec6\u8282 \u6ce8\u610f \uff1a\u8fd9\u662f\u975e\u5e38\u6280\u672f\u6027\u7684\u7ec6\u8282\uff0c\u53ef\u4ee5 \u76f4\u63a5\u8df3\u8fc7 \u3002 APIRouter \u6ca1\u6709\u88ab \u6302\u8f7d \uff0c\u4e5f\u6ca1\u6709\u4e0e\u5e94\u7528\u7684\u5176\u4ed6\u90e8\u5206\u9694\u79bb\u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u5728 OpenAPI \u6982\u56fe\u548c\u7528\u6237\u754c\u9762\u91cc\u5305\u542b\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u56e0\u4e3a\u4e0d\u80fd\u9694\u79bb\uff0c\u4e5f\u4e0d\u80fd\u628a\u5b83\u4eec\u4e0e\u5176\u4f59\u90e8\u5206\u72ec\u7acb\u5f00\u6765\uff0c\u5e76 \u6302\u8f7d \uff0c\u56e0\u6b64\u8fd9\u91cc\u662f \u514b\u9686 \uff08\u91cd\u65b0\u521b\u5efa\uff09\u4e86\u8def\u5f84\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u73b0\u5728\uff0c\u4f7f\u7528 app.main \u6a21\u5757\u548c app \u53d8\u91cf\u8fd0\u884c uvicorn \uff1a $ uvicorn app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00 API \u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u5c31\u80fd\u770b\u5230 API \u6587\u6863\u5305\u542b\u4e86\u6240\u6709\u5b50\u6a21\u5757\u7684\u8def\u5f84\uff0c\u5e76\u4f7f\u7528\u4e86\u6b63\u786e\u7684\u8def\u5f84\uff08\u548c\u524d\u7f00\uff09\u53ca\u6807\u7b7e\uff1a \u4f7f\u7528\u4e0d\u540c prefix \u591a\u6b21\u5305\u542b\u540c\u4e00\u4e2a\u8def\u7531\u5668 \u00b6 \u591a\u6b21\u4f7f\u7528 .include_router() \uff0c\u5e76\u4e3a \u540c\u4e00\u4e2a router \u4f7f\u7528\u4e0d\u540c\u524d\u7f00\u3002 \u6709\u4e9b\u573a\u666f\u53ef\u80fd\u7528\u5f97\u4e0a\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f8b\u5982\uff0c\u4ee5\u4e0d\u540c\u524d\u7f00\u53d1\u5e03\u540c\u4e00\u4e2a API\uff0c\u6bd4\u5982 /api/v1 \u548c /api/latest \u3002 \u8fd9\u79cd\u9ad8\u7ea7\u7528\u6cd5\u4e00\u822c\u7528\u4e0d\u4e0a\uff0c\u4f46\u4e07\u4e00\u6709\u9700\u8981\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002 APIRouter \u5305\u542b APIRouter \u00b6 \u4e0e\u5728 FastAPI \u5e94\u7528\u4e2d\u6dfb\u52a0 APIRouter \u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u53ef\u5728 APIRouter \u4e2d\u5305\u542b APIRouter \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a router . include_router ( other_router ) \u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u5728\u628a router \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528\u524d\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8fd9\u6837\u624d\u80fd\u6dfb\u52a0 other_router \u4e2d\u7684 \u8def\u5f84\u64cd\u4f5c \u3002","title":"\u5927\u578b\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6"},{"location":"tutorial/bigger-applications/#-","text":"\u5f00\u53d1\u5e94\u7528\u6216\u7f51\u7edc API\u65f6\uff0c\u6211\u4eec\u5f88\u5c11\u4f1a\u628a\u5168\u90e8\u4ee3\u7801\u90fd\u653e\u5728\u4e00\u4e2a\u6587\u4ef6\u91cc\u3002 FastAPI \u63d0\u4f9b\u4e86\u65b9\u4fbf\u3001\u7075\u6d3b\u7684\u5e94\u7528\u6784\u5efa\u5de5\u5177\u3002 \u8bf4\u660e \u5982\u679c\u60a8\u4e4b\u524d\u4f7f\u7528\u8fc7 Flask\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7c7b\u4f3c\u4e8e Flask \u7684 Blueprints\u3002","title":"\u5927\u578b\u5e94\u7528 - \u591a\u4e2a\u6587\u4ef6"},{"location":"tutorial/bigger-applications/#_1","text":"\u5047\u8bbe\u6587\u4ef6\u67b6\u6784\u5982\u4e0b\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u251c\u2500\u2500 dependencies.py \u2502 \u2514\u2500\u2500 routers \u2502 \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2502 \u251c\u2500\u2500 items.py \u2502 \u2502 \u2514\u2500\u2500 users.py \u2502 \u2514\u2500\u2500 internal \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 admin.py \u63d0\u793a __init__.py \uff1a\u6bcf\u4e2a\u6587\u4ef6\u5939\u6216\u5b50\u6587\u4ef6\u5939\u90fd\u5305\u542b __init__.py \u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u628a\u4ee3\u7801\u4ece\u4e00\u4e2a\u6587\u4ef6\u5bfc\u5165\u5230\u53e6\u4e00\u4e2a\u6587\u4ef6\u3002 \u4f8b\u5982\uff0c app/main.py \u7684\u8fd9\u884c\u4ee3\u7801\uff1a from app.routers import items app \u6587\u4ef6\u5939\u5305\u542b\u4e86\u5168\u90e8\u6587\u4ef6\u3002\u5176\u4e2d\u6709\u4e00\u4e2a\u7a7a\u6587\u4ef6 app/__init__.py \uff0c\u56e0\u6b64\uff0c\u5b83\u662f Python \u5305 \uff08 Python \u6a21\u5757 \u96c6\u5408\uff09\uff1a app app/main.py \u662f Python \u5305\uff08\u5305\u542b __init__.py \u7684\u6587\u4ef6\u5939\uff09\u7684 \u6a21\u5757 \uff1a app.main app/dependencies.py \u548c app/main.py \u4e00\u6837\u4e5f\u662f \u6a21\u5757 \uff1a app.dependencies app/routers/ \u662f\u5305\u542b __init__.py \u7684 Python \u5b50\u5305 \uff1a app.routers app/routers/items.py \u662f app/routers/ \u7684\u5b50\u6a21\u5757\uff1a app.routers.items app/routers/users.py \u4e5f\u662f app/routers/ \u7684\u5b50\u6a21\u5757\uff1a app.routers.users app/internal/ \u662f\u5305\u542b __init__.py \u7684 Python \u5b50\u5305 \uff1a app.internal app/internal/admin.py \u662f app/internal/ \u7684\u5b50\u6a21\u5757\uff1a app.internal.admin \u5e26\u6ce8\u91ca\u7684\u6587\u4ef6\u67b6\u6784\uff1a . \u251c\u2500\u2500 app # `app` \u662f Python \u5305 \u2502 \u251c\u2500\u2500 __init__.py # \u628a `app` \u8bc6\u522b\u4e3a Python \u5305 \u2502 \u251c\u2500\u2500 main.py # `main` \u6a21\u5757\uff0c\u4f8b\u5982 import app.main \u2502 \u251c\u2500\u2500 dependencies.py # `dependencies` \u6a21\u5757\uff0c\u4f8b\u5982 import app.dependencies \u2502 \u2514\u2500\u2500 routers # `routers` \u662f Python \u5b50\u5305 \u2502 \u2502 \u251c\u2500\u2500 __init__.py # \u628a `routers` \u8bc6\u522b\u4e3a Python \u5b50\u5305 \u2502 \u2502 \u251c\u2500\u2500 items.py # `items` \u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.items \u2502 \u2502 \u2514\u2500\u2500 users.py # `users` \u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.routers.users \u2502 \u2514\u2500\u2500 internal # `internal`\u662f Python \u5b50\u5305 \u2502 \u251c\u2500\u2500 __init__.py # \u628a `internal` \u8bc6\u522b\u4e3a Python \u5b50\u5305 \u2502 \u2514\u2500\u2500 admin.py # `admin` \u5b50\u6a21\u5757\uff0c\u4f8b\u5982 import app.internal.admin","title":"\u6587\u4ef6\u67b6\u6784\u793a\u4f8b"},{"location":"tutorial/bigger-applications/#apirouter","text":"\u5047\u8bbe\u4e13\u95e8\u5904\u7406\u7528\u6237\u7684\u662f /app/routers/users.py \u5b50\u6a21\u5757\u3002 \u8be5\u6a21\u5757\u628a\u7528\u6237\u76f8\u5173\u7684 \u8def\u5f84\u64cd\u4f5c \u548c\u5176\u4ed6\u4ee3\u7801\u5206\u5f00\uff0c\u4f7f\u9879\u76ee\u6587\u4ef6\u4e95\u4e95\u6709\u6761\u3002 \u4f46\u5b83\u4ecd\u5c5e\u4e8e FastAPI \u5e94\u7528/\u7f51\u7edc API\uff08\u4e5f\u662f Python \u5305 \u7684\u4e00\u90e8\u5206\uff09\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 APIRouter \u4e3a\u8be5\u6a21\u5757\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u3002","title":"APIRouter"},{"location":"tutorial/bigger-applications/#apirouter_1","text":"\u4e0e\u521b\u5efa FastAPI \u7c7b\u5b9e\u4f8b\u76f8\u540c\uff0c\u5bfc\u5165 APIRouter \u5e76\u521b\u5efa \u5b9e\u4f8b \uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username }","title":"\u5bfc\u5165 APIRouter"},{"location":"tutorial/bigger-applications/#apirouter_2","text":"\u7136\u540e\uff0c\u7528\u5b83\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u3002 \u4f7f\u7528\u65b9\u5f0f\u4e0e FastAPI \u7c7b\u76f8\u540c\uff1a from fastapi import APIRouter router = APIRouter () @router . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] @router . get ( \"/users/me\" , tags = [ \"users\" ]) async def read_user_me (): return { \"username\" : \"fakecurrentuser\" } @router . get ( \"/users/ {username} \" , tags = [ \"users\" ]) async def read_user ( username : str ): return { \"username\" : username } APIRouter \u5c31\u50cf\u662f \u8ff7\u4f60 FastAPI \u7c7b\u3002 \u5b83\u652f\u6301\u4e0e FastAPI \u76f8\u540c\u7684\u9009\u9879\u3002 \u5305\u62ec parameters \u3001 responses \u3001 dependencies \u3001 tags \u7b49\u3002 \u63d0\u793a \u672c\u4f8b\u4e2d\uff0c\u8def\u7531\u53d8\u91cf\u547d\u540d\u4e3a router \uff0c\u4f46\u4e5f\u53ef\u4ee5\u968f\u610f\u547d\u540d\u3002 \u63a5\u4e0b\u6765\u8981\u5411 FastAPI \u4e3b\u5e94\u7528\u4e2d\u6dfb\u52a0 APIRouter \uff0c\u4f46\u6211\u4eec\u9996\u5148\u770b\u4e0b\u4f9d\u8d56\u9879\u548c\u53e6\u4e00\u4e2a APIRouter \u3002","title":"\u4f7f\u7528 APIRouter \u7684\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/bigger-applications/#_2","text":"\u4f9d\u8d56\u9879\u5728 FastAPI \u5e94\u7528\u7684\u591a\u4e2a\u5730\u65b9\u4f7f\u7528\u3002 \u56e0\u6b64\uff0c\u8981\u628a\u4f9d\u8d56\u9879\u653e\u5728\u4e13\u5c5e\u7684 dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u91cc\u3002 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u4f9d\u8d56\u9879\u8bfb\u53d6\u81ea\u5b9a\u4e49 X-Token \u8bf7\u6c42\u5934\uff1a from fastapi import Header , HTTPException async def get_token_header ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def get_query_token ( token : str ): if token != \"jessica\" : raise HTTPException ( status_code = 400 , detail = \"No Jessica token provided\" ) \u63d0\u793a \u672c\u4f8b\u4f7f\u7528\u865a\u6784\u7684\u8bf7\u6c42\u5934\u8fdb\u884c\u4e86\u7b80\u5316\u3002 \u4f46\u5b9e\u9645\u5f00\u53d1\u65f6\u6700\u597d\u4f7f\u7528\u5185\u7f6e\u7684 \u5b89\u5168\u5de5\u5177 \u3002","title":"\u4f9d\u8d56\u9879"},{"location":"tutorial/bigger-applications/#apirouter_3","text":"\u5047\u8bbe app/routers/items.py \u6a21\u5757\u4e2d\u8fd8\u6709\u4e00\u4e2a\u4e13\u95e8\u5904\u7406 item \u7684\u7aef\u70b9\u3002 \u8def\u5f84\u64cd\u4f5c \u5982\u4e0b\uff1a /items/ /items/{item_id} \u4e0e app/routers/users.py \u7684\u67b6\u6784\u5b8c\u5168\u76f8\u540c\u3002 \u4f46\u6b64\u5904\u8fd8\u80fd\u8fdb\u4e00\u6b65\u7b80\u5316\u4ee3\u7801\u3002 \u8be5\u6a21\u5757\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u6709\u76f8\u540c\u7684\uff1a \u8def\u5f84 prefix \uff1a /items tags \uff1a\u4ec5\u6709\u4e00\u4e2a items \u6807\u7b7e \u9644\u52a0\u7684 responses dependencies \uff1a\u5171\u7528\u7684 X-Token \u4f9d\u8d56\u9879 \u4e0d\u7528\u5728\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u4e2d\u6dfb\u52a0\u8fd9\u4e9b\u5185\u5bb9\uff0c\u53ea\u5728 APIRouter \u91cc\u6dfb\u52a0\u5373\u53ef\u3002 from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u8def\u5f84\u64cd\u4f5c \u7684\u8def\u5f84\u5fc5\u987b\u4ee5 / \u5f00\u5934\uff0c\u4f8b\u5982\uff1a @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): ... \u2026\u2026\u524d\u7f00\u4e0d\u80fd\u4ee5 / \u7ed3\u5c3e\u3002 \u672c\u4f8b\u4e2d\u7684\u524d\u7f00\u662f /items \u3002 \u8fd9\u4e2a router \u91cc\u4e3a\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u4e86 tags \u5217\u8868\u548c\u9644\u52a0\u7684 responses \u3002 \u8fd8\u6dfb\u52a0\u4e86\u7528\u4e8e\u5904\u7406\u63a5\u6536\u8bf7\u6c42\u7684 dependencies \u5217\u8868\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u548c \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u7684\u4f9d\u8d56\u9879 \u7c7b\u4f3c\uff0c\u8fd9\u91cc\u7684\u4f9d\u8d56\u9879\u4e5f\u4e0d\u4f1a\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f20\u9012\u4efb\u4f55\u503c\u3002 \u6700\u7ec8\u7684 item \u8def\u5f84\u5982\u4e0b\uff1a /items/ /items/{item_id} \u2026\u2026\u8fd9\u5c31\u662f\u6211\u4eec\u60f3\u8981\u7684\u3002 \u8fd9\u4e9b\u8def\u5f84\u7531\u4ec5\u542b\u5355\u5b57\u7b26\u4e32 \"items\" \u7684\u6807\u7b7e\u5217\u8868\u6807\u8bb0 \u8fd9\u4e9b \u6807\u7b7e \u7528\u4e8e\uff08\u4f7f\u7528 OpenAPI \u7684\uff09 API \u6587\u6863 \u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u5305\u62ec\u9884\u5b9a\u4e49\u7684 responses \u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u6267\u884c\u524d\u90fd\u8981\u5148\u6267\u884c dependencies \u5217\u8868 \u5728\u6307\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u7684\u4f9d\u8d56\u9879 \u4e5f\u4f1a\u88ab\u6267\u884c \u9996\u5148\u6267\u884c\u7684\u662f router \u7684\u4f9d\u8d56\u9879\uff0c\u7136\u540e\u662f \u88c5\u9970\u5668\u7684 dependencies \uff0c\u6700\u540e\u662f\u666e\u901a\u7684\u53c2\u6570\u4f9d\u8d56\u9879 \u8fd8\u53ef\u4ee5\u6dfb\u52a0 \u542b scopes \u7684 Security \u4f9d\u8d56\u9879 \u63d0\u793a APIRouter \u4e2d\u7684 dependencies \u7528\u4e8e\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5373\u4fbf\u6ca1\u6709\u4e3a\u6bcf\u4e2a\u8def\u5f84\u64cd\u4f5c\u5355\u72ec\u6dfb\u52a0\u4f9d\u8d56\u9879\u3002 \u68c0\u67e5 \u548c\u5176\u4ed6\u5f88\u591a\u529f\u80fd\u4e00\u6837\uff0c prefix \u3001 tags \u3001 responses \u3001 dependencies \u7b49\u53c2\u6570\u53ea\u662f FastAPI \u7528\u4e8e\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u7684\u7279\u6027\u3002","title":"\u5176\u4ed6\u4f7f\u7528 APIRouter \u7684\u6a21\u5757"},{"location":"tutorial/bigger-applications/#_3","text":"\u8fd9\u4e9b\u4ee3\u7801\u5728 app.routers.items \u6a21\u5757\u91cc\uff0c\u5373 app/routers/items.py \u3002 \u6b64\u65f6\uff0c\u9700\u8981\u4ece app.dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u91cc\u63d0\u53d6\u4f9d\u8d56\u51fd\u6570\u3002 \u901a\u8fc7 .. \u76f8\u5bf9\u5bfc\u5165\u4f9d\u8d56\u9879\uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" }","title":"\u5bfc\u5165\u4f9d\u8d56\u9879"},{"location":"tutorial/bigger-applications/#_4","text":"\u63d0\u793a \u5982\u679c\u60a8\u5df2\u7ecf\u638c\u63e1\u4e86\u5bfc\u5165\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u8bf7\u8df3\u8fc7\u6b64\u6bb5\u3002 \u5355\u70b9 . \uff0c\u4f8b\u5982\uff1a from .dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/routers/items.py \uff09\u6240\u5728\u7684\u5305\uff08 app/routers/ \uff09\u5f00\u59cb\u2026\u2026 \u67e5\u627e dependencies \u6a21\u5757\uff08\u4e0d\u5b58\u5728\u7684 app/routers/dependencies.py \u6587\u4ef6\uff09\u2026\u2026 \u7136\u540e\uff0c\u5bfc\u5165 get_token_header \u51fd\u6570 \u4f46\u8be5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u4f9d\u8d56\u9879\u5728 app/dependencies.py \u91cc\u3002 \u8bf7\u8bb0\u4f4f\u672c\u9879\u76ee\u7684\u6587\u4ef6\u67b6\u6784\u662f\uff1a \u4e24\u4e2a\u70b9 .. \uff0c\u4f8b\u5982\uff1a from ..dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/routers/items.py \uff09\u6240\u5728\u7684\u5305\uff08 app/routers/ \uff09\u5f00\u59cb\u2026\u2026 \u8df3\u8f6c\u5230\u7236\u5305\uff08 app/ \uff09\u2026\u2026 \u5728\u7236\u5305\u4e2d\u67e5\u627e dependencies \u6a21\u5757\uff08 app/dependencies.py \uff09\u2026\u2026 \u7136\u540e\uff0c\u5bfc\u5165 get_token_header \u51fd\u6570 \u6210\u529f\u4e86\uff01\ud83c\udf89 \u4f7f\u7528\u4e09\u4e2a\u70b9 ... \uff0c\u4f8b\u5982\uff1a from ...dependencies import get_token_header \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/routers/items.py \uff09\u6240\u5728\u7684\u5305\uff08 app/routers/ \uff09\u5f00\u59cb\u2026\u2026 \u8df3\u8f6c\u5230\u7236\u5305\uff08 app/ \uff09\u2026\u2026 \u518d\u8df3\u8f6c\u5230\u7236\u5305\u7684\u7236\u5305\uff08\u8be5\u7236\u5305\u4e0d\u5b58\u5728\uff0c app \u5df2\u7ecf\u662f\u6700\u9876\u5c42\u7684\u5305\u4e86 \ud83d\ude31\uff09\u2026\u2026 \u5728\u7236\u5305\u7684\u7236\u5305\u4e2d\u67e5\u627e dependencies \u6a21\u5757\uff08 app/ \u4e0a\u7ea7\u6587\u4ef6\u5939\u4e2d\u7684 dependencies.py \uff09\u2026\u2026 \u7136\u540e\uff0c\u5bfc\u5165 get_token_header \u51fd\u6570 \u8fd9\u65f6\u6307\u5411\u7684\u662f app/ \u4e4b\u4e0a\u7684\u5305\uff0c\u4e14\u8981\u5305\u542b __init __.py \u3002\u4f46\u5176\u5b9e\u5e76\u6ca1\u6709\u8fd9\u4e2a\u5305\uff0c\u56e0\u6b64\u793a\u4f8b\u4f1a\u62a5\u9519\u3002\ud83d\udea8 \u73b0\u5728\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u76f8\u5bf9\u5bfc\u5165\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4e0d\u7ba1\u9879\u76ee\u67b6\u6784\u591a\u590d\u6742\uff0c\u90fd\u80fd\u5728\u5e94\u7528\u4e2d\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\u3002\ud83e\udd13","title":"\u76f8\u5bf9\u5bfc\u5165\u5982\u4f55\u5de5\u4f5c"},{"location":"tutorial/bigger-applications/#tagsresponses-dependencies","text":"\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u4e3a APIRouter \u6dfb\u52a0\u4e86\u524d\u7f00 /items \u548c tags =[\"items\"] \uff0c\u56e0\u6b64\uff0c\u4e0d\u5fc5\u518d\u5728\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u5355\u72ec\u6dfb\u52a0\u3002 \u4f46\u4ecd\u53ef\u4ee5\u4e3a\u6307\u5b9a\u7684 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u66f4\u591a tags \u548c responses \uff1a from fastapi import APIRouter , Depends , HTTPException from ..dependencies import get_token_header router = APIRouter ( prefix = \"/items\" , tags = [ \"items\" ], dependencies = [ Depends ( get_token_header )], responses = { 404 : { \"description\" : \"Not found\" }}, ) fake_items_db = { \"plumbus\" : { \"name\" : \"Plumbus\" }, \"gun\" : { \"name\" : \"Portal Gun\" }} @router . get ( \"/\" ) async def read_items (): return fake_items_db @router . get ( \"/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in fake_items_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"name\" : fake_items_db [ item_id ][ \"name\" ], \"item_id\" : item_id } @router . put ( \"/ {item_id} \" , tags = [ \"custom\" ], responses = { 403 : { \"description\" : \"Operation forbidden\" }}, ) async def update_item ( item_id : str ): if item_id != \"plumbus\" : raise HTTPException ( status_code = 403 , detail = \"You can only update the item: plumbus\" ) return { \"item_id\" : item_id , \"name\" : \"The great Plumbus\" } \u63d0\u793a \u6700\u540e\uff0c\u8def\u5f84\u64cd\u4f5c\u7684\u6807\u7b7e\u7ec4\u5408\u662f\uff1a [\"items\",\"custom\"] \u3002 API \u6587\u6863\u4e2d\u4e5f\u6709\u4e24\u4e2a\u54cd\u5e94\uff0c\u4e00\u4e2a\u662f 404 \uff0c\u522b\u4e00\u4e2a\u662f 403 \u3002","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49 tags\u3001responses \u548c dependencies"},{"location":"tutorial/bigger-applications/#fastapi","text":"\u63a5\u4e0b\u6765\u662f app/main.py \u6a21\u5757\u3002 \u5728\u6b64\uff0c\u5bfc\u5165\u5e76\u4f7f\u7528 FastAPI \u7c7b\u3002 \u8fd9\u662f\u628a\u6240\u6709\u5e94\u7528\u7684\u5185\u5bb9\u8054\u7ed3\u5728\u4e00\u8d77\u7684\u4e3b\u6587\u4ef6\u3002 \u56e0\u4e3a\u7edd\u5927\u591a\u6570\u903b\u8f91\u90fd\u5728\u4e13\u5c5e\u7684\u6a21\u5757\u91cc\uff0c\u4e3b\u6587\u4ef6\u5c31\u663e\u5f97\u975e\u5e38\u7b80\u5355\u3002","title":"FastAPI \u4e3b\u6a21\u5757"},{"location":"tutorial/bigger-applications/#fastapi_1","text":"\u5bfc\u5165 FastAPI \u5e76\u521b\u5efa\u7c7b\u5b9e\u4f8b\u3002 \u58f0\u660e\u4e0e APIRouter \u4f9d\u8d56\u9879\u7ec4\u5408\u5728\u4e00\u8d77\u4f7f\u7528\u7684 \u5168\u5c40\u4f9d\u8d56\u9879 \uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" }","title":"\u5bfc\u5165 FastAPI"},{"location":"tutorial/bigger-applications/#apirouter_4","text":"\u5bfc\u5165\u5305\u542b APIRouter \u7684\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } app/routers/users.py \u548c app/routers/items.py \u90fd\u662f Python \u5305\uff08 app \uff09\u7684\u5b50\u6a21\u5757\uff0c\u53ef\u4f7f\u7528\u5355\u70b9 . \u76f8\u5bf9\u5bfc\u5165 \u3002","title":"\u5bfc\u5165 APIRouter"},{"location":"tutorial/bigger-applications/#_5","text":"\u8fd9\u884c\u4ee3\u7801\uff1a from .routers import items , users \u8868\u793a\uff1a \u4ece\u6a21\u5757\uff08 app/main.py \uff09\u6240\u5728\u7684\u5305\uff08 app/ \uff09\u5f00\u59cb\u2026\u2026 \u67e5\u627e routers \u5b50\u5305\uff08 app/routers/ \uff09\u2026\u2026 \u4ece\u5b50\u5305\u5bfc\u5165\u5b50\u6a21\u5757 items \uff08 app/routers/items.py \uff09\u4e0e users \uff08 app/routers/users.py \uff09\u2026\u2026 items \u6a21\u5757\u5305\u542b router \u53d8\u91cf\uff08 items.router \uff09\uff0c\u8fd9\u4e2a\u53d8\u91cf\u662f\u5728 app/routers/items.py \u4e2d\u521b\u5efa\u7684\uff0c\u662f APIRouter \u5bf9\u8c61\u3002 \u7136\u540e\u4e3a users \u6a21\u5757\u6267\u884c\u76f8\u540c\u64cd\u4f5c\u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165\uff1a from app.routers import items , users \u8bf4\u660e \u7b2c\u4e00\u4e2a\u7248\u672c\u662f \u76f8\u5bf9\u5bfc\u5165 \uff1a from .routers import items , users \u7b2c\u4e8c\u4e2a\u7248\u672c\u662f \u7edd\u5bf9\u5bfc\u5165 \uff1a from app.routers import items , users Python \u5305\u548c\u6a21\u5757\u8be6\u89c1 Python \u5b98\u6863 - \u6a21\u5757 \u3002","title":"\u5bfc\u5165\u662f\u600e\u4e48\u8fd0\u4f5c\u7684"},{"location":"tutorial/bigger-applications/#_6","text":"\u8981\u76f4\u63a5\u5bfc\u5165 items \u5b50\u6a21\u5757\uff0c\u4e0d\u80fd\u53ea\u5bfc\u5165 router \u53d8\u91cf\u3002 \u56e0\u4e3a users \u5b50\u6a21\u5757\u4e5f\u6709 router \u53d8\u91cf\u3002 \u5982\u679c\u9010\u4e2a\u5bfc\u5165\uff0c\u4f8b\u5982\uff1a from .routers.items import router from .routers.users import router users \u7684 router \u4f1a\u8986\u76d6 items \u7684 router \uff0c\u5c31\u65e0\u6cd5\u540c\u65f6\u4f7f\u7528\u4e86\u3002 \u4e3a\u4e86\u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d\u4f7f\u7528\u4e24\u4e2a router \uff0c\u9700\u8981\u76f4\u63a5\u5bfc\u5165\u5b50\u6a21\u5757\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" }","title":"\u907f\u514d\u540d\u79f0\u51b2\u7a81"},{"location":"tutorial/bigger-applications/#users-items-apirouter","text":"\u63a5\u4e0b\u6765\uff0c\u6dfb\u52a0 users \u548c items \u5b50\u6a21\u5757\u7684 router \u3002 from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8bf4\u660e users.router \u5305\u542b app/routers/users.py \u4e2d\u7684 APIRouter \u3002 items.router \u5305\u542b app/routers/items.py \u4e2d\u7684 APIRouter \u3002 app.include_router() \u628a APIRouter \u6dfb\u52a0\u5230 FastAPI \u4e3b\u5e94\u7528\u3002 \u5b83\u628a router \u4e2d\u7684\u6240\u6709\u8def\u7531\u90fd\u4f5c\u4e3a\u4e3b\u8def\u7531\u7684\u7ec4\u6210\u90e8\u5206\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c\u5b83\u5728\u5185\u90e8\u4e3a APIRouter \u91cc\u58f0\u660e\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u521b\u5efa\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u3002 \u6240\u4ee5\uff0c\u5728\u540e\u53f0\uff0c\u6240\u6709\u90e8\u4ef6\u5c31\u50cf\u662f\u5728\u540c\u4e00\u4e2a\u5e94\u7528\u91cc\u8fd0\u884c\u3002 \u68c0\u67e5 \u4e0d\u7528\u62c5\u5fc3\u5305\u542b\u8def\u7531\u5668\u64cd\u4f5c\u7684\u6027\u80fd\uff0c \u8fd9\u9879\u64cd\u4f5c\u53ea\u9700\u8981\u51e0\u5fae\u79d2\uff0c\u800c\u4e14\u53ea\u5728\u5e94\u7528\u542f\u52a8\u65f6\u8fd0\u884c\u3002 \u4e0d\u4f1a\u5f71\u54cd\u6027\u80fd\u3002\u26a1","title":"\u6dfb\u52a0 users \u548c items \u7684 APIRouter"},{"location":"tutorial/bigger-applications/#prefixtagsresponses-dependencies-apirouter","text":"\u5047\u8bbe\u516c\u53f8\u63d0\u4f9b\u4e86 app/internal/admin.py \u3002 \u8fd9\u4e2a\u6587\u4ef6\u5305\u542b\u4e86\u516c\u53f8\u91cc\u591a\u4e2a\u9879\u76ee\u5171\u4eab\u7684\u7ba1\u7406\u5458 \u8def\u5f84\u64cd\u4f5c \u7684 APIRouter \u3002 \u8fd9\u4e2a\u4f8b\u5b50\u975e\u5e38\u7b80\u5355\uff0c\u4f46\u5047\u8bbe\u5b83\u8981\u4e0e\u5176\u4ed6\u9879\u76ee\u5171\u4eab\uff0c\u4e0d\u80fd\u4fee\u6539\uff0c\u4e5f\u4e0d\u80fd\u76f4\u63a5\u5728\u5b83\u7684 APIRouter \u4e2d\u6dfb\u52a0 prefix \u3001 dependencies \u3001 tags \u7b49\u5185\u5bb9\uff1a from fastapi import APIRouter router = APIRouter () @router . post ( \"/\" ) async def update_admin (): return { \"message\" : \"Admin getting schwifty\" } \u4f46\u6211\u4eec\u4f9d\u7136\u5e0c\u671b\u5728\u6dfb\u52a0 APIRouter \u65f6\u8bbe\u7f6e\u81ea\u5b9a\u4e49 prefix \uff0c\u8ba9\u7ba1\u7406\u5458\u9879\u4e0b\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u4ee5 /admin \u5f00\u5934\uff0c\u540c\u65f6\u8fd8\u8981\u4f7f\u7528\u5df2\u6709\u7684 dependencies \u4fdd\u62a4\u8def\u5f84\u64cd\u4f5c\uff0c\u5e76\u6dfb\u52a0\u81ea\u5b9a\u4e49 tags \u548c responses \u3002 \u6b64\u65f6\uff0c\u53ea\u9700\u628a\u53c2\u6570\u4f20\u9012\u7ed9 app.include_router() \uff0c\u4e0d\u7528\u4fee\u6539\u539f\u59cb APIRouter \uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8fd9\u6837\uff0c\u539f\u59cb APIRouter \u4fdd\u6301\u4e0d\u53d8\uff0c\u4f46\u4ecd\u80fd\u4e0e\u5176\u4ed6\u9879\u76ee\u5171\u4eab\u76f8\u540c\u7684 app/internal/admin.py \u3002 \u6700\u540e\uff0c admin \u6a21\u5757\u7684\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u5305\u542b\uff1a /admin \u524d\u7f00 admin \u6807\u7b7e get_token_header \u4f9d\u8d56\u9879 418 \u54cd\u5e94 \ud83c\udf75 \u4f46\u8fd9\u53ea\u5f71\u54cd\u672c\u5e94\u7528\u4e2d\u7684 APIRouter \uff0c\u4e0d\u5f71\u54cd\u5176\u4ed6\u5e94\u7528\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5176\u4ed6\u9879\u76ee\u53ef\u4ee5\u4e3a\u8fd9\u4e2a APIRouter \u4f7f\u7528\u5176\u4ed6\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u6cd5\u3002","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49 prefix\u3001tags\u3001responses \u548c dependencies \u7684 APIRouter"},{"location":"tutorial/bigger-applications/#_7","text":"\u76f4\u63a5\u628a \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528\u3002 \u4ee5\u4e0b\u4ee3\u7801\u53ea\u662f\u4e3a\u4e86\u8bc1\u660e FastAPI \u80fd\u505a\u5230\u8fd9\u4e00\u70b9\ud83e\udd37\uff1a from fastapi import Depends , FastAPI from .dependencies import get_query_token , get_token_header from .internal import admin from .routers import items , users app = FastAPI ( dependencies = [ Depends ( get_query_token )]) app . include_router ( users . router ) app . include_router ( items . router ) app . include_router ( admin . router , prefix = \"/admin\" , tags = [ \"admin\" ], dependencies = [ Depends ( get_token_header )], responses = { 418 : { \"description\" : \"I'm a teapot\" }}, ) @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello Bigger Applications!\" } \u8fd9\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e0e app.include_router() \u6dfb\u52a0\u7684 \u8def\u5f84\u64cd\u4f5c \u80fd\u591f\u4e00\u8d77\u6b63\u5e38\u8fd0\u884c\u3002 \u7279\u522b\u7684\u6280\u672f\u7ec6\u8282 \u6ce8\u610f \uff1a\u8fd9\u662f\u975e\u5e38\u6280\u672f\u6027\u7684\u7ec6\u8282\uff0c\u53ef\u4ee5 \u76f4\u63a5\u8df3\u8fc7 \u3002 APIRouter \u6ca1\u6709\u88ab \u6302\u8f7d \uff0c\u4e5f\u6ca1\u6709\u4e0e\u5e94\u7528\u7684\u5176\u4ed6\u90e8\u5206\u9694\u79bb\u3002 \u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u60f3\u5728 OpenAPI \u6982\u56fe\u548c\u7528\u6237\u754c\u9762\u91cc\u5305\u542b\u5b83\u4eec\u7684 \u8def\u5f84\u64cd\u4f5c \u3002 \u56e0\u4e3a\u4e0d\u80fd\u9694\u79bb\uff0c\u4e5f\u4e0d\u80fd\u628a\u5b83\u4eec\u4e0e\u5176\u4f59\u90e8\u5206\u72ec\u7acb\u5f00\u6765\uff0c\u5e76 \u6302\u8f7d \uff0c\u56e0\u6b64\u8fd9\u91cc\u662f \u514b\u9686 \uff08\u91cd\u65b0\u521b\u5efa\uff09\u4e86\u8def\u5f84\u64cd\u4f5c\uff0c\u800c\u4e0d\u662f\u76f4\u63a5\u5305\u542b\u3002","title":"\u6dfb\u52a0\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/bigger-applications/#_8","text":"\u73b0\u5728\uff0c\u4f7f\u7528 app.main \u6a21\u5757\u548c app \u53d8\u91cf\u8fd0\u884c uvicorn \uff1a $ uvicorn app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00 API \u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u5c31\u80fd\u770b\u5230 API \u6587\u6863\u5305\u542b\u4e86\u6240\u6709\u5b50\u6a21\u5757\u7684\u8def\u5f84\uff0c\u5e76\u4f7f\u7528\u4e86\u6b63\u786e\u7684\u8def\u5f84\uff08\u548c\u524d\u7f00\uff09\u53ca\u6807\u7b7e\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/bigger-applications/#prefix","text":"\u591a\u6b21\u4f7f\u7528 .include_router() \uff0c\u5e76\u4e3a \u540c\u4e00\u4e2a router \u4f7f\u7528\u4e0d\u540c\u524d\u7f00\u3002 \u6709\u4e9b\u573a\u666f\u53ef\u80fd\u7528\u5f97\u4e0a\u8fd9\u4e2a\u529f\u80fd\uff0c\u4f8b\u5982\uff0c\u4ee5\u4e0d\u540c\u524d\u7f00\u53d1\u5e03\u540c\u4e00\u4e2a API\uff0c\u6bd4\u5982 /api/v1 \u548c /api/latest \u3002 \u8fd9\u79cd\u9ad8\u7ea7\u7528\u6cd5\u4e00\u822c\u7528\u4e0d\u4e0a\uff0c\u4f46\u4e07\u4e00\u6709\u9700\u8981\u65f6\u5c31\u53ef\u4ee5\u4f7f\u7528\u3002","title":"\u4f7f\u7528\u4e0d\u540c prefix \u591a\u6b21\u5305\u542b\u540c\u4e00\u4e2a\u8def\u7531\u5668"},{"location":"tutorial/bigger-applications/#apirouter-apirouter","text":"\u4e0e\u5728 FastAPI \u5e94\u7528\u4e2d\u6dfb\u52a0 APIRouter \u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u53ef\u5728 APIRouter \u4e2d\u5305\u542b APIRouter \uff0c\u4ee3\u7801\u5982\u4e0b\uff1a router . include_router ( other_router ) \u6ce8\u610f\uff0c\u4e00\u5b9a\u8981\u5728\u628a router \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528\u524d\u6267\u884c\u6b64\u64cd\u4f5c\uff0c\u8fd9\u6837\u624d\u80fd\u6dfb\u52a0 other_router \u4e2d\u7684 \u8def\u5f84\u64cd\u4f5c \u3002","title":"APIRouter \u5305\u542b APIRouter"},{"location":"tutorial/body-fields/","text":"\u8bf7\u6c42\u4f53 - \u5b57\u6bb5 \u00b6 \u4e0e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528 Query \u3001 Path \u3001 Body \u58f0\u660e\u6821\u9a8c\u4e0e\u5143\u6570\u636e\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 Field \u5728 Pydantic \u6a21\u578b\u5185\u90e8\u58f0\u660e\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u5bfc\u5165 Field \u00b6 \u9996\u5148\uff0c\u4ece Pydantic \u4e2d\u5bfc\u5165 Field \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : str | None = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \u8b66\u544a \u6ce8\u610f\uff0c\u4e0e\u4ece fastapi \u5bfc\u5165 Query \uff0c Path \u3001 Body \u4e0d\u540c\uff0c\u8981\u76f4\u63a5\u4ece pydantic \u5bfc\u5165 Field \u3002 \u58f0\u660e\u6a21\u578b\u5c5e\u6027 \u00b6 \u7136\u540e\uff0c\u4f7f\u7528 Field \u5b9a\u4e49\u6a21\u578b\u7684\u5c5e\u6027\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : str | None = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Field \u7684\u5de5\u4f5c\u65b9\u5f0f\u548c Query \u3001 Path \u3001 Body \u76f8\u540c\uff0c\u53c2\u6570\u4e5f\u76f8\u540c\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c Query \u3001 Path \u90fd\u662f Params \u7684\u5b50\u7c7b\uff0c\u800c Params \u7c7b\u53c8\u662f Pydantic \u4e2d FieldInfo \u7684\u5b50\u7c7b\u3002 Pydantic \u7684 Field \u8fd4\u56de\u4e5f\u662f FieldInfo \u7684\u7c7b\u5b9e\u4f8b\u3002 Body \u76f4\u63a5\u8fd4\u56de\u7684\u4e5f\u662f FieldInfo \u7684\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002\u540e\u6587\u8fd8\u4f1a\u4ecb\u7ecd\u4e00\u4e9b Body \u7684\u5b50\u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u7b49\u5bf9\u8c61\u5b9e\u9645\u4e0a\u90fd\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u6a21\u578b\u5c5e\u6027\u7684\u7c7b\u578b\u3001\u9ed8\u8ba4\u503c\u53ca Field \u7684\u4ee3\u7801\u7ed3\u6784\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u662f\u7528 Field \u66ff\u6362\u4e86 Path \u3001 Query \u3001 Body \u3002 \u6dfb\u52a0\u66f4\u591a\u4fe1\u606f \u00b6 Field \u3001 Query \u3001 Body \u7b49\u5bf9\u8c61\u91cc\u53ef\u4ee5\u58f0\u660e\u66f4\u591a\u4fe1\u606f\uff0c\u5e76\u4e14 JSON Schema \u4e2d\u4e5f\u4f1a\u96c6\u6210\u8fd9\u4e9b\u4fe1\u606f\u3002 \u58f0\u660e\u793a\u4f8b\u4e00\u7ae0\u4e2d\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u7684\u77e5\u8bc6\u3002 \u8b66\u544a \u4f20\u9012\u7ed9 Field \u7684\u9644\u52a0\u952e\u4e5f\u4f1a\u663e\u793a\u5728\u5e94\u7528\u7684 OpenAPI \u6982\u56fe\u91cc\u3002 \u4f46\u8fd9\u4e9b\u952e\u4e0d\u662f OpenAPI \u89c4\u8303\u7684\u5fc5\u8981\u7ec4\u4ef6\uff0c\u56e0\u6b64\uff0c\u67d0\u4e9b OpenAPI \u5de5\u5177\uff08\u5982 OpenAPI \u9a8c\u8bc1\u5668 \uff09\u5728\u5904\u7406\u60a8\u751f\u6210\u7684\u6982\u56fe\u65f6\u53ef\u80fd\u4e0d\u4f1a\u6b63\u5e38\u8fd0\u884c\u3002 \u5c0f\u7ed3 \u00b6 Pydantic \u7684 Field \u53ef\u4ee5\u4e3a\u6a21\u578b\u5c5e\u6027\u58f0\u660e\u66f4\u591a\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u4f20\u9012 JSON Schema \u5143\u6570\u636e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u5173\u952e\u5b57\u53c2\u6570\u3002","title":"\u8bf7\u6c42\u4f53 - \u5b57\u6bb5"},{"location":"tutorial/body-fields/#-","text":"\u4e0e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528 Query \u3001 Path \u3001 Body \u58f0\u660e\u6821\u9a8c\u4e0e\u5143\u6570\u636e\u7684\u65b9\u5f0f\u4e00\u6837\uff0c\u53ef\u4ee5\u4f7f\u7528 Pydantic \u7684 Field \u5728 Pydantic \u6a21\u578b\u5185\u90e8\u58f0\u660e\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002","title":"\u8bf7\u6c42\u4f53 - \u5b57\u6bb5"},{"location":"tutorial/body-fields/#field","text":"\u9996\u5148\uff0c\u4ece Pydantic \u4e2d\u5bfc\u5165 Field \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : str | None = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \u8b66\u544a \u6ce8\u610f\uff0c\u4e0e\u4ece fastapi \u5bfc\u5165 Query \uff0c Path \u3001 Body \u4e0d\u540c\uff0c\u8981\u76f4\u63a5\u4ece pydantic \u5bfc\u5165 Field \u3002","title":"\u5bfc\u5165 Field"},{"location":"tutorial/body-fields/#_1","text":"\u7136\u540e\uff0c\u4f7f\u7528 Field \u5b9a\u4e49\u6a21\u578b\u7684\u5c5e\u6027\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str description : str | None = Field ( default = None , title = \"The description of the item\" , max_length = 300 ) price : float = Field ( gt = 0 , description = \"The price must be greater than zero\" ) tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results Field \u7684\u5de5\u4f5c\u65b9\u5f0f\u548c Query \u3001 Path \u3001 Body \u76f8\u540c\uff0c\u53c2\u6570\u4e5f\u76f8\u540c\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c Query \u3001 Path \u90fd\u662f Params \u7684\u5b50\u7c7b\uff0c\u800c Params \u7c7b\u53c8\u662f Pydantic \u4e2d FieldInfo \u7684\u5b50\u7c7b\u3002 Pydantic \u7684 Field \u8fd4\u56de\u4e5f\u662f FieldInfo \u7684\u7c7b\u5b9e\u4f8b\u3002 Body \u76f4\u63a5\u8fd4\u56de\u7684\u4e5f\u662f FieldInfo \u7684\u5b50\u7c7b\u7684\u5bf9\u8c61\u3002\u540e\u6587\u8fd8\u4f1a\u4ecb\u7ecd\u4e00\u4e9b Body \u7684\u5b50\u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u7b49\u5bf9\u8c61\u5b9e\u9645\u4e0a\u90fd\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u6a21\u578b\u5c5e\u6027\u7684\u7c7b\u578b\u3001\u9ed8\u8ba4\u503c\u53ca Field \u7684\u4ee3\u7801\u7ed3\u6784\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u76f8\u540c\uff0c\u53ea\u4e0d\u8fc7\u662f\u7528 Field \u66ff\u6362\u4e86 Path \u3001 Query \u3001 Body \u3002","title":"\u58f0\u660e\u6a21\u578b\u5c5e\u6027"},{"location":"tutorial/body-fields/#_2","text":"Field \u3001 Query \u3001 Body \u7b49\u5bf9\u8c61\u91cc\u53ef\u4ee5\u58f0\u660e\u66f4\u591a\u4fe1\u606f\uff0c\u5e76\u4e14 JSON Schema \u4e2d\u4e5f\u4f1a\u96c6\u6210\u8fd9\u4e9b\u4fe1\u606f\u3002 \u58f0\u660e\u793a\u4f8b\u4e00\u7ae0\u4e2d\u5c06\u8be6\u7ec6\u4ecb\u7ecd\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u7684\u77e5\u8bc6\u3002 \u8b66\u544a \u4f20\u9012\u7ed9 Field \u7684\u9644\u52a0\u952e\u4e5f\u4f1a\u663e\u793a\u5728\u5e94\u7528\u7684 OpenAPI \u6982\u56fe\u91cc\u3002 \u4f46\u8fd9\u4e9b\u952e\u4e0d\u662f OpenAPI \u89c4\u8303\u7684\u5fc5\u8981\u7ec4\u4ef6\uff0c\u56e0\u6b64\uff0c\u67d0\u4e9b OpenAPI \u5de5\u5177\uff08\u5982 OpenAPI \u9a8c\u8bc1\u5668 \uff09\u5728\u5904\u7406\u60a8\u751f\u6210\u7684\u6982\u56fe\u65f6\u53ef\u80fd\u4e0d\u4f1a\u6b63\u5e38\u8fd0\u884c\u3002","title":"\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f"},{"location":"tutorial/body-fields/#_3","text":"Pydantic \u7684 Field \u53ef\u4ee5\u4e3a\u6a21\u578b\u5c5e\u6027\u58f0\u660e\u66f4\u591a\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u4f20\u9012 JSON Schema \u5143\u6570\u636e\u8fd8\u53ef\u4ee5\u4f7f\u7528\u66f4\u591a\u5173\u952e\u5b57\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/body-multiple-params/","text":"\u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570 \u00b6 \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 Path \u548c Query \uff0c\u63a5\u4e0b\u6765\uff0c\u7ee7\u7eed\u5b66\u4e60\u58f0\u660e\u8bf7\u6c42\u4f53\u7684\u9ad8\u7ea7\u7528\u6cd5\u3002 \u6df7\u7528 Path \u3001 Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u9996\u5148\uff0c\u58f0\u660e\u4e2d\u53ef\u4ee5\u968f\u610f\u6df7\u7528 Path \u3001 Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570\uff0c FastAPI \u77e5\u9053\u8be5\u5982\u4f55\u5904\u7406\u3002 \u9ed8\u8ba4\u503c\u4e3a None \u65f6\uff0c\u8bf7\u6c42\u4f53\u53c2\u6570\u662f\u53ef\u9009\u7684\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : Union [ str , None ] = None , item : Union [ Item , None ] = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str | None = None , item : Item | None = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u4f8b\u4e2d\uff0c\u4ece\u8bf7\u6c42\u4f53\u83b7\u53d6\u7684 item \u662f\u53ef\u9009\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u9ed8\u8ba4\u503c\u662f None \u3002 \u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u4e0a\u4f8b\u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u9884\u671f JSON \u8bf7\u6c42\u4f53\u4e2d\u7684 Item \u5305\u542b\u5982\u4e0b\u5c5e\u6027\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \u4f46\u4e5f\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff0c\u4f8b\u5982 item \u548c user \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class User ( BaseModel ): username : str full_name : str | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results \u672c\u4f8b\u4e2d\uff0c FastAPI \u80fd\u591f\u8bc6\u522b\u51fd\u6570\u4e2d\u6709\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff08\u4e24\u4e2a Pydantic \u6a21\u578b\u53c2\u6570\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u628a\u53c2\u6570\u540d\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u7684\u952e\uff08\u5b57\u6bb5\u540d\u79f0\uff09\uff0c\u5e76\u8fd4\u56de\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" } } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5373\u4f7f item \u7684\u58f0\u660e\u65b9\u5f0f\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u4f46\u73b0\u5728\u5b83\u88ab\u5d4c\u5165\u5230\u8bf7\u6c42\u4f53\u7684 item \u952e\u91cc\u4e86\u3002 FastAPI \u4f1a\u81ea\u52a8\u8f6c\u6362\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\uff0c\u56e0\u6b64 item \u548c user \u53c2\u6570\u4f1a\u63a5\u6536\u6307\u5b9a\u7684\u5185\u5bb9\u3002 FastAPI \u4e0d\u4ec5\u4f1a\u6821\u9a8c\u590d\u5408\u6570\u636e\uff0c\u8fd8\u4f1a\u5728 OpenAPI \u6982\u56fe\u548c API \u6587\u6863\u663e\u793a\u3002 \u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u503c \u00b6 \u9664\u4e86 Query \u548c Path \u53ef\u4ee5\u4e3a\u67e5\u8be2\u53c2\u6570\u4e0e\u8def\u5f84\u53c2\u6570\u5b9a\u4e49\u66f4\u591a\u6570\u636e\u4e4b\u5916\uff0c FastAPI \u8fd8\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684 Body \u51fd\u6570\u3002 \u4f8b\u5982\uff0c\u6269\u5c55\u4e0a\u8ff0\u6a21\u578b\uff0c\u9664\u4e86 item \u548c user \u4e4b\u5916\uff0c\u8fd8\u8981\u5728\u540c\u4e00\u8bf7\u6c42\u4f53\u4e2d\uff0c\u6dfb\u52a0\u53e6\u4e00\u4e2a\u952e importance \u3002 \u5982\u679c\u76f4\u63a5\u58f0\u660e\u8be5\u53c2\u6570\uff0c\u56e0\u4e3a importance \u662f\u5355\u503c\uff0c FastAPI \u4f1a\u628a\u5b83\u8bc6\u522b\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u6b64\u65f6\uff0c\u5c31\u9700\u8981\u4f7f\u7528 Body \u8ba9 FastAPI \u628a\u5b83\u5f53\u4f5c\u8bf7\u6c42\u4f53\u7684\u952e\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class User ( BaseModel ): username : str full_name : str | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results \u672c\u4f8b\u4e2d\uff0c FastAPI \u9884\u671f\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" }, \"importance\" : 5 } FastAPI \u4ecd\u4f1a\u6267\u884c\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3001\u6821\u9a8c\u3001\u751f\u6210\u6587\u6863\u7b49\u64cd\u4f5c\u3002 \u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570 \u00b6 \u9664\u4e86\u8bf7\u6c42\u4f53\u53c2\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u58f0\u660e\u66f4\u591a\u67e5\u8be2\u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5355\u503c\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\uff0c\u56e0\u6b64\u4e0d\u5fc5\u663e\u5f0f\u6dfb\u52a0 Query \uff0c\u53ea\u9700\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a q : Union [ str , None ] = None Python 3.10 \u53ca\u4ee5\u4e0a\u7248\u672c\uff1a q : str | None = None \u793a\u4f8b\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : Union [ str , None ] = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class User ( BaseModel ): username : str full_name : str | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : str | None = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results \u8bf4\u660e Body \u4e5f\u652f\u6301\u4e0e Query \u3001 Path \u76f8\u540c\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u53c2\u6570\u3002 \u5d4c\u5165\u5355\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u4f7f\u7528 Pydantic \u6a21\u578b Item \u7684\u8bf7\u6c42\u4f53\u53c2\u6570 item \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u4f1a\u76f4\u63a5\u8c03\u7528\u8bf7\u6c42\u4f53\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5e0c\u671b JSON \u4e2d\u5305\u542b item \u952e\uff0c\u4e14\u6a21\u578b\u5185\u5bb9\u90fd\u5728\u8be5\u952e\u4e4b\u4e0b\uff0c\u5c31\u8981\u53c2\u7167\u58f0\u660e\u66f4\u591a\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 Body \u7684 embed \u53c2\u6570\uff1a item : Item = Body ( ... , embed = True ) \u793a\u4f8b\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \u672c\u4f8b\u4e2d\uff0c FastAPI \u9884\u671f\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } } \u800c\u4e0d\u662f\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \u5c0f\u7ed3 \u00b6 \u5373\u4f7f\u4e00\u4e2a\u8bf7\u6c42\u53ea\u80fd\u6709\u4e00\u4e2a\u8bf7\u6c42\u4f53\uff0c\u4ecd\u53ef\u4ee5\u4e3a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u6dfb\u52a0\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u3002 FastAPI \u4f1a\u8fdb\u884c\u5904\u7406\uff0c\u4e3a\u51fd\u6570\u63d0\u4f9b\u6b63\u786e\u7684\u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd8\u80fd\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u6b63\u786e\u7684 \u8def\u5f84\u64cd\u4f5c \u6982\u56fe\u3002 \u8bf7\u6c42\u4f53\u8fd8\u53ef\u4ee5\u63a5\u6536\u591a\u4e2a\u5355\u503c\u3002 \u53ea\u58f0\u660e\u5355\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u65f6\uff0c FastAPI \u4e5f\u53ef\u4ee5\u628a\u8bf7\u6c42\u4f53\u5d4c\u5165\u5230\u952e\u91cc\u3002","title":"\u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#-","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u5b66\u4e60\u4e86\u5982\u4f55\u4f7f\u7528 Path \u548c Query \uff0c\u63a5\u4e0b\u6765\uff0c\u7ee7\u7eed\u5b66\u4e60\u58f0\u660e\u8bf7\u6c42\u4f53\u7684\u9ad8\u7ea7\u7528\u6cd5\u3002","title":"\u8bf7\u6c42\u4f53 - \u591a\u4e2a\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#pathquery","text":"\u9996\u5148\uff0c\u58f0\u660e\u4e2d\u53ef\u4ee5\u968f\u610f\u6df7\u7528 Path \u3001 Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570\uff0c FastAPI \u77e5\u9053\u8be5\u5982\u4f55\u5904\u7406\u3002 \u9ed8\u8ba4\u503c\u4e3a None \u65f6\uff0c\u8bf7\u6c42\u4f53\u53c2\u6570\u662f\u53ef\u9009\u7684\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : Union [ str , None ] = None , item : Union [ Item , None ] = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results from fastapi import FastAPI , Path from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str | None = None , item : Item | None = None , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) if item : results . update ({ \"item\" : item }) return results \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u4f8b\u4e2d\uff0c\u4ece\u8bf7\u6c42\u4f53\u83b7\u53d6\u7684 item \u662f\u53ef\u9009\u7684\uff0c\u56e0\u4e3a\u5b83\u7684\u9ed8\u8ba4\u503c\u662f None \u3002","title":"\u6df7\u7528 Path\u3001Query \u548c\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_1","text":"\u4e0a\u4f8b\u4e2d\uff0c \u8def\u5f84\u64cd\u4f5c \u9884\u671f JSON \u8bf7\u6c42\u4f53\u4e2d\u7684 Item \u5305\u542b\u5982\u4e0b\u5c5e\u6027\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } \u4f46\u4e5f\u53ef\u4ee5\u58f0\u660e\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff0c\u4f8b\u5982 item \u548c user \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class User ( BaseModel ): username : str full_name : str | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user } return results \u672c\u4f8b\u4e2d\uff0c FastAPI \u80fd\u591f\u8bc6\u522b\u51fd\u6570\u4e2d\u6709\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\uff08\u4e24\u4e2a Pydantic \u6a21\u578b\u53c2\u6570\uff09\u3002 \u56e0\u6b64\uff0c\u5b83\u628a\u53c2\u6570\u540d\u4f5c\u4e3a\u8bf7\u6c42\u4f53\u7684\u952e\uff08\u5b57\u6bb5\u540d\u79f0\uff09\uff0c\u5e76\u8fd4\u56de\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" } } \u7b14\u8bb0 \u6ce8\u610f\uff0c\u5373\u4f7f item \u7684\u58f0\u660e\u65b9\u5f0f\u4e0e\u4e4b\u524d\u4e00\u6837\uff0c\u4f46\u73b0\u5728\u5b83\u88ab\u5d4c\u5165\u5230\u8bf7\u6c42\u4f53\u7684 item \u952e\u91cc\u4e86\u3002 FastAPI \u4f1a\u81ea\u52a8\u8f6c\u6362\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\uff0c\u56e0\u6b64 item \u548c user \u53c2\u6570\u4f1a\u63a5\u6536\u6307\u5b9a\u7684\u5185\u5bb9\u3002 FastAPI \u4e0d\u4ec5\u4f1a\u6821\u9a8c\u590d\u5408\u6570\u636e\uff0c\u8fd8\u4f1a\u5728 OpenAPI \u6982\u56fe\u548c API \u6587\u6863\u663e\u793a\u3002","title":"\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_2","text":"\u9664\u4e86 Query \u548c Path \u53ef\u4ee5\u4e3a\u67e5\u8be2\u53c2\u6570\u4e0e\u8def\u5f84\u53c2\u6570\u5b9a\u4e49\u66f4\u591a\u6570\u636e\u4e4b\u5916\uff0c FastAPI \u8fd8\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u7684 Body \u51fd\u6570\u3002 \u4f8b\u5982\uff0c\u6269\u5c55\u4e0a\u8ff0\u6a21\u578b\uff0c\u9664\u4e86 item \u548c user \u4e4b\u5916\uff0c\u8fd8\u8981\u5728\u540c\u4e00\u8bf7\u6c42\u4f53\u4e2d\uff0c\u6dfb\u52a0\u53e6\u4e00\u4e2a\u952e importance \u3002 \u5982\u679c\u76f4\u63a5\u58f0\u660e\u8be5\u53c2\u6570\uff0c\u56e0\u4e3a importance \u662f\u5355\u503c\uff0c FastAPI \u4f1a\u628a\u5b83\u8bc6\u522b\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u6b64\u65f6\uff0c\u5c31\u9700\u8981\u4f7f\u7528 Body \u8ba9 FastAPI \u628a\u5b83\u5f53\u4f5c\u8bf7\u6c42\u4f53\u7684\u952e\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class User ( BaseModel ): username : str full_name : str | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item , user : User , importance : int = Body ()): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } return results \u672c\u4f8b\u4e2d\uff0c FastAPI \u9884\u671f\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }, \"user\" : { \"username\" : \"dave\" , \"full_name\" : \"Dave Grohl\" }, \"importance\" : 5 } FastAPI \u4ecd\u4f1a\u6267\u884c\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3001\u6821\u9a8c\u3001\u751f\u6210\u6587\u6863\u7b49\u64cd\u4f5c\u3002","title":"\u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u503c"},{"location":"tutorial/body-multiple-params/#_3","text":"\u9664\u4e86\u8bf7\u6c42\u4f53\u53c2\u6570\u5916\uff0c\u8fd8\u53ef\u4ee5\u58f0\u660e\u66f4\u591a\u67e5\u8be2\u53c2\u6570\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u5355\u503c\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\uff0c\u56e0\u6b64\u4e0d\u5fc5\u663e\u5f0f\u6dfb\u52a0 Query \uff0c\u53ea\u9700\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a q : Union [ str , None ] = None Python 3.10 \u53ca\u4ee5\u4e0a\u7248\u672c\uff1a q : str | None = None \u793a\u4f8b\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class User ( BaseModel ): username : str full_name : Union [ str , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : Union [ str , None ] = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class User ( BaseModel ): username : str full_name : str | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item , user : User , importance : int = Body ( gt = 0 ), q : str | None = None ): results = { \"item_id\" : item_id , \"item\" : item , \"user\" : user , \"importance\" : importance } if q : results . update ({ \"q\" : q }) return results \u8bf4\u660e Body \u4e5f\u652f\u6301\u4e0e Query \u3001 Path \u76f8\u540c\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u53c2\u6570\u3002","title":"\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_4","text":"\u5047\u8bbe\u53ea\u6709\u4e00\u4e2a\u4f7f\u7528 Pydantic \u6a21\u578b Item \u7684\u8bf7\u6c42\u4f53\u53c2\u6570 item \u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c FastAPI \u4f1a\u76f4\u63a5\u8c03\u7528\u8bf7\u6c42\u4f53\u3002 \u4f46\u662f\uff0c\u5982\u679c\u5e0c\u671b JSON \u4e2d\u5305\u542b item \u952e\uff0c\u4e14\u6a21\u578b\u5185\u5bb9\u90fd\u5728\u8be5\u952e\u4e4b\u4e0b\uff0c\u5c31\u8981\u53c2\u7167\u58f0\u660e\u66f4\u591a\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 Body \u7684 embed \u53c2\u6570\uff1a item : Item = Body ( ... , embed = True ) \u793a\u4f8b\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( embed = True )): results = { \"item_id\" : item_id , \"item\" : item } return results \u672c\u4f8b\u4e2d\uff0c FastAPI \u9884\u671f\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"item\" : { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 } } \u800c\u4e0d\u662f\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 }","title":"\u5d4c\u5165\u5355\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body-multiple-params/#_5","text":"\u5373\u4f7f\u4e00\u4e2a\u8bf7\u6c42\u53ea\u80fd\u6709\u4e00\u4e2a\u8bf7\u6c42\u4f53\uff0c\u4ecd\u53ef\u4ee5\u4e3a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u6dfb\u52a0\u591a\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u3002 FastAPI \u4f1a\u8fdb\u884c\u5904\u7406\uff0c\u4e3a\u51fd\u6570\u63d0\u4f9b\u6b63\u786e\u7684\u6570\u636e\uff0c\u5e76\u8fdb\u884c\u6821\u9a8c\uff0c\u8fd8\u80fd\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u6b63\u786e\u7684 \u8def\u5f84\u64cd\u4f5c \u6982\u56fe\u3002 \u8bf7\u6c42\u4f53\u8fd8\u53ef\u4ee5\u63a5\u6536\u591a\u4e2a\u5355\u503c\u3002 \u53ea\u58f0\u660e\u5355\u4e2a\u8bf7\u6c42\u4f53\u53c2\u6570\u65f6\uff0c FastAPI \u4e5f\u53ef\u4ee5\u628a\u8bf7\u6c42\u4f53\u5d4c\u5165\u5230\u952e\u91cc\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/body-nested-models/","text":"\u8bf7\u6c42\u4f53 - \u5d4c\u5957\u6a21\u578b \u00b6 \u57fa\u4e8e Pydantic\uff0c FastAPI \u80fd\u591f\u5b9a\u4e49\u3001\u6821\u9a8c\u3001\u5b58\u6863\u3001\u4f7f\u7528\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\u6a21\u578b\u3002 List \u5b57\u6bb5 \u00b6 \u6a21\u578b\u5c5e\u6027\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u5b50\u7c7b\u578b\u3002\u4f8b\u5982\uff0cPython \u5217\u8868 \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results tags \u662f\u7531\u591a\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868\u3002\u4f46\u4e0a\u4f8b\u672a\u58f0\u660e\u5217\u8868\u5185\u5143\u7d20\u7684\u7c7b\u578b\u3002 \u5e26\u7c7b\u578b\u53c2\u6570\u7684\u5217\u8868\u5b57\u6bb5 \u00b6 Python \u53ef\u4ee5\u58f0\u660e\u5305\u542b\u5185\u90e8\u7c7b\u578b\uff08 \u7c7b\u578b\u53c2\u6570 \uff09\u7684\u5217\u8868\uff1a \u5bfc\u5165 typing \u7684 List \u00b6 Python 3.9 \u4ee5\u4e0a\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 list \u58f0\u660e\u4e0b\u8ff0\u7c7b\u578b\u6ce8\u91ca\u3002 \u4f46\u5728 Python 3.6 \u7248\u4e4b\u540e\u53ca 3.9 \u7248\u4e4b\u524d\uff0c\u9996\u5148\u8981\u4ece Python \u7684 typing \u6a21\u5757\u4e2d\u5bfc\u5165 List \uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u58f0\u660e\u5e26\u7c7b\u578b\u53c2\u6570\u7684 list \u00b6 \u58f0\u660e\u5305\u542b list \u3001 dict \u3001 tuple \u7b49\u7c7b\u578b\u53c2\u6570\uff08\u5185\u90e8\u7c7b\u578b\uff09\u7684\u7c7b\u578b\uff1a \u5982\u679c Python \u7684\u7248\u672c\u4f4e\u4e8e 3.9\uff0c\u5219\u8981\u4ece typing \u6a21\u5757\u5bfc\u5165\u7b49\u6548\u7684\u7248\u672c\u3002 \u4f7f\u7528\u65b9\u62ec\u53f7 [] \u4f20\u9012 \u7c7b\u578b\u53c2\u6570 \uff0c\u5373\u5185\u90e8\u7c7b\u578b\u3002 Python 3.9 \u4e2d\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a my_list : list [ str ] Python 3.9 \u4e4b\u524d\u7684\u7248\u672c\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a from typing import List my_list : List [ str ] \u8fd9\u4e9b\u90fd\u662f\u6807\u51c6\u7684 Python \u7c7b\u578b\u58f0\u660e\u8bed\u6cd5\u3002 \u5305\u542b\u5185\u90e8\u7c7b\u578b\u7684\u6a21\u578b\u5c5e\u6027\u4e5f\u4f7f\u7528\u8fd9\u4e9b\u6807\u51c6\u8bed\u6cd5\u3002 \u672c\u4f8b\u628a tags \u58f0\u660e\u4e3a \u5b57\u7b26\u4e32\u5217\u8868 \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : list [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u96c6\u5408\u7c7b\u578b ~ Set \u00b6 \u6807\u7b7e\uff08tags\uff09\u4e0d\u80fd\u91cd\u590d\uff0c\u6bcf\u4e2a\u6807\u7b7e\u5b57\u7b26\u4e32\u90fd\u5e94\u8be5\u662f\u552f\u4e00\u7684\u3002 Python \u63d0\u4f9b\u4e86\u4e13\u95e8\u4fdd\u5b58\u4e00\u7ec4\u552f\u4e00\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u96c6\u5408\uff08 set \uff09\u3002 \u5bfc\u5165 Set \uff0c\u5e76\u628a tags \u58f0\u660e\u4e3a\u7531 str \u7ec4\u6210\u7684 set \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u6536\u5230\u7684\u8bf7\u6c42\u4e2d\u5305\u542b\u91cd\u590d\u6570\u636e\u65f6\uff0c\u4f1a\u88ab\u8f6c\u6362\u4e3a\u53ea\u5305\u542b\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\u3002 \u800c\u4e14\uff0c\u6bcf\u6b21\u8f93\u51fa\u6570\u636e\u65f6\uff0c\u5373\u4f7f\u6e90\u6570\u636e\u4e2d\u6709\u91cd\u590d\u9879\uff0c\u8f93\u51fa\u7684\u4e5f\u662f\u53ea\u5305\u542b\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\u3002 \u5e76\u4e14\u8fd8\u4f1a\u5728\u6587\u6863\u4e2d\u8fdb\u884c\u76f8\u5e94\u5730\u6ce8\u91ca/\u5b58\u6863\u3002 \u5d4c\u5957\u6a21\u578b \u00b6 Pydantic \u6a21\u578b\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 \u800c\u4e14\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f Pydantic \u6a21\u578b\u3002 \u56e0\u6b64\uff0cPydantic \u6a21\u578b\u53ef\u4ee5\u58f0\u660e\u62e5\u6709\u7279\u5b9a\u5c5e\u6027\u540d\u3001\u7c7b\u578b\u548c\u6821\u9a8c\u7684\u6df1\u5ea6\u5d4c\u5957 JSON \u5bf9\u8c61\u3002 \u6240\u6709\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u4efb\u610f\u5d4c\u5957\u3002 \u5b9a\u4e49\u5b50\u6a21\u578b \u00b6 \u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a Image \u6a21\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () image : Image | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u7528\u5b50\u6a21\u578b\u4f5c\u4e3a\u7c7b\u578b \u00b6 \u7136\u540e\uff0c\u628a Image \u6a21\u578b\u58f0\u660e\u4e3a\u5c5e\u6027\u7684\u7c7b\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () image : Image | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results FastAPI \u8fd4\u56de\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"image\" : { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" } } \u518d\u6b21\u5f3a\u8c03\u4e00\u4e0b\uff0c\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 FastAPI \u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u5bf9\u5d4c\u5957\u6a21\u578b\u7684\u81ea\u52a8\u8865\u5168\u7b49\u652f\u6301 \u6570\u636e\u8f6c\u6362 \u6570\u636e\u6821\u9a8c API \u6587\u6863 \u7279\u6b8a\u7c7b\u578b\u4e0e\u6821\u9a8c \u00b6 \u9664\u4e86 str \u3001 int \u3001 float \u7b49\u666e\u901a\u5355\u503c\u7c7b\u578b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ece str \u7ee7\u627f\u7684\u590d\u6742\u5355\u503c\u7c7b\u578b\u3002 \u6240\u6709\u9009\u9879\u8be6\u89c1 Pydantic \u5b98\u6863 - \u5916\u90e8\u7c7b\u578b \u3002\u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u4e00\u4e9b\u793a\u4f8b\u3002 \u4f8b\u5982\uff0c\u628a Image \u6a21\u578b\u7684 url \u5b57\u6bb5\u58f0\u660e\u4e3a Pydantic \u7684 HttpUrl \uff0c\u800c\u4e0d\u662f str \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () image : Image | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results FastAPI \u6821\u9a8c\u8be5\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6709\u6548\u7684 URL\uff0c\u5e76\u5728 JSON Schema / OpenAPI \u4e2d\u5b58\u6863\u3002 \u5305\u542b\u5b50\u6a21\u578b\u5217\u8868\u7684\u5c5e\u6027 \u00b6 list \u3001 set \u7684\u5b50\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f Pydantic \u6a21\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () images : Union [ list [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () images : list [ Image ] | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results JSON \u8bf7\u6c42\u4f53\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8f6c\u6362\u3001\u6821\u9a8c\u5e76\u5b58\u6863\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"images\" : [ { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" }, { \"url\" : \"http://example.com/dave.jpg\" , \"name\" : \"The Baz\" } ] } \u8bf4\u660e \u6ce8\u610f\uff0c images \u952e\u4e2d\u5305\u542b\u4e86 image \u5bf9\u8c61\u5217\u8868\u3002 \u6df1\u5ea6\u5d4c\u5957\u6a21\u578b \u00b6 \u5b9a\u4e49\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\u6a21\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : List [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer from typing import Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () images : Union [ list [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : list [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () images : list [ Image ] | None = None class Offer ( BaseModel ): name : str description : str | None = None price : float items : list [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer \u8bf4\u660e \u6ce8\u610f\uff0c Offer \u4e2d\u5d4c\u5957\u4e86 Item \u5217\u8868\uff0c\u800c Item \u53c8\u5d4c\u5957\u4e86\u53ef\u9009\u7684 Image \u5217\u8868\u3002 \u7eaf\u5217\u8868\u8bf7\u6c42\u4f53 \u00b6 JSON \u8bf7\u6c42\u4f53\u7684\u6700\u5916\u5c42\u662f JSON array \uff08 Python \u5217\u8868 \uff09\u65f6\uff0c\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0e\u58f0\u660e Pydantic \u6a21\u578b\u76f8\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u8be5\u53c2\u6570\u7684\u7c7b\u578b\uff1a images : List [ Image ] \u5728 Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\u4e3a\uff1a images : list [ Image ] \u5177\u4f53\u5982\u4ee5\u4e0b\u4ee3\u7801\u6240\u793a\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : List [ Image ]): return images from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : list [ Image ]): return images \u65e0\u5904\u4e0d\u5728\u7684\u7f16\u8f91\u5668\u652f\u6301 \u00b6 \u7f16\u8f91\u5668\u7684\u652f\u6301\u65e0\u5904\u4e0d\u5728\u3002 \u5373\u4f7f\u662f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff1a \u76f4\u63a5\u4f7f\u7528 \u5b57\u5178 \uff0c\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u65f6\uff0c\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4f46\u4e0d\u5fc5\u62c5\u5fc3\uff0c\u4f20\u5165\u7684\u5b57\u5178\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\uff0c\u8f93\u51fa\u6570\u636e\u4e5f\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a JSON\u3002 \u7531 \u5b57\u5178 \u6784\u6210\u7684\u8bf7\u6c42\u4f53 \u00b6 \u8bf7\u6c42\u4f53\u53ef\u4ee5\u58f0\u660e\u4e3a \u5b57\u5178 \uff0c\u5e76\u4e14\u5b57\u5178\u7684\u952e\u4e0e\u503c\u53ef\u4ee5\u58f0\u660e\u4e3a\u4e0d\u540c\u7c7b\u578b\u3002 \u56e0\u4e3a\u4f7f\u7528\u4e86 Pydantic \u6a21\u578b\uff0c\u4e0d\u5fc5\u4e8b\u5148\u77e5\u9053\u53ef\u7528\u7684\u5b57\u6bb5 / \u5c5e\u6027\u540d\u3002 \u63a5\u6536\u672a\u77e5\u7684\u952e\u65f6\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u6709\u7528\u3002 \u5176\u4ed6\u7528\u4f8b\u5305\u62ec\u4f7f\u7528 int \u4f5c\u4e3a\u952e\u7684\u7c7b\u578b\u3002 \u793a\u4f8b\u5982\u4e0b\u3002 \u672c\u4f8b\u4e2d\uff0c\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u952e\u7684\u7c7b\u578b\u662f int \uff0c\u503c\u7684\u7c7b\u578b\u662f float \u7684 \u5b57\u5178 \uff1a Python 3.6 and above Python 3.9 and above from typing import Dict from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : Dict [ int , float ]): return weights from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : dict [ int , float ]): return weights \u63d0\u793a \u6ce8\u610f\uff0cJSON \u7684\u952e\u53ea\u652f\u6301 \u5b57\u7b26\u4e32 \u3002 \u4f46 Pydantic \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f API \u5ba2\u6237\u7aef\u53ea\u80fd\u53d1\u9001\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u952e\uff0c\u4f46\u53ea\u8981\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6574\u6570\uff0cPydantic \u5c31\u80fd\u8f6c\u6362\u5e76\u6821\u9a8c\u8be5\u952e\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5b57\u5178 weights \u7684\u952e\u7684\u7c7b\u578b\u5c31\u662f int \uff0c\u800c\u503c\u7684\u7c7b\u578b\u5219\u4e3a float \u3002 \u5c0f\u7ed3 \u00b6 FastAPI \u62e5\u6709 Pydantic \u6a21\u578b\u7684\u9ad8\u5ea6\u7075\u6d3b\u6027\uff0c\u8fd8\u80fd\u8ba9\u4ee3\u7801\u66f4\u52a0\u7b80\u77ed\u3001\u4f18\u96c5\u3002 \u5e76\u4e14\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff08\u65e0\u5904\u4e0d\u5728\u7684\u81ea\u52a8\u8865\u5168\uff01\uff09 \u6570\u636e\u8f6c\u6362\uff08\u5373\u89e3\u6790/\u5e8f\u5217\u5316\uff09 \u6570\u636e\u6821\u9a8c \u6982\u56fe\u5b58\u6863 API \u6587\u6863","title":"\u8bf7\u6c42\u4f53 - \u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#-","text":"\u57fa\u4e8e Pydantic\uff0c FastAPI \u80fd\u591f\u5b9a\u4e49\u3001\u6821\u9a8c\u3001\u5b58\u6863\u3001\u4f7f\u7528\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\u6a21\u578b\u3002","title":"\u8bf7\u6c42\u4f53 - \u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#list","text":"\u6a21\u578b\u5c5e\u6027\u53ef\u4ee5\u5b9a\u4e49\u4e3a\u5b50\u7c7b\u578b\u3002\u4f8b\u5982\uff0cPython \u5217\u8868 \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : list = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results tags \u662f\u7531\u591a\u4e2a\u5143\u7d20\u7ec4\u6210\u7684\u5217\u8868\u3002\u4f46\u4e0a\u4f8b\u672a\u58f0\u660e\u5217\u8868\u5185\u5143\u7d20\u7684\u7c7b\u578b\u3002","title":"List \u5b57\u6bb5"},{"location":"tutorial/body-nested-models/#_1","text":"Python \u53ef\u4ee5\u58f0\u660e\u5305\u542b\u5185\u90e8\u7c7b\u578b\uff08 \u7c7b\u578b\u53c2\u6570 \uff09\u7684\u5217\u8868\uff1a","title":"\u5e26\u7c7b\u578b\u53c2\u6570\u7684\u5217\u8868\u5b57\u6bb5"},{"location":"tutorial/body-nested-models/#typing-list","text":"Python 3.9 \u4ee5\u4e0a\u7248\u672c\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6807\u51c6\u7684 list \u58f0\u660e\u4e0b\u8ff0\u7c7b\u578b\u6ce8\u91ca\u3002 \u4f46\u5728 Python 3.6 \u7248\u4e4b\u540e\u53ca 3.9 \u7248\u4e4b\u524d\uff0c\u9996\u5148\u8981\u4ece Python \u7684 typing \u6a21\u5757\u4e2d\u5bfc\u5165 List \uff1a from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u5bfc\u5165 typing \u7684 List"},{"location":"tutorial/body-nested-models/#list_1","text":"\u58f0\u660e\u5305\u542b list \u3001 dict \u3001 tuple \u7b49\u7c7b\u578b\u53c2\u6570\uff08\u5185\u90e8\u7c7b\u578b\uff09\u7684\u7c7b\u578b\uff1a \u5982\u679c Python \u7684\u7248\u672c\u4f4e\u4e8e 3.9\uff0c\u5219\u8981\u4ece typing \u6a21\u5757\u5bfc\u5165\u7b49\u6548\u7684\u7248\u672c\u3002 \u4f7f\u7528\u65b9\u62ec\u53f7 [] \u4f20\u9012 \u7c7b\u578b\u53c2\u6570 \uff0c\u5373\u5185\u90e8\u7c7b\u578b\u3002 Python 3.9 \u4e2d\u7684\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a my_list : list [ str ] Python 3.9 \u4e4b\u524d\u7684\u7248\u672c\u4e2d\uff0c\u5982\u4e0b\u6240\u793a\uff1a from typing import List my_list : List [ str ] \u8fd9\u4e9b\u90fd\u662f\u6807\u51c6\u7684 Python \u7c7b\u578b\u58f0\u660e\u8bed\u6cd5\u3002 \u5305\u542b\u5185\u90e8\u7c7b\u578b\u7684\u6a21\u578b\u5c5e\u6027\u4e5f\u4f7f\u7528\u8fd9\u4e9b\u6807\u51c6\u8bed\u6cd5\u3002 \u672c\u4f8b\u628a tags \u58f0\u660e\u4e3a \u5b57\u7b26\u4e32\u5217\u8868 \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : list [ str ] = [] @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u58f0\u660e\u5e26\u7c7b\u578b\u53c2\u6570\u7684 list"},{"location":"tutorial/body-nested-models/#set","text":"\u6807\u7b7e\uff08tags\uff09\u4e0d\u80fd\u91cd\u590d\uff0c\u6bcf\u4e2a\u6807\u7b7e\u5b57\u7b26\u4e32\u90fd\u5e94\u8be5\u662f\u552f\u4e00\u7684\u3002 Python \u63d0\u4f9b\u4e86\u4e13\u95e8\u4fdd\u5b58\u4e00\u7ec4\u552f\u4e00\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\uff0c\u96c6\u5408\uff08 set \uff09\u3002 \u5bfc\u5165 Set \uff0c\u5e76\u628a tags \u58f0\u660e\u4e3a\u7531 str \u7ec4\u6210\u7684 set \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u6536\u5230\u7684\u8bf7\u6c42\u4e2d\u5305\u542b\u91cd\u590d\u6570\u636e\u65f6\uff0c\u4f1a\u88ab\u8f6c\u6362\u4e3a\u53ea\u5305\u542b\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\u3002 \u800c\u4e14\uff0c\u6bcf\u6b21\u8f93\u51fa\u6570\u636e\u65f6\uff0c\u5373\u4f7f\u6e90\u6570\u636e\u4e2d\u6709\u91cd\u590d\u9879\uff0c\u8f93\u51fa\u7684\u4e5f\u662f\u53ea\u5305\u542b\u552f\u4e00\u5143\u7d20\u7684\u96c6\u5408\u3002 \u5e76\u4e14\u8fd8\u4f1a\u5728\u6587\u6863\u4e2d\u8fdb\u884c\u76f8\u5e94\u5730\u6ce8\u91ca/\u5b58\u6863\u3002","title":"\u96c6\u5408\u7c7b\u578b ~ Set"},{"location":"tutorial/body-nested-models/#_2","text":"Pydantic \u6a21\u578b\u7684\u6bcf\u4e2a\u5c5e\u6027\u90fd\u6709\u81ea\u5df1\u7684\u7c7b\u578b\u3002 \u800c\u4e14\uff0c\u8fd9\u4e9b\u5c5e\u6027\u7684\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f Pydantic \u6a21\u578b\u3002 \u56e0\u6b64\uff0cPydantic \u6a21\u578b\u53ef\u4ee5\u58f0\u660e\u62e5\u6709\u7279\u5b9a\u5c5e\u6027\u540d\u3001\u7c7b\u578b\u548c\u6821\u9a8c\u7684\u6df1\u5ea6\u5d4c\u5957 JSON \u5bf9\u8c61\u3002 \u6240\u6709\u8fd9\u4e9b\u5bf9\u8c61\uff0c\u90fd\u53ef\u4ee5\u4efb\u610f\u5d4c\u5957\u3002","title":"\u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#_3","text":"\u4f8b\u5982\uff0c\u5b9a\u4e49\u4e00\u4e2a Image \u6a21\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () image : Image | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u5b9a\u4e49\u5b50\u6a21\u578b"},{"location":"tutorial/body-nested-models/#_4","text":"\u7136\u540e\uff0c\u628a Image \u6a21\u578b\u58f0\u660e\u4e3a\u5c5e\u6027\u7684\u7c7b\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Image ( BaseModel ): url : str name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () image : Image | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results FastAPI \u8fd4\u56de\u5982\u4e0b\u8bf7\u6c42\u4f53\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"image\" : { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" } } \u518d\u6b21\u5f3a\u8c03\u4e00\u4e0b\uff0c\u58f0\u660e\u4e4b\u540e\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7 FastAPI \u83b7\u5f97\uff1a \u7f16\u8f91\u5668\u5bf9\u5d4c\u5957\u6a21\u578b\u7684\u81ea\u52a8\u8865\u5168\u7b49\u652f\u6301 \u6570\u636e\u8f6c\u6362 \u6570\u636e\u6821\u9a8c API \u6587\u6863","title":"\u7528\u5b50\u6a21\u578b\u4f5c\u4e3a\u7c7b\u578b"},{"location":"tutorial/body-nested-models/#_5","text":"\u9664\u4e86 str \u3001 int \u3001 float \u7b49\u666e\u901a\u5355\u503c\u7c7b\u578b\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u4ece str \u7ee7\u627f\u7684\u590d\u6742\u5355\u503c\u7c7b\u578b\u3002 \u6240\u6709\u9009\u9879\u8be6\u89c1 Pydantic \u5b98\u6863 - \u5916\u90e8\u7c7b\u578b \u3002\u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u4e00\u4e9b\u793a\u4f8b\u3002 \u4f8b\u5982\uff0c\u628a Image \u6a21\u578b\u7684 url \u5b57\u6bb5\u58f0\u660e\u4e3a Pydantic \u7684 HttpUrl \uff0c\u800c\u4e0d\u662f str \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () image : Union [ Image , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () image : Image | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results FastAPI \u6821\u9a8c\u8be5\u5b57\u7b26\u4e32\u662f\u5426\u4e3a\u6709\u6548\u7684 URL\uff0c\u5e76\u5728 JSON Schema / OpenAPI \u4e2d\u5b58\u6863\u3002","title":"\u7279\u6b8a\u7c7b\u578b\u4e0e\u6821\u9a8c"},{"location":"tutorial/body-nested-models/#_6","text":"list \u3001 set \u7684\u5b50\u7c7b\u578b\u4e5f\u53ef\u4ee5\u662f Pydantic \u6a21\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from typing import Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () images : Union [ list [ Image ], None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () images : list [ Image ] | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results JSON \u8bf7\u6c42\u4f53\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8f6c\u6362\u3001\u6821\u9a8c\u5e76\u5b58\u6863\uff1a { \"name\" : \"Foo\" , \"description\" : \"The pretender\" , \"price\" : 42.0 , \"tax\" : 3.2 , \"tags\" : [ \"rock\" , \"metal\" , \"bar\" ], \"images\" : [ { \"url\" : \"http://example.com/baz.jpg\" , \"name\" : \"The Foo live\" }, { \"url\" : \"http://example.com/dave.jpg\" , \"name\" : \"The Baz\" } ] } \u8bf4\u660e \u6ce8\u610f\uff0c images \u952e\u4e2d\u5305\u542b\u4e86 image \u5bf9\u8c61\u5217\u8868\u3002","title":"\u5305\u542b\u5b50\u6a21\u578b\u5217\u8868\u7684\u5c5e\u6027"},{"location":"tutorial/body-nested-models/#_7","text":"\u5b9a\u4e49\u4efb\u610f\u6df1\u5ea6\u7684\u5d4c\u5957\u6a21\u578b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Set , Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () images : Union [ List [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : List [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer from typing import Union from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () images : Union [ list [ Image ], None ] = None class Offer ( BaseModel ): name : str description : Union [ str , None ] = None price : float items : list [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () images : list [ Image ] | None = None class Offer ( BaseModel ): name : str description : str | None = None price : float items : list [ Item ] @app . post ( \"/offers/\" ) async def create_offer ( offer : Offer ): return offer \u8bf4\u660e \u6ce8\u610f\uff0c Offer \u4e2d\u5d4c\u5957\u4e86 Item \u5217\u8868\uff0c\u800c Item \u53c8\u5d4c\u5957\u4e86\u53ef\u9009\u7684 Image \u5217\u8868\u3002","title":"\u6df1\u5ea6\u5d4c\u5957\u6a21\u578b"},{"location":"tutorial/body-nested-models/#_8","text":"JSON \u8bf7\u6c42\u4f53\u7684\u6700\u5916\u5c42\u662f JSON array \uff08 Python \u5217\u8868 \uff09\u65f6\uff0c\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u4e0e\u58f0\u660e Pydantic \u6a21\u578b\u76f8\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u8be5\u53c2\u6570\u7684\u7c7b\u578b\uff1a images : List [ Image ] \u5728 Python 3.9 \u53ca\u4ee5\u4e0a\u7248\u672c\u4e2d\u4e3a\uff1a images : list [ Image ] \u5177\u4f53\u5982\u4ee5\u4e0b\u4ee3\u7801\u6240\u793a\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : List [ Image ]): return images from fastapi import FastAPI from pydantic import BaseModel , HttpUrl app = FastAPI () class Image ( BaseModel ): url : HttpUrl name : str @app . post ( \"/images/multiple/\" ) async def create_multiple_images ( images : list [ Image ]): return images","title":"\u7eaf\u5217\u8868\u8bf7\u6c42\u4f53"},{"location":"tutorial/body-nested-models/#_9","text":"\u7f16\u8f91\u5668\u7684\u652f\u6301\u65e0\u5904\u4e0d\u5728\u3002 \u5373\u4f7f\u662f\u5217\u8868\u4e2d\u7684\u5143\u7d20\uff1a \u76f4\u63a5\u4f7f\u7528 \u5b57\u5178 \uff0c\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u65f6\uff0c\u65e0\u6cd5\u83b7\u5f97\u8fd9\u79cd\u7f16\u8f91\u5668\u652f\u6301\u3002 \u4f46\u4e0d\u5fc5\u62c5\u5fc3\uff0c\u4f20\u5165\u7684\u5b57\u5178\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\uff0c\u8f93\u51fa\u6570\u636e\u4e5f\u4f1a\u88ab\u81ea\u52a8\u8f6c\u6362\u4e3a JSON\u3002","title":"\u65e0\u5904\u4e0d\u5728\u7684\u7f16\u8f91\u5668\u652f\u6301"},{"location":"tutorial/body-nested-models/#_10","text":"\u8bf7\u6c42\u4f53\u53ef\u4ee5\u58f0\u660e\u4e3a \u5b57\u5178 \uff0c\u5e76\u4e14\u5b57\u5178\u7684\u952e\u4e0e\u503c\u53ef\u4ee5\u58f0\u660e\u4e3a\u4e0d\u540c\u7c7b\u578b\u3002 \u56e0\u4e3a\u4f7f\u7528\u4e86 Pydantic \u6a21\u578b\uff0c\u4e0d\u5fc5\u4e8b\u5148\u77e5\u9053\u53ef\u7528\u7684\u5b57\u6bb5 / \u5c5e\u6027\u540d\u3002 \u63a5\u6536\u672a\u77e5\u7684\u952e\u65f6\uff0c\u8fd9\u79cd\u65b9\u5f0f\u5f88\u6709\u7528\u3002 \u5176\u4ed6\u7528\u4f8b\u5305\u62ec\u4f7f\u7528 int \u4f5c\u4e3a\u952e\u7684\u7c7b\u578b\u3002 \u793a\u4f8b\u5982\u4e0b\u3002 \u672c\u4f8b\u4e2d\uff0c\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u53ef\u4ee5\u63a5\u6536\u952e\u7684\u7c7b\u578b\u662f int \uff0c\u503c\u7684\u7c7b\u578b\u662f float \u7684 \u5b57\u5178 \uff1a Python 3.6 and above Python 3.9 and above from typing import Dict from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : Dict [ int , float ]): return weights from fastapi import FastAPI app = FastAPI () @app . post ( \"/index-weights/\" ) async def create_index_weights ( weights : dict [ int , float ]): return weights \u63d0\u793a \u6ce8\u610f\uff0cJSON \u7684\u952e\u53ea\u652f\u6301 \u5b57\u7b26\u4e32 \u3002 \u4f46 Pydantic \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u6570\u636e\u7c7b\u578b\u3002 \u4e5f\u5c31\u662f\u8bf4\uff0c\u5373\u4f7f API \u5ba2\u6237\u7aef\u53ea\u80fd\u53d1\u9001\u5b57\u7b26\u4e32\u7c7b\u578b\u7684\u952e\uff0c\u4f46\u53ea\u8981\u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ea\u5305\u542b\u6574\u6570\uff0cPydantic \u5c31\u80fd\u8f6c\u6362\u5e76\u6821\u9a8c\u8be5\u952e\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5b57\u5178 weights \u7684\u952e\u7684\u7c7b\u578b\u5c31\u662f int \uff0c\u800c\u503c\u7684\u7c7b\u578b\u5219\u4e3a float \u3002","title":"\u7531\u5b57\u5178\u6784\u6210\u7684\u8bf7\u6c42\u4f53"},{"location":"tutorial/body-nested-models/#_11","text":"FastAPI \u62e5\u6709 Pydantic \u6a21\u578b\u7684\u9ad8\u5ea6\u7075\u6d3b\u6027\uff0c\u8fd8\u80fd\u8ba9\u4ee3\u7801\u66f4\u52a0\u7b80\u77ed\u3001\u4f18\u96c5\u3002 \u5e76\u4e14\u652f\u6301\u4ee5\u4e0b\u529f\u80fd\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff08\u65e0\u5904\u4e0d\u5728\u7684\u81ea\u52a8\u8865\u5168\uff01\uff09 \u6570\u636e\u8f6c\u6362\uff08\u5373\u89e3\u6790/\u5e8f\u5217\u5316\uff09 \u6570\u636e\u6821\u9a8c \u6982\u56fe\u5b58\u6863 API \u6587\u6863","title":"\u5c0f\u7ed3"},{"location":"tutorial/body-updates/","text":"\u8bf7\u6c42\u4f53 - \u66f4\u65b0\u6570\u636e \u00b6 \u7528 PUT \u66f4\u65b0\u6570\u636e \u00b6 \u66f4\u65b0\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 HTTP PUT \u3002 \u628a\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3a JSON \u6570\u636e\uff08\u4f8b\u5982\uff0c\u4f7f\u7528 NoSQL \u6570\u636e\u5e93\u65f6\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u3002\u4f8b\u5982\uff0c\u628a datetime \u8f6c\u6362\u4e3a str \u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded PUT \u7528\u4e8e\u63a5\u6536\u66ff\u6362\u73b0\u6709\u6570\u636e\u7684\u6570\u636e\u3002 \u5173\u4e8e\u66f4\u65b0\u6570\u636e\u7684\u8b66\u544a \u00b6 \u7528 PUT \u628a\u6570\u636e\u9879 bar \u66f4\u65b0\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u65f6\uff1a { \"name\" : \"Barz\" , \"price\" : 3 , \"description\" : None , } \u56e0\u4e3a\u4e0a\u8ff0\u6570\u636e\u672a\u5305\u542b\u5df2\u5b58\u50a8\u7684\u5c5e\u6027 \"tax\": 20.2 \uff0c\u65b0\u7684\u8f93\u5165\u6a21\u578b\u4f1a\u628a \"tax\": 10.5 \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u672c\u6b21\u64cd\u4f5c\u4f1a\u628a tax \u7684\u503c \u66f4\u65b0 \u4e3a 10.5 \u3002 \u7528 PATCH \u8fdb\u884c\u90e8\u5206\u66f4\u65b0 \u00b6 HTTP PATCH \u64cd\u4f5c\u7528\u4e8e\u66f4\u65b0 \u90e8\u5206 \u6570\u636e\u3002 \u5373\uff0c\u53ea\u53d1\u9001\u66f4\u65b0\u6570\u636e\uff0c\u5176\u4f59\u6570\u636e\u4fdd\u6301\u4e0d\u53d8\u3002 \u7b14\u8bb0 PATCH \u6ca1\u6709 PUT \u6709\u540d\uff0c\u4e5f\u600e\u4e48\u4e0d\u5e38\u7528\u3002 \u5f88\u591a\u4eba\u751a\u81f3\u53ea\u7528 PUT \u5b9e\u73b0\u90e8\u5206\u66f4\u65b0\u3002 FastAPI \u5bf9\u6b64\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5 \u968f\u610f \u4e92\u6362\u4f7f\u7528\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002 \u4f46\u672c\u6307\u5357\u4e5f\u4f1a\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u64cd\u4f5c\u7684\u7528\u9014\u3002 \u4f7f\u7528 Pydantic \u7684 exclude_unset \u53c2\u6570 \u00b6 \u66f4\u65b0\u90e8\u5206\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5728 Pydantic \u6a21\u578b\u7684 .dict() \u4e2d\u4f7f\u7528 exclude_unset \u53c2\u6570\u3002 \u6bd4\u5982\uff0c item.dict(exclude_unset=True) \u3002 \u8fd9\u6bb5\u4ee3\u7801\u751f\u6210\u7684 dict \u53ea\u5305\u542b\u521b\u5efa item \u6a21\u578b\u65f6\u663e\u5f0f\u8bbe\u7f6e\u7684\u6570\u636e\uff0c\u4e0d\u5305\u542b\u9ed8\u8ba4\u503c\u3002 \u7136\u540e\uff0c\u518d\u7528\u5b83\u751f\u6210\u4e00\u4e2a\u53ea\u542b\u5df2\u8bbe\u7f6e\uff08\u5728\u8bf7\u6c42\u4e2d\u6240\u53d1\u9001\uff09\u6570\u636e\uff0c\u4e14\u7701\u7565\u4e86\u9ed8\u8ba4\u503c\u7684 dict \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u4f7f\u7528 Pydantic \u7684 update \u53c2\u6570 \u00b6 \u63a5\u4e0b\u6765\uff0c\u7528 .copy() \u4e3a\u5df2\u6709\u6a21\u578b\u521b\u5efa\u8c03\u7528 update \u53c2\u6570\u7684\u526f\u672c\uff0c\u8be5\u53c2\u6570\u4e3a\u5305\u542b\u66f4\u65b0\u6570\u636e\u7684 dict \u3002 \u4f8b\u5982\uff0c stored_item_model.copy(update=update_data) \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u66f4\u65b0\u90e8\u5206\u6570\u636e\u5c0f\u7ed3 \u00b6 \u7b80\u800c\u8a00\u4e4b\uff0c\u66f4\u65b0\u90e8\u5206\u6570\u636e\u5e94\uff1a \u4f7f\u7528 PATCH \uff0c\u800c\u4e0d\u662f PUT \uff08\u53ef\u9009\uff0c\u4e5f\u53ef\u4ee5\u7528 PUT \uff09 \u63d0\u53d6\u5b58\u50a8\u7684\u6570\u636e \u628a\u6570\u636e\u653e\u5165 Pydantic \u6a21\u578b \uff08\u4f7f\u7528 exclude_unset \u53c2\u6570\uff09\u751f\u6210\u4e0d\u542b\u8f93\u5165\u6a21\u578b\u9ed8\u8ba4\u503c\u7684 dict \u53ea\u66f4\u65b0\u7528\u6237\u8bbe\u7f6e\u8fc7\u7684\u503c\uff0c\u4e0d\u7528\u6a21\u578b\u4e2d\u7684\u9ed8\u8ba4\u503c\u8986\u76d6\u5df2\u5b58\u50a8\u7684\u503c \uff08\u4f7f\u7528 update \u53c2\u6570\uff09\u4e3a\u5df2\u5b58\u50a8\u7684\u6a21\u578b\u521b\u5efa\u526f\u672c\uff0c\u7528\u63a5\u6536\u7684\u6570\u636e\u66f4\u65b0\u5176\u5c5e\u6027 \u628a\u6a21\u578b\u526f\u672c\u8f6c\u6362\u4e3a\u53ef\u5b58\u5165\u6570\u636e\u5e93\u7684\u5f62\u5f0f\uff08\u6bd4\u5982\uff0c\u4f7f\u7528 jsonable_encoder \uff09 \u8fd9\u79cd\u65b9\u5f0f\u4e0e Pydantic \u6a21\u578b\u7684 .dict() \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u80fd\u786e\u4fdd\u628a\u503c\u8f6c\u6362\u4e3a\u9002\u914d JSON \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c \u628a datetime \u8f6c\u6362\u4e3a str \u628a\u6570\u636e\u4fdd\u5b58\u81f3\u6570\u636e\u5e93 \u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6a21\u578b Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u63d0\u793a \u5b9e\u9645\u4e0a\uff0cHTTP PUT \u4e5f\u53ef\u4ee5\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u4f46\u56e0\u4e3a PATCH \u5c31\u662f\u4e3a\u4e86\u8fd9\u79cd\u7528\u4f8b\u800c\u521b\u5efa\u7684\uff0c\u56e0\u6b64\u4ee5\u8be5\u64cd\u4f5c\u4e3a\u4f8b\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u8f93\u5165\u6a21\u578b\u4ecd\u9700\u9a8c\u8bc1\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5e0c\u671b\u63a5\u6536\u7684\u90e8\u5206\u66f4\u65b0\u6570\u636e\u53ef\u4ee5\u7701\u7565\u5176\u4ed6\u6240\u6709\u5c5e\u6027\uff0c\u5219\u8981\u628a\u6a21\u578b\u4e2d\u6240\u6709\u7684\u5c5e\u6027\u6807\u8bb0\u4e3a\u53ef\u9009\uff08\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216 None \uff09\u3002 \u4e3a\u4e86\u533a\u5206\u7528\u4e8e \u66f4\u65b0 \u6240\u6709\u53ef\u9009\u503c\u7684\u6a21\u578b\u4e0e\u7528\u4e8e \u521b\u5efa \u5305\u542b\u5fc5\u9009\u503c\u7684\u6a21\u578b\uff0c\u8bf7\u53c2\u7167 \u66f4\u591a\u6a21\u578b \u4e00\u7ae0\u4e2d\u7684\u601d\u8def\u3002","title":"\u8bf7\u6c42\u4f53 - \u66f4\u65b0\u6570\u636e"},{"location":"tutorial/body-updates/#-","text":"","title":"\u8bf7\u6c42\u4f53 - \u66f4\u65b0\u6570\u636e"},{"location":"tutorial/body-updates/#put","text":"\u66f4\u65b0\u6570\u636e\u53ef\u4ee5\u4f7f\u7528 HTTP PUT \u3002 \u628a\u8f93\u5165\u6570\u636e\u8f6c\u6362\u4e3a JSON \u6570\u636e\uff08\u4f8b\u5982\uff0c\u4f7f\u7528 NoSQL \u6570\u636e\u5e93\u65f6\uff09\uff0c\u53ef\u4ee5\u4f7f\u7528 jsonable_encoder \u3002\u4f8b\u5982\uff0c\u628a datetime \u8f6c\u6362\u4e3a str \u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . put ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): update_item_encoded = jsonable_encoder ( item ) items [ item_id ] = update_item_encoded return update_item_encoded PUT \u7528\u4e8e\u63a5\u6536\u66ff\u6362\u73b0\u6709\u6570\u636e\u7684\u6570\u636e\u3002","title":"\u7528 PUT \u66f4\u65b0\u6570\u636e"},{"location":"tutorial/body-updates/#_1","text":"\u7528 PUT \u628a\u6570\u636e\u9879 bar \u66f4\u65b0\u4e3a\u4ee5\u4e0b\u5185\u5bb9\u65f6\uff1a { \"name\" : \"Barz\" , \"price\" : 3 , \"description\" : None , } \u56e0\u4e3a\u4e0a\u8ff0\u6570\u636e\u672a\u5305\u542b\u5df2\u5b58\u50a8\u7684\u5c5e\u6027 \"tax\": 20.2 \uff0c\u65b0\u7684\u8f93\u5165\u6a21\u578b\u4f1a\u628a \"tax\": 10.5 \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u56e0\u6b64\uff0c\u672c\u6b21\u64cd\u4f5c\u4f1a\u628a tax \u7684\u503c \u66f4\u65b0 \u4e3a 10.5 \u3002","title":"\u5173\u4e8e\u66f4\u65b0\u6570\u636e\u7684\u8b66\u544a"},{"location":"tutorial/body-updates/#patch","text":"HTTP PATCH \u64cd\u4f5c\u7528\u4e8e\u66f4\u65b0 \u90e8\u5206 \u6570\u636e\u3002 \u5373\uff0c\u53ea\u53d1\u9001\u66f4\u65b0\u6570\u636e\uff0c\u5176\u4f59\u6570\u636e\u4fdd\u6301\u4e0d\u53d8\u3002 \u7b14\u8bb0 PATCH \u6ca1\u6709 PUT \u6709\u540d\uff0c\u4e5f\u600e\u4e48\u4e0d\u5e38\u7528\u3002 \u5f88\u591a\u4eba\u751a\u81f3\u53ea\u7528 PUT \u5b9e\u73b0\u90e8\u5206\u66f4\u65b0\u3002 FastAPI \u5bf9\u6b64\u6ca1\u6709\u4efb\u4f55\u9650\u5236\uff0c\u53ef\u4ee5 \u968f\u610f \u4e92\u6362\u4f7f\u7528\u8fd9\u4e24\u79cd\u64cd\u4f5c\u3002 \u4f46\u672c\u6307\u5357\u4e5f\u4f1a\u5206\u522b\u4ecb\u7ecd\u8fd9\u4e24\u79cd\u64cd\u4f5c\u7684\u7528\u9014\u3002","title":"\u7528 PATCH \u8fdb\u884c\u90e8\u5206\u66f4\u65b0"},{"location":"tutorial/body-updates/#pydantic-exclude_unset","text":"\u66f4\u65b0\u90e8\u5206\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5728 Pydantic \u6a21\u578b\u7684 .dict() \u4e2d\u4f7f\u7528 exclude_unset \u53c2\u6570\u3002 \u6bd4\u5982\uff0c item.dict(exclude_unset=True) \u3002 \u8fd9\u6bb5\u4ee3\u7801\u751f\u6210\u7684 dict \u53ea\u5305\u542b\u521b\u5efa item \u6a21\u578b\u65f6\u663e\u5f0f\u8bbe\u7f6e\u7684\u6570\u636e\uff0c\u4e0d\u5305\u542b\u9ed8\u8ba4\u503c\u3002 \u7136\u540e\uff0c\u518d\u7528\u5b83\u751f\u6210\u4e00\u4e2a\u53ea\u542b\u5df2\u8bbe\u7f6e\uff08\u5728\u8bf7\u6c42\u4e2d\u6240\u53d1\u9001\uff09\u6570\u636e\uff0c\u4e14\u7701\u7565\u4e86\u9ed8\u8ba4\u503c\u7684 dict \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item","title":"\u4f7f\u7528 Pydantic \u7684 exclude_unset \u53c2\u6570"},{"location":"tutorial/body-updates/#pydantic-update","text":"\u63a5\u4e0b\u6765\uff0c\u7528 .copy() \u4e3a\u5df2\u6709\u6a21\u578b\u521b\u5efa\u8c03\u7528 update \u53c2\u6570\u7684\u526f\u672c\uff0c\u8be5\u53c2\u6570\u4e3a\u5305\u542b\u66f4\u65b0\u6570\u636e\u7684 dict \u3002 \u4f8b\u5982\uff0c stored_item_model.copy(update=update_data) \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item","title":"\u4f7f\u7528 Pydantic \u7684 update \u53c2\u6570"},{"location":"tutorial/body-updates/#_2","text":"\u7b80\u800c\u8a00\u4e4b\uff0c\u66f4\u65b0\u90e8\u5206\u6570\u636e\u5e94\uff1a \u4f7f\u7528 PATCH \uff0c\u800c\u4e0d\u662f PUT \uff08\u53ef\u9009\uff0c\u4e5f\u53ef\u4ee5\u7528 PUT \uff09 \u63d0\u53d6\u5b58\u50a8\u7684\u6570\u636e \u628a\u6570\u636e\u653e\u5165 Pydantic \u6a21\u578b \uff08\u4f7f\u7528 exclude_unset \u53c2\u6570\uff09\u751f\u6210\u4e0d\u542b\u8f93\u5165\u6a21\u578b\u9ed8\u8ba4\u503c\u7684 dict \u53ea\u66f4\u65b0\u7528\u6237\u8bbe\u7f6e\u8fc7\u7684\u503c\uff0c\u4e0d\u7528\u6a21\u578b\u4e2d\u7684\u9ed8\u8ba4\u503c\u8986\u76d6\u5df2\u5b58\u50a8\u7684\u503c \uff08\u4f7f\u7528 update \u53c2\u6570\uff09\u4e3a\u5df2\u5b58\u50a8\u7684\u6a21\u578b\u521b\u5efa\u526f\u672c\uff0c\u7528\u63a5\u6536\u7684\u6570\u636e\u66f4\u65b0\u5176\u5c5e\u6027 \u628a\u6a21\u578b\u526f\u672c\u8f6c\u6362\u4e3a\u53ef\u5b58\u5165\u6570\u636e\u5e93\u7684\u5f62\u5f0f\uff08\u6bd4\u5982\uff0c\u4f7f\u7528 jsonable_encoder \uff09 \u8fd9\u79cd\u65b9\u5f0f\u4e0e Pydantic \u6a21\u578b\u7684 .dict() \u65b9\u6cd5\u7c7b\u4f3c\uff0c\u4f46\u80fd\u786e\u4fdd\u628a\u503c\u8f6c\u6362\u4e3a\u9002\u914d JSON \u7684\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c \u628a datetime \u8f6c\u6362\u4e3a str \u628a\u6570\u636e\u4fdd\u5b58\u81f3\u6570\u636e\u5e93 \u8fd4\u56de\u66f4\u65b0\u540e\u7684\u6a21\u578b Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : Union [ str , None ] = None description : Union [ str , None ] = None price : Union [ float , None ] = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str | None = None description : str | None = None price : float | None = None tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_item ( item_id : str ): return items [ item_id ] @app . patch ( \"/items/ {item_id} \" , response_model = Item ) async def update_item ( item_id : str , item : Item ): stored_item_data = items [ item_id ] stored_item_model = Item ( ** stored_item_data ) update_data = item . dict ( exclude_unset = True ) updated_item = stored_item_model . copy ( update = update_data ) items [ item_id ] = jsonable_encoder ( updated_item ) return updated_item \u63d0\u793a \u5b9e\u9645\u4e0a\uff0cHTTP PUT \u4e5f\u53ef\u4ee5\u5b8c\u6210\u76f8\u540c\u7684\u64cd\u4f5c\u3002 \u4f46\u56e0\u4e3a PATCH \u5c31\u662f\u4e3a\u4e86\u8fd9\u79cd\u7528\u4f8b\u800c\u521b\u5efa\u7684\uff0c\u56e0\u6b64\u4ee5\u8be5\u64cd\u4f5c\u4e3a\u4f8b\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u8f93\u5165\u6a21\u578b\u4ecd\u9700\u9a8c\u8bc1\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5e0c\u671b\u63a5\u6536\u7684\u90e8\u5206\u66f4\u65b0\u6570\u636e\u53ef\u4ee5\u7701\u7565\u5176\u4ed6\u6240\u6709\u5c5e\u6027\uff0c\u5219\u8981\u628a\u6a21\u578b\u4e2d\u6240\u6709\u7684\u5c5e\u6027\u6807\u8bb0\u4e3a\u53ef\u9009\uff08\u4f7f\u7528\u9ed8\u8ba4\u503c\u6216 None \uff09\u3002 \u4e3a\u4e86\u533a\u5206\u7528\u4e8e \u66f4\u65b0 \u6240\u6709\u53ef\u9009\u503c\u7684\u6a21\u578b\u4e0e\u7528\u4e8e \u521b\u5efa \u5305\u542b\u5fc5\u9009\u503c\u7684\u6a21\u578b\uff0c\u8bf7\u53c2\u7167 \u66f4\u591a\u6a21\u578b \u4e00\u7ae0\u4e2d\u7684\u601d\u8def\u3002","title":"\u66f4\u65b0\u90e8\u5206\u6570\u636e\u5c0f\u7ed3"},{"location":"tutorial/body/","text":"\u8bf7\u6c42\u4f53 \u00b6 FastAPI \u4f7f\u7528 \u8bf7\u6c42\u4f53 \u4ece\u5ba2\u6237\u7aef\uff08\u4f8b\u5982\u6d4f\u89c8\u5668\uff09\u5411 API \u53d1\u9001\u6570\u636e\u3002 \u8bf7\u6c42\u4f53 \u662f\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9 API \u7684\u6570\u636e\u3002 \u54cd\u5e94\u4f53 \u662f API \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002 API \u57fa\u672c\u4e0a\u80af\u5b9a\u8981\u53d1\u9001 \u54cd\u5e94\u4f53 \uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u4e0d\u4e00\u5b9a\u53d1\u9001 \u8bf7\u6c42\u4f53 \u3002 \u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e \u8bf7\u6c42\u4f53 \uff0c\u80fd\u5145\u5206\u5229\u7528\u5b83\u7684\u529f\u80fd\u548c\u4f18\u70b9\u3002 \u8bf4\u660e \u53d1\u9001\u6570\u636e\u4f7f\u7528 POST \uff08\u6700\u5e38\u7528\uff09\u3001 PUT \u3001 DELETE \u3001 PATCH \u7b49\u64cd\u4f5c\u3002 \u89c4\u8303\u4e2d\u6ca1\u6709\u5b9a\u4e49\u4f7f\u7528 GET \u53d1\u9001\u8bf7\u6c42\u4f53\u7684\u64cd\u4f5c\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\uff0cFastAPI \u4e5f\u652f\u6301\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u4ec5\u7528\u4e8e\u975e\u5e38\u590d\u6742\u6216\u6781\u7aef\u7684\u7528\u4f8b\u3002 \u6211\u4eec\u4e0d\u5efa\u8bae\u4f7f\u7528 GET \uff0c\u56e0\u6b64\uff0c\u5728 Swagger UI \u4ea4\u4e92\u6587\u6863\u4e2d\u4e0d\u4f1a\u663e\u793a\u6709\u5173 GET \u7684\u5185\u5bb9\uff0c\u800c\u4e14\u4ee3\u7406\u534f\u8bae\u4e5f\u4e0d\u4e00\u5b9a\u652f\u6301 GET \u3002 \u5bfc\u5165 Pydantic \u7684 BaseModel \u00b6 \u9996\u5148\uff0c\u4ece pydantic \u4e2d\u5bfc\u5165 BaseModel \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u521b\u5efa\u6570\u636e\u6a21\u578b \u00b6 \u628a\u6570\u636e\u6a21\u578b\u58f0\u660e\u4e3a\u7ee7\u627f BaseModel \u7684\u7c7b\u3002 \u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u58f0\u660e\u6240\u6709\u5c5e\u6027\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u4e0e\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u4e00\u6837\uff0c\u5305\u542b\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5c5e\u6027\u662f\u53ef\u9009\u7684\uff0c\u5426\u5219\u5c31\u662f\u5fc5\u9009\u7684\u3002\u9ed8\u8ba4\u503c\u4e3a None \u7684\u6a21\u578b\u5c5e\u6027\u4e5f\u662f\u53ef\u9009\u7684\u3002 \u4f8b\u5982\uff0c\u4e0a\u8ff0\u6a21\u578b\u58f0\u660e\u5982\u4e0b JSON \u5bf9\u8c61 \uff08\u5373 Python \u5b57\u5178 \uff09\uff1a { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } \u2026\u2026\u7531\u4e8e description \u548c tax \u662f\u53ef\u9009\u7684\uff08\u9ed8\u8ba4\u503c\u4e3a None \uff09\uff0c\u4e0b\u9762\u7684 JSON \u5bf9\u8c61 \u4e5f\u6709\u6548\uff1a { \"name\" : \"Foo\" , \"price\" : 45.2 } \u58f0\u660e\u8bf7\u6c42\u4f53\u53c2\u6570 \u00b6 \u4f7f\u7528\u4e0e\u58f0\u660e\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u8bf7\u6c42\u4f53\uff0c\u628a\u8bf7\u6c42\u4f53\u6dfb\u52a0\u81f3 \u8def\u5f84\u64cd\u4f5c \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u2026\u2026\u6b64\u5904\uff0c\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u7c7b\u578b\u4e3a Item \u6a21\u578b\u3002 \u7ed3\u8bba \u00b6 \u4ec5\u4f7f\u7528 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u5c31\u53ef\u4ee5\uff1a \u4ee5 JSON \u5f62\u5f0f\u8bfb\u53d6\u8bf7\u6c42\u4f53 \uff08\u5728\u5fc5\u8981\u65f6\uff09\u628a\u8bf7\u6c42\u4f53\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u7c7b\u578b \u6821\u9a8c\u6570\u636e\uff1a \u6570\u636e\u65e0\u6548\u65f6\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u5e76\u6307\u51fa\u9519\u8bef\u6570\u636e\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u5185\u5bb9 \u628a\u63a5\u6536\u7684\u6570\u636e\u8d4b\u503c\u7ed9\u53c2\u6570 item \u628a\u51fd\u6570\u4e2d\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a Item \uff0c\u8fd8\u80fd\u83b7\u5f97\u4ee3\u7801\u8865\u5168\u7b49\u7f16\u8f91\u5668\u652f\u6301 \u4e3a\u6a21\u578b\u751f\u6210 JSON Schema \uff0c\u5728\u9879\u76ee\u4e2d\u6240\u9700\u7684\u4f4d\u7f6e\u4f7f\u7528 \u8fd9\u4e9b\u6982\u56fe\u662f OpenAPI \u6982\u56fe\u7684\u90e8\u4ef6\uff0c\u7528\u4e8e API \u6587\u6863 UI API \u6587\u6863 \u00b6 Pydantic \u6a21\u578b\u7684 JSON \u6982\u56fe\u662f OpenAPI \u751f\u6210\u7684\u6982\u56fe\u90e8\u4ef6\uff0c\u53ef\u5728 API \u6587\u6863\u4e2d\u663e\u793a\uff1a \u800c\u4e14\uff0c\u8fd8\u4f1a\u7528\u4e8e API \u6587\u6863\u4e2d\u4f7f\u7528\u4e86\u6982\u56fe\u7684 \u8def\u5f84\u64cd\u4f5c \uff1a \u7f16\u8f91\u5668\u652f\u6301 \u00b6 \u5728\u7f16\u8f91\u5668\u4e2d\uff0c\u51fd\u6570\u5185\u90e8\u5747\u53ef\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u3001\u4ee3\u7801\u8865\u5168\uff08\u5982\u679c\u63a5\u6536\u7684\u4e0d\u662f Pydantic \u6a21\u578b\uff0c\u800c\u662f \u5b57\u5178 \uff0c\u5c31\u6ca1\u6709\u8fd9\u6837\u7684\u652f\u6301\uff09\uff1a \u8fd8\u652f\u6301\u68c0\u67e5\u9519\u8bef\u7684\u7c7b\u578b\u64cd\u4f5c\uff1a \u8fd9\u5e76\u975e\u5076\u7136\uff0c\u6574\u4e2a FastAPI \u6846\u67b6\u90fd\u662f\u56f4\u7ed5\u8fd9\u79cd\u601d\u8def\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u3002 \u5e76\u4e14\uff0c\u5728 FastAPI \u7684\u8bbe\u8ba1\u9636\u6bb5\uff0c\u6211\u4eec\u5c31\u5df2\u7ecf\u8fdb\u884c\u4e86\u5168\u9762\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd FastAPI \u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u7f16\u8f91\u5668\u7684\u652f\u6301\u3002 \u6211\u4eec\u8fd8\u6539\u8fdb\u4e86 Pydantic\uff0c\u8ba9\u5b83\u4e5f\u652f\u6301\u8fd9\u4e9b\u529f\u80fd\u3002 \u867d\u7136\u4e0a\u9762\u7684\u622a\u56fe\u53d6\u81ea Visual Studio Code \u3002 \u4f46 PyCharm \u548c\u5927\u591a\u6570 Python \u7f16\u8f91\u5668\u4e5f\u652f\u6301\u540c\u6837\u7684\u529f\u80fd\uff1a \u63d0\u793a \u4f7f\u7528 PyCharm \u7f16\u8f91\u5668\u65f6\uff0c\u63a8\u8350\u5b89\u88c5 Pydantic PyCharm \u63d2\u4ef6 \u3002 \u8be5\u63d2\u4ef6\u7528\u4e8e\u5b8c\u5584 PyCharm \u5bf9 Pydantic \u6a21\u578b\u7684\u652f\u6301\uff0c\u4f18\u5316\u7684\u529f\u80fd\u5982\u4e0b\uff1a \u81ea\u52a8\u8865\u5168 \u7c7b\u578b\u68c0\u67e5 \u4ee3\u7801\u91cd\u6784 \u67e5\u627e \u4ee3\u7801\u5ba1\u67e5 \u4f7f\u7528\u6a21\u578b \u00b6 \u5728 \u8def\u5f84\u64cd\u4f5c \u51fd\u6570\u5185\u90e8\u76f4\u63a5\u8bbf\u95ee\u6a21\u578b\u5bf9\u8c61\u7684\u5c5e\u6027\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict \u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 \u00b6 FastAPI \u652f\u6301\u540c\u65f6\u58f0\u660e\u8def\u5f84\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u3002 FastAPI \u80fd\u8bc6\u522b\u4e0e \u8def\u5f84\u53c2\u6570 \u5339\u914d\u7684\u51fd\u6570\u53c2\u6570\uff0c\u8fd8\u80fd\u8bc6\u522b\u4ece \u8bf7\u6c42\u4f53 \u4e2d\u83b7\u53d6\u7684\u7c7b\u578b\u4e3a Pydantic \u6a21\u578b\u7684\u51fd\u6570\u53c2\u6570\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} \u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 + \u67e5\u8be2\u53c2\u6570 \u00b6 FastAPI \u652f\u6301\u540c\u65f6\u58f0\u660e \u8bf7\u6c42\u4f53 \u3001 \u8def\u5f84\u53c2\u6570 \u548c \u67e5\u8be2\u53c2\u6570 \u3002 FastAPI \u80fd\u591f\u6b63\u786e\u8bc6\u522b\u8fd9\u4e09\u79cd\u53c2\u6570\uff0c\u5e76\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u83b7\u53d6\u6570\u636e\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : Union [ str , None ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : str | None = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \u51fd\u6570\u53c2\u6570\u6309\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\u8bc6\u522b\uff1a \u8def\u5f84 \u4e2d\u58f0\u660e\u4e86\u76f8\u540c\u53c2\u6570\u7684\u53c2\u6570\uff0c\u662f\u8def\u5f84\u53c2\u6570 \u7c7b\u578b\u662f\uff08 int \u3001 float \u3001 str \u3001 bool \u7b49\uff09 \u5355\u7c7b\u578b \u7684\u53c2\u6570\uff0c\u662f \u67e5\u8be2 \u53c2\u6570 \u7c7b\u578b\u662f Pydantic \u6a21\u578b \u7684\u53c2\u6570\uff0c\u662f \u8bf7\u6c42\u4f53 \u7b14\u8bb0 \u56e0\u4e3a\u9ed8\u8ba4\u503c\u662f None \uff0c FastAPI \u4f1a\u628a q \u5f53\u4f5c\u53ef\u9009\u53c2\u6570\u3002 FastAPI \u4e0d\u4f7f\u7528 Optional[str] \u4e2d\u7684 Optional \uff0c \u4f46 Optional \u53ef\u4ee5\u8ba9\u7f16\u8f91\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\uff0c\u5e76\u68c0\u6d4b\u9519\u8bef\u3002 \u4e0d\u4f7f\u7528 Pydantic \u00b6 \u5373\u4fbf\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u4e5f\u80fd\u4f7f\u7528 Body \u53c2\u6570\u3002\u8be6\u89c1 \u8bf7\u6c42\u4f53 - \u591a\u53c2\u6570\uff1a\u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u503c \u3002","title":"\u8bf7\u6c42\u4f53"},{"location":"tutorial/body/#_1","text":"FastAPI \u4f7f\u7528 \u8bf7\u6c42\u4f53 \u4ece\u5ba2\u6237\u7aef\uff08\u4f8b\u5982\u6d4f\u89c8\u5668\uff09\u5411 API \u53d1\u9001\u6570\u636e\u3002 \u8bf7\u6c42\u4f53 \u662f\u5ba2\u6237\u7aef\u53d1\u9001\u7ed9 API \u7684\u6570\u636e\u3002 \u54cd\u5e94\u4f53 \u662f API \u53d1\u9001\u7ed9\u5ba2\u6237\u7aef\u7684\u6570\u636e\u3002 API \u57fa\u672c\u4e0a\u80af\u5b9a\u8981\u53d1\u9001 \u54cd\u5e94\u4f53 \uff0c\u4f46\u662f\u5ba2\u6237\u7aef\u4e0d\u4e00\u5b9a\u53d1\u9001 \u8bf7\u6c42\u4f53 \u3002 \u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e \u8bf7\u6c42\u4f53 \uff0c\u80fd\u5145\u5206\u5229\u7528\u5b83\u7684\u529f\u80fd\u548c\u4f18\u70b9\u3002 \u8bf4\u660e \u53d1\u9001\u6570\u636e\u4f7f\u7528 POST \uff08\u6700\u5e38\u7528\uff09\u3001 PUT \u3001 DELETE \u3001 PATCH \u7b49\u64cd\u4f5c\u3002 \u89c4\u8303\u4e2d\u6ca1\u6709\u5b9a\u4e49\u4f7f\u7528 GET \u53d1\u9001\u8bf7\u6c42\u4f53\u7684\u64cd\u4f5c\uff0c\u4f46\u4e0d\u7ba1\u600e\u6837\uff0cFastAPI \u4e5f\u652f\u6301\u8fd9\u79cd\u65b9\u5f0f\uff0c\u53ea\u4e0d\u8fc7\u4ec5\u7528\u4e8e\u975e\u5e38\u590d\u6742\u6216\u6781\u7aef\u7684\u7528\u4f8b\u3002 \u6211\u4eec\u4e0d\u5efa\u8bae\u4f7f\u7528 GET \uff0c\u56e0\u6b64\uff0c\u5728 Swagger UI \u4ea4\u4e92\u6587\u6863\u4e2d\u4e0d\u4f1a\u663e\u793a\u6709\u5173 GET \u7684\u5185\u5bb9\uff0c\u800c\u4e14\u4ee3\u7406\u534f\u8bae\u4e5f\u4e0d\u4e00\u5b9a\u652f\u6301 GET \u3002","title":"\u8bf7\u6c42\u4f53"},{"location":"tutorial/body/#pydantic-basemodel","text":"\u9996\u5148\uff0c\u4ece pydantic \u4e2d\u5bfc\u5165 BaseModel \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item","title":"\u5bfc\u5165 Pydantic \u7684 BaseModel"},{"location":"tutorial/body/#_2","text":"\u628a\u6570\u636e\u6a21\u578b\u58f0\u660e\u4e3a\u7ee7\u627f BaseModel \u7684\u7c7b\u3002 \u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u58f0\u660e\u6240\u6709\u5c5e\u6027\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u4e0e\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u4e00\u6837\uff0c\u5305\u542b\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5c5e\u6027\u662f\u53ef\u9009\u7684\uff0c\u5426\u5219\u5c31\u662f\u5fc5\u9009\u7684\u3002\u9ed8\u8ba4\u503c\u4e3a None \u7684\u6a21\u578b\u5c5e\u6027\u4e5f\u662f\u53ef\u9009\u7684\u3002 \u4f8b\u5982\uff0c\u4e0a\u8ff0\u6a21\u578b\u58f0\u660e\u5982\u4e0b JSON \u5bf9\u8c61 \uff08\u5373 Python \u5b57\u5178 \uff09\uff1a { \"name\" : \"Foo\" , \"description\" : \"An optional description\" , \"price\" : 45.2 , \"tax\" : 3.5 } \u2026\u2026\u7531\u4e8e description \u548c tax \u662f\u53ef\u9009\u7684\uff08\u9ed8\u8ba4\u503c\u4e3a None \uff09\uff0c\u4e0b\u9762\u7684 JSON \u5bf9\u8c61 \u4e5f\u6709\u6548\uff1a { \"name\" : \"Foo\" , \"price\" : 45.2 }","title":"\u521b\u5efa\u6570\u636e\u6a21\u578b"},{"location":"tutorial/body/#_3","text":"\u4f7f\u7528\u4e0e\u58f0\u660e\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u58f0\u660e\u8bf7\u6c42\u4f53\uff0c\u628a\u8bf7\u6c42\u4f53\u6dfb\u52a0\u81f3 \u8def\u5f84\u64cd\u4f5c \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u2026\u2026\u6b64\u5904\uff0c\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u7c7b\u578b\u4e3a Item \u6a21\u578b\u3002","title":"\u58f0\u660e\u8bf7\u6c42\u4f53\u53c2\u6570"},{"location":"tutorial/body/#_4","text":"\u4ec5\u4f7f\u7528 Python \u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u5c31\u53ef\u4ee5\uff1a \u4ee5 JSON \u5f62\u5f0f\u8bfb\u53d6\u8bf7\u6c42\u4f53 \uff08\u5728\u5fc5\u8981\u65f6\uff09\u628a\u8bf7\u6c42\u4f53\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u7c7b\u578b \u6821\u9a8c\u6570\u636e\uff1a \u6570\u636e\u65e0\u6548\u65f6\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\uff0c\u5e76\u6307\u51fa\u9519\u8bef\u6570\u636e\u7684\u786e\u5207\u4f4d\u7f6e\u548c\u5185\u5bb9 \u628a\u63a5\u6536\u7684\u6570\u636e\u8d4b\u503c\u7ed9\u53c2\u6570 item \u628a\u51fd\u6570\u4e2d\u8bf7\u6c42\u4f53\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a Item \uff0c\u8fd8\u80fd\u83b7\u5f97\u4ee3\u7801\u8865\u5168\u7b49\u7f16\u8f91\u5668\u652f\u6301 \u4e3a\u6a21\u578b\u751f\u6210 JSON Schema \uff0c\u5728\u9879\u76ee\u4e2d\u6240\u9700\u7684\u4f4d\u7f6e\u4f7f\u7528 \u8fd9\u4e9b\u6982\u56fe\u662f OpenAPI \u6982\u56fe\u7684\u90e8\u4ef6\uff0c\u7528\u4e8e API \u6587\u6863 UI","title":"\u7ed3\u8bba"},{"location":"tutorial/body/#api","text":"Pydantic \u6a21\u578b\u7684 JSON \u6982\u56fe\u662f OpenAPI \u751f\u6210\u7684\u6982\u56fe\u90e8\u4ef6\uff0c\u53ef\u5728 API \u6587\u6863\u4e2d\u663e\u793a\uff1a \u800c\u4e14\uff0c\u8fd8\u4f1a\u7528\u4e8e API \u6587\u6863\u4e2d\u4f7f\u7528\u4e86\u6982\u56fe\u7684 \u8def\u5f84\u64cd\u4f5c \uff1a","title":"API \u6587\u6863"},{"location":"tutorial/body/#_5","text":"\u5728\u7f16\u8f91\u5668\u4e2d\uff0c\u51fd\u6570\u5185\u90e8\u5747\u53ef\u4f7f\u7528\u7c7b\u578b\u63d0\u793a\u3001\u4ee3\u7801\u8865\u5168\uff08\u5982\u679c\u63a5\u6536\u7684\u4e0d\u662f Pydantic \u6a21\u578b\uff0c\u800c\u662f \u5b57\u5178 \uff0c\u5c31\u6ca1\u6709\u8fd9\u6837\u7684\u652f\u6301\uff09\uff1a \u8fd8\u652f\u6301\u68c0\u67e5\u9519\u8bef\u7684\u7c7b\u578b\u64cd\u4f5c\uff1a \u8fd9\u5e76\u975e\u5076\u7136\uff0c\u6574\u4e2a FastAPI \u6846\u67b6\u90fd\u662f\u56f4\u7ed5\u8fd9\u79cd\u601d\u8def\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u3002 \u5e76\u4e14\uff0c\u5728 FastAPI \u7684\u8bbe\u8ba1\u9636\u6bb5\uff0c\u6211\u4eec\u5c31\u5df2\u7ecf\u8fdb\u884c\u4e86\u5168\u9762\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd FastAPI \u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u7f16\u8f91\u5668\u7684\u652f\u6301\u3002 \u6211\u4eec\u8fd8\u6539\u8fdb\u4e86 Pydantic\uff0c\u8ba9\u5b83\u4e5f\u652f\u6301\u8fd9\u4e9b\u529f\u80fd\u3002 \u867d\u7136\u4e0a\u9762\u7684\u622a\u56fe\u53d6\u81ea Visual Studio Code \u3002 \u4f46 PyCharm \u548c\u5927\u591a\u6570 Python \u7f16\u8f91\u5668\u4e5f\u652f\u6301\u540c\u6837\u7684\u529f\u80fd\uff1a \u63d0\u793a \u4f7f\u7528 PyCharm \u7f16\u8f91\u5668\u65f6\uff0c\u63a8\u8350\u5b89\u88c5 Pydantic PyCharm \u63d2\u4ef6 \u3002 \u8be5\u63d2\u4ef6\u7528\u4e8e\u5b8c\u5584 PyCharm \u5bf9 Pydantic \u6a21\u578b\u7684\u652f\u6301\uff0c\u4f18\u5316\u7684\u529f\u80fd\u5982\u4e0b\uff1a \u81ea\u52a8\u8865\u5168 \u7c7b\u578b\u68c0\u67e5 \u4ee3\u7801\u91cd\u6784 \u67e5\u627e \u4ee3\u7801\u5ba1\u67e5","title":"\u7f16\u8f91\u5668\u652f\u6301"},{"location":"tutorial/body/#_6","text":"\u5728 \u8def\u5f84\u64cd\u4f5c \u51fd\u6570\u5185\u90e8\u76f4\u63a5\u8bbf\u95ee\u6a21\u578b\u5bf9\u8c61\u7684\u5c5e\u6027\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . post ( \"/items/\" ) async def create_item ( item : Item ): item_dict = item . dict () if item . tax : price_with_tax = item . price + item . tax item_dict . update ({ \"price_with_tax\" : price_with_tax }) return item_dict","title":"\u4f7f\u7528\u6a21\u578b"},{"location":"tutorial/body/#_7","text":"FastAPI \u652f\u6301\u540c\u65f6\u58f0\u660e\u8def\u5f84\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u3002 FastAPI \u80fd\u8bc6\u522b\u4e0e \u8def\u5f84\u53c2\u6570 \u5339\u914d\u7684\u51fd\u6570\u53c2\u6570\uff0c\u8fd8\u80fd\u8bc6\u522b\u4ece \u8bf7\u6c42\u4f53 \u4e2d\u83b7\u53d6\u7684\u7c7b\u578b\u4e3a Pydantic \u6a21\u578b\u7684\u51fd\u6570\u53c2\u6570\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()} from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item ): return { \"item_id\" : item_id , ** item . dict ()}","title":"\u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570"},{"location":"tutorial/body/#_8","text":"FastAPI \u652f\u6301\u540c\u65f6\u58f0\u660e \u8bf7\u6c42\u4f53 \u3001 \u8def\u5f84\u53c2\u6570 \u548c \u67e5\u8be2\u53c2\u6570 \u3002 FastAPI \u80fd\u591f\u6b63\u786e\u8bc6\u522b\u8fd9\u4e09\u79cd\u53c2\u6570\uff0c\u5e76\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u83b7\u53d6\u6570\u636e\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : Union [ str , None ] = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result from fastapi import FastAPI from pydantic import BaseModel class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def create_item ( item_id : int , item : Item , q : str | None = None ): result = { \"item_id\" : item_id , ** item . dict ()} if q : result . update ({ \"q\" : q }) return result \u51fd\u6570\u53c2\u6570\u6309\u5982\u4e0b\u89c4\u5219\u8fdb\u884c\u8bc6\u522b\uff1a \u8def\u5f84 \u4e2d\u58f0\u660e\u4e86\u76f8\u540c\u53c2\u6570\u7684\u53c2\u6570\uff0c\u662f\u8def\u5f84\u53c2\u6570 \u7c7b\u578b\u662f\uff08 int \u3001 float \u3001 str \u3001 bool \u7b49\uff09 \u5355\u7c7b\u578b \u7684\u53c2\u6570\uff0c\u662f \u67e5\u8be2 \u53c2\u6570 \u7c7b\u578b\u662f Pydantic \u6a21\u578b \u7684\u53c2\u6570\uff0c\u662f \u8bf7\u6c42\u4f53 \u7b14\u8bb0 \u56e0\u4e3a\u9ed8\u8ba4\u503c\u662f None \uff0c FastAPI \u4f1a\u628a q \u5f53\u4f5c\u53ef\u9009\u53c2\u6570\u3002 FastAPI \u4e0d\u4f7f\u7528 Optional[str] \u4e2d\u7684 Optional \uff0c \u4f46 Optional \u53ef\u4ee5\u8ba9\u7f16\u8f91\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\uff0c\u5e76\u68c0\u6d4b\u9519\u8bef\u3002","title":"\u8bf7\u6c42\u4f53 + \u8def\u5f84\u53c2\u6570 + \u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/body/#pydantic","text":"\u5373\u4fbf\u4e0d\u4f7f\u7528 Pydantic \u6a21\u578b\u4e5f\u80fd\u4f7f\u7528 Body \u53c2\u6570\u3002\u8be6\u89c1 \u8bf7\u6c42\u4f53 - \u591a\u53c2\u6570\uff1a\u8bf7\u6c42\u4f53\u4e2d\u7684\u5355\u503c \u3002","title":"\u4e0d\u4f7f\u7528 Pydantic"},{"location":"tutorial/cookie-params/","text":"Cookie \u53c2\u6570 \u00b6 \u5b9a\u4e49 Cookie \u53c2\u6570\u4e0e\u5b9a\u4e49 Query \u548c Path \u53c2\u6570\u4e00\u6837\u3002 \u5bfc\u5165 Cookie \u00b6 \u9996\u5148\uff0c\u5bfc\u5165 Cookie \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : str | None = Cookie ( default = None )): return { \"ads_id\" : ads_id } \u58f0\u660e Cookie \u53c2\u6570 \u00b6 \u58f0\u660e Cookie \u53c2\u6570\u7684\u65b9\u5f0f\u4e0e\u58f0\u660e Query \u548c Path \u53c2\u6570\u76f8\u540c\u3002 \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u9a8c\u8bc1\u53c2\u6570\u6216\u6ce8\u91ca\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : str | None = Cookie ( default = None )): return { \"ads_id\" : ads_id } \u6280\u672f\u7ec6\u8282 Cookie \u3001 Path \u3001 Query \u662f \u5144\u5f1f\u7c7b \uff0c\u90fd\u7ee7\u627f\u81ea\u5171\u7528\u7684 Param \u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Cookie \u7b49\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u8bf4\u660e \u5fc5\u987b\u4f7f\u7528 Cookie \u58f0\u660e cookie \u53c2\u6570\uff0c\u5426\u5219\u8be5\u53c2\u6570\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u5c0f\u7ed3 \u00b6 \u4f7f\u7528 Cookie \u58f0\u660e cookie \u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Query \u548c Path \u76f8\u540c\u3002","title":"Cookie \u53c2\u6570"},{"location":"tutorial/cookie-params/#cookie","text":"\u5b9a\u4e49 Cookie \u53c2\u6570\u4e0e\u5b9a\u4e49 Query \u548c Path \u53c2\u6570\u4e00\u6837\u3002","title":"Cookie \u53c2\u6570"},{"location":"tutorial/cookie-params/#cookie_1","text":"\u9996\u5148\uff0c\u5bfc\u5165 Cookie \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : str | None = Cookie ( default = None )): return { \"ads_id\" : ads_id }","title":"\u5bfc\u5165 Cookie"},{"location":"tutorial/cookie-params/#cookie_2","text":"\u58f0\u660e Cookie \u53c2\u6570\u7684\u65b9\u5f0f\u4e0e\u58f0\u660e Query \u548c Path \u53c2\u6570\u76f8\u540c\u3002 \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u9a8c\u8bc1\u53c2\u6570\u6216\u6ce8\u91ca\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : Union [ str , None ] = Cookie ( default = None )): return { \"ads_id\" : ads_id } from fastapi import Cookie , FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( ads_id : str | None = Cookie ( default = None )): return { \"ads_id\" : ads_id } \u6280\u672f\u7ec6\u8282 Cookie \u3001 Path \u3001 Query \u662f \u5144\u5f1f\u7c7b \uff0c\u90fd\u7ee7\u627f\u81ea\u5171\u7528\u7684 Param \u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Cookie \u7b49\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u8bf4\u660e \u5fc5\u987b\u4f7f\u7528 Cookie \u58f0\u660e cookie \u53c2\u6570\uff0c\u5426\u5219\u8be5\u53c2\u6570\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002","title":"\u58f0\u660e Cookie \u53c2\u6570"},{"location":"tutorial/cookie-params/#_1","text":"\u4f7f\u7528 Cookie \u58f0\u660e cookie \u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Query \u548c Path \u76f8\u540c\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/cors/","text":"CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09 \u00b6 CORS\uff08 \u8de8\u57df\u8d44\u6e90\u5171\u4eab \uff09 \u662f\u6307\u524d\u540e\u7aef\u4e0d\u540c \u6e90 \u65f6\uff0c\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u524d\u7aef JavaScript \u4ee3\u7801\u4e0e\u540e\u7aef\u901a\u4fe1\u7684\u60c5\u51b5\u3002 \u6e90 \u00b6 \u6e90\u662f\u534f\u8bae\uff08 http \u3001 https \uff09\u3001\u57df\uff08 myapp.com \u3001 localhost \u3001 localhost.tiangolo.com \uff09\u53ca\u7aef\u53e3\uff08 80 \u3001 443 \u3001 8080 \uff09\u7684\u7ec4\u5408\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u4e0d\u540c\u7684\u6e90\uff1a http://localhost https://localhost http://localhost:8080 \u5373\u4f7f\u90fd\u5728 localhost \u4e2d\uff0c\u4f46\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e0d\u540c\u534f\u8bae\u6216\u7aef\u53e3\uff0c\u6240\u4ee5\u5b83\u4eec\u662f\u4e0d\u540c\u7684 \u6e90 \u3002 \u6b65\u9aa4 \u00b6 \u5047\u8bbe\u524d\u7aef\u5728 http://localhost:8080 \uff0c\u5e76\u4e14\u5b83\u7684 JavaScript \u8981\u4e0e\u5728 http://localhost \u7684\u540e\u7aef\u901a\u4fe1\uff08\u56e0\u4e3a\u6ca1\u6709\u6307\u5b9a\u7aef\u53e3\uff0c\u6d4f\u89c8\u5668\u4f7f\u7528\u9ed8\u8ba4\u7aef\u53e3 80 \uff09\u3002 \u7136\u540e\uff0c\u6d4f\u89c8\u5668\u5411\u540e\u7aef\u53d1\u9001 HTTP OPTIONS \u8bf7\u6c42\uff0c\u5982\u679c\u540e\u7aef\u53d1\u9001\u7684\u8bf7\u6c42\u5934\u6388\u6743\u8bb8\u53ef\u4e0e\u4e0d\u540c\u6e90\uff08 http://localhost:8080 \uff09\u901a\u4fe1\uff0c\u6d4f\u89c8\u5668\u5c31\u5141\u8bb8\u524d\u7aef\u7684 JavaScript \u5411\u540e\u7aef\u53d1\u9001\u8bf7\u6c42\u3002 \u4e3a\u6b64\uff0c\u540e\u7aef\u5fc5\u987b\u5b9a\u4e49 \u8bb8\u53ef\u6e90 \u5217\u8868\u3002 \u53ea\u6709\u6e90\u5217\u8868\u4e2d\u5305\u542b\u4e86 http://localhost:8080 \uff0c\u524d\u7aef\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002 \u901a\u914d\u7b26 \u00b6 \u4f7f\u7528 \"*\" \uff08 \u901a\u914d\u7b26 \uff09\u58f0\u660e\u6e90\u5217\u8868\uff0c\u8868\u793a\u8bb8\u53ef\u6240\u6709\u6e90\u3002 \u4f46\u8fd9\u53ea\u80fd\u5141\u8bb8\u67d0\u4e9b\u7c7b\u578b\u7684\u901a\u4fe1\uff0c\u4e0d\u5305\u62ec\u6240\u6709\u6d89\u53ca\u51ed\u636e\u7684\u901a\u4fe1\uff1aCookies \u53ca\u4f7f\u7528 Bearer + Token \u7684\u6388\u6743\u8bf7\u6c42\u5934\u7b49\u3002 \u4e3a\u4e86\u4e00\u5207\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u6700\u597d\u663e\u5f0f\u6307\u5b9a\u8bb8\u53ef\u6e90\u3002 \u4f7f\u7528 CORSMiddleware \u00b6 FastAPI \u5e94\u7528\u4f7f\u7528 CORSMiddleware \u914d\u7f6e\u6e90\u5217\u8868\u3002 \u5bfc\u5165 CORSMiddleware \u521b\u5efa\uff08\u7531\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\uff09\u8bb8\u53ef\u6e90\u5217\u8868 \u628a\u6e90\u5217\u8868\u4f5c\u4e3a \u4e2d\u95f4\u4ef6 \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528 \u8fd8\u53ef\u4ee5\u6307\u5b9a\u540e\u7aef\u662f\u5426\u5141\u8bb8\uff1a \u51ed\u8bc1\uff08\u6388\u6743\u8bf7\u6c42\u5934\uff0cCookies \u7b49\uff09 \u6307\u5b9a HTTP \u65b9\u6cd5\uff08 POST \u3001 PUT \uff09\uff0c\u6216\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709\u65b9\u6cd5 \u6307\u5b9a HTTP \u8bf7\u6c42\u5934\uff0c\u6216\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u5934 from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI () origins = [ \"http://localhost.tiangolo.com\" , \"https://localhost.tiangolo.com\" , \"http://localhost\" , \"http://localhost:8080\" , ] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c CORSMiddleware \u7684\u9ed8\u8ba4\u53c2\u6570\u6bd4\u8f83\u4fdd\u5b88\uff0c\u6240\u4ee5\u8981\u663e\u5f0f\u542f\u7528\u6307\u5b9a\u7684\u6e90\u3001\u65b9\u6cd5\u548c\u8bf7\u6c42\u5934\uff0c\u4ee5\u4f9b\u6d4f\u89c8\u5668\u5728\u8de8\u57df\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002 CORS \u4e2d\u95f4\u4ef6\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a allow_origins - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684\u6e90\u5217\u8868\u3002\u4f8b\u5982 ['https://example.org', 'https://www.example.org'] \u3002 ['*'] \u5141\u8bb8\u6240\u6709\u6e90 allow_origin_regex - \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5141\u8bb8\u4e0e\u4e4b\u5339\u914d\u7684\u6e90\u8de8\u57df\u8bf7\u6c42\u3002\u4f8b\u5982 'https://.*\\.example\\.org' allow_methods - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u65b9\u6cd5\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a ['GET'] \u3002 ['*'] \u5141\u8bb8\u6240\u6709\u6807\u51c6\u65b9\u6cd5 allow_headers - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u8bf7\u6c42\u5934\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a [] \u3002 ['*'] \u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u5934\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u53ca Content-Type \u8bf7\u6c42\u5934\u603b\u662f\u5141\u8bb8 CORS \u8bf7\u6c42 allow_credentials - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u652f\u6301 cookies\uff0c\u9ed8\u8ba4\u662f False \u3002\u53e6\u5916\uff0c allow_origins \u4e0d\u80fd\u8bbe\u5b9a\u4e3a ['*'] \uff0c\u5fc5\u987b\u6307\u5b9a\u6e90 expose_headers - \u6307\u5b9a\u5141\u8bb8\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u54cd\u5e94\u5934\u3002\u9ed8\u8ba4\u4e3a [] max_age - \u8bbe\u5b9a\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002\u9ed8\u8ba4\u4e3a 600 \u4e2d\u95f4\u4ef6\u54cd\u5e94\u4e24\u79cd\u7279\u5b9a\u7c7b\u578b\u7684 HTTP \u8bf7\u6c42\u2026\u2026 CORS \u9884\u68c0\u8bf7\u6c42 \u00b6 \u5bf9\u4e8e\u4efb\u610f\u5e26\u6709 Origin \u548c Access-Control-Request-Method \u8bf7\u6c42\u5934\u7684 OPTIONS \u8bf7\u6c42\u3002 \u4e2d\u95f4\u4ef6\u4f1a\u62e6\u622a\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u8fdb\u884c\u54cd\u5e94\uff0c\u51fa\u4e8e\u63d0\u4f9b\u4fe1\u606f\u7684\u76ee\u7684\u8fd4\u56de\u4f7f\u7528\u9002\u5f53\u7684 CORS \u8bf7\u6c42\u5934\u7684 200 \u6216 400 \u54cd\u5e94\u3002 \u7b80\u5355\u8bf7\u6c42 \u00b6 \u5bf9\u4e8e\u4efb\u4f55\u5e26\u6709 Origin \u8bf7\u6c42\u5934\u7684\u8bf7\u6c42\u3002\u4e2d\u95f4\u4ef6\u6b63\u5e38\u4f20\u9012\u8bf7\u6c42\uff0c\u4f46\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u9002\u5f53\u7684 CORS \u8bf7\u6c42\u5934\u3002 \u66f4\u591a\u4fe1\u606f \u00b6 \u66f4\u591a CORS \u8bf4\u660e\u8be6\u89c1 Mozilla CORS \u6587\u6863 \u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 from starlette.middleware.cors import CORSMiddleware \u3002 \u4e3a\u4e86\u65b9\u4fbf\u8c03\u7528\uff0c FastAPI \u5728 fastapi.middleware \u4e2d\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4f46\u5927\u591a\u6570\u4e2d\u95f4\u4ef6\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09"},{"location":"tutorial/cors/#cors","text":"CORS\uff08 \u8de8\u57df\u8d44\u6e90\u5171\u4eab \uff09 \u662f\u6307\u524d\u540e\u7aef\u4e0d\u540c \u6e90 \u65f6\uff0c\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u524d\u7aef JavaScript \u4ee3\u7801\u4e0e\u540e\u7aef\u901a\u4fe1\u7684\u60c5\u51b5\u3002","title":"CORS\uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09"},{"location":"tutorial/cors/#_1","text":"\u6e90\u662f\u534f\u8bae\uff08 http \u3001 https \uff09\u3001\u57df\uff08 myapp.com \u3001 localhost \u3001 localhost.tiangolo.com \uff09\u53ca\u7aef\u53e3\uff08 80 \u3001 443 \u3001 8080 \uff09\u7684\u7ec4\u5408\u3002 \u4e0b\u9762\u662f\u51e0\u4e2a\u4e0d\u540c\u7684\u6e90\uff1a http://localhost https://localhost http://localhost:8080 \u5373\u4f7f\u90fd\u5728 localhost \u4e2d\uff0c\u4f46\u56e0\u4e3a\u4f7f\u7528\u4e86\u4e0d\u540c\u534f\u8bae\u6216\u7aef\u53e3\uff0c\u6240\u4ee5\u5b83\u4eec\u662f\u4e0d\u540c\u7684 \u6e90 \u3002","title":"\u6e90"},{"location":"tutorial/cors/#_2","text":"\u5047\u8bbe\u524d\u7aef\u5728 http://localhost:8080 \uff0c\u5e76\u4e14\u5b83\u7684 JavaScript \u8981\u4e0e\u5728 http://localhost \u7684\u540e\u7aef\u901a\u4fe1\uff08\u56e0\u4e3a\u6ca1\u6709\u6307\u5b9a\u7aef\u53e3\uff0c\u6d4f\u89c8\u5668\u4f7f\u7528\u9ed8\u8ba4\u7aef\u53e3 80 \uff09\u3002 \u7136\u540e\uff0c\u6d4f\u89c8\u5668\u5411\u540e\u7aef\u53d1\u9001 HTTP OPTIONS \u8bf7\u6c42\uff0c\u5982\u679c\u540e\u7aef\u53d1\u9001\u7684\u8bf7\u6c42\u5934\u6388\u6743\u8bb8\u53ef\u4e0e\u4e0d\u540c\u6e90\uff08 http://localhost:8080 \uff09\u901a\u4fe1\uff0c\u6d4f\u89c8\u5668\u5c31\u5141\u8bb8\u524d\u7aef\u7684 JavaScript \u5411\u540e\u7aef\u53d1\u9001\u8bf7\u6c42\u3002 \u4e3a\u6b64\uff0c\u540e\u7aef\u5fc5\u987b\u5b9a\u4e49 \u8bb8\u53ef\u6e90 \u5217\u8868\u3002 \u53ea\u6709\u6e90\u5217\u8868\u4e2d\u5305\u542b\u4e86 http://localhost:8080 \uff0c\u524d\u7aef\u624d\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002","title":"\u6b65\u9aa4"},{"location":"tutorial/cors/#_3","text":"\u4f7f\u7528 \"*\" \uff08 \u901a\u914d\u7b26 \uff09\u58f0\u660e\u6e90\u5217\u8868\uff0c\u8868\u793a\u8bb8\u53ef\u6240\u6709\u6e90\u3002 \u4f46\u8fd9\u53ea\u80fd\u5141\u8bb8\u67d0\u4e9b\u7c7b\u578b\u7684\u901a\u4fe1\uff0c\u4e0d\u5305\u62ec\u6240\u6709\u6d89\u53ca\u51ed\u636e\u7684\u901a\u4fe1\uff1aCookies \u53ca\u4f7f\u7528 Bearer + Token \u7684\u6388\u6743\u8bf7\u6c42\u5934\u7b49\u3002 \u4e3a\u4e86\u4e00\u5207\u90fd\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u6700\u597d\u663e\u5f0f\u6307\u5b9a\u8bb8\u53ef\u6e90\u3002","title":"\u901a\u914d\u7b26"},{"location":"tutorial/cors/#corsmiddleware","text":"FastAPI \u5e94\u7528\u4f7f\u7528 CORSMiddleware \u914d\u7f6e\u6e90\u5217\u8868\u3002 \u5bfc\u5165 CORSMiddleware \u521b\u5efa\uff08\u7531\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\uff09\u8bb8\u53ef\u6e90\u5217\u8868 \u628a\u6e90\u5217\u8868\u4f5c\u4e3a \u4e2d\u95f4\u4ef6 \u6dfb\u52a0\u5230 FastAPI \u5e94\u7528 \u8fd8\u53ef\u4ee5\u6307\u5b9a\u540e\u7aef\u662f\u5426\u5141\u8bb8\uff1a \u51ed\u8bc1\uff08\u6388\u6743\u8bf7\u6c42\u5934\uff0cCookies \u7b49\uff09 \u6307\u5b9a HTTP \u65b9\u6cd5\uff08 POST \u3001 PUT \uff09\uff0c\u6216\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709\u65b9\u6cd5 \u6307\u5b9a HTTP \u8bf7\u6c42\u5934\uff0c\u6216\u4f7f\u7528\u901a\u914d\u7b26 \"*\" \u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u5934 from fastapi import FastAPI from fastapi.middleware.cors import CORSMiddleware app = FastAPI () origins = [ \"http://localhost.tiangolo.com\" , \"https://localhost.tiangolo.com\" , \"http://localhost\" , \"http://localhost:8080\" , ] app . add_middleware ( CORSMiddleware , allow_origins = origins , allow_credentials = True , allow_methods = [ \"*\" ], allow_headers = [ \"*\" ], ) @app . get ( \"/\" ) async def main (): return { \"message\" : \"Hello World\" } \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c CORSMiddleware \u7684\u9ed8\u8ba4\u53c2\u6570\u6bd4\u8f83\u4fdd\u5b88\uff0c\u6240\u4ee5\u8981\u663e\u5f0f\u542f\u7528\u6307\u5b9a\u7684\u6e90\u3001\u65b9\u6cd5\u548c\u8bf7\u6c42\u5934\uff0c\u4ee5\u4f9b\u6d4f\u89c8\u5668\u5728\u8de8\u57df\u4e0a\u4e0b\u6587\u4e2d\u4f7f\u7528\u3002 CORS \u4e2d\u95f4\u4ef6\u652f\u6301\u4ee5\u4e0b\u53c2\u6570\uff1a allow_origins - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684\u6e90\u5217\u8868\u3002\u4f8b\u5982 ['https://example.org', 'https://www.example.org'] \u3002 ['*'] \u5141\u8bb8\u6240\u6709\u6e90 allow_origin_regex - \u6b63\u5219\u8868\u8fbe\u5f0f\u5b57\u7b26\u4e32\uff0c\u5141\u8bb8\u4e0e\u4e4b\u5339\u914d\u7684\u6e90\u8de8\u57df\u8bf7\u6c42\u3002\u4f8b\u5982 'https://.*\\.example\\.org' allow_methods - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u65b9\u6cd5\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a ['GET'] \u3002 ['*'] \u5141\u8bb8\u6240\u6709\u6807\u51c6\u65b9\u6cd5 allow_headers - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u7684 HTTP \u8bf7\u6c42\u5934\u5217\u8868\u3002\u9ed8\u8ba4\u4e3a [] \u3002 ['*'] \u5141\u8bb8\u6240\u6709\u8bf7\u6c42\u5934\u3002 Accept \u3001 Accept-Language \u3001 Content-Language \u53ca Content-Type \u8bf7\u6c42\u5934\u603b\u662f\u5141\u8bb8 CORS \u8bf7\u6c42 allow_credentials - \u5141\u8bb8\u8de8\u57df\u8bf7\u6c42\u652f\u6301 cookies\uff0c\u9ed8\u8ba4\u662f False \u3002\u53e6\u5916\uff0c allow_origins \u4e0d\u80fd\u8bbe\u5b9a\u4e3a ['*'] \uff0c\u5fc5\u987b\u6307\u5b9a\u6e90 expose_headers - \u6307\u5b9a\u5141\u8bb8\u6d4f\u89c8\u5668\u8bbf\u95ee\u7684\u54cd\u5e94\u5934\u3002\u9ed8\u8ba4\u4e3a [] max_age - \u8bbe\u5b9a\u6d4f\u89c8\u5668\u7f13\u5b58 CORS \u54cd\u5e94\u7684\u6700\u957f\u65f6\u95f4\uff0c\u5355\u4f4d\u662f\u79d2\u3002\u9ed8\u8ba4\u4e3a 600 \u4e2d\u95f4\u4ef6\u54cd\u5e94\u4e24\u79cd\u7279\u5b9a\u7c7b\u578b\u7684 HTTP \u8bf7\u6c42\u2026\u2026","title":"\u4f7f\u7528 CORSMiddleware"},{"location":"tutorial/cors/#cors_1","text":"\u5bf9\u4e8e\u4efb\u610f\u5e26\u6709 Origin \u548c Access-Control-Request-Method \u8bf7\u6c42\u5934\u7684 OPTIONS \u8bf7\u6c42\u3002 \u4e2d\u95f4\u4ef6\u4f1a\u62e6\u622a\u4f20\u5165\u7684\u8bf7\u6c42\u5e76\u8fdb\u884c\u54cd\u5e94\uff0c\u51fa\u4e8e\u63d0\u4f9b\u4fe1\u606f\u7684\u76ee\u7684\u8fd4\u56de\u4f7f\u7528\u9002\u5f53\u7684 CORS \u8bf7\u6c42\u5934\u7684 200 \u6216 400 \u54cd\u5e94\u3002","title":"CORS \u9884\u68c0\u8bf7\u6c42"},{"location":"tutorial/cors/#_4","text":"\u5bf9\u4e8e\u4efb\u4f55\u5e26\u6709 Origin \u8bf7\u6c42\u5934\u7684\u8bf7\u6c42\u3002\u4e2d\u95f4\u4ef6\u6b63\u5e38\u4f20\u9012\u8bf7\u6c42\uff0c\u4f46\u5728\u54cd\u5e94\u4e2d\u5305\u542b\u9002\u5f53\u7684 CORS \u8bf7\u6c42\u5934\u3002","title":"\u7b80\u5355\u8bf7\u6c42"},{"location":"tutorial/cors/#_5","text":"\u66f4\u591a CORS \u8bf4\u660e\u8be6\u89c1 Mozilla CORS \u6587\u6863 \u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 from starlette.middleware.cors import CORSMiddleware \u3002 \u4e3a\u4e86\u65b9\u4fbf\u8c03\u7528\uff0c FastAPI \u5728 fastapi.middleware \u4e2d\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u51e0\u4e2a\u4e2d\u95f4\u4ef6\uff0c\u4f46\u5927\u591a\u6570\u4e2d\u95f4\u4ef6\u90fd\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u66f4\u591a\u4fe1\u606f"},{"location":"tutorial/debugging/","text":"\u8c03\u8bd5 \u00b6 \u5728 Visual Studio Code \u6216 PyCharm \u7b49\u7f16\u8f91\u5668\u4e2d\uff0c\u53ef\u4ee5\u8fde\u63a5\u8c03\u8bd5\u5668\u3002 \u8c03\u7528 uvicorn \u00b6 \u5728 FastAPI \u5e94\u7528\u4e2d\uff0c\u76f4\u63a5\u5bfc\u5165\u5e76\u8fd0\u884c uvicorn \uff1a import uvicorn from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): a = \"a\" b = \"b\" + a return { \"hello world\" : b } if __name__ == \"__main__\" : uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) __name__ == \"__main__\" \u7b80\u4ecb \u00b6 __name__ == \"__main__\" \u7684\u4e3b\u8981\u76ee\u7684\u662f\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 Python \u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff1a $ python myapp.py \u4f46\u5176\u4ed6\u6587\u4ef6\u4ee5\u6a21\u5757\u65b9\u5f0f\u65f6\u5bfc\u5165\u4e0d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5982\u4e0b\uff1a from myapp import app \u66f4\u591a\u7ec6\u8282 \u00b6 \u5047\u8bbe\u6587\u4ef6\u540d\u4e3a myapp.py \u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\uff1a $ python myapp.py Python \u4f1a\u5728\u6587\u4ef6\u4e2d\u81ea\u52a8\u521b\u5efa\u5185\u90e8\u53d8\u91cf __name__ \uff0c\u5e76\u4e14\u5b83\u7684\u503c\u662f\u5b57\u7b26\u4e32 \"__main__\" \u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u2026\u2026 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u2026\u2026\u4f1a\u88ab\u6267\u884c\u3002 \u5bfc\u5165\u6a21\u5757\uff08\u6587\u4ef6\uff09\u65f6\u5c31\u4e0d\u4f1a\u6267\u884c\u3002 \u56e0\u6b64\uff0c\u5047\u8bbe\u8fd8\u6709\u4e00\u4e2a\u6587\u4ef6 importer.py \uff1a from myapp import app # \u66f4\u591a\u4ee3\u7801 \u6b64\u65f6\uff0c myapp.py \u7684\u5185\u90e8\u4e0d\u5b58\u5728\u503c\u4e3a \"__main__\" \u7684\u81ea\u52a8\u53d8\u91cf __name__ \u3002 \u6240\u4ee5\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u2026\u2026 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u2026\u2026\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u8bf4\u660e \u8be6\u89c1 Python \u5b98\u65b9\u6587\u6863 . \u4f7f\u7528\u8c03\u8bd5\u5668\u8fd0\u884c\u4ee3\u7801 \u00b6 \u56e0\u4e3a\u662f\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8fd0\u884c Uvicorn \u670d\u52a1\u5668\uff0c\u6240\u4ee5\uff0c\u53ef\u4ee5\u4ece\u8c03\u8bd5\u5668\u76f4\u63a5\u8c03\u7528 Python \u7a0b\u5e8f\uff08\u5373 FastAPI \u5e94\u7528\uff09\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5728 Visual Studio Code \u4e2d\uff1a \u8fdb\u5165 Debug \u9762\u677f Add configuration... \u9009\u62e9 Python \u8fd0\u884c Python: Current File (Integrated Terminal) \u8c03\u8bd5\u5668 \u7136\u540e\uff0c\u8c03\u8bd5\u5668\u4f1a\u4f7f\u7528 FastAPI \u4ee3\u7801\u542f\u52a8\u670d\u52a1\u5668\uff0c\u5e76\u505c\u5728\u65ad\u70b9\u5904\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u679c\u4f7f\u7528\u7684\u662f Pycharm\uff0c\u53ef\u4ee5\uff1a \u6253\u5f00 Run \u83dc\u5355 \u9009\u4e2d Debug... \u5f39\u51fa\u4e0a\u4e0b\u6587\u83dc\u5355 \u9009\u62e9\u8981\u8c03\u8bd5\u7684\u6587\u4ef6\uff08\u672c\u4f8b\u4e2d\u4e3a main.py \uff09 \u7136\u540e\uff0c\u8c03\u8bd5\u5668\u4f1a\u4f7f\u7528 FastAPI \u4ee3\u7801\u542f\u52a8\u670d\u52a1\u5668\uff0c\u5e76\u505c\u5728\u65ad\u70b9\u5904\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u8c03\u8bd5"},{"location":"tutorial/debugging/#_1","text":"\u5728 Visual Studio Code \u6216 PyCharm \u7b49\u7f16\u8f91\u5668\u4e2d\uff0c\u53ef\u4ee5\u8fde\u63a5\u8c03\u8bd5\u5668\u3002","title":"\u8c03\u8bd5"},{"location":"tutorial/debugging/#uvicorn","text":"\u5728 FastAPI \u5e94\u7528\u4e2d\uff0c\u76f4\u63a5\u5bfc\u5165\u5e76\u8fd0\u884c uvicorn \uff1a import uvicorn from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): a = \"a\" b = \"b\" + a return { \"hello world\" : b } if __name__ == \"__main__\" : uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 )","title":"\u8c03\u7528 uvicorn"},{"location":"tutorial/debugging/#__name__-__main__","text":"__name__ == \"__main__\" \u7684\u4e3b\u8981\u76ee\u7684\u662f\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 Python \u6587\u4ef6\u65f6\uff0c\u53ef\u4ee5\u6267\u884c\u67d0\u4e9b\u4ee3\u7801\uff1a $ python myapp.py \u4f46\u5176\u4ed6\u6587\u4ef6\u4ee5\u6a21\u5757\u65b9\u5f0f\u65f6\u5bfc\u5165\u4e0d\u4f1a\u8c03\u7528\u8fd9\u4e9b\u4ee3\u7801\uff0c\u5982\u4e0b\uff1a from myapp import app","title":"__name__ == \"__main__\" \u7b80\u4ecb"},{"location":"tutorial/debugging/#_2","text":"\u5047\u8bbe\u6587\u4ef6\u540d\u4e3a myapp.py \u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8fd0\u884c\uff1a $ python myapp.py Python \u4f1a\u5728\u6587\u4ef6\u4e2d\u81ea\u52a8\u521b\u5efa\u5185\u90e8\u53d8\u91cf __name__ \uff0c\u5e76\u4e14\u5b83\u7684\u503c\u662f\u5b57\u7b26\u4e32 \"__main__\" \u3002 \u56e0\u6b64\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u2026\u2026 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u2026\u2026\u4f1a\u88ab\u6267\u884c\u3002 \u5bfc\u5165\u6a21\u5757\uff08\u6587\u4ef6\uff09\u65f6\u5c31\u4e0d\u4f1a\u6267\u884c\u3002 \u56e0\u6b64\uff0c\u5047\u8bbe\u8fd8\u6709\u4e00\u4e2a\u6587\u4ef6 importer.py \uff1a from myapp import app # \u66f4\u591a\u4ee3\u7801 \u6b64\u65f6\uff0c myapp.py \u7684\u5185\u90e8\u4e0d\u5b58\u5728\u503c\u4e3a \"__main__\" \u7684\u81ea\u52a8\u53d8\u91cf __name__ \u3002 \u6240\u4ee5\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u2026\u2026 uvicorn . run ( app , host = \"0.0.0.0\" , port = 8000 ) \u2026\u2026\u4e0d\u4f1a\u88ab\u6267\u884c\u3002 \u8bf4\u660e \u8be6\u89c1 Python \u5b98\u65b9\u6587\u6863 .","title":"\u66f4\u591a\u7ec6\u8282"},{"location":"tutorial/debugging/#_3","text":"\u56e0\u4e3a\u662f\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u8fd0\u884c Uvicorn \u670d\u52a1\u5668\uff0c\u6240\u4ee5\uff0c\u53ef\u4ee5\u4ece\u8c03\u8bd5\u5668\u76f4\u63a5\u8c03\u7528 Python \u7a0b\u5e8f\uff08\u5373 FastAPI \u5e94\u7528\uff09\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5728 Visual Studio Code \u4e2d\uff1a \u8fdb\u5165 Debug \u9762\u677f Add configuration... \u9009\u62e9 Python \u8fd0\u884c Python: Current File (Integrated Terminal) \u8c03\u8bd5\u5668 \u7136\u540e\uff0c\u8c03\u8bd5\u5668\u4f1a\u4f7f\u7528 FastAPI \u4ee3\u7801\u542f\u52a8\u670d\u52a1\u5668\uff0c\u5e76\u505c\u5728\u65ad\u70b9\u5904\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a \u5982\u679c\u4f7f\u7528\u7684\u662f Pycharm\uff0c\u53ef\u4ee5\uff1a \u6253\u5f00 Run \u83dc\u5355 \u9009\u4e2d Debug... \u5f39\u51fa\u4e0a\u4e0b\u6587\u83dc\u5355 \u9009\u62e9\u8981\u8c03\u8bd5\u7684\u6587\u4ef6\uff08\u672c\u4f8b\u4e2d\u4e3a main.py \uff09 \u7136\u540e\uff0c\u8c03\u8bd5\u5668\u4f1a\u4f7f\u7528 FastAPI \u4ee3\u7801\u542f\u52a8\u670d\u52a1\u5668\uff0c\u5e76\u505c\u5728\u65ad\u70b9\u5904\u3002 \u5982\u4e0b\u56fe\u6240\u793a\uff1a","title":"\u4f7f\u7528\u8c03\u8bd5\u5668\u8fd0\u884c\u4ee3\u7801"},{"location":"tutorial/encoder/","text":"JSON \u7f16\u7801\u5668 \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u8981\u628a Pydantic \u6a21\u578b\u7b49\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a \u5b57\u5178 \u3001 \u5217\u8868 \u7b49\u4e0e JSON \u517c\u5bb9\u7684\u683c\u5f0f\u3002 \u4f8b\u5982\uff0c \u628a Pydantic \u6a21\u578b\u5b58\u5165\u6570\u636e\u5e93\u65f6\u5c31\u8981\u8fdb\u884c\u8f6c\u6362\u3002 \u4e3a\u6b64\uff0c FastAPI \u63d0\u4f9b\u4e86 jsonable_encoder() \u51fd\u6570\u3002 \u4f7f\u7528 jsonable_encoder \u00b6 \u5047\u8bbe\u6570\u636e\u5e93 fake_db \u53ea\u63a5\u6536\u4e0e JSON \u517c\u5bb9\u7684\u6570\u636e\u3002 \u8be5\u6570\u636e\u5e93\u4e0d\u80fd\u63a5\u6536\u4e0e JSON \u4e0d\u517c\u5bb9\u7684 datetime \u5bf9\u8c61\u3002 \u56e0\u6b64\u5fc5\u987b\u628a datetime \u5bf9\u8c61\u8f6c\u6362\u4e3a\u5305\u542b ISO \u683c\u5f0f \u6570\u636e\u7684 \u5b57\u7b26\u4e32 \u3002 \u540c\u7406\uff0c\u8be5\u6570\u636e\u5e93\u4e5f\u4e0d\u80fd\u63a5\u6536 Pydantic \u6a21\u578b\uff08\u5e26\u5c5e\u6027\u7684\u5bf9\u8c61\uff09\uff0c\u53ea\u80fd\u63a5\u6536 \u5b57\u5178 \u3002 \u63a5\u6536 Pydantic \u6a21\u578b\u8981\u4f7f\u7528 jsonable_encoder \u3002 jsonable_encoder \u51fd\u6570\u63a5\u6536 Pydantic \u6a21\u578b\u7b49\u5bf9\u8c61\uff0c\u7136\u540e\u8fd4\u56de\u517c\u5bb9 JSON \u7684\u6570\u636e\uff1a Python 3.6 and above Python 3.10 and above from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data from datetime import datetime from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : str | None = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data \u672c\u4f8b\u628a Pydantic \u6a21\u578b\u8f6c\u6362\u4e3a \u5b57\u5178 \uff0c\u5e76\u628a datetime \u8f6c\u6362\u4e3a \u5b57\u7b26\u4e32 \u3002 \u8be5\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u7528 Python \u7684 json.dumps() \u7f16\u7801\u3002 jsonable_encoder \u51fd\u6570\u8fd4\u56de\u7684\u4e0d\u662f\u5305\u542b JSON \u6570\u636e\u7684\u957f\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u8fd4\u56de\u503c\u4e0e\u5b50\u503c\u90fd\u517c\u5bb9 JSON \u7684 Python \u6807\u51c6\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982 \u5b57\u5178 \u3002 \u7b14\u8bb0 \u867d\u7136\uff0c jsonable_encoder \u7528\u4e8e\u5728 FastAPI \u5185\u90e8\u8f6c\u6362\u6570\u636e\uff0c\u4f46\u5728\u5176\u4ed6\u573a\u666f\u4e0b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002","title":"JSON \u7f16\u7801\u5668"},{"location":"tutorial/encoder/#json","text":"\u6709\u65f6\uff0c\u6211\u4eec\u8981\u628a Pydantic \u6a21\u578b\u7b49\u6570\u636e\u7c7b\u578b\u8f6c\u6362\u4e3a \u5b57\u5178 \u3001 \u5217\u8868 \u7b49\u4e0e JSON \u517c\u5bb9\u7684\u683c\u5f0f\u3002 \u4f8b\u5982\uff0c \u628a Pydantic \u6a21\u578b\u5b58\u5165\u6570\u636e\u5e93\u65f6\u5c31\u8981\u8fdb\u884c\u8f6c\u6362\u3002 \u4e3a\u6b64\uff0c FastAPI \u63d0\u4f9b\u4e86 jsonable_encoder() \u51fd\u6570\u3002","title":"JSON \u7f16\u7801\u5668"},{"location":"tutorial/encoder/#jsonable_encoder","text":"\u5047\u8bbe\u6570\u636e\u5e93 fake_db \u53ea\u63a5\u6536\u4e0e JSON \u517c\u5bb9\u7684\u6570\u636e\u3002 \u8be5\u6570\u636e\u5e93\u4e0d\u80fd\u63a5\u6536\u4e0e JSON \u4e0d\u517c\u5bb9\u7684 datetime \u5bf9\u8c61\u3002 \u56e0\u6b64\u5fc5\u987b\u628a datetime \u5bf9\u8c61\u8f6c\u6362\u4e3a\u5305\u542b ISO \u683c\u5f0f \u6570\u636e\u7684 \u5b57\u7b26\u4e32 \u3002 \u540c\u7406\uff0c\u8be5\u6570\u636e\u5e93\u4e5f\u4e0d\u80fd\u63a5\u6536 Pydantic \u6a21\u578b\uff08\u5e26\u5c5e\u6027\u7684\u5bf9\u8c61\uff09\uff0c\u53ea\u80fd\u63a5\u6536 \u5b57\u5178 \u3002 \u63a5\u6536 Pydantic \u6a21\u578b\u8981\u4f7f\u7528 jsonable_encoder \u3002 jsonable_encoder \u51fd\u6570\u63a5\u6536 Pydantic \u6a21\u578b\u7b49\u5bf9\u8c61\uff0c\u7136\u540e\u8fd4\u56de\u517c\u5bb9 JSON \u7684\u6570\u636e\uff1a Python 3.6 and above Python 3.10 and above from datetime import datetime from typing import Union from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : Union [ str , None ] = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data from datetime import datetime from fastapi import FastAPI from fastapi.encoders import jsonable_encoder from pydantic import BaseModel fake_db = {} class Item ( BaseModel ): title : str timestamp : datetime description : str | None = None app = FastAPI () @app . put ( \"/items/ {id} \" ) def update_item ( id : str , item : Item ): json_compatible_item_data = jsonable_encoder ( item ) fake_db [ id ] = json_compatible_item_data \u672c\u4f8b\u628a Pydantic \u6a21\u578b\u8f6c\u6362\u4e3a \u5b57\u5178 \uff0c\u5e76\u628a datetime \u8f6c\u6362\u4e3a \u5b57\u7b26\u4e32 \u3002 \u8be5\u51fd\u6570\u7684\u8f93\u51fa\u7ed3\u679c\u53ef\u4ee5\u7528 Python \u7684 json.dumps() \u7f16\u7801\u3002 jsonable_encoder \u51fd\u6570\u8fd4\u56de\u7684\u4e0d\u662f\u5305\u542b JSON \u6570\u636e\u7684\u957f\u5b57\u7b26\u4e32\uff0c\u800c\u662f\u8fd4\u56de\u503c\u4e0e\u5b50\u503c\u90fd\u517c\u5bb9 JSON \u7684 Python \u6807\u51c6\u6570\u636e\u7ed3\u6784\uff0c\u6bd4\u5982 \u5b57\u5178 \u3002 \u7b14\u8bb0 \u867d\u7136\uff0c jsonable_encoder \u7528\u4e8e\u5728 FastAPI \u5185\u90e8\u8f6c\u6362\u6570\u636e\uff0c\u4f46\u5728\u5176\u4ed6\u573a\u666f\u4e0b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u3002","title":"\u4f7f\u7528 jsonable_encoder"},{"location":"tutorial/extra-data-types/","text":"\u66f4\u591a\u6570\u636e\u7c7b\u578b \u00b6 \u81f3\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u90fd\u662f\u5e38\u89c1\u6570\u636e\u7c7b\u578b\uff0c\u5982\uff1a int float str bool \u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 \u800c\u4e14\uff0c\u62e5\u6709\u540c\u6837\u5f3a\u608d\u7684\u529f\u80fd\uff1a \u5f3a\u5927\u7684\u7f16\u8f91\u5668\u652f\u6301 \u8f6c\u6362\u8bf7\u6c42\u6570\u636e \u8f6c\u6362\u54cd\u5e94\u6570\u636e \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u8865\u5168\u548c API \u6587\u6863 \u5176\u4ed6\u6570\u636e\u7c7b\u578b \u00b6 \u4e0b\u9762\u4ecb\u7ecd\u66f4\u591a\u6570\u636e\u7c7b\u578b\uff1a UUID \uff1a \u6807\u51c6\u7684 \u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26 \uff0c\u5728\u6570\u636e\u5e93\u548c\u7cfb\u7edf\u4e2d\u5e38\u7528\u4f5c ID \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a str datetime.datetime \uff1a Python datetime.datetime \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u4f8b\u5982\uff1a 2008-09-15T15:53:00+05:00 datetime.date \uff1a Python datetime.date \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u4f8b\u5982\uff1a 2008-09-15 datetime.time \uff1a Python datetime.time \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u4f8b\u5982\uff1a 14:23:55.003 datetime.timedelta \uff1a Python datetime.timedelta \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a float \uff0c\u8868\u793a\u603b\u79d2\u6570 Pydantic \u8fd8\u652f\u6301 ISO 8601 \u65f6\u95f4\u5dee\u5f02\u7f16\u7801 , \u8be6\u89c1\u6587\u6863 frozenset \uff1a \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e0e set \u76f8\u540c\uff1a \u5728\u8bf7\u6c42\u4e2d\uff0c\u8bfb\u53d6\u5217\u8868\uff0c\u53bb\u9664\u91cd\u590d\u9879\uff0c\u5e76\u8f6c\u6362\u4e3a set \u5728\u54cd\u5e94\u4e2d\uff0c \u628a set \u8f6c\u6362\u4e3a list \u751f\u6210\u7684\u6982\u56fe\uff08\u4f7f\u7528 JSON Schema \u7684 uniqueItems \uff09\u6307\u660e set \u4e2d\u7684\u503c\u662f\u552f\u4e00\u7684 bytes \uff1a \u6807\u51c6\u7684 Python bytes \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a str \u751f\u6210\u7684\u6982\u56fe\u6307\u660e\u8be5 str \u662f binary \u683c\u5f0f Decimal \uff1a \u6807\u51c6\u7684 Python Decimal \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4f5c\u4e3a float \u5904\u7406 Pydantic \u6570\u636e\u7c7b\u578b \u4e2d\u4ecb\u7ecd\u4e86\u6240\u6709 Pydantic \u6570\u636e\u7c7b\u578b \u793a\u4f8b \u00b6 \u4e0b\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u4e0a\u8ff0\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } from datetime import datetime , time , timedelta from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : datetime | None = Body ( default = None ), end_datetime : datetime | None = Body ( default = None ), repeat_at : time | None = Body ( default = None ), process_after : timedelta | None = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } \u6ce8\u610f\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f9d\u7136\u652f\u6301\u539f\u751f\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u6267\u884c\u5e38\u89c4\u65e5\u671f\u64cd\u4f5c\uff1a Python 3.6 and above Python 3.10 and above from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } from datetime import datetime , time , timedelta from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : datetime | None = Body ( default = None ), end_datetime : datetime | None = Body ( default = None ), repeat_at : time | None = Body ( default = None ), process_after : timedelta | None = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , }","title":"\u66f4\u591a\u6570\u636e\u7c7b\u578b"},{"location":"tutorial/extra-data-types/#_1","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u4f7f\u7528\u7684\u90fd\u662f\u5e38\u89c1\u6570\u636e\u7c7b\u578b\uff0c\u5982\uff1a int float str bool \u4f46\u5176\u5b9e\u4e5f\u53ef\u4ee5\u4f7f\u7528\u66f4\u590d\u6742\u7684\u6570\u636e\u7c7b\u578b\u3002 \u800c\u4e14\uff0c\u62e5\u6709\u540c\u6837\u5f3a\u608d\u7684\u529f\u80fd\uff1a \u5f3a\u5927\u7684\u7f16\u8f91\u5668\u652f\u6301 \u8f6c\u6362\u8bf7\u6c42\u6570\u636e \u8f6c\u6362\u54cd\u5e94\u6570\u636e \u6570\u636e\u6821\u9a8c \u81ea\u52a8\u8865\u5168\u548c API \u6587\u6863","title":"\u66f4\u591a\u6570\u636e\u7c7b\u578b"},{"location":"tutorial/extra-data-types/#_2","text":"\u4e0b\u9762\u4ecb\u7ecd\u66f4\u591a\u6570\u636e\u7c7b\u578b\uff1a UUID \uff1a \u6807\u51c6\u7684 \u901a\u7528\u552f\u4e00\u6807\u8bc6\u7b26 \uff0c\u5728\u6570\u636e\u5e93\u548c\u7cfb\u7edf\u4e2d\u5e38\u7528\u4f5c ID \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a str datetime.datetime \uff1a Python datetime.datetime \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u4f8b\u5982\uff1a 2008-09-15T15:53:00+05:00 datetime.date \uff1a Python datetime.date \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u4f8b\u5982\uff1a 2008-09-15 datetime.time \uff1a Python datetime.time \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a ISO 8601 \u683c\u5f0f\u7684 str \uff0c\u4f8b\u5982\uff1a 14:23:55.003 datetime.timedelta \uff1a Python datetime.timedelta \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a float \uff0c\u8868\u793a\u603b\u79d2\u6570 Pydantic \u8fd8\u652f\u6301 ISO 8601 \u65f6\u95f4\u5dee\u5f02\u7f16\u7801 , \u8be6\u89c1\u6587\u6863 frozenset \uff1a \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e0e set \u76f8\u540c\uff1a \u5728\u8bf7\u6c42\u4e2d\uff0c\u8bfb\u53d6\u5217\u8868\uff0c\u53bb\u9664\u91cd\u590d\u9879\uff0c\u5e76\u8f6c\u6362\u4e3a set \u5728\u54cd\u5e94\u4e2d\uff0c \u628a set \u8f6c\u6362\u4e3a list \u751f\u6210\u7684\u6982\u56fe\uff08\u4f7f\u7528 JSON Schema \u7684 uniqueItems \uff09\u6307\u660e set \u4e2d\u7684\u503c\u662f\u552f\u4e00\u7684 bytes \uff1a \u6807\u51c6\u7684 Python bytes \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4e3a str \u751f\u6210\u7684\u6982\u56fe\u6307\u660e\u8be5 str \u662f binary \u683c\u5f0f Decimal \uff1a \u6807\u51c6\u7684 Python Decimal \u5728\u8bf7\u6c42\u548c\u54cd\u5e94\u4e2d\u4f5c\u4e3a float \u5904\u7406 Pydantic \u6570\u636e\u7c7b\u578b \u4e2d\u4ecb\u7ecd\u4e86\u6240\u6709 Pydantic \u6570\u636e\u7c7b\u578b","title":"\u5176\u4ed6\u6570\u636e\u7c7b\u578b"},{"location":"tutorial/extra-data-types/#_3","text":"\u4e0b\u4f8b\u5c55\u793a\u4e86\u5982\u4f55\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u4e0a\u8ff0\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } from datetime import datetime , time , timedelta from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : datetime | None = Body ( default = None ), end_datetime : datetime | None = Body ( default = None ), repeat_at : time | None = Body ( default = None ), process_after : timedelta | None = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } \u6ce8\u610f\uff0c\u51fd\u6570\u7684\u53c2\u6570\u4f9d\u7136\u652f\u6301\u539f\u751f\u6570\u636e\u7c7b\u578b\uff0c\u4f8b\u5982\uff0c\u4ee5\u5982\u4e0b\u65b9\u5f0f\u6267\u884c\u5e38\u89c4\u65e5\u671f\u64cd\u4f5c\uff1a Python 3.6 and above Python 3.10 and above from datetime import datetime , time , timedelta from typing import Union from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : Union [ datetime , None ] = Body ( default = None ), end_datetime : Union [ datetime , None ] = Body ( default = None ), repeat_at : Union [ time , None ] = Body ( default = None ), process_after : Union [ timedelta , None ] = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , } from datetime import datetime , time , timedelta from uuid import UUID from fastapi import Body , FastAPI app = FastAPI () @app . put ( \"/items/ {item_id} \" ) async def read_items ( item_id : UUID , start_datetime : datetime | None = Body ( default = None ), end_datetime : datetime | None = Body ( default = None ), repeat_at : time | None = Body ( default = None ), process_after : timedelta | None = Body ( default = None ), ): start_process = start_datetime + process_after duration = end_datetime - start_process return { \"item_id\" : item_id , \"start_datetime\" : start_datetime , \"end_datetime\" : end_datetime , \"repeat_at\" : repeat_at , \"process_after\" : process_after , \"start_process\" : start_process , \"duration\" : duration , }","title":"\u793a\u4f8b"},{"location":"tutorial/extra-models/","text":"\u66f4\u591a\u6a21\u578b \u00b6 \u4e66\u63a5\u4e0a\u6587\uff0c\u591a\u4e2a\u5173\u8054\u6a21\u578b\u8fd9\u79cd\u60c5\u51b5\u5f88\u5e38\u89c1\u3002 \u7279\u522b\u662f\u7528\u6237\u6a21\u578b\uff0c\u56e0\u4e3a\uff1a \u8f93\u5165\u6a21\u578b \u5e94\u8be5\u542b\u5bc6\u7801\u3002 \u8f93\u51fa\u6a21\u578b \u4e0d\u5e94\u542b\u5bc6\u7801\u3002 \u6570\u636e\u5e93\u6a21\u578b \u9700\u8981\u52a0\u5bc6\u7684\u5bc6\u7801\u3002 \u5371\u9669 \u5343\u4e07\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\u3002\u59cb\u7ec8\u5b58\u50a8\u53ef\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u7684 \u5b89\u5168\u54c8\u5e0c\u503c \u3002 \u5982\u679c\u4e0d\u4e86\u89e3\u8fd9\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u9605 \u5b89\u5168 \u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e86\u89e3\u4ec0\u4e48\u662f \u5bc6\u7801\u54c8\u5e0c \u3002 \u591a\u4e2a\u6a21\u578b \u00b6 \u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u4e0d\u540c\u6a21\u578b\u5904\u7406\u5bc6\u7801\u5b57\u6bb5\u7684\u65b9\u5f0f\uff0c\u53ca\u4f7f\u7528\u4f4d\u7f6e\u7684\u5927\u81f4\u601d\u8def\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : Union [ str , None ] = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : str | None = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved **user_in.dict() \u7b80\u4ecb \u00b6 Pydantic \u7684 .dict() \u00b6 user_in \u662f\u7c7b UserIn \u7684 Pydantic \u6a21\u578b\u3002 Pydantic \u6a21\u578b\u652f\u6301 .dict() \u65b9\u6cd5\uff0c\u80fd\u8fd4\u56de\u5305\u542b\u6a21\u578b\u6570\u636e\u7684 \u5b57\u5178 \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa Pydantic \u5bf9\u8c61 user_in \uff1a user_in = UserIn ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" ) \u5c31\u80fd\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1a user_dict = user_in . dict () \u73b0\u5728\uff0c\u53d8\u91cf user_dict \u4e2d\u7684\u5c31\u662f\u5305\u542b\u6570\u636e\u7684 \u5b57\u5178 \uff08\u53d8\u91cf user_dict \u662f\u5b57\u5178\uff0c\u4e0d\u662f Pydantic \u6a21\u578b\u5bf9\u8c61\uff09\u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1a print ( user_dict ) \u8f93\u51fa\u7684\u5c31\u662f Python \u5b57\u5178 \uff1a { 'username' : 'john' , 'password' : 'secret' , 'email' : 'john.doe@example.com' , 'full_name' : None , } \u89e3\u5305 dict \u00b6 \u628a \u5b57\u5178 user_dict \u4ee5 **user_dict \u5f62\u5f0f\u4f20\u9012\u7ed9\u51fd\u6570\uff08\u6216\u7c7b\uff09\uff0cPython \u4f1a\u6267\u884c \u89e3\u5305 \u64cd\u4f5c\u3002\u5b83\u4f1a\u628a user_dict \u7684\u952e\u548c\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u76f4\u63a5\u4f20\u9012\u3002 \u56e0\u6b64\uff0c\u63a5\u7740\u4e0a\u9762\u7684 user_dict \u7ee7\u7eed\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a UserInDB ( ** user_dict ) \u5c31\u4f1a\u751f\u6210\u5982\u4e0b\u7ed3\u679c\uff1a UserInDB ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" , full_name = None , ) \u6216\u66f4\u7cbe\u51c6\uff0c\u76f4\u63a5\u628a\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u5185\u5bb9\u4e0e user_dict \u4e00\u8d77\u4f7f\u7528\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], ) \u7528\u5176\u4ed6\u6a21\u578b\u4e2d\u7684\u5185\u5bb9\u751f\u6210 Pydantic \u6a21\u578b \u00b6 \u4e0a\u4f8b\u4e2d \uff0c\u4ece user_in.dict() \u4e2d\u5f97\u5230\u4e86 user_dict \uff0c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a user_dict = user_in . dict () UserInDB ( ** user_dict ) \u7b49\u6548\u4e8e\uff1a UserInDB ( ** user_in . dict ()) \u2026\u2026\u56e0\u4e3a user_in.dict() \u662f\u5b57\u5178\uff0c\u5728\u4f20\u9012\u7ed9 UserInDB \u65f6\uff0c\u628a ** \u52a0\u5728 user_in.dict() \u524d\uff0c\u53ef\u4ee5\u8ba9 Python \u8fdb\u884c \u89e3\u5305 \u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u7528\u5176\u4ed6 Pydantic \u6a21\u578b\u4e2d\u7684\u6570\u636e\u751f\u6210 Pydantic \u6a21\u578b\u3002 \u89e3\u5305 dict \u548c\u66f4\u591a\u5173\u952e\u5b57 \u00b6 \u63a5\u4e0b\u6765\uff0c\u7ee7\u7eed\u6dfb\u52a0\u5173\u952e\u5b57\u53c2\u6570 hashed_password=hashed_password \uff0c\u4f8b\u5982\uff1a UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) \u2026\u2026\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], hashed_password = hashed_password , ) \u8b66\u544a \u8f85\u52a9\u7684\u9644\u52a0\u51fd\u6570\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u53ef\u80fd\u7684\u6570\u636e\u6d41\uff0c\u4f46\u5b83\u4eec\u663e\u7136\u4e0d\u80fd\u63d0\u4f9b\u4efb\u4f55\u771f\u6b63\u7684\u5b89\u5168\u673a\u5236\u3002 \u51cf\u5c11\u91cd\u590d \u00b6 FastAPI \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u3002 \u4ee3\u7801\u91cd\u590d\u4f1a\u5bfc\u81f4 bug\u3001\u5b89\u5168\u95ee\u9898\u3001\u4ee3\u7801\u5931\u6b65\u7b49\u95ee\u9898\uff08\u66f4\u65b0\u4e86\u67d0\u4e2a\u4f4d\u7f6e\u7684\u4ee3\u7801\uff0c\u4f46\u6ca1\u6709\u540c\u6b65\u66f4\u65b0\u5176\u4ed6\u4f4d\u7f6e\u7684\u4ee3\u7801\uff09\u3002 \u4e0a\u9762\u7684\u8fd9\u4e9b\u6a21\u578b\u5171\u4eab\u4e86\u5927\u91cf\u6570\u636e\uff0c\u62e5\u6709\u91cd\u590d\u7684\u5c5e\u6027\u540d\u548c\u7c7b\u578b\u3002 FastAPI \u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u58f0\u660e UserBase \u6a21\u578b\u4f5c\u4e3a\u5176\u4ed6\u6a21\u578b\u7684\u57fa\u7c7b\u3002\u7136\u540e\uff0c\u7528\u8be5\u7c7b\u884d\u751f\u51fa\u7ee7\u627f\u5176\u5c5e\u6027\uff08\u7c7b\u578b\u58f0\u660e\u3001\u9a8c\u8bc1\u7b49\uff09\u7684\u5b50\u7c7b\u3002 \u6240\u6709\u6570\u636e\u8f6c\u6362\u3001\u6821\u9a8c\u3001\u6587\u6863\u7b49\u529f\u80fd\u4ecd\u5c06\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4ec5\u58f0\u660e\u6a21\u578b\u4e4b\u95f4\u7684\u5dee\u5f02\u90e8\u5206\uff08\u660e\u6587\u5bc6\u7801\u3001\u54c8\u5e0c\u5bc6\u7801\u53ca\u65e0\u5bc6\u7801\uff09\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : str | None = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved Union \u6216\u8005 anyOf \u00b6 \u54cd\u5e94\u53ef\u4ee5\u58f0\u660e\u4e3a\u4e24\u79cd\u7c7b\u578b\u7684 Union \u7c7b\u578b\uff0c\u5373\u8be5\u54cd\u5e94\u53ef\u4ee5\u662f\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u7c7b\u578b\u3002 \u5728 OpenAPI \u4e2d\u53ef\u4ee5\u4f7f\u7528 anyOf \u5b9a\u4e49\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u63d0\u793a typing.Union \uff1a \u7b14\u8bb0 \u5b9a\u4e49 Union \u7c7b\u578b\u65f6\uff0c\u8981\u628a\u8be6\u7ec6\u7684\u7c7b\u578b\u5199\u5728\u524d\u9762\uff0c\u7136\u540e\u662f\u4e0d\u592a\u8be6\u7ec6\u7684\u7c7b\u578b\u3002\u4e0b\u4f8b\u4e2d\uff0c\u66f4\u8be6\u7ec6\u7684 PlaneItem \u4f4d\u4e8e Union[PlaneItem\uff0cCarItem] \u4e2d\u7684 CarItem \u4e4b\u524d\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ] Union in Python 3.10 \u00b6 In this example we pass Union[PlaneItem, CarItem] as the value of the argument response_model . Because we are passing it as a value to an argument instead of putting it in a type annotation , we have to use Union even in Python 3.10. If it was in a type annotation we could have used the vertical bar, as: some_variable : PlaneItem | CarItem But if we put that in response_model=PlaneItem | CarItem we would get an error, because Python would try to perform an invalid operation between PlaneItem and CarItem instead of interpreting that as a type annotation. \u6a21\u578b\u5217\u8868 \u00b6 \u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u58f0\u660e\u7531\u5bf9\u8c61\u5217\u8868\u6784\u6210\u7684\u54cd\u5e94\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 Python typing.List \uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = List [ Item ]) async def read_items (): return items from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = list [ Item ]) async def read_items (): return items dict \u7684\u54cd\u5e94 \u00b6 \u4efb\u610f\u7684 dict \u90fd\u80fd\u7528\u4e8e\u58f0\u660e\u54cd\u5e94\uff0c\u53ea\u8981\u58f0\u660e\u952e\u548c\u503c\u7684\u7c7b\u578b\uff0c\u65e0\u9700\u4f7f\u7528 Pydantic \u6a21\u578b\u3002 \u4e8b\u5148\u4e0d\u77e5\u9053\u53ef\u7528\u7684\u5b57\u6bb5 / \u5c5e\u6027\u540d\u65f6\uff08Pydantic \u6a21\u578b\u5fc5\u987b\u77e5\u9053\u5b57\u6bb5\u662f\u4ec0\u4e48\uff09\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7279\u522b\u6709\u7528\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 typing.Dict \uff1a Python 3.6 and above Python 3.9 and above from typing import Dict from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = Dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 } from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 } \u5c0f\u7ed3 \u00b6 \u9488\u5bf9\u4e0d\u540c\u573a\u666f\uff0c\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u4e0d\u540c\u7684 Pydantic \u6a21\u578b\u7ee7\u627f\u5b9a\u4e49\u7684\u57fa\u7c7b\u3002 \u5b9e\u4f53\u5fc5\u987b\u5177\u6709\u4e0d\u540c\u7684 \u72b6\u6001 \u65f6\uff0c\u4e0d\u5fc5\u4e3a\u4e0d\u540c\u72b6\u6001\u7684\u5b9e\u4f53\u5355\u72ec\u5b9a\u4e49\u6570\u636e\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u7528\u6237 \u5b9e\u4f53 \u5c31\u6709\u5305\u542b password \u3001\u5305\u542b password_hash \u4ee5\u53ca\u4e0d\u542b\u5bc6\u7801\u7b49\u591a\u79cd\u72b6\u6001\u3002","title":"\u66f4\u591a\u6a21\u578b"},{"location":"tutorial/extra-models/#_1","text":"\u4e66\u63a5\u4e0a\u6587\uff0c\u591a\u4e2a\u5173\u8054\u6a21\u578b\u8fd9\u79cd\u60c5\u51b5\u5f88\u5e38\u89c1\u3002 \u7279\u522b\u662f\u7528\u6237\u6a21\u578b\uff0c\u56e0\u4e3a\uff1a \u8f93\u5165\u6a21\u578b \u5e94\u8be5\u542b\u5bc6\u7801\u3002 \u8f93\u51fa\u6a21\u578b \u4e0d\u5e94\u542b\u5bc6\u7801\u3002 \u6570\u636e\u5e93\u6a21\u578b \u9700\u8981\u52a0\u5bc6\u7684\u5bc6\u7801\u3002 \u5371\u9669 \u5343\u4e07\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\u3002\u59cb\u7ec8\u5b58\u50a8\u53ef\u4ee5\u8fdb\u884c\u9a8c\u8bc1\u7684 \u5b89\u5168\u54c8\u5e0c\u503c \u3002 \u5982\u679c\u4e0d\u4e86\u89e3\u8fd9\u65b9\u9762\u7684\u77e5\u8bc6\uff0c\u8bf7\u53c2\u9605 \u5b89\u5168 \u76f8\u5173\u7684\u5185\u5bb9\uff0c\u4e86\u89e3\u4ec0\u4e48\u662f \u5bc6\u7801\u54c8\u5e0c \u3002","title":"\u66f4\u591a\u6a21\u578b"},{"location":"tutorial/extra-models/#_2","text":"\u4e0b\u9762\u7684\u4ee3\u7801\u5c55\u793a\u4e86\u4e0d\u540c\u6a21\u578b\u5904\u7406\u5bc6\u7801\u5b57\u6bb5\u7684\u65b9\u5f0f\uff0c\u53ca\u4f7f\u7528\u4f4d\u7f6e\u7684\u5927\u81f4\u601d\u8def\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : Union [ str , None ] = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None class UserInDB ( BaseModel ): username : str hashed_password : str email : EmailStr full_name : str | None = None def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved","title":"\u591a\u4e2a\u6a21\u578b"},{"location":"tutorial/extra-models/#user_indict","text":"","title":"**user_in.dict() \u7b80\u4ecb"},{"location":"tutorial/extra-models/#pydantic-dict","text":"user_in \u662f\u7c7b UserIn \u7684 Pydantic \u6a21\u578b\u3002 Pydantic \u6a21\u578b\u652f\u6301 .dict() \u65b9\u6cd5\uff0c\u80fd\u8fd4\u56de\u5305\u542b\u6a21\u578b\u6570\u636e\u7684 \u5b57\u5178 \u3002 \u56e0\u6b64\uff0c\u5982\u679c\u4f7f\u7528\u5982\u4e0b\u65b9\u5f0f\u521b\u5efa Pydantic \u5bf9\u8c61 user_in \uff1a user_in = UserIn ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" ) \u5c31\u80fd\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1a user_dict = user_in . dict () \u73b0\u5728\uff0c\u53d8\u91cf user_dict \u4e2d\u7684\u5c31\u662f\u5305\u542b\u6570\u636e\u7684 \u5b57\u5178 \uff08\u53d8\u91cf user_dict \u662f\u5b57\u5178\uff0c\u4e0d\u662f Pydantic \u6a21\u578b\u5bf9\u8c61\uff09\u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1a print ( user_dict ) \u8f93\u51fa\u7684\u5c31\u662f Python \u5b57\u5178 \uff1a { 'username' : 'john' , 'password' : 'secret' , 'email' : 'john.doe@example.com' , 'full_name' : None , }","title":"Pydantic \u7684 .dict()"},{"location":"tutorial/extra-models/#dict","text":"\u628a \u5b57\u5178 user_dict \u4ee5 **user_dict \u5f62\u5f0f\u4f20\u9012\u7ed9\u51fd\u6570\uff08\u6216\u7c7b\uff09\uff0cPython \u4f1a\u6267\u884c \u89e3\u5305 \u64cd\u4f5c\u3002\u5b83\u4f1a\u628a user_dict \u7684\u952e\u548c\u503c\u4f5c\u4e3a\u5173\u952e\u5b57\u53c2\u6570\u76f4\u63a5\u4f20\u9012\u3002 \u56e0\u6b64\uff0c\u63a5\u7740\u4e0a\u9762\u7684 user_dict \u7ee7\u7eed\u7f16\u5199\u5982\u4e0b\u4ee3\u7801\uff1a UserInDB ( ** user_dict ) \u5c31\u4f1a\u751f\u6210\u5982\u4e0b\u7ed3\u679c\uff1a UserInDB ( username = \"john\" , password = \"secret\" , email = \"john.doe@example.com\" , full_name = None , ) \u6216\u66f4\u7cbe\u51c6\uff0c\u76f4\u63a5\u628a\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u5185\u5bb9\u4e0e user_dict \u4e00\u8d77\u4f7f\u7528\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], )","title":"\u89e3\u5305 dict"},{"location":"tutorial/extra-models/#pydantic","text":"\u4e0a\u4f8b\u4e2d \uff0c\u4ece user_in.dict() \u4e2d\u5f97\u5230\u4e86 user_dict \uff0c\u4e0b\u9762\u7684\u4ee3\u7801\uff1a user_dict = user_in . dict () UserInDB ( ** user_dict ) \u7b49\u6548\u4e8e\uff1a UserInDB ( ** user_in . dict ()) \u2026\u2026\u56e0\u4e3a user_in.dict() \u662f\u5b57\u5178\uff0c\u5728\u4f20\u9012\u7ed9 UserInDB \u65f6\uff0c\u628a ** \u52a0\u5728 user_in.dict() \u524d\uff0c\u53ef\u4ee5\u8ba9 Python \u8fdb\u884c \u89e3\u5305 \u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u7528\u5176\u4ed6 Pydantic \u6a21\u578b\u4e2d\u7684\u6570\u636e\u751f\u6210 Pydantic \u6a21\u578b\u3002","title":"\u7528\u5176\u4ed6\u6a21\u578b\u4e2d\u7684\u5185\u5bb9\u751f\u6210 Pydantic \u6a21\u578b"},{"location":"tutorial/extra-models/#dict_1","text":"\u63a5\u4e0b\u6765\uff0c\u7ee7\u7eed\u6dfb\u52a0\u5173\u952e\u5b57\u53c2\u6570 hashed_password=hashed_password \uff0c\u4f8b\u5982\uff1a UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) \u2026\u2026\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b\uff1a UserInDB ( username = user_dict [ \"username\" ], password = user_dict [ \"password\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], hashed_password = hashed_password , ) \u8b66\u544a \u8f85\u52a9\u7684\u9644\u52a0\u51fd\u6570\u53ea\u662f\u4e3a\u4e86\u6f14\u793a\u53ef\u80fd\u7684\u6570\u636e\u6d41\uff0c\u4f46\u5b83\u4eec\u663e\u7136\u4e0d\u80fd\u63d0\u4f9b\u4efb\u4f55\u771f\u6b63\u7684\u5b89\u5168\u673a\u5236\u3002","title":"\u89e3\u5305 dict \u548c\u66f4\u591a\u5173\u952e\u5b57"},{"location":"tutorial/extra-models/#_3","text":"FastAPI \u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u51cf\u5c11\u4ee3\u7801\u91cd\u590d\u3002 \u4ee3\u7801\u91cd\u590d\u4f1a\u5bfc\u81f4 bug\u3001\u5b89\u5168\u95ee\u9898\u3001\u4ee3\u7801\u5931\u6b65\u7b49\u95ee\u9898\uff08\u66f4\u65b0\u4e86\u67d0\u4e2a\u4f4d\u7f6e\u7684\u4ee3\u7801\uff0c\u4f46\u6ca1\u6709\u540c\u6b65\u66f4\u65b0\u5176\u4ed6\u4f4d\u7f6e\u7684\u4ee3\u7801\uff09\u3002 \u4e0a\u9762\u7684\u8fd9\u4e9b\u6a21\u578b\u5171\u4eab\u4e86\u5927\u91cf\u6570\u636e\uff0c\u62e5\u6709\u91cd\u590d\u7684\u5c5e\u6027\u540d\u548c\u7c7b\u578b\u3002 FastAPI \u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002 \u58f0\u660e UserBase \u6a21\u578b\u4f5c\u4e3a\u5176\u4ed6\u6a21\u578b\u7684\u57fa\u7c7b\u3002\u7136\u540e\uff0c\u7528\u8be5\u7c7b\u884d\u751f\u51fa\u7ee7\u627f\u5176\u5c5e\u6027\uff08\u7c7b\u578b\u58f0\u660e\u3001\u9a8c\u8bc1\u7b49\uff09\u7684\u5b50\u7c7b\u3002 \u6240\u6709\u6570\u636e\u8f6c\u6362\u3001\u6821\u9a8c\u3001\u6587\u6863\u7b49\u529f\u80fd\u4ecd\u5c06\u6b63\u5e38\u8fd0\u884c\u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u4ec5\u58f0\u660e\u6a21\u578b\u4e4b\u95f4\u7684\u5dee\u5f02\u90e8\u5206\uff08\u660e\u6587\u5bc6\u7801\u3001\u54c8\u5e0c\u5bc6\u7801\u53ca\u65e0\u5bc6\u7801\uff09\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserBase ( BaseModel ): username : str email : EmailStr full_name : str | None = None class UserIn ( UserBase ): password : str class UserOut ( UserBase ): pass class UserInDB ( UserBase ): hashed_password : str def fake_password_hasher ( raw_password : str ): return \"supersecret\" + raw_password def fake_save_user ( user_in : UserIn ): hashed_password = fake_password_hasher ( user_in . password ) user_in_db = UserInDB ( ** user_in . dict (), hashed_password = hashed_password ) print ( \"User saved! ..not really\" ) return user_in_db @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user_in : UserIn ): user_saved = fake_save_user ( user_in ) return user_saved","title":"\u51cf\u5c11\u91cd\u590d"},{"location":"tutorial/extra-models/#union-anyof","text":"\u54cd\u5e94\u53ef\u4ee5\u58f0\u660e\u4e3a\u4e24\u79cd\u7c7b\u578b\u7684 Union \u7c7b\u578b\uff0c\u5373\u8be5\u54cd\u5e94\u53ef\u4ee5\u662f\u4e24\u79cd\u7c7b\u578b\u4e2d\u7684\u4efb\u610f\u7c7b\u578b\u3002 \u5728 OpenAPI \u4e2d\u53ef\u4ee5\u4f7f\u7528 anyOf \u5b9a\u4e49\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u63d0\u793a typing.Union \uff1a \u7b14\u8bb0 \u5b9a\u4e49 Union \u7c7b\u578b\u65f6\uff0c\u8981\u628a\u8be6\u7ec6\u7684\u7c7b\u578b\u5199\u5728\u524d\u9762\uff0c\u7136\u540e\u662f\u4e0d\u592a\u8be6\u7ec6\u7684\u7c7b\u578b\u3002\u4e0b\u4f8b\u4e2d\uff0c\u66f4\u8be6\u7ec6\u7684 PlaneItem \u4f4d\u4e8e Union[PlaneItem\uff0cCarItem] \u4e2d\u7684 CarItem \u4e4b\u524d\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class BaseItem ( BaseModel ): description : str type : str class CarItem ( BaseItem ): type = \"car\" class PlaneItem ( BaseItem ): type = \"plane\" size : int items = { \"item1\" : { \"description\" : \"All my friends drive a low rider\" , \"type\" : \"car\" }, \"item2\" : { \"description\" : \"Music is my aeroplane, it's my aeroplane\" , \"type\" : \"plane\" , \"size\" : 5 , }, } @app . get ( \"/items/ {item_id} \" , response_model = Union [ PlaneItem , CarItem ]) async def read_item ( item_id : str ): return items [ item_id ]","title":"Union \u6216\u8005 anyOf"},{"location":"tutorial/extra-models/#union-in-python-310","text":"In this example we pass Union[PlaneItem, CarItem] as the value of the argument response_model . Because we are passing it as a value to an argument instead of putting it in a type annotation , we have to use Union even in Python 3.10. If it was in a type annotation we could have used the vertical bar, as: some_variable : PlaneItem | CarItem But if we put that in response_model=PlaneItem | CarItem we would get an error, because Python would try to perform an invalid operation between PlaneItem and CarItem instead of interpreting that as a type annotation.","title":"Union in Python 3.10"},{"location":"tutorial/extra-models/#_4","text":"\u4f7f\u7528\u540c\u6837\u7684\u65b9\u5f0f\u4e5f\u53ef\u4ee5\u58f0\u660e\u7531\u5bf9\u8c61\u5217\u8868\u6784\u6210\u7684\u54cd\u5e94\u3002 \u4e3a\u6b64\uff0c\u8bf7\u4f7f\u7528\u6807\u51c6\u7684 Python typing.List \uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = List [ Item ]) async def read_items (): return items from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str items = [ { \"name\" : \"Foo\" , \"description\" : \"There comes my hero\" }, { \"name\" : \"Red\" , \"description\" : \"It's my aeroplane\" }, ] @app . get ( \"/items/\" , response_model = list [ Item ]) async def read_items (): return items","title":"\u6a21\u578b\u5217\u8868"},{"location":"tutorial/extra-models/#dict_2","text":"\u4efb\u610f\u7684 dict \u90fd\u80fd\u7528\u4e8e\u58f0\u660e\u54cd\u5e94\uff0c\u53ea\u8981\u58f0\u660e\u952e\u548c\u503c\u7684\u7c7b\u578b\uff0c\u65e0\u9700\u4f7f\u7528 Pydantic \u6a21\u578b\u3002 \u4e8b\u5148\u4e0d\u77e5\u9053\u53ef\u7528\u7684\u5b57\u6bb5 / \u5c5e\u6027\u540d\u65f6\uff08Pydantic \u6a21\u578b\u5fc5\u987b\u77e5\u9053\u5b57\u6bb5\u662f\u4ec0\u4e48\uff09\uff0c\u8fd9\u79cd\u65b9\u5f0f\u7279\u522b\u6709\u7528\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 typing.Dict \uff1a Python 3.6 and above Python 3.9 and above from typing import Dict from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = Dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 } from fastapi import FastAPI app = FastAPI () @app . get ( \"/keyword-weights/\" , response_model = dict [ str , float ]) async def read_keyword_weights (): return { \"foo\" : 2.3 , \"bar\" : 3.4 }","title":"dict \u7684\u54cd\u5e94"},{"location":"tutorial/extra-models/#_5","text":"\u9488\u5bf9\u4e0d\u540c\u573a\u666f\uff0c\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u4e0d\u540c\u7684 Pydantic \u6a21\u578b\u7ee7\u627f\u5b9a\u4e49\u7684\u57fa\u7c7b\u3002 \u5b9e\u4f53\u5fc5\u987b\u5177\u6709\u4e0d\u540c\u7684 \u72b6\u6001 \u65f6\uff0c\u4e0d\u5fc5\u4e3a\u4e0d\u540c\u72b6\u6001\u7684\u5b9e\u4f53\u5355\u72ec\u5b9a\u4e49\u6570\u636e\u6a21\u578b\u3002\u4f8b\u5982\uff0c\u7528\u6237 \u5b9e\u4f53 \u5c31\u6709\u5305\u542b password \u3001\u5305\u542b password_hash \u4ee5\u53ca\u4e0d\u542b\u5bc6\u7801\u7b49\u591a\u79cd\u72b6\u6001\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/first-steps/","text":"\u7b2c\u4e00\u6b65 \u00b6 \u6700\u7b80\u5355\u7684 FastAPI \u6587\u4ef6\u6240\u793a\u5982\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u590d\u5236\u4ee3\u7801\u5230 main.py \u3002 \u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u7b14\u8bb0 uvicorn main:app \u547d\u4ee4\u8bf4\u660e\u5982\u4e0b\uff1a main \uff1a main.py \u662f Python \u6a21\u5757 \u3002 app \uff1a main.py \u4e2d app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u4ee3\u7801\u66f4\u65b0\u540e\uff0c\u91cd\u542f\u670d\u52a1\u5668\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u3002 \u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\uff1a INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u8fd9\u662f FastAPI \u5e94\u7528\u5728\u672c\u673a\u63d0\u4f9b\u670d\u52a1\u7684 URL\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000 \u3002 JSON \u54cd\u5e94\u5982\u4e0b\uff1a { \"message\" : \"Hello World\" } API \u6587\u6863 \u00b6 \u8df3\u8f6c\u5230 http://127.0.0.1:8000/docs \u3002 \u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684\uff08 Swagger UI \uff09API \u6587\u6863\uff1a \u5907\u9009 API \u6587\u6863 \u00b6 \u8df3\u8f6c\u5230 http://127.0.0.1:8000/redoc \u3002 \u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684\uff08 ReDoc \uff09\u5907\u9009\u6587\u6863 \uff1a OpenAPI \u00b6 FastAPI \u4f7f\u7528 OpenAPI \uff08\u5b9a\u4e49 API \u7684\u6807\u51c6 \uff09\u628a\u6240\u6709 API \u8f6c\u6362\u6210 \u6982\u56fe \u3002 \u6982\u56fe \u00b6 \u6982\u56fe \u662f\u5bf9\u4e8b\u7269\u7684\u5b9a\u4e49\u4e0e\u63cf\u8ff0\uff0c\u4e0d\u662f\u5b9e\u73b0\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53ea\u662f\u62bd\u8c61\u7684\u63cf\u8ff0\u3002 API \u6982\u56fe \u00b6 \u672c\u6307\u5357\u4e2d\uff0c OpenAPI \u662f\u5b9a\u4e49 API \u6982\u56fe\u7684\u89c4\u8303\u3002 \u8fd9\u91cc\u7684\u6982\u56fe\u5305\u62ec API \u8def\u5f84\u3001\u8def\u5f84\u53c2\u6570\u7b49\u3002 \u6570\u636e\u6982\u56fe \u00b6 \u6982\u56fe \u8fd9\u4e00\u672f\u8bed\u4e5f\u6307 JSON \u7b49\u6570\u636e\u7684\u7ed3\u6784\u3002 \u672c\u6307\u5357\u4e2d\uff0c\u6570\u636e\u6982\u56fe\u662f\u6307 JSON \u5c5e\u6027\u3001\u6570\u636e\u7c7b\u578b\u7b49\u3002 OpenAPI \u548c JSON Schema \u00b6 OpenAPI \u7528\u4e8e\u5b9a\u4e49 API \u6982\u56fe\u3002\u8be5\u6982\u56fe\u5305\u542b\u7531 JSON Schema \u4e3a API \u53d1\u9001\u4e0e\u63a5\u6536\u7684\u6570\u636e\u6240\u505a\u7684\u5b9a\u4e49\u3002 JSON Schema \u662f JSON \u6570\u636e\u6982\u56fe\u6807\u51c6\u3002 \u67e5\u770b openapi.json \u00b6 \u5982\u679c\u60a8\u5bf9 OpenAPI \u539f\u59cb\u6982\u56fe\u611f\u5174\u8da3\uff0cFastAPI \u81ea\u52a8\u751f\u6210\u4e86\u63cf\u8ff0\u6240\u6709 API \u7684 JSON \uff08\u6982\u56fe\uff09\u3002 \u76f4\u63a5\u67e5\u770b\uff1a http://127.0.0.1:8000/openapi.json \u3002 JSON \u6587\u4ef6\u7684\u5f00\u5934\u5982\u4e0b\uff1a { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { ... OpenAPI \u662f\u5e72\u4ec0\u4e48\u7528\u7684 \u00b6 OpenAPI \u6982\u56fe\u7528\u4e8e\u9a71\u52a8 FastAPI \u5185\u7f6e\u7684\u4e24\u4e2a API \u6587\u6863\u3002 \u57fa\u4e8e OpenAPI \u7684\u5907\u9009\u65b9\u6848\u8fd8\u6709\u5f88\u591a\uff0c\u4e3a FastAPI \u5e94\u7528\u6dfb\u52a0\u5176\u4ed6\u5907\u9009\u65b9\u6848\u5f88\u5bb9\u6613\u3002 OpenAPI \u8fd8\u53ef\u4ee5\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u548c API \u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u3002\u4f8b\u5982\u524d\u7aef\u3001\u79fb\u52a8\u7aef\u3001\u7269\u8054\u7f51\u5e94\u7528\u7b49\u3002 \u5206\u6b65\u5c0f\u7ed3 \u00b6 \u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165 FastAPI \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } FastAPI \u662f\u4e3a API \u63d0\u4f9b\u6240\u6709\u529f\u80fd\u7684 Python \u7c7b\u3002 \u6280\u672f\u7ec6\u8282 FastAPI \u662f\u7ee7\u627f\u4e86 Starlette \u7684\u7c7b\u3002 FastAPI \u53ef\u4ee5\u8c03\u7528 Starlette \u7684\u6240\u6709\u529f\u80fd\u3002 \u7b2c\u4e8c\u6b65\uff1a\u521b\u5efa FastAPI \u5b9e\u4f8b \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u53d8\u91cf app \u662f FastAPI \u7684 \u7c7b\u5b9e\u4f8b \u3002 \u8be5\u5b9e\u4f8b\u662f\u521b\u5efa API \u7684\u4e3b\u8981\u4ea4\u4e92\u5bf9\u8c61\u3002 \u8fd9\u4e2a app \u5c31\u662f\u5982\u4e0b\u547d\u4ee4\u4e2d\u7531 uvicorn \u5f15\u7528\u7684\u53d8\u91cf\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u5982\u679c\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u5e94\u7528\uff1a from fastapi import FastAPI my_awesome_api = FastAPI () @my_awesome_api . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u628a\u4ee3\u7801\u5b58\u5165 main.py \uff0c\u8981\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 uvicorn \uff1a $ uvicorn main:my_awesome_api --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u7b2c\u4e09\u6b65\uff1a\u521b\u5efa \u8def\u5f84\u64cd\u4f5c \u00b6 \u8def\u5f84 \u00b6 \u8def\u5f84 \u662f\u6307 URL \u7684\u7b2c\u4e00\u4e2a\u53cd\u659c\u6760\uff08 / \uff09\u53ca\u5b83\u4e4b\u540e\u7684\u5185\u5bb9\u3002 \u4e0b\u5217 URL \u4e2d\uff1a https://example.com/items/foo \u2026\u2026 \u8def\u5f84 \u662f\uff1a /items/foo \u8bf4\u660e \u8def\u5f84 \u901a\u5e38\u4e5f\u53eb\u4f5c \u7aef\u70b9 \u6216 \u8def\u7531 \u3002 \u5f00\u53d1 API \u65f6\uff0c \u8def\u5f84 \u662f\u5206\u79bb concerns \u548c resources \u7684\u4e3b\u8981\u65b9\u5f0f\u3002 \u64cd\u4f5c \u00b6 \u64cd\u4f5c \u6307\u7684\u662f HTTP \u65b9\u6cd5 \u3002 \u5e38\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a POST GET PUT DELETE \u7f55\u89c1\u65b9\u6cd5\u5982\u4e0b\uff1a OPTIONS HEAD PATCH TRACE HTTP \u534f\u8bae\u652f\u6301\u4f7f\u7528\u4e0a\u8ff0\u4efb\u4f55\u4e00\u79cd\uff08\u6216\u591a\u79cd\uff09 \u65b9\u6cd5 \u4e0e\u8def\u5f84\u901a\u4fe1\u3002 \u5f00\u53d1 API \u65f6\uff0c\u901a\u5e38\u8981\u4f7f\u7528\u7279\u5b9a HTTP \u65b9\u6cd5\u6267\u884c\u7279\u5b9a\u64cd\u4f5c\u3002 \u5e38\u7528\u65b9\u6cd5\uff1a POST \uff1a\u521b\u5efa\u6570\u636e GET \uff1a\u8bfb\u53d6\u6570\u636e PUT \uff1a\u66f4\u65b0\u6570\u636e DELETE \uff1a\u5220\u9664\u6570\u636e OpenAPI \u628a HTTP \u65b9\u6cd5\u79f0\u4e3a \u64cd\u4f5c \u3002 \u6211\u4eec\u4e5f\u79f0\u4e4b\u4e3a \u64cd\u4f5c \u3002 \u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @app.get(\"/\") \u544a\u8bc9 FastAPI \u4e0b\u65b9\u51fd\u6570\u4ee5\u5982\u4e0b\u65b9\u5f0f\u5904\u7406\u8bbf\u95ee\u8bf7\u6c42\uff1a \u8bf7\u6c42\u8def\u5f84\u4e3a / \u4f7f\u7528 get \u64cd\u4f5c @decorator \u8bf4\u660e @something \u8bed\u6cd5\u662f Python \u88c5\u9970\u5668 \u3002 \u5c31\u50cf\u4e00\u9876\u653e\u5728\u51fd\u6570\u4e0a\u9762\u7684\u88c5\u9970\u5e3d\uff08\u4f30\u8ba1\u8fd9\u4e2a\u672f\u8bed\u7684\u547d\u540d\u5c31\u662f\u8fd9\u4e48\u6765\u7684\uff09\u3002 \u88c5\u9970\u5668\u63a5\u6536\u4e0b\u65b9\u51fd\u6570\uff0c\u5e76\u7528\u5b83\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002 \u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u544a\u8bc9 FastAPI \u4e0b\u65b9\u51fd\u6570\u5bf9\u5e94\u7684 \u8def\u5f84 \u662f / \u53ca get \u64cd\u4f5c \u3002 \u8fd9\u5c31\u662f \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u3002 \u5176\u4ed6\u5e38\u7528\u64cd\u4f5c\u5982\u4e0b\uff1a @app.post() @app.put() @app.delete() \u53ca\u7f55\u89c1\u7684\u64cd\u4f5c\uff1a @app.options() @app.head() @app.patch() @app.trace() \u63d0\u793a \u60a8\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u4efb\u4f55\u64cd\u4f5c\uff08HTTP\u65b9\u6cd5\uff09\u3002 FastAPI \u4e0d\u5411\u64cd\u4f5c\u5f3a\u5236\u9644\u52a0\u4efb\u4f55\u7279\u5b9a\u542b\u4e49\u3002 \u672c\u7ae0\u4e2d\u7684\u8bf4\u660e\u4ec5\u662f\u6307\u5bfc\uff0c\u4e0d\u662f\u8981\u6c42\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 GraphQL \u65f6\uff0c\u901a\u5e38\u6240\u6709\u64cd\u4f5c\u90fd\u53ea\u4f7f\u7528 post \u4e00\u79cd\u65b9\u6cd5\u3002 \u7b2c\u56db\u6b65\uff1a\u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u00b6 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7531\u4ee5\u4e0b\u51e0\u90e8\u5206\u7ec4\u6210\uff1a \u8def\u5f84 \uff1a / \u64cd\u4f5c \uff1a get \u51fd\u6570 \uff1a \u88c5\u9970\u5668 \u4e0b\u65b9\u7684\u51fd\u6570\uff08\u4f4d\u4e8e @app.get(\"/\") \u4e0b\u65b9\uff09 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u5c31\u662f Python \u51fd\u6570\u3002 FastAPI \u6bcf\u6b21\u63a5\u6536\u4f7f\u7528 GET \u65b9\u6cd5\u8bbf\u95ee URL / \u7684\u8bf7\u6c42\u65f6\u90fd\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 \u672c\u4f8b\u4e2d\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u662f\u5f02\u6b65\u51fd\u6570\uff08 async \uff09\u3002 \u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528 async def \uff0c\u628a\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u5b9a\u4e49\u4e3a\u666e\u901a\u51fd\u6570\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } \u7b14\u8bb0 \u5982\u679c\u4e0d\u6e05\u695a\u666e\u901a\u51fd\u6570\u4e0e\u5f02\u6b65\u51fd\u6570\u7684\u533a\u522b\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65\uff1a\u7b49\u4e0d\u53ca\u4e86\uff1f \u4e00\u8282\u4e2d\u7684\u5185\u5bb9\u3002 \u7b2c\u4e94\u6b65\uff1a\u8fd4\u56de\u5185\u5bb9 \u00b6 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de \u5b57\u5178 \u3001 \u5217\u8868 \uff0c\u4ee5\u53ca \u5b57\u7b26\u4e32 \u3001 \u6574\u6570 \u7b49\u5355\u503c\u3002 \u8fd8\u53ef\u4ee5\u8fd4\u56de Pydantic \u6a21\u578b\uff08\u7a0d\u540e\u4ecb\u7ecd\uff09\u3002 \u8fd8\u6709\u5f88\u591a\u80fd\u81ea\u52a8\u8f6c\u6362\u4e3a JSON \u7684\u5bf9\u8c61\u4e0e\u6a21\u578b\uff08\u6bd4\u5982 ORM \u7b49\uff09\u3002\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u6700\u559c\u6b22\u7684\u5bf9\u8c61\uff0cFastAPI \u5f88\u53ef\u80fd\u5df2\u7ecf\u4e3a\u5176\u63d0\u4f9b\u652f\u6301\u4e86\u3002 \u5c0f\u7ed3 \u00b6 \u5bfc\u5165 FastAPI \u3002 \u521b\u5efa app \u5b9e\u4f8b\u3002 \u7f16\u5199 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\uff08\u5982 @app.get(\"/\") \u3002 \u7f16\u5199 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u5982 def root(): ... \u3002 \u8fd0\u884c\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u5982 uvicorn main:app --reload \u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"tutorial/first-steps/#_1","text":"\u6700\u7b80\u5355\u7684 FastAPI \u6587\u4ef6\u6240\u793a\u5982\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u590d\u5236\u4ee3\u7801\u5230 main.py \u3002 \u8fd0\u884c\u5b9e\u65f6\u670d\u52a1\u5668\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) <span style=\"color: green;\">INFO</span>: Started reloader process [28720] <span style=\"color: green;\">INFO</span>: Started server process [28722] <span style=\"color: green;\">INFO</span>: Waiting for application startup. <span style=\"color: green;\">INFO</span>: Application startup complete. \u7b14\u8bb0 uvicorn main:app \u547d\u4ee4\u8bf4\u660e\u5982\u4e0b\uff1a main \uff1a main.py \u662f Python \u6a21\u5757 \u3002 app \uff1a main.py \u4e2d app = FastAPI() \u521b\u5efa\u7684\u5bf9\u8c61\u3002 --reload \uff1a\u4ee3\u7801\u66f4\u65b0\u540e\uff0c\u91cd\u542f\u670d\u52a1\u5668\u3002\u4ec5\u5728\u5f00\u53d1\u65f6\u4f7f\u7528\u3002 \u8f93\u51fa\u4fe1\u606f\u5982\u4e0b\uff1a INFO: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u8fd9\u662f FastAPI \u5e94\u7528\u5728\u672c\u673a\u63d0\u4f9b\u670d\u52a1\u7684 URL\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"tutorial/first-steps/#_2","text":"\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000 \u3002 JSON \u54cd\u5e94\u5982\u4e0b\uff1a { \"message\" : \"Hello World\" }","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/first-steps/#api","text":"\u8df3\u8f6c\u5230 http://127.0.0.1:8000/docs \u3002 \u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684\uff08 Swagger UI \uff09API \u6587\u6863\uff1a","title":"API \u6587\u6863"},{"location":"tutorial/first-steps/#api_1","text":"\u8df3\u8f6c\u5230 http://127.0.0.1:8000/redoc \u3002 \u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684\uff08 ReDoc \uff09\u5907\u9009\u6587\u6863 \uff1a","title":"\u5907\u9009 API \u6587\u6863"},{"location":"tutorial/first-steps/#openapi","text":"FastAPI \u4f7f\u7528 OpenAPI \uff08\u5b9a\u4e49 API \u7684\u6807\u51c6 \uff09\u628a\u6240\u6709 API \u8f6c\u6362\u6210 \u6982\u56fe \u3002","title":"OpenAPI"},{"location":"tutorial/first-steps/#_3","text":"\u6982\u56fe \u662f\u5bf9\u4e8b\u7269\u7684\u5b9a\u4e49\u4e0e\u63cf\u8ff0\uff0c\u4e0d\u662f\u5b9e\u73b0\u529f\u80fd\u7684\u4ee3\u7801\uff0c\u53ea\u662f\u62bd\u8c61\u7684\u63cf\u8ff0\u3002","title":"\u6982\u56fe"},{"location":"tutorial/first-steps/#api_2","text":"\u672c\u6307\u5357\u4e2d\uff0c OpenAPI \u662f\u5b9a\u4e49 API \u6982\u56fe\u7684\u89c4\u8303\u3002 \u8fd9\u91cc\u7684\u6982\u56fe\u5305\u62ec API \u8def\u5f84\u3001\u8def\u5f84\u53c2\u6570\u7b49\u3002","title":"API \u6982\u56fe"},{"location":"tutorial/first-steps/#_4","text":"\u6982\u56fe \u8fd9\u4e00\u672f\u8bed\u4e5f\u6307 JSON \u7b49\u6570\u636e\u7684\u7ed3\u6784\u3002 \u672c\u6307\u5357\u4e2d\uff0c\u6570\u636e\u6982\u56fe\u662f\u6307 JSON \u5c5e\u6027\u3001\u6570\u636e\u7c7b\u578b\u7b49\u3002","title":"\u6570\u636e\u6982\u56fe"},{"location":"tutorial/first-steps/#openapi-json-schema","text":"OpenAPI \u7528\u4e8e\u5b9a\u4e49 API \u6982\u56fe\u3002\u8be5\u6982\u56fe\u5305\u542b\u7531 JSON Schema \u4e3a API \u53d1\u9001\u4e0e\u63a5\u6536\u7684\u6570\u636e\u6240\u505a\u7684\u5b9a\u4e49\u3002 JSON Schema \u662f JSON \u6570\u636e\u6982\u56fe\u6807\u51c6\u3002","title":"OpenAPI \u548c JSON Schema"},{"location":"tutorial/first-steps/#openapijson","text":"\u5982\u679c\u60a8\u5bf9 OpenAPI \u539f\u59cb\u6982\u56fe\u611f\u5174\u8da3\uff0cFastAPI \u81ea\u52a8\u751f\u6210\u4e86\u63cf\u8ff0\u6240\u6709 API \u7684 JSON \uff08\u6982\u56fe\uff09\u3002 \u76f4\u63a5\u67e5\u770b\uff1a http://127.0.0.1:8000/openapi.json \u3002 JSON \u6587\u4ef6\u7684\u5f00\u5934\u5982\u4e0b\uff1a { \"openapi\" : \"3.0.2\" , \"info\" : { \"title\" : \"FastAPI\" , \"version\" : \"0.1.0\" }, \"paths\" : { \"/items/\" : { \"get\" : { \"responses\" : { \"200\" : { \"description\" : \"Successful Response\" , \"content\" : { \"application/json\" : { ...","title":"\u67e5\u770b openapi.json"},{"location":"tutorial/first-steps/#openapi_1","text":"OpenAPI \u6982\u56fe\u7528\u4e8e\u9a71\u52a8 FastAPI \u5185\u7f6e\u7684\u4e24\u4e2a API \u6587\u6863\u3002 \u57fa\u4e8e OpenAPI \u7684\u5907\u9009\u65b9\u6848\u8fd8\u6709\u5f88\u591a\uff0c\u4e3a FastAPI \u5e94\u7528\u6dfb\u52a0\u5176\u4ed6\u5907\u9009\u65b9\u6848\u5f88\u5bb9\u6613\u3002 OpenAPI \u8fd8\u53ef\u4ee5\u7528\u4e8e\u81ea\u52a8\u751f\u6210\u548c API \u901a\u4fe1\u7684\u5ba2\u6237\u7aef\u4ee3\u7801\u3002\u4f8b\u5982\u524d\u7aef\u3001\u79fb\u52a8\u7aef\u3001\u7269\u8054\u7f51\u5e94\u7528\u7b49\u3002","title":"OpenAPI \u662f\u5e72\u4ec0\u4e48\u7528\u7684"},{"location":"tutorial/first-steps/#_5","text":"","title":"\u5206\u6b65\u5c0f\u7ed3"},{"location":"tutorial/first-steps/#fastapi","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } FastAPI \u662f\u4e3a API \u63d0\u4f9b\u6240\u6709\u529f\u80fd\u7684 Python \u7c7b\u3002 \u6280\u672f\u7ec6\u8282 FastAPI \u662f\u7ee7\u627f\u4e86 Starlette \u7684\u7c7b\u3002 FastAPI \u53ef\u4ee5\u8c03\u7528 Starlette \u7684\u6240\u6709\u529f\u80fd\u3002","title":"\u7b2c\u4e00\u6b65\uff1a\u5bfc\u5165 FastAPI"},{"location":"tutorial/first-steps/#fastapi_1","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u53d8\u91cf app \u662f FastAPI \u7684 \u7c7b\u5b9e\u4f8b \u3002 \u8be5\u5b9e\u4f8b\u662f\u521b\u5efa API \u7684\u4e3b\u8981\u4ea4\u4e92\u5bf9\u8c61\u3002 \u8fd9\u4e2a app \u5c31\u662f\u5982\u4e0b\u547d\u4ee4\u4e2d\u7531 uvicorn \u5f15\u7528\u7684\u53d8\u91cf\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u5982\u679c\u7528\u4ee5\u4e0b\u4ee3\u7801\u521b\u5efa\u5e94\u7528\uff1a from fastapi import FastAPI my_awesome_api = FastAPI () @my_awesome_api . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u628a\u4ee3\u7801\u5b58\u5165 main.py \uff0c\u8981\u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528 uvicorn \uff1a $ uvicorn main:my_awesome_api --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"\u7b2c\u4e8c\u6b65\uff1a\u521b\u5efa FastAPI \u5b9e\u4f8b"},{"location":"tutorial/first-steps/#_6","text":"","title":"\u7b2c\u4e09\u6b65\uff1a\u521b\u5efa\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/first-steps/#_7","text":"\u8def\u5f84 \u662f\u6307 URL \u7684\u7b2c\u4e00\u4e2a\u53cd\u659c\u6760\uff08 / \uff09\u53ca\u5b83\u4e4b\u540e\u7684\u5185\u5bb9\u3002 \u4e0b\u5217 URL \u4e2d\uff1a https://example.com/items/foo \u2026\u2026 \u8def\u5f84 \u662f\uff1a /items/foo \u8bf4\u660e \u8def\u5f84 \u901a\u5e38\u4e5f\u53eb\u4f5c \u7aef\u70b9 \u6216 \u8def\u7531 \u3002 \u5f00\u53d1 API \u65f6\uff0c \u8def\u5f84 \u662f\u5206\u79bb concerns \u548c resources \u7684\u4e3b\u8981\u65b9\u5f0f\u3002","title":"\u8def\u5f84"},{"location":"tutorial/first-steps/#_8","text":"\u64cd\u4f5c \u6307\u7684\u662f HTTP \u65b9\u6cd5 \u3002 \u5e38\u7528\u65b9\u6cd5\u5982\u4e0b\uff1a POST GET PUT DELETE \u7f55\u89c1\u65b9\u6cd5\u5982\u4e0b\uff1a OPTIONS HEAD PATCH TRACE HTTP \u534f\u8bae\u652f\u6301\u4f7f\u7528\u4e0a\u8ff0\u4efb\u4f55\u4e00\u79cd\uff08\u6216\u591a\u79cd\uff09 \u65b9\u6cd5 \u4e0e\u8def\u5f84\u901a\u4fe1\u3002 \u5f00\u53d1 API \u65f6\uff0c\u901a\u5e38\u8981\u4f7f\u7528\u7279\u5b9a HTTP \u65b9\u6cd5\u6267\u884c\u7279\u5b9a\u64cd\u4f5c\u3002 \u5e38\u7528\u65b9\u6cd5\uff1a POST \uff1a\u521b\u5efa\u6570\u636e GET \uff1a\u8bfb\u53d6\u6570\u636e PUT \uff1a\u66f4\u65b0\u6570\u636e DELETE \uff1a\u5220\u9664\u6570\u636e OpenAPI \u628a HTTP \u65b9\u6cd5\u79f0\u4e3a \u64cd\u4f5c \u3002 \u6211\u4eec\u4e5f\u79f0\u4e4b\u4e3a \u64cd\u4f5c \u3002","title":"\u64cd\u4f5c"},{"location":"tutorial/first-steps/#_9","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @app.get(\"/\") \u544a\u8bc9 FastAPI \u4e0b\u65b9\u51fd\u6570\u4ee5\u5982\u4e0b\u65b9\u5f0f\u5904\u7406\u8bbf\u95ee\u8bf7\u6c42\uff1a \u8bf7\u6c42\u8def\u5f84\u4e3a / \u4f7f\u7528 get \u64cd\u4f5c @decorator \u8bf4\u660e @something \u8bed\u6cd5\u662f Python \u88c5\u9970\u5668 \u3002 \u5c31\u50cf\u4e00\u9876\u653e\u5728\u51fd\u6570\u4e0a\u9762\u7684\u88c5\u9970\u5e3d\uff08\u4f30\u8ba1\u8fd9\u4e2a\u672f\u8bed\u7684\u547d\u540d\u5c31\u662f\u8fd9\u4e48\u6765\u7684\uff09\u3002 \u88c5\u9970\u5668\u63a5\u6536\u4e0b\u65b9\u51fd\u6570\uff0c\u5e76\u7528\u5b83\u6267\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002 \u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e2a\u88c5\u9970\u5668\u544a\u8bc9 FastAPI \u4e0b\u65b9\u51fd\u6570\u5bf9\u5e94\u7684 \u8def\u5f84 \u662f / \u53ca get \u64cd\u4f5c \u3002 \u8fd9\u5c31\u662f \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u3002 \u5176\u4ed6\u5e38\u7528\u64cd\u4f5c\u5982\u4e0b\uff1a @app.post() @app.put() @app.delete() \u53ca\u7f55\u89c1\u7684\u64cd\u4f5c\uff1a @app.options() @app.head() @app.patch() @app.trace() \u63d0\u793a \u60a8\u53ef\u4ee5\u968f\u610f\u4f7f\u7528\u4efb\u4f55\u64cd\u4f5c\uff08HTTP\u65b9\u6cd5\uff09\u3002 FastAPI \u4e0d\u5411\u64cd\u4f5c\u5f3a\u5236\u9644\u52a0\u4efb\u4f55\u7279\u5b9a\u542b\u4e49\u3002 \u672c\u7ae0\u4e2d\u7684\u8bf4\u660e\u4ec5\u662f\u6307\u5bfc\uff0c\u4e0d\u662f\u8981\u6c42\u3002 \u4f8b\u5982\uff0c\u4f7f\u7528 GraphQL \u65f6\uff0c\u901a\u5e38\u6240\u6709\u64cd\u4f5c\u90fd\u53ea\u4f7f\u7528 post \u4e00\u79cd\u65b9\u6cd5\u3002","title":"\u5b9a\u4e49\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668"},{"location":"tutorial/first-steps/#_10","text":"\u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7531\u4ee5\u4e0b\u51e0\u90e8\u5206\u7ec4\u6210\uff1a \u8def\u5f84 \uff1a / \u64cd\u4f5c \uff1a get \u51fd\u6570 \uff1a \u88c5\u9970\u5668 \u4e0b\u65b9\u7684\u51fd\u6570\uff08\u4f4d\u4e8e @app.get(\"/\") \u4e0b\u65b9\uff09 from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u5c31\u662f Python \u51fd\u6570\u3002 FastAPI \u6bcf\u6b21\u63a5\u6536\u4f7f\u7528 GET \u65b9\u6cd5\u8bbf\u95ee URL / \u7684\u8bf7\u6c42\u65f6\u90fd\u4f1a\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u3002 \u672c\u4f8b\u4e2d\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u662f\u5f02\u6b65\u51fd\u6570\uff08 async \uff09\u3002 \u4e5f\u53ef\u4ee5\u4e0d\u4f7f\u7528 async def \uff0c\u628a\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u5b9a\u4e49\u4e3a\u666e\u901a\u51fd\u6570\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) def root (): return { \"message\" : \"Hello World\" } \u7b14\u8bb0 \u5982\u679c\u4e0d\u6e05\u695a\u666e\u901a\u51fd\u6570\u4e0e\u5f02\u6b65\u51fd\u6570\u7684\u533a\u522b\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65\uff1a\u7b49\u4e0d\u53ca\u4e86\uff1f \u4e00\u8282\u4e2d\u7684\u5185\u5bb9\u3002","title":"\u7b2c\u56db\u6b65\uff1a\u5b9a\u4e49\u8def\u5f84\u64cd\u4f5c\u51fd\u6570"},{"location":"tutorial/first-steps/#_11","text":"from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } \u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u53ef\u4ee5\u8fd4\u56de \u5b57\u5178 \u3001 \u5217\u8868 \uff0c\u4ee5\u53ca \u5b57\u7b26\u4e32 \u3001 \u6574\u6570 \u7b49\u5355\u503c\u3002 \u8fd8\u53ef\u4ee5\u8fd4\u56de Pydantic \u6a21\u578b\uff08\u7a0d\u540e\u4ecb\u7ecd\uff09\u3002 \u8fd8\u6709\u5f88\u591a\u80fd\u81ea\u52a8\u8f6c\u6362\u4e3a JSON \u7684\u5bf9\u8c61\u4e0e\u6a21\u578b\uff08\u6bd4\u5982 ORM \u7b49\uff09\u3002\u60a8\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u6700\u559c\u6b22\u7684\u5bf9\u8c61\uff0cFastAPI \u5f88\u53ef\u80fd\u5df2\u7ecf\u4e3a\u5176\u63d0\u4f9b\u652f\u6301\u4e86\u3002","title":"\u7b2c\u4e94\u6b65\uff1a\u8fd4\u56de\u5185\u5bb9"},{"location":"tutorial/first-steps/#_12","text":"\u5bfc\u5165 FastAPI \u3002 \u521b\u5efa app \u5b9e\u4f8b\u3002 \u7f16\u5199 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\uff08\u5982 @app.get(\"/\") \u3002 \u7f16\u5199 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u5982 def root(): ... \u3002 \u8fd0\u884c\u5f00\u53d1\u670d\u52a1\u5668\uff0c\u5982 uvicorn main:app --reload \u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/handling-errors/","text":"\u5904\u7406\u9519\u8bef \u00b6 \u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u3002 \u8fd9\u91cc\u6240\u8c13\u7684\u5ba2\u6237\u7aef\u5305\u62ec\u524d\u7aef\u6d4f\u89c8\u5668\u3001\u5176\u4ed6\u5e94\u7528\u3001\u7269\u8054\u7f51\u8bbe\u5907\u7b49\u3002 \u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u7684\u573a\u666f\u4e3b\u8981\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef\u6ca1\u6709\u6267\u884c\u64cd\u4f5c\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u6ca1\u6709\u8bbf\u95ee\u8d44\u6e90\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u8981\u8bbf\u95ee\u7684\u9879\u76ee\u4e0d\u5b58\u5728 \u7b49\u7b49 ... \u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\u65f6\uff0c\u901a\u5e38\u8981\u8fd4\u56de 4XX \uff08400 \u81f3 499\uff09 HTTP \u72b6\u6001\u7801 \u3002 4XX \u72b6\u6001\u7801\u4e0e\u8868\u793a\u8bf7\u6c42\u6210\u529f\u7684 2XX \uff08200 \u81f3 299\uff09 HTTP \u72b6\u6001\u7801\u7c7b\u4f3c\u3002 \u53ea\u4e0d\u8fc7\uff0c 4XX \u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u53d1\u751f\u7684\u9519\u8bef\u3002 \u5927\u5bb6\u90fd\u77e5\u9053 404 Not Found \u9519\u8bef\uff0c\u8fd8\u6709\u8c03\u4f83\u8fd9\u4e2a\u9519\u8bef\u7684\u7b11\u8bdd\u5427\uff1f \u4f7f\u7528 HTTPException \u00b6 \u5411\u5ba2\u6237\u7aef\u8fd4\u56de HTTP \u9519\u8bef\u54cd\u5e94\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTPException \u3002 \u5bfc\u5165 HTTPException \u00b6 from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]} \u89e6\u53d1 HTTPException \u00b6 HTTPException \u662f\u989d\u5916\u5305\u542b\u4e86\u548c API \u6709\u5173\u6570\u636e\u7684\u5e38\u89c4 Python \u5f02\u5e38\u3002 \u56e0\u4e3a\u662f Python \u5f02\u5e38\uff0c\u6240\u4ee5\u4e0d\u80fd return \uff0c\u53ea\u80fd raise \u3002 \u5982\u5728\u8c03\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u91cc\u7684\u5de5\u5177\u51fd\u6570\u65f6\uff0c\u89e6\u53d1\u4e86 HTTPException \uff0cFastAPI \u5c31\u4e0d\u518d\u7ee7\u7eed\u6267\u884c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u7684\u540e\u7eed\u4ee3\u7801\uff0c\u800c\u662f\u7acb\u5373\u7ec8\u6b62\u8bf7\u6c42\uff0c\u5e76\u628a HTTPException \u7684 HTTP \u9519\u8bef\u53d1\u9001\u81f3\u5ba2\u6237\u7aef\u3002 \u5728\u4ecb\u7ecd\u4f9d\u8d56\u9879\u4e0e\u5b89\u5168\u7684\u7ae0\u8282\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u7528 raise \u5f02\u5e38\u4ee3\u66ff return \u503c\u7684\u4f18\u52bf\u3002 \u672c\u4f8b\u4e2d\uff0c\u5ba2\u6237\u7aef\u7528 ID \u8bf7\u6c42\u7684 item \u4e0d\u5b58\u5728\u65f6\uff0c\u89e6\u53d1\u72b6\u6001\u7801\u4e3a 404 \u7684\u5f02\u5e38\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]} \u54cd\u5e94\u7ed3\u679c \u00b6 \u8bf7\u6c42\u4e3a http://example.com/items/foo \uff08 item_id \u4e3a **foo** \uff09\u65f6\uff0c\u5ba2\u6237\u7aef\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 200 \u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"item\" : \"The Foo Wrestlers\" } \u4f46\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42 http://example.com/items/bar \uff08 item_id **bar** \u4e0d\u5b58\u5728\u65f6\uff09\uff0c\u5219\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 404\uff08 \u672a\u627e\u5230 \u9519\u8bef\uff09\u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"detail\" : \"Item not found\" } \u63d0\u793a \u89e6\u53d1 HTTPException \u65f6\uff0c\u53ef\u4ee5\u7528\u53c2\u6570 detail \u4f20\u9012\u4efb\u4f55\u80fd\u8f6c\u6362\u4e3a JSON \u7684\u503c\uff0c\u4e0d\u4ec5\u9650\u4e8e str \u3002 \u8fd8\u652f\u6301\u4f20\u9012 dict \u3001 list \u7b49\u6570\u636e\u7ed3\u6784\u3002 FastAPI \u80fd\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u5e76\u5c06\u4e4b\u8f6c\u6362\u4e3a JSON\u3002 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 \u00b6 \u6709\u4e9b\u573a\u666f\u4e0b\u8981\u4e3a HTTP \u9519\u8bef\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\u3002\u4f8b\u5982\uff0c\u51fa\u4e8e\u67d0\u4e9b\u65b9\u9762\u7684\u5b89\u5168\u9700\u8981\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e0d\u4f1a\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u4f7f\u7528\u54cd\u5e94\u5934\u3002 \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u9ad8\u7ea7\u5e94\u7528\u573a\u666f\uff0c\u8fd8\u662f\u9700\u8981\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items-header/ {item_id} \" ) async def read_item_header ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" , headers = { \"X-Error\" : \"There goes my error\" }, ) return { \"item\" : items [ item_id ]} \u5b89\u88c5\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668 \u00b6 \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5904\u7406\u5668\uff0c\u8981\u4f7f\u7528 Starlette \u7684\u5f02\u5e38\u5de5\u5177 \u3002 \u5047\u8bbe\u8981\u89e6\u53d1\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u53eb\u4f5c UnicornException \u3002 \u4e14\u9700\u8981 FastAPI \u5b9e\u73b0\u5168\u5c40\u5904\u7406\u8be5\u5f02\u5e38\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u7528 @app.exception_handler() \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5f02\u5e38\u63a7\u5236\u5668\uff1a from fastapi import FastAPI , Request from fastapi.responses import JSONResponse class UnicornException ( Exception ): def __init__ ( self , name : str ): self . name = name app = FastAPI () @app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request : Request , exc : UnicornException ): return JSONResponse ( status_code = 418 , content = { \"message\" : f \"Oops! { exc . name } did something. There goes a rainbow...\" }, ) @app . get ( \"/unicorns/ {name} \" ) async def read_unicorn ( name : str ): if name == \"yolo\" : raise UnicornException ( name = name ) return { \"unicorn_name\" : name } \u8bf7\u6c42 /unicorns/yolo \u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u4f1a\u89e6\u53d1 UnicornException \u3002 \u4f46\u8be5\u5f02\u5e38\u5c06\u4f1a\u88ab unicorn_exception_handler \u5904\u7406\u3002 \u63a5\u6536\u5230\u7684\u9519\u8bef\u4fe1\u606f\u6e05\u6670\u660e\u4e86\uff0cHTTP \u72b6\u6001\u7801\u4e3a 418 \uff0cJSON \u5185\u5bb9\u5982\u4e0b\uff1a { \"message\" : \"Oops! yolo did something. There goes a rainbow...\" } \u6280\u672f\u7ec6\u8282 from starlette.requests import Request \u548c from starlette.responses import JSONResponse \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bfc\u5165 Request \u548c JSONResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u64cd\u4f5c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002\u540c\u7406\uff0c Request \u4e5f\u662f\u5982\u6b64\u3002 \u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668 \u00b6 FastAPI \u81ea\u5e26\u4e86\u4e00\u4e9b\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u89e6\u53d1 HTTPException \u6216\u8bf7\u6c42\u65e0\u6548\u6570\u636e\u65f6\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u8fd4\u56de\u9ed8\u8ba4\u7684 JSON \u54cd\u5e94\u7ed3\u679c\u3002 \u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u5904\u7406\u5668\u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8986\u76d6\u8bf7\u6c42\u9a8c\u8bc1\u5f02\u5e38 \u00b6 \u8bf7\u6c42\u4e2d\u5305\u542b\u65e0\u6548\u6570\u636e\u65f6\uff0c FastAPI \u5185\u90e8\u4f1a\u89e6\u53d1 RequestValidationError \u3002 \u8be5\u5f02\u5e38\u4e5f\u5185\u7f6e\u4e86\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u65f6\u9700\u8981\u5bfc\u5165 RequestValidationError \uff0c\u5e76\u7528 @app.exception_handler(RequestValidationError) \u88c5\u9970\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8fd9\u6837\uff0c\u5f02\u5e38\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u63a5\u6536 Request \u4e0e\u5f02\u5e38\u3002 from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u8bbf\u95ee /items/foo \uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362\u4e86\u9ed8\u8ba4 JSON \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u4ee5\u4e0b\u662f\u6587\u672c\u683c\u5f0f\u7684\u9519\u8bef\u4fe1\u606f\uff1a 1 validation error path -> item_id value is not a valid integer (type=type_error.integer) RequestValidationError vs ValidationError \u00b6 \u8b66\u544a \u5982\u679c\u60a8\u89c9\u5f97\u73b0\u5728\u8fd8\u7528\u4e0d\u5230\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff0c\u53ef\u4ee5\u5148\u8df3\u8fc7\u4e0b\u9762\u7684\u5185\u5bb9\u3002 RequestValidationError \u662f Pydantic \u7684 ValidationError \u7684\u5b50\u7c7b\u3002 FastAPI \u8c03\u7528\u7684\u5c31\u662f RequestValidationError \u7c7b\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5728 response_model \u4e2d\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u4e14\u6570\u636e\u6709\u9519\u8bef\u65f6\uff0c\u5728\u65e5\u5fd7\u4e2d\u5c31\u4f1a\u770b\u5230\u8fd9\u4e2a\u9519\u8bef\u3002 \u4f46\u5ba2\u6237\u7aef\u6216\u7528\u6237\u770b\u4e0d\u5230\u8fd9\u4e2a\u9519\u8bef\u3002\u53cd\u4e4b\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u662f HTTP \u72b6\u6001\u7801\u4e3a 500 \u7684 \u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef \u3002 \u8fd9\u662f\u56e0\u4e3a\u5728 \u54cd\u5e94 \u6216\u4ee3\u7801\uff08\u4e0d\u662f\u5728\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u91cc\uff09\u4e2d\u51fa\u73b0\u7684 Pydantic ValidationError \u662f\u4ee3\u7801\u7684 bug\u3002 \u4fee\u590d\u9519\u8bef\u65f6\uff0c\u5ba2\u6237\u7aef\u6216\u7528\u6237\u4e0d\u80fd\u8bbf\u95ee\u9519\u8bef\u7684\u5185\u90e8\u4fe1\u606f\uff0c\u5426\u5219\u4f1a\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002 \u8986\u76d6 HTTPException \u9519\u8bef\u5904\u7406\u5668 \u00b6 \u540c\u7406\uff0c\u4e5f\u53ef\u4ee5\u8986\u76d6 HTTPException \u5904\u7406\u5668\u3002 \u4f8b\u5982\uff0c\u53ea\u4e3a\u9519\u8bef\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u8fd4\u56de JSON \u683c\u5f0f\u7684\u5185\u5bb9\uff1a from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u6280\u672f\u7ec6\u8282 \u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import PlainTextResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002 \u4f7f\u7528 RequestValidationError \u7684\u8bf7\u6c42\u4f53 \u00b6 RequestValidationError \u5305\u542b\u5176\u63a5\u6536\u5230\u7684\u65e0\u6548\u6570\u636e\u8bf7\u6c42\u7684 body \u3002 \u5f00\u53d1\u65f6\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u8bf7\u6c42\u4f53\u751f\u6210\u65e5\u5fd7\u3001\u8c03\u8bd5\u9519\u8bef\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u3002 from fastapi import FastAPI , Request , status from fastapi.encoders import jsonable_encoder from fastapi.exceptions import RequestValidationError from fastapi.responses import JSONResponse from pydantic import BaseModel app = FastAPI () @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request : Request , exc : RequestValidationError ): return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ({ \"detail\" : exc . errors (), \"body\" : exc . body }), ) class Item ( BaseModel ): title : str size : int @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u73b0\u5728\u8bd5\u7740\u53d1\u9001\u4e00\u4e2a\u65e0\u6548\u7684 item \uff0c\u4f8b\u5982\uff1a { \"title\" : \"towel\" , \"size\" : \"XL\" } \u6536\u5230\u7684\u54cd\u5e94\u5305\u542b body \u4fe1\u606f\uff0c\u5e76\u8bf4\u660e\u6570\u636e\u662f\u65e0\u6548\u7684\uff1a { \"detail\" : [ { \"loc\" : [ \"body\" , \"size\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ], \"body\" : { \"title\" : \"towel\" , \"size\" : \"XL\" } } FastAPI HTTPException vs Starlette HTTPException \u00b6 FastAPI \u4e5f\u63d0\u4f9b\u4e86\u81ea\u6709\u7684 HTTPException \u3002 FastAPI \u7684 HTTPException \u7ee7\u627f\u81ea Starlette \u7684 HTTPException \u9519\u8bef\u7c7b\u3002 \u5b83\u4eec\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c FastAPI \u7684 HTTPException \u53ef\u4ee5\u5728\u54cd\u5e94\u4e2d\u6dfb\u52a0\u54cd\u5e94\u5934\u3002 OAuth 2.0 \u7b49\u5b89\u5168\u5de5\u5177\u9700\u8981\u5728\u5185\u90e8\u8c03\u7528\u8fd9\u4e9b\u54cd\u5e94\u5934\u3002 \u56e0\u6b64\u60a8\u53ef\u4ee5\u7ee7\u7eed\u50cf\u5e73\u5e38\u4e00\u6837\u5728\u4ee3\u7801\u4e2d\u89e6\u53d1 FastAPI \u7684 HTTPException \u3002 \u4f46\u6ce8\u518c\u5f02\u5e38\u5904\u7406\u5668\u65f6\uff0c\u5e94\u8be5\u6ce8\u518c\u5230\u6765\u81ea Starlette \u7684 HTTPException \u3002 \u8fd9\u6837\u505a\u662f\u4e3a\u4e86\uff0c\u5f53 Starlette \u7684\u5185\u90e8\u4ee3\u7801\u3001\u6269\u5c55\u6216\u63d2\u4ef6\u89e6\u53d1 Starlette HTTPException \u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u3001\u5e76\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u6ce8\u610f\uff0c\u672c\u4f8b\u4ee3\u7801\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86\u8fd9\u4e24\u4e2a HTTPException \uff0c\u6b64\u65f6\uff0c\u8981\u628a Starlette \u7684 HTTPException \u547d\u540d\u4e3a StarletteHTTPException \uff1a from starlette.exceptions import HTTPException as StarletteHTTPException \u590d\u7528 FastAPI \u5f02\u5e38\u5904\u7406\u5668 \u00b6 FastAPI \u652f\u6301\u5148\u5bf9\u5f02\u5e38\u8fdb\u884c\u67d0\u4e9b\u5904\u7406\uff0c\u7136\u540e\u518d\u4f7f\u7528 FastAPI \u4e2d\u5904\u7406\u8be5\u5f02\u5e38\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u4ece fastapi.exception_handlers \u4e2d\u5bfc\u5165\u8981\u590d\u7528\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\uff1a from fastapi import FastAPI , HTTPException from fastapi.exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) from fastapi.exceptions import RequestValidationError from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ): print ( f \"OMG! An HTTP error!: { repr ( exc ) } \" ) return await http_exception_handler ( request , exc ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): print ( f \"OMG! The client sent invalid data!: { exc } \" ) return await request_validation_exception_handler ( request , exc ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u867d\u7136\uff0c\u672c\u4f8b\u53ea\u662f \u6253\u5370 \u4e86\u5938\u5927\u5176\u8bcd\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u4e5f\u8db3\u4ee5\u8bf4\u660e\uff0c\u53ef\u4ee5\u5728\u5904\u7406\u5f02\u5e38\u4e4b\u540e\u518d\u590d\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u5668\u3002","title":"\u5904\u7406\u9519\u8bef"},{"location":"tutorial/handling-errors/#_1","text":"\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u3002 \u8fd9\u91cc\u6240\u8c13\u7684\u5ba2\u6237\u7aef\u5305\u62ec\u524d\u7aef\u6d4f\u89c8\u5668\u3001\u5176\u4ed6\u5e94\u7528\u3001\u7269\u8054\u7f51\u8bbe\u5907\u7b49\u3002 \u9700\u8981\u5411\u5ba2\u6237\u7aef\u8fd4\u56de\u9519\u8bef\u63d0\u793a\u7684\u573a\u666f\u4e3b\u8981\u5982\u4e0b\uff1a \u5ba2\u6237\u7aef\u6ca1\u6709\u6267\u884c\u64cd\u4f5c\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u6ca1\u6709\u8bbf\u95ee\u8d44\u6e90\u7684\u6743\u9650 \u5ba2\u6237\u7aef\u8981\u8bbf\u95ee\u7684\u9879\u76ee\u4e0d\u5b58\u5728 \u7b49\u7b49 ... \u9047\u5230\u8fd9\u4e9b\u60c5\u51b5\u65f6\uff0c\u901a\u5e38\u8981\u8fd4\u56de 4XX \uff08400 \u81f3 499\uff09 HTTP \u72b6\u6001\u7801 \u3002 4XX \u72b6\u6001\u7801\u4e0e\u8868\u793a\u8bf7\u6c42\u6210\u529f\u7684 2XX \uff08200 \u81f3 299\uff09 HTTP \u72b6\u6001\u7801\u7c7b\u4f3c\u3002 \u53ea\u4e0d\u8fc7\uff0c 4XX \u72b6\u6001\u7801\u8868\u793a\u5ba2\u6237\u7aef\u53d1\u751f\u7684\u9519\u8bef\u3002 \u5927\u5bb6\u90fd\u77e5\u9053 404 Not Found \u9519\u8bef\uff0c\u8fd8\u6709\u8c03\u4f83\u8fd9\u4e2a\u9519\u8bef\u7684\u7b11\u8bdd\u5427\uff1f","title":"\u5904\u7406\u9519\u8bef"},{"location":"tutorial/handling-errors/#httpexception","text":"\u5411\u5ba2\u6237\u7aef\u8fd4\u56de HTTP \u9519\u8bef\u54cd\u5e94\uff0c\u53ef\u4ee5\u4f7f\u7528 HTTPException \u3002","title":"\u4f7f\u7528 HTTPException"},{"location":"tutorial/handling-errors/#httpexception_1","text":"from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]}","title":"\u5bfc\u5165 HTTPException"},{"location":"tutorial/handling-errors/#httpexception_2","text":"HTTPException \u662f\u989d\u5916\u5305\u542b\u4e86\u548c API \u6709\u5173\u6570\u636e\u7684\u5e38\u89c4 Python \u5f02\u5e38\u3002 \u56e0\u4e3a\u662f Python \u5f02\u5e38\uff0c\u6240\u4ee5\u4e0d\u80fd return \uff0c\u53ea\u80fd raise \u3002 \u5982\u5728\u8c03\u7528 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u91cc\u7684\u5de5\u5177\u51fd\u6570\u65f6\uff0c\u89e6\u53d1\u4e86 HTTPException \uff0cFastAPI \u5c31\u4e0d\u518d\u7ee7\u7eed\u6267\u884c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u7684\u540e\u7eed\u4ee3\u7801\uff0c\u800c\u662f\u7acb\u5373\u7ec8\u6b62\u8bf7\u6c42\uff0c\u5e76\u628a HTTPException \u7684 HTTP \u9519\u8bef\u53d1\u9001\u81f3\u5ba2\u6237\u7aef\u3002 \u5728\u4ecb\u7ecd\u4f9d\u8d56\u9879\u4e0e\u5b89\u5168\u7684\u7ae0\u8282\u4e2d\uff0c\u60a8\u53ef\u4ee5\u4e86\u89e3\u66f4\u591a\u7528 raise \u5f02\u5e38\u4ee3\u66ff return \u503c\u7684\u4f18\u52bf\u3002 \u672c\u4f8b\u4e2d\uff0c\u5ba2\u6237\u7aef\u7528 ID \u8bf7\u6c42\u7684 item \u4e0d\u5b58\u5728\u65f6\uff0c\u89e6\u53d1\u72b6\u6001\u7801\u4e3a 404 \u7684\u5f02\u5e38\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return { \"item\" : items [ item_id ]}","title":"\u89e6\u53d1 HTTPException"},{"location":"tutorial/handling-errors/#_2","text":"\u8bf7\u6c42\u4e3a http://example.com/items/foo \uff08 item_id \u4e3a **foo** \uff09\u65f6\uff0c\u5ba2\u6237\u7aef\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 200 \u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"item\" : \"The Foo Wrestlers\" } \u4f46\u5982\u679c\u5ba2\u6237\u7aef\u8bf7\u6c42 http://example.com/items/bar \uff08 item_id **bar** \u4e0d\u5b58\u5728\u65f6\uff09\uff0c\u5219\u4f1a\u63a5\u6536\u5230 HTTP \u72b6\u6001\u7801 - 404\uff08 \u672a\u627e\u5230 \u9519\u8bef\uff09\u53ca\u5982\u4e0b JSON \u54cd\u5e94\u7ed3\u679c\uff1a { \"detail\" : \"Item not found\" } \u63d0\u793a \u89e6\u53d1 HTTPException \u65f6\uff0c\u53ef\u4ee5\u7528\u53c2\u6570 detail \u4f20\u9012\u4efb\u4f55\u80fd\u8f6c\u6362\u4e3a JSON \u7684\u503c\uff0c\u4e0d\u4ec5\u9650\u4e8e str \u3002 \u8fd8\u652f\u6301\u4f20\u9012 dict \u3001 list \u7b49\u6570\u636e\u7ed3\u6784\u3002 FastAPI \u80fd\u81ea\u52a8\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u5e76\u5c06\u4e4b\u8f6c\u6362\u4e3a JSON\u3002","title":"\u54cd\u5e94\u7ed3\u679c"},{"location":"tutorial/handling-errors/#_3","text":"\u6709\u4e9b\u573a\u666f\u4e0b\u8981\u4e3a HTTP \u9519\u8bef\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\u3002\u4f8b\u5982\uff0c\u51fa\u4e8e\u67d0\u4e9b\u65b9\u9762\u7684\u5b89\u5168\u9700\u8981\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\u53ef\u80fd\u4e0d\u4f1a\u9700\u8981\u5728\u4ee3\u7801\u4e2d\u76f4\u63a5\u4f7f\u7528\u54cd\u5e94\u5934\u3002 \u4f46\u5bf9\u4e8e\u67d0\u4e9b\u9ad8\u7ea7\u5e94\u7528\u573a\u666f\uff0c\u8fd8\u662f\u9700\u8981\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934\uff1a from fastapi import FastAPI , HTTPException app = FastAPI () items = { \"foo\" : \"The Foo Wrestlers\" } @app . get ( \"/items-header/ {item_id} \" ) async def read_item_header ( item_id : str ): if item_id not in items : raise HTTPException ( status_code = 404 , detail = \"Item not found\" , headers = { \"X-Error\" : \"There goes my error\" }, ) return { \"item\" : items [ item_id ]}","title":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934"},{"location":"tutorial/handling-errors/#_4","text":"\u6dfb\u52a0\u81ea\u5b9a\u4e49\u5904\u7406\u5668\uff0c\u8981\u4f7f\u7528 Starlette \u7684\u5f02\u5e38\u5de5\u5177 \u3002 \u5047\u8bbe\u8981\u89e6\u53d1\u7684\u81ea\u5b9a\u4e49\u5f02\u5e38\u53eb\u4f5c UnicornException \u3002 \u4e14\u9700\u8981 FastAPI \u5b9e\u73b0\u5168\u5c40\u5904\u7406\u8be5\u5f02\u5e38\u3002 \u6b64\u65f6\uff0c\u53ef\u4ee5\u7528 @app.exception_handler() \u6dfb\u52a0\u81ea\u5b9a\u4e49\u5f02\u5e38\u63a7\u5236\u5668\uff1a from fastapi import FastAPI , Request from fastapi.responses import JSONResponse class UnicornException ( Exception ): def __init__ ( self , name : str ): self . name = name app = FastAPI () @app . exception_handler ( UnicornException ) async def unicorn_exception_handler ( request : Request , exc : UnicornException ): return JSONResponse ( status_code = 418 , content = { \"message\" : f \"Oops! { exc . name } did something. There goes a rainbow...\" }, ) @app . get ( \"/unicorns/ {name} \" ) async def read_unicorn ( name : str ): if name == \"yolo\" : raise UnicornException ( name = name ) return { \"unicorn_name\" : name } \u8bf7\u6c42 /unicorns/yolo \u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u4f1a\u89e6\u53d1 UnicornException \u3002 \u4f46\u8be5\u5f02\u5e38\u5c06\u4f1a\u88ab unicorn_exception_handler \u5904\u7406\u3002 \u63a5\u6536\u5230\u7684\u9519\u8bef\u4fe1\u606f\u6e05\u6670\u660e\u4e86\uff0cHTTP \u72b6\u6001\u7801\u4e3a 418 \uff0cJSON \u5185\u5bb9\u5982\u4e0b\uff1a { \"message\" : \"Oops! yolo did something. There goes a rainbow...\" } \u6280\u672f\u7ec6\u8282 from starlette.requests import Request \u548c from starlette.responses import JSONResponse \u4e5f\u53ef\u4ee5\u7528\u4e8e\u5bfc\u5165 Request \u548c JSONResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u64cd\u4f5c\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002\u540c\u7406\uff0c Request \u4e5f\u662f\u5982\u6b64\u3002","title":"\u5b89\u88c5\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668"},{"location":"tutorial/handling-errors/#_5","text":"FastAPI \u81ea\u5e26\u4e86\u4e00\u4e9b\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u89e6\u53d1 HTTPException \u6216\u8bf7\u6c42\u65e0\u6548\u6570\u636e\u65f6\uff0c\u8fd9\u4e9b\u5904\u7406\u5668\u8fd4\u56de\u9ed8\u8ba4\u7684 JSON \u54cd\u5e94\u7ed3\u679c\u3002 \u4e0d\u8fc7\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u81ea\u5b9a\u4e49\u5904\u7406\u5668\u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002","title":"\u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668"},{"location":"tutorial/handling-errors/#_6","text":"\u8bf7\u6c42\u4e2d\u5305\u542b\u65e0\u6548\u6570\u636e\u65f6\uff0c FastAPI \u5185\u90e8\u4f1a\u89e6\u53d1 RequestValidationError \u3002 \u8be5\u5f02\u5e38\u4e5f\u5185\u7f6e\u4e86\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8986\u76d6\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u65f6\u9700\u8981\u5bfc\u5165 RequestValidationError \uff0c\u5e76\u7528 @app.exception_handler(RequestValidationError) \u88c5\u9970\u5f02\u5e38\u5904\u7406\u5668\u3002 \u8fd9\u6837\uff0c\u5f02\u5e38\u5904\u7406\u5668\u5c31\u53ef\u4ee5\u63a5\u6536 Request \u4e0e\u5f02\u5e38\u3002 from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u8bbf\u95ee /items/foo \uff0c\u53ef\u4ee5\u770b\u5230\u4ee5\u4e0b\u5185\u5bb9\u66ff\u6362\u4e86\u9ed8\u8ba4 JSON \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u4ee5\u4e0b\u662f\u6587\u672c\u683c\u5f0f\u7684\u9519\u8bef\u4fe1\u606f\uff1a 1 validation error path -> item_id value is not a valid integer (type=type_error.integer)","title":"\u8986\u76d6\u8bf7\u6c42\u9a8c\u8bc1\u5f02\u5e38"},{"location":"tutorial/handling-errors/#requestvalidationerror-vs-validationerror","text":"\u8b66\u544a \u5982\u679c\u60a8\u89c9\u5f97\u73b0\u5728\u8fd8\u7528\u4e0d\u5230\u4ee5\u4e0b\u6280\u672f\u7ec6\u8282\uff0c\u53ef\u4ee5\u5148\u8df3\u8fc7\u4e0b\u9762\u7684\u5185\u5bb9\u3002 RequestValidationError \u662f Pydantic \u7684 ValidationError \u7684\u5b50\u7c7b\u3002 FastAPI \u8c03\u7528\u7684\u5c31\u662f RequestValidationError \u7c7b\uff0c\u56e0\u6b64\uff0c\u5982\u679c\u5728 response_model \u4e2d\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u4e14\u6570\u636e\u6709\u9519\u8bef\u65f6\uff0c\u5728\u65e5\u5fd7\u4e2d\u5c31\u4f1a\u770b\u5230\u8fd9\u4e2a\u9519\u8bef\u3002 \u4f46\u5ba2\u6237\u7aef\u6216\u7528\u6237\u770b\u4e0d\u5230\u8fd9\u4e2a\u9519\u8bef\u3002\u53cd\u4e4b\uff0c\u5ba2\u6237\u7aef\u63a5\u6536\u5230\u7684\u662f HTTP \u72b6\u6001\u7801\u4e3a 500 \u7684 \u5185\u90e8\u670d\u52a1\u5668\u9519\u8bef \u3002 \u8fd9\u662f\u56e0\u4e3a\u5728 \u54cd\u5e94 \u6216\u4ee3\u7801\uff08\u4e0d\u662f\u5728\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u91cc\uff09\u4e2d\u51fa\u73b0\u7684 Pydantic ValidationError \u662f\u4ee3\u7801\u7684 bug\u3002 \u4fee\u590d\u9519\u8bef\u65f6\uff0c\u5ba2\u6237\u7aef\u6216\u7528\u6237\u4e0d\u80fd\u8bbf\u95ee\u9519\u8bef\u7684\u5185\u90e8\u4fe1\u606f\uff0c\u5426\u5219\u4f1a\u9020\u6210\u5b89\u5168\u9690\u60a3\u3002","title":"RequestValidationError vs ValidationError"},{"location":"tutorial/handling-errors/#httpexception_3","text":"\u540c\u7406\uff0c\u4e5f\u53ef\u4ee5\u8986\u76d6 HTTPException \u5904\u7406\u5668\u3002 \u4f8b\u5982\uff0c\u53ea\u4e3a\u9519\u8bef\u8fd4\u56de\u7eaf\u6587\u672c\u54cd\u5e94\uff0c\u800c\u4e0d\u662f\u8fd4\u56de JSON \u683c\u5f0f\u7684\u5185\u5bb9\uff1a from fastapi import FastAPI , HTTPException from fastapi.exceptions import RequestValidationError from fastapi.responses import PlainTextResponse from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def http_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc . detail ), status_code = exc . status_code ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): return PlainTextResponse ( str ( exc ), status_code = 400 ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u6280\u672f\u7ec6\u8282 \u8fd8\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import PlainTextResponse \u3002 FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.responses \u76f8\u540c\u7684 fastapi.responses \u4f5c\u4e3a\u5feb\u6377\u65b9\u5f0f\uff0c\u4f46\u5927\u90e8\u5206\u54cd\u5e94\u90fd\u53ef\u4ee5\u76f4\u63a5\u4ece Starlette \u5bfc\u5165\u3002","title":"\u8986\u76d6 HTTPException \u9519\u8bef\u5904\u7406\u5668"},{"location":"tutorial/handling-errors/#requestvalidationerror","text":"RequestValidationError \u5305\u542b\u5176\u63a5\u6536\u5230\u7684\u65e0\u6548\u6570\u636e\u8bf7\u6c42\u7684 body \u3002 \u5f00\u53d1\u65f6\uff0c\u53ef\u4ee5\u7528\u8fd9\u4e2a\u8bf7\u6c42\u4f53\u751f\u6210\u65e5\u5fd7\u3001\u8c03\u8bd5\u9519\u8bef\uff0c\u5e76\u8fd4\u56de\u7ed9\u7528\u6237\u3002 from fastapi import FastAPI , Request , status from fastapi.encoders import jsonable_encoder from fastapi.exceptions import RequestValidationError from fastapi.responses import JSONResponse from pydantic import BaseModel app = FastAPI () @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request : Request , exc : RequestValidationError ): return JSONResponse ( status_code = status . HTTP_422_UNPROCESSABLE_ENTITY , content = jsonable_encoder ({ \"detail\" : exc . errors (), \"body\" : exc . body }), ) class Item ( BaseModel ): title : str size : int @app . post ( \"/items/\" ) async def create_item ( item : Item ): return item \u73b0\u5728\u8bd5\u7740\u53d1\u9001\u4e00\u4e2a\u65e0\u6548\u7684 item \uff0c\u4f8b\u5982\uff1a { \"title\" : \"towel\" , \"size\" : \"XL\" } \u6536\u5230\u7684\u54cd\u5e94\u5305\u542b body \u4fe1\u606f\uff0c\u5e76\u8bf4\u660e\u6570\u636e\u662f\u65e0\u6548\u7684\uff1a { \"detail\" : [ { \"loc\" : [ \"body\" , \"size\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ], \"body\" : { \"title\" : \"towel\" , \"size\" : \"XL\" } }","title":"\u4f7f\u7528 RequestValidationError \u7684\u8bf7\u6c42\u4f53"},{"location":"tutorial/handling-errors/#fastapi-httpexception-vs-starlette-httpexception","text":"FastAPI \u4e5f\u63d0\u4f9b\u4e86\u81ea\u6709\u7684 HTTPException \u3002 FastAPI \u7684 HTTPException \u7ee7\u627f\u81ea Starlette \u7684 HTTPException \u9519\u8bef\u7c7b\u3002 \u5b83\u4eec\u4e4b\u95f4\u7684\u552f\u4e00\u533a\u522b\u662f\uff0c FastAPI \u7684 HTTPException \u53ef\u4ee5\u5728\u54cd\u5e94\u4e2d\u6dfb\u52a0\u54cd\u5e94\u5934\u3002 OAuth 2.0 \u7b49\u5b89\u5168\u5de5\u5177\u9700\u8981\u5728\u5185\u90e8\u8c03\u7528\u8fd9\u4e9b\u54cd\u5e94\u5934\u3002 \u56e0\u6b64\u60a8\u53ef\u4ee5\u7ee7\u7eed\u50cf\u5e73\u5e38\u4e00\u6837\u5728\u4ee3\u7801\u4e2d\u89e6\u53d1 FastAPI \u7684 HTTPException \u3002 \u4f46\u6ce8\u518c\u5f02\u5e38\u5904\u7406\u5668\u65f6\uff0c\u5e94\u8be5\u6ce8\u518c\u5230\u6765\u81ea Starlette \u7684 HTTPException \u3002 \u8fd9\u6837\u505a\u662f\u4e3a\u4e86\uff0c\u5f53 Starlette \u7684\u5185\u90e8\u4ee3\u7801\u3001\u6269\u5c55\u6216\u63d2\u4ef6\u89e6\u53d1 Starlette HTTPException \u65f6\uff0c\u5904\u7406\u7a0b\u5e8f\u80fd\u591f\u6355\u83b7\u3001\u5e76\u5904\u7406\u6b64\u5f02\u5e38\u3002 \u6ce8\u610f\uff0c\u672c\u4f8b\u4ee3\u7801\u4e2d\u540c\u65f6\u4f7f\u7528\u4e86\u8fd9\u4e24\u4e2a HTTPException \uff0c\u6b64\u65f6\uff0c\u8981\u628a Starlette \u7684 HTTPException \u547d\u540d\u4e3a StarletteHTTPException \uff1a from starlette.exceptions import HTTPException as StarletteHTTPException","title":"FastAPI HTTPException vs Starlette HTTPException"},{"location":"tutorial/handling-errors/#fastapi","text":"FastAPI \u652f\u6301\u5148\u5bf9\u5f02\u5e38\u8fdb\u884c\u67d0\u4e9b\u5904\u7406\uff0c\u7136\u540e\u518d\u4f7f\u7528 FastAPI \u4e2d\u5904\u7406\u8be5\u5f02\u5e38\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\u3002 \u4ece fastapi.exception_handlers \u4e2d\u5bfc\u5165\u8981\u590d\u7528\u7684\u9ed8\u8ba4\u5f02\u5e38\u5904\u7406\u5668\uff1a from fastapi import FastAPI , HTTPException from fastapi.exception_handlers import ( http_exception_handler , request_validation_exception_handler , ) from fastapi.exceptions import RequestValidationError from starlette.exceptions import HTTPException as StarletteHTTPException app = FastAPI () @app . exception_handler ( StarletteHTTPException ) async def custom_http_exception_handler ( request , exc ): print ( f \"OMG! An HTTP error!: { repr ( exc ) } \" ) return await http_exception_handler ( request , exc ) @app . exception_handler ( RequestValidationError ) async def validation_exception_handler ( request , exc ): print ( f \"OMG! The client sent invalid data!: { exc } \" ) return await request_validation_exception_handler ( request , exc ) @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): if item_id == 3 : raise HTTPException ( status_code = 418 , detail = \"Nope! I don't like 3.\" ) return { \"item_id\" : item_id } \u867d\u7136\uff0c\u672c\u4f8b\u53ea\u662f \u6253\u5370 \u4e86\u5938\u5927\u5176\u8bcd\u7684\u9519\u8bef\u4fe1\u606f\uff0c\u4f46\u4e5f\u8db3\u4ee5\u8bf4\u660e\uff0c\u53ef\u4ee5\u5728\u5904\u7406\u5f02\u5e38\u4e4b\u540e\u518d\u590d\u7528\u9ed8\u8ba4\u7684\u5f02\u5e38\u5904\u7406\u5668\u3002","title":"\u590d\u7528 FastAPI \u5f02\u5e38\u5904\u7406\u5668"},{"location":"tutorial/header-params/","text":"Header \u53c2\u6570 \u00b6 \u5b9a\u4e49 Header \u53c2\u6570\u7684\u65b9\u5f0f\u4e0e\u5b9a\u4e49 Query \u3001 Path \u3001 Cookie \u53c2\u6570\u76f8\u540c\u3002 \u5bfc\u5165 Header \u00b6 \u9996\u5148\uff0c\u5bfc\u5165 Header \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : str | None = Header ( default = None )): return { \"User-Agent\" : user_agent } \u58f0\u660e Header \u53c2\u6570 \u00b6 \u7136\u540e\uff0c\u4f7f\u7528\u548c Path \u3001 Query \u3001 Cookie \u4e00\u6837\u7684\u7ed3\u6784\u5b9a\u4e49 header \u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u9a8c\u8bc1\u53c2\u6570\u6216\u6ce8\u91ca\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : str | None = Header ( default = None )): return { \"User-Agent\" : user_agent } \u6280\u672f\u7ec6\u8282 Header \u662f Path \u3001 Query \u3001 Cookie \u7684 \u5144\u5f1f\u7c7b \uff0c\u90fd\u7ee7\u627f\u81ea\u5171\u7528\u7684 Param \u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Header \u7b49\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u8bf4\u660e \u5fc5\u987b\u4f7f\u7528 Header \u58f0\u660e header \u53c2\u6570\uff0c\u5426\u5219\u8be5\u53c2\u6570\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002 \u81ea\u52a8\u8f6c\u6362 \u00b6 Header \u6bd4 Path \u3001 Query \u548c Cookie \u63d0\u4f9b\u4e86\u66f4\u591a\u529f\u80fd\u3002 \u5927\u90e8\u5206\u6807\u51c6\u8bf7\u6c42\u5934\u7528 \u8fde\u5b57\u7b26 \u5206\u9694\uff0c\u5373 \u51cf\u53f7 \uff08 - \uff09\u3002 \u4f46\u662f user-agent \u8fd9\u6837\u7684\u53d8\u91cf\u5728 Python \u4e2d\u662f\u65e0\u6548\u7684\u3002 \u56e0\u6b64\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Header \u628a\u53c2\u6570\u540d\u4e2d\u7684\u5b57\u7b26\u7531\u4e0b\u5212\u7ebf\uff08 _ \uff09\u6539\u4e3a\u8fde\u5b57\u7b26\uff08 - \uff09\u6765\u63d0\u53d6\u5e76\u5b58\u6863\u8bf7\u6c42\u5934 \u3002 \u540c\u65f6\uff0cHTTP \u7684\u8bf7\u6c42\u5934\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u6807\u51c6\u6837\u5f0f\uff08\u5373 snake_case \uff09\u8fdb\u884c\u58f0\u660e\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u50cf\u5728 Python \u4ee3\u7801\u4e2d\u4e00\u6837\u4f7f\u7528 user_agent \uff0c\u65e0\u9700\u628a\u9996\u5b57\u6bcd\u5927\u5199\u4e3a User_Agent \u7b49\u5f62\u5f0f\u3002 \u5982\u9700\u7981\u7528\u4e0b\u5212\u7ebf\u81ea\u52a8\u8f6c\u6362\u4e3a\u8fde\u5b57\u7b26\uff0c\u53ef\u4ee5\u628a Header \u7684 convert_underscores \u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : Union [ str , None ] = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : str | None = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } \u8b66\u544a \u6ce8\u610f\uff0c\u4f7f\u7528 convert_underscores = False \u8981\u614e\u91cd\uff0c\u6709\u4e9b HTTP \u4ee3\u7406\u548c\u670d\u52a1\u5668\u4e0d\u652f\u6301\u4f7f\u7528\u5e26\u6709\u4e0b\u5212\u7ebf\u7684\u8bf7\u6c42\u5934\u3002 \u91cd\u590d\u7684\u8bf7\u6c42\u5934 \u00b6 \u6709\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u63a5\u6536\u91cd\u590d\u7684\u8bf7\u6c42\u5934\u3002\u5373\u540c\u4e00\u4e2a\u8bf7\u6c42\u5934\u6709\u591a\u4e2a\u503c\u3002 \u7c7b\u578b\u58f0\u660e\u4e2d\u53ef\u4ee5\u4f7f\u7528 list \u5b9a\u4e49\u591a\u4e2a\u8bf7\u6c42\u5934\u3002 \u4f7f\u7528 Python list \u53ef\u4ee5\u63a5\u6536\u91cd\u590d\u8bf7\u6c42\u5934\u6240\u6709\u7684\u503c\u3002 \u4f8b\u5982\uff0c\u58f0\u660e X-Token \u591a\u6b21\u51fa\u73b0\u7684\u8bf7\u6c42\u5934\uff0c\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ List [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ list [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : list [ str ] | None = Header ( default = None )): return { \"X-Token values\" : x_token } \u4e0e \u8def\u5f84\u64cd\u4f5c \u901a\u4fe1\u65f6\uff0c\u4ee5\u4e0b\u9762\u7684\u65b9\u5f0f\u53d1\u9001\u4e24\u4e2a HTTP \u8bf7\u6c42\u5934\uff1a X-Token: foo X-Token: bar \u54cd\u5e94\u7ed3\u679c\u662f\uff1a { \"X-Token values\" : [ \"bar\" , \"foo\" ] } \u5c0f\u7ed3 \u00b6 \u4f7f\u7528 Header \u58f0\u660e\u8bf7\u6c42\u5934\u7684\u65b9\u5f0f\u4e0e Query \u3001 Path \u3001 Cookie \u76f8\u540c\u3002 \u4e0d\u7528\u62c5\u5fc3\u53d8\u91cf\u4e2d\u7684\u4e0b\u5212\u7ebf\uff0c FastAPI \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u3002","title":"Header \u53c2\u6570"},{"location":"tutorial/header-params/#header","text":"\u5b9a\u4e49 Header \u53c2\u6570\u7684\u65b9\u5f0f\u4e0e\u5b9a\u4e49 Query \u3001 Path \u3001 Cookie \u53c2\u6570\u76f8\u540c\u3002","title":"Header \u53c2\u6570"},{"location":"tutorial/header-params/#header_1","text":"\u9996\u5148\uff0c\u5bfc\u5165 Header \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : str | None = Header ( default = None )): return { \"User-Agent\" : user_agent }","title":"\u5bfc\u5165 Header"},{"location":"tutorial/header-params/#header_2","text":"\u7136\u540e\uff0c\u4f7f\u7528\u548c Path \u3001 Query \u3001 Cookie \u4e00\u6837\u7684\u7ed3\u6784\u5b9a\u4e49 header \u53c2\u6570\u3002 \u7b2c\u4e00\u4e2a\u503c\u662f\u9ed8\u8ba4\u503c\uff0c\u8fd8\u53ef\u4ee5\u4f20\u9012\u6240\u6709\u9a8c\u8bc1\u53c2\u6570\u6216\u6ce8\u91ca\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : Union [ str , None ] = Header ( default = None )): return { \"User-Agent\" : user_agent } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( user_agent : str | None = Header ( default = None )): return { \"User-Agent\" : user_agent } \u6280\u672f\u7ec6\u8282 Header \u662f Path \u3001 Query \u3001 Cookie \u7684 \u5144\u5f1f\u7c7b \uff0c\u90fd\u7ee7\u627f\u81ea\u5171\u7528\u7684 Param \u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 Header \u7b49\u5bf9\u8c61\uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u6b8a\u7c7b\u7684\u51fd\u6570\u3002 \u8bf4\u660e \u5fc5\u987b\u4f7f\u7528 Header \u58f0\u660e header \u53c2\u6570\uff0c\u5426\u5219\u8be5\u53c2\u6570\u4f1a\u88ab\u89e3\u91ca\u4e3a\u67e5\u8be2\u53c2\u6570\u3002","title":"\u58f0\u660e Header \u53c2\u6570"},{"location":"tutorial/header-params/#_1","text":"Header \u6bd4 Path \u3001 Query \u548c Cookie \u63d0\u4f9b\u4e86\u66f4\u591a\u529f\u80fd\u3002 \u5927\u90e8\u5206\u6807\u51c6\u8bf7\u6c42\u5934\u7528 \u8fde\u5b57\u7b26 \u5206\u9694\uff0c\u5373 \u51cf\u53f7 \uff08 - \uff09\u3002 \u4f46\u662f user-agent \u8fd9\u6837\u7684\u53d8\u91cf\u5728 Python \u4e2d\u662f\u65e0\u6548\u7684\u3002 \u56e0\u6b64\uff0c\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c Header \u628a\u53c2\u6570\u540d\u4e2d\u7684\u5b57\u7b26\u7531\u4e0b\u5212\u7ebf\uff08 _ \uff09\u6539\u4e3a\u8fde\u5b57\u7b26\uff08 - \uff09\u6765\u63d0\u53d6\u5e76\u5b58\u6863\u8bf7\u6c42\u5934 \u3002 \u540c\u65f6\uff0cHTTP \u7684\u8bf7\u6c42\u5934\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u6807\u51c6\u6837\u5f0f\uff08\u5373 snake_case \uff09\u8fdb\u884c\u58f0\u660e\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u50cf\u5728 Python \u4ee3\u7801\u4e2d\u4e00\u6837\u4f7f\u7528 user_agent \uff0c\u65e0\u9700\u628a\u9996\u5b57\u6bcd\u5927\u5199\u4e3a User_Agent \u7b49\u5f62\u5f0f\u3002 \u5982\u9700\u7981\u7528\u4e0b\u5212\u7ebf\u81ea\u52a8\u8f6c\u6362\u4e3a\u8fde\u5b57\u7b26\uff0c\u53ef\u4ee5\u628a Header \u7684 convert_underscores \u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : Union [ str , None ] = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( strange_header : str | None = Header ( default = None , convert_underscores = False ) ): return { \"strange_header\" : strange_header } \u8b66\u544a \u6ce8\u610f\uff0c\u4f7f\u7528 convert_underscores = False \u8981\u614e\u91cd\uff0c\u6709\u4e9b HTTP \u4ee3\u7406\u548c\u670d\u52a1\u5668\u4e0d\u652f\u6301\u4f7f\u7528\u5e26\u6709\u4e0b\u5212\u7ebf\u7684\u8bf7\u6c42\u5934\u3002","title":"\u81ea\u52a8\u8f6c\u6362"},{"location":"tutorial/header-params/#_2","text":"\u6709\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u63a5\u6536\u91cd\u590d\u7684\u8bf7\u6c42\u5934\u3002\u5373\u540c\u4e00\u4e2a\u8bf7\u6c42\u5934\u6709\u591a\u4e2a\u503c\u3002 \u7c7b\u578b\u58f0\u660e\u4e2d\u53ef\u4ee5\u4f7f\u7528 list \u5b9a\u4e49\u591a\u4e2a\u8bf7\u6c42\u5934\u3002 \u4f7f\u7528 Python list \u53ef\u4ee5\u63a5\u6536\u91cd\u590d\u8bf7\u6c42\u5934\u6240\u6709\u7684\u503c\u3002 \u4f8b\u5982\uff0c\u58f0\u660e X-Token \u591a\u6b21\u51fa\u73b0\u7684\u8bf7\u6c42\u5934\uff0c\u53ef\u4ee5\u5199\u6210\u8fd9\u6837\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ List [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } from typing import Union from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : Union [ list [ str ], None ] = Header ( default = None )): return { \"X-Token values\" : x_token } from fastapi import FastAPI , Header app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( x_token : list [ str ] | None = Header ( default = None )): return { \"X-Token values\" : x_token } \u4e0e \u8def\u5f84\u64cd\u4f5c \u901a\u4fe1\u65f6\uff0c\u4ee5\u4e0b\u9762\u7684\u65b9\u5f0f\u53d1\u9001\u4e24\u4e2a HTTP \u8bf7\u6c42\u5934\uff1a X-Token: foo X-Token: bar \u54cd\u5e94\u7ed3\u679c\u662f\uff1a { \"X-Token values\" : [ \"bar\" , \"foo\" ] }","title":"\u91cd\u590d\u7684\u8bf7\u6c42\u5934"},{"location":"tutorial/header-params/#_3","text":"\u4f7f\u7528 Header \u58f0\u660e\u8bf7\u6c42\u5934\u7684\u65b9\u5f0f\u4e0e Query \u3001 Path \u3001 Cookie \u76f8\u540c\u3002 \u4e0d\u7528\u62c5\u5fc3\u53d8\u91cf\u4e2d\u7684\u4e0b\u5212\u7ebf\uff0c FastAPI \u53ef\u4ee5\u81ea\u52a8\u8f6c\u6362\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/metadata/","text":"\u5143\u6570\u636e\u548c\u6587\u6863 URL \u00b6 FastAPI \u652f\u6301\u591a\u79cd\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u914d\u7f6e\u3002 API \u5143\u6570\u636e \u00b6 \u60a8\u53ef\u4ee5\u8bbe\u7f6e\u5982\u4e0b\u7528\u4e8e OpenAPI \u89c4\u8303\u4e0e API \u6587\u6863\u7684\u5b57\u6bb5\uff1a \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e title \u5b57\u7b26\u4e32 API \u6807\u9898\u3002 description \u5b57\u7b26\u4e32 API \u7684\u7b80\u8981\u63cf\u8ff0\uff0c\u53ef\u4f7f\u7528 Markdown\u3002 version \u5b57\u7b26\u4e32 API \u7684\u7248\u672c\u3002\u8fd9\u662f\u60a8\u7684\u5e94\u7528\u7684\u7248\u672c\uff0c\u4e0d\u662f OpenAPI \u7684\u7248\u672c\u3002\u4f8b\u5982 2.5.0 \u3002 terms_of_service \u5b57\u7b26\u4e32 API \u670d\u52a1\u6761\u6b3e\u7684 URL\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u670d\u52a1\u6761\u6b3e\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u5fc5\u987b\u662f URL\u3002 contact \u5b57\u5178 \u663e\u793a API \u7684\u8054\u7cfb\u4fe1\u606f\u3002\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u3002 contact \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e name str \u8054\u7cfb\u4eba\u6216\u673a\u6784\u7684\u540d\u79f0\u3002 url str \u6307\u5411\u8054\u7cfb\u4fe1\u606f\u7684 URL\u3002 \u5fc5\u987b \u662f URL \u683c\u5f0f\u3002 email str \u8054\u7cfb\u4eba\u6216\u673a\u6784\u7684\u7535\u5b50\u90ae\u4ef6\u3002 \u5fc5\u987b \u662f\u7535\u5b50\u90ae\u4ef6\u683c\u5f0f\u3002 license_info \u5b57\u5178 \u663e\u793a API \u7684\u534f\u8bae\u4fe1\u606f\u3002\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u3002 license_info fields \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e name str \u5fc5\u586b\u9879 \uff08\u5982\u679c\u8bbe\u7f6e\u4e86 license_info \uff09\u3002API \u4f7f\u7528\u7684\u534f\u8bae\u540d\u79f0\u3002 url str API \u4f7f\u7528\u534f\u8bae\u7684 URL\u3002 \u5fc5\u987b \u662f URL \u683c\u5f0f\u3002 \u8bbe\u7f6e\u65b9\u5f0f\u5982\u4e0b\uff1a from fastapi import FastAPI description = \"\"\" ChimichangApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = FastAPI ( title = \"ChimichangApp\" , description = description , version = \"0.0.1\" , terms_of_service = \"http://example.com/terms/\" , contact = { \"name\" : \"Deadpoolio the Amazing\" , \"url\" : \"http://x-force.example.com/contact/\" , \"email\" : \"dp@x-force.example.com\" , }, license_info = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Katana\" }] \u63d0\u793a description \u5b57\u6bb5\u652f\u6301 Markdown\uff0c\u5e76\u4e14\u5728\u8f93\u51fa\u7ed3\u679c\u91cc\u6e32\u67d3\u3002 \u8bbe\u7f6e\u540e\uff0cAPI \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a \u6807\u7b7e\u5143\u6570\u636e \u00b6 \u53c2\u6570 openapi_tags \u53ef\u4ee5\u4e3a\u4e0d\u540c\u8def\u5f84\u64cd\u4f5c\u7684\u6807\u7b7e\u6dfb\u52a0\u66f4\u591a\u5143\u6570\u636e\u3002 openapi_tags \u63a5\u6536\u5305\u542b\u6807\u7b7e\u5b57\u5178\u7684\u5217\u8868\u3002 \u8fd9\u4e2a\u5b57\u5178\u5305\u542b\u4ee5\u4e0b\u6570\u636e\uff1a name \uff08 \u5fc5\u9009 \uff09\uff1a str \uff0c\u4e0e \u8def\u5f84\u64cd\u4f5c \u548c APIRouter \u4e2d\u7684 tags \u53c2\u6570\u7684\u540d\u79f0\u76f8\u540c description \uff1a str \uff0c\u6807\u7b7e\u7684\u7b80\u660e\u63cf\u8ff0\uff0c\u652f\u6301 Markdown\uff0c\u5e76\u4e14\u5728 API \u6587\u6863\u4e2d\u663e\u793a externalDocs \uff1a dict \uff0c\u5916\u90e8\u6587\u6863\u7684\u8bf4\u660e\uff1a description \uff1a str \uff0c\u5916\u90e8\u6587\u6863\u7684\u7b80\u660e\u63cf\u8ff0 url \uff08 \u5fc5\u9009 \uff09\uff1a str \uff0c\u5916\u90e8\u6587\u6863\u7684 URL \u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e \u00b6 \u4e0b\u4f8b\u4e3a users \u548c items \u6dfb\u52a0\u6807\u7b7e\u3002 \u9996\u5148\uff0c\u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e\uff0c\u7136\u540e\uff0c\u4f20\u9012\u7ed9\u53c2\u6570 openapi_tags \uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u6ce8\u610f\uff0c description \u652f\u6301 Markdown\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u628a login \u663e\u793a\u4e3a\u7c97\u4f53\uff08 login \uff09\uff0c\u628a fancy \u663e\u793a\u4e3a\u659c\u4f53\uff08 fancy \uff09\u3002 \u63d0\u793a \u4e0d\u5fc5\u4e3a\u6240\u6709\u6807\u7b7e\u90fd\u6dfb\u52a0\u5143\u6570\u636e\u3002 \u4f7f\u7528\u6807\u7b7e \u00b6 \u4f7f\u7528 tags \u53c2\u6570\u4e3a \u8def\u5f84\u64cd\u4f5c \uff08\u53ca APIRouter \uff09\u5206\u914d\u4e0d\u540c\u7684\u6807\u7b7e\uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u8bf4\u660e \u6709\u5173\u6807\u7b7e\u7684\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 \u8def\u5f84\u64cd\u4f5c\u914d\u7f6e \u3002 \u67e5\u770b\u6587\u6863 \u00b6 APi \u6587\u6863\u4e2d\u4f1a\u663e\u793a\u6240\u6709\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a \u6807\u7b7e\u987a\u5e8f \u00b6 \u6807\u7b7e\u5143\u6570\u636e\u5b57\u5178\u7684\u987a\u5e8f\u5b9a\u4e49\u4e86\u6807\u7b7e\u5728\u6587\u6863\u4e2d\u7684\u663e\u793a\u987a\u5e8f\u3002 \u4f8b\u5982\uff0c\u5373\u4f7f\u6309\u5b57\u6bcd\u987a\u5e8f users \u5e94\u5728 items \u4e4b\u540e\uff0c\u4f46\u5b83\u4e5f\u4f1a\u663e\u793a\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u5b83\u7684\u5143\u6570\u636e\u662f\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u5178\u3002 OpenAPI URL \u00b6 OpenAPI \u6982\u56fe\u7684\u9ed8\u8ba4\u5730\u5740\u662f /openapi.json \u3002 \u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 openapi_url \u8fdb\u884c\u914d\u7f6e\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e\u4e3a /api/v1/openapi.json \uff1a from fastapi import FastAPI app = FastAPI ( openapi_url = \"/api/v1/openapi.json\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \u628a openapi_url \u53c2\u6570\u8bbe\u7f6e\u4e3a None \uff0c\u5373\u53ef\u5b8c\u5168\u7981\u7528 OpenAPI \u6982\u56fe\uff0c\u4f46\u540c\u6837\u4e5f\u4f1a\u7981\u7528 API \u6587\u6863\u3002 \u6587\u6863 URL \u00b6 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e24\u4e2a\u5185\u7f6e\u7684 API \u6587\u6863\uff0c\u5305\u62ec\uff1a Swagger UI \uff1a\u5730\u5740\u4e3a /docs \uff1a docs_url \u7528\u4e8e\u8bbe\u7f6e URL docs_url=None \uff0c\u7981\u7528 Swagger ReDoc \uff1a\u5730\u5740\u4e3a /redoc \uff1a redoc_url \u7528\u4e8e\u8bbe\u7f6e URL redoc_url=None \uff0c\u7981\u7528 ReDoc \u4f8b\u5982\uff0c\u628a Swagger UI \u7684\u5730\u5740\u8bbe\u7f6e\u4e3a /documentation \uff0c\u5e76\u7981\u7528 ReDoc\uff1a from fastapi import FastAPI app = FastAPI ( docs_url = \"/documentation\" , redoc_url = None ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }]","title":"\u5143\u6570\u636e\u548c\u6587\u6863 URL"},{"location":"tutorial/metadata/#url","text":"FastAPI \u652f\u6301\u591a\u79cd\u81ea\u5b9a\u4e49\u5143\u6570\u636e\u914d\u7f6e\u3002","title":"\u5143\u6570\u636e\u548c\u6587\u6863 URL"},{"location":"tutorial/metadata/#api","text":"\u60a8\u53ef\u4ee5\u8bbe\u7f6e\u5982\u4e0b\u7528\u4e8e OpenAPI \u89c4\u8303\u4e0e API \u6587\u6863\u7684\u5b57\u6bb5\uff1a \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e title \u5b57\u7b26\u4e32 API \u6807\u9898\u3002 description \u5b57\u7b26\u4e32 API \u7684\u7b80\u8981\u63cf\u8ff0\uff0c\u53ef\u4f7f\u7528 Markdown\u3002 version \u5b57\u7b26\u4e32 API \u7684\u7248\u672c\u3002\u8fd9\u662f\u60a8\u7684\u5e94\u7528\u7684\u7248\u672c\uff0c\u4e0d\u662f OpenAPI \u7684\u7248\u672c\u3002\u4f8b\u5982 2.5.0 \u3002 terms_of_service \u5b57\u7b26\u4e32 API \u670d\u52a1\u6761\u6b3e\u7684 URL\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u670d\u52a1\u6761\u6b3e\uff0c\u8fd9\u4e2a\u5b57\u6bb5\u5fc5\u987b\u662f URL\u3002 contact \u5b57\u5178 \u663e\u793a API \u7684\u8054\u7cfb\u4fe1\u606f\u3002\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u3002 contact \u5b57\u6bb5 \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e name str \u8054\u7cfb\u4eba\u6216\u673a\u6784\u7684\u540d\u79f0\u3002 url str \u6307\u5411\u8054\u7cfb\u4fe1\u606f\u7684 URL\u3002 \u5fc5\u987b \u662f URL \u683c\u5f0f\u3002 email str \u8054\u7cfb\u4eba\u6216\u673a\u6784\u7684\u7535\u5b50\u90ae\u4ef6\u3002 \u5fc5\u987b \u662f\u7535\u5b50\u90ae\u4ef6\u683c\u5f0f\u3002 license_info \u5b57\u5178 \u663e\u793a API \u7684\u534f\u8bae\u4fe1\u606f\u3002\u5305\u542b\u4ee5\u4e0b\u5b57\u6bb5\u3002 license_info fields \u53c2\u6570 \u7c7b\u578b \u8bf4\u660e name str \u5fc5\u586b\u9879 \uff08\u5982\u679c\u8bbe\u7f6e\u4e86 license_info \uff09\u3002API \u4f7f\u7528\u7684\u534f\u8bae\u540d\u79f0\u3002 url str API \u4f7f\u7528\u534f\u8bae\u7684 URL\u3002 \u5fc5\u987b \u662f URL \u683c\u5f0f\u3002 \u8bbe\u7f6e\u65b9\u5f0f\u5982\u4e0b\uff1a from fastapi import FastAPI description = \"\"\" ChimichangApp API helps you do awesome stuff. \ud83d\ude80 ## Items You can **read items**. ## Users You will be able to: * **Create users** (_not implemented_). * **Read users** (_not implemented_). \"\"\" app = FastAPI ( title = \"ChimichangApp\" , description = description , version = \"0.0.1\" , terms_of_service = \"http://example.com/terms/\" , contact = { \"name\" : \"Deadpoolio the Amazing\" , \"url\" : \"http://x-force.example.com/contact/\" , \"email\" : \"dp@x-force.example.com\" , }, license_info = { \"name\" : \"Apache 2.0\" , \"url\" : \"https://www.apache.org/licenses/LICENSE-2.0.html\" , }, ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Katana\" }] \u63d0\u793a description \u5b57\u6bb5\u652f\u6301 Markdown\uff0c\u5e76\u4e14\u5728\u8f93\u51fa\u7ed3\u679c\u91cc\u6e32\u67d3\u3002 \u8bbe\u7f6e\u540e\uff0cAPI \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a","title":"API \u5143\u6570\u636e"},{"location":"tutorial/metadata/#_1","text":"\u53c2\u6570 openapi_tags \u53ef\u4ee5\u4e3a\u4e0d\u540c\u8def\u5f84\u64cd\u4f5c\u7684\u6807\u7b7e\u6dfb\u52a0\u66f4\u591a\u5143\u6570\u636e\u3002 openapi_tags \u63a5\u6536\u5305\u542b\u6807\u7b7e\u5b57\u5178\u7684\u5217\u8868\u3002 \u8fd9\u4e2a\u5b57\u5178\u5305\u542b\u4ee5\u4e0b\u6570\u636e\uff1a name \uff08 \u5fc5\u9009 \uff09\uff1a str \uff0c\u4e0e \u8def\u5f84\u64cd\u4f5c \u548c APIRouter \u4e2d\u7684 tags \u53c2\u6570\u7684\u540d\u79f0\u76f8\u540c description \uff1a str \uff0c\u6807\u7b7e\u7684\u7b80\u660e\u63cf\u8ff0\uff0c\u652f\u6301 Markdown\uff0c\u5e76\u4e14\u5728 API \u6587\u6863\u4e2d\u663e\u793a externalDocs \uff1a dict \uff0c\u5916\u90e8\u6587\u6863\u7684\u8bf4\u660e\uff1a description \uff1a str \uff0c\u5916\u90e8\u6587\u6863\u7684\u7b80\u660e\u63cf\u8ff0 url \uff08 \u5fc5\u9009 \uff09\uff1a str \uff0c\u5916\u90e8\u6587\u6863\u7684 URL","title":"\u6807\u7b7e\u5143\u6570\u636e"},{"location":"tutorial/metadata/#_2","text":"\u4e0b\u4f8b\u4e3a users \u548c items \u6dfb\u52a0\u6807\u7b7e\u3002 \u9996\u5148\uff0c\u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e\uff0c\u7136\u540e\uff0c\u4f20\u9012\u7ed9\u53c2\u6570 openapi_tags \uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u6ce8\u610f\uff0c description \u652f\u6301 Markdown\uff0c\u4f8b\u5982\uff0c\u53ef\u4ee5\u628a login \u663e\u793a\u4e3a\u7c97\u4f53\uff08 login \uff09\uff0c\u628a fancy \u663e\u793a\u4e3a\u659c\u4f53\uff08 fancy \uff09\u3002 \u63d0\u793a \u4e0d\u5fc5\u4e3a\u6240\u6709\u6807\u7b7e\u90fd\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u521b\u5efa\u6807\u7b7e\u5143\u6570\u636e"},{"location":"tutorial/metadata/#_3","text":"\u4f7f\u7528 tags \u53c2\u6570\u4e3a \u8def\u5f84\u64cd\u4f5c \uff08\u53ca APIRouter \uff09\u5206\u914d\u4e0d\u540c\u7684\u6807\u7b7e\uff1a from fastapi import FastAPI tags_metadata = [ { \"name\" : \"users\" , \"description\" : \"Operations with users. The **login** logic is also here.\" , }, { \"name\" : \"items\" , \"description\" : \"Manage items. So _fancy_ they have their own docs.\" , \"externalDocs\" : { \"description\" : \"Items external docs\" , \"url\" : \"https://fastapi.tiangolo.com/\" , }, }, ] app = FastAPI ( openapi_tags = tags_metadata ) @app . get ( \"/users/\" , tags = [ \"users\" ]) async def get_users (): return [{ \"name\" : \"Harry\" }, { \"name\" : \"Ron\" }] @app . get ( \"/items/\" , tags = [ \"items\" ]) async def get_items (): return [{ \"name\" : \"wand\" }, { \"name\" : \"flying broom\" }] \u8bf4\u660e \u6709\u5173\u6807\u7b7e\u7684\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 \u8def\u5f84\u64cd\u4f5c\u914d\u7f6e \u3002","title":"\u4f7f\u7528\u6807\u7b7e"},{"location":"tutorial/metadata/#_4","text":"APi \u6587\u6863\u4e2d\u4f1a\u663e\u793a\u6240\u6709\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/metadata/#_5","text":"\u6807\u7b7e\u5143\u6570\u636e\u5b57\u5178\u7684\u987a\u5e8f\u5b9a\u4e49\u4e86\u6807\u7b7e\u5728\u6587\u6863\u4e2d\u7684\u663e\u793a\u987a\u5e8f\u3002 \u4f8b\u5982\uff0c\u5373\u4f7f\u6309\u5b57\u6bcd\u987a\u5e8f users \u5e94\u5728 items \u4e4b\u540e\uff0c\u4f46\u5b83\u4e5f\u4f1a\u663e\u793a\u5728\u524d\u9762\uff0c\u56e0\u4e3a\u5b83\u7684\u5143\u6570\u636e\u662f\u5217\u8868\u4e2d\u7684\u7b2c\u4e00\u4e2a\u5b57\u5178\u3002","title":"\u6807\u7b7e\u987a\u5e8f"},{"location":"tutorial/metadata/#openapi-url","text":"OpenAPI \u6982\u56fe\u7684\u9ed8\u8ba4\u5730\u5740\u662f /openapi.json \u3002 \u4f46\u4e5f\u53ef\u4ee5\u4f7f\u7528\u53c2\u6570 openapi_url \u8fdb\u884c\u914d\u7f6e\u3002 \u4f8b\u5982\uff0c\u8bbe\u7f6e\u4e3a /api/v1/openapi.json \uff1a from fastapi import FastAPI app = FastAPI ( openapi_url = \"/api/v1/openapi.json\" ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }] \u628a openapi_url \u53c2\u6570\u8bbe\u7f6e\u4e3a None \uff0c\u5373\u53ef\u5b8c\u5168\u7981\u7528 OpenAPI \u6982\u56fe\uff0c\u4f46\u540c\u6837\u4e5f\u4f1a\u7981\u7528 API \u6587\u6863\u3002","title":"OpenAPI URL"},{"location":"tutorial/metadata/#url_1","text":"\u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u914d\u7f6e\u4e24\u4e2a\u5185\u7f6e\u7684 API \u6587\u6863\uff0c\u5305\u62ec\uff1a Swagger UI \uff1a\u5730\u5740\u4e3a /docs \uff1a docs_url \u7528\u4e8e\u8bbe\u7f6e URL docs_url=None \uff0c\u7981\u7528 Swagger ReDoc \uff1a\u5730\u5740\u4e3a /redoc \uff1a redoc_url \u7528\u4e8e\u8bbe\u7f6e URL redoc_url=None \uff0c\u7981\u7528 ReDoc \u4f8b\u5982\uff0c\u628a Swagger UI \u7684\u5730\u5740\u8bbe\u7f6e\u4e3a /documentation \uff0c\u5e76\u7981\u7528 ReDoc\uff1a from fastapi import FastAPI app = FastAPI ( docs_url = \"/documentation\" , redoc_url = None ) @app . get ( \"/items/\" ) async def read_items (): return [{ \"name\" : \"Foo\" }]","title":"\u6587\u6863 URL"},{"location":"tutorial/middleware/","text":"\u4e2d\u95f4\u4ef6 \u00b6 FastAPI \u652f\u6301\u4e2d\u95f4\u4ef6\u3002 \u4e2d\u95f4\u4ef6 \u662f\u5728 \u8def\u5f84\u64cd\u4f5c \u5904\u7406 \u8bf7\u6c42 \u524d\u53ca \u54cd\u5e94 \u8fd4\u56de\u524d\u6267\u884c\u7684\u51fd\u6570\u3002 \u63a5\u6536\u5e94\u7528\u7684\u6bcf\u4e2a \u8bf7\u6c42 \u5904\u7406 \u8bf7\u6c42 \uff08\u901a\u8fc7 \u8def\u5f84\u64cd\u4f5c \uff09\u628a \u8bf7\u6c42 \u4f20\u9012\u7ed9\u5e94\u7528\u7684\u5176\u4ed6\u7ec4\u4ef6 \uff08\u901a\u8fc7 \u8def\u5f84\u64cd\u4f5c \uff09\u83b7\u53d6\u5e94\u7528\u7684 \u54cd\u5e94 \u5904\u7406 \u54cd\u5e94 \u8fd4\u56de \u54cd\u5e94 \u6280\u672f\u7ec6\u8282 \u4f7f\u7528 yield \u5173\u952e\u5b57\u4f9d\u8d56\u9879\u65f6, \u4f9d\u8d56\u9879\u4e2d\u7684\u9000\u51fa\u4ee3\u7801\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u6267\u884c\u3002 \u540e\u53f0\u4efb\u52a1\uff08\u7a0d\u540e\u4ecb\u7ecd\uff09\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u8fd0\u884c\u3002 \u521b\u5efa\u4e2d\u95f4\u4ef6 \u00b6 \u5728\u51fd\u6570\u9876\u90e8\u4f7f\u7528\u88c5\u9970\u5668 @app.middleware(\"http\") \uff0c\u5373\u53ef\u521b\u5efa\u4e2d\u95f4\u4ef6\u3002 \u4e2d\u95f4\u4ef6\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a request \u51fd\u6570 call_next \u63a5\u6536\u53c2\u6570 request \u51fd\u6570\u628a request \u4f20\u9012\u7ed9\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c \u7136\u540e\u8fd4\u56de\u7531\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c \u751f\u6210\u7684 response \u7136\u540e\u5728\u8fd4\u56de response \u524d\u8fdb\u4e00\u6b65\u4fee\u6539 import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \u63d0\u793a \u6ce8\u610f\uff0c\u53ef\u4ee5 \u4f7f\u7528'X-' \u524d\u7f00 \u6dfb\u52a0\u4e13\u7528\u7684\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u3002 \u4f46\u5982\u679c\u60f3\u8ba9\u6d4f\u89c8\u5668\u4e2d\u7684\u5ba2\u6237\u7aef\u8bc6\u522b\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\uff0c\u5219\u8981\u628a\u5b83\u4eec\u52a0\u5230 CORS \u914d\u7f6e ( CORS (Cross-Origin Resource Sharing) ) \u7684 expose_headers \u53c2\u6570\u4e2d\uff0c\u8be6\u89c1 Starlette \u7684 CORS \u6587\u6863 \u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.requests import Request \u3002 FastAPI \u4e3a\u4e86\u5f00\u53d1\u8005\u65b9\u4fbf\u63d0\u4f9b\u4e86\u8be5\u5bf9\u8c61\uff0c\u4f46\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 response \u524d\u540e \u00b6 \u5728 \u8def\u5f84\u64cd\u4f5c \u63a5\u6536 request \u524d\uff0c\u6dfb\u52a0\u4e0e\u8bf7\u6c42\u4e00\u8d77\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u4e5f\u53ef\u4ee5\u5728 \u54cd\u5e94 \u751f\u6210\u540e\uff0c\u8fd4\u56de\u524d\u6dfb\u52a0\u4ee3\u7801\u3002 \u4f8b\u5982\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934 X-Process-Time \uff0c\u5305\u542b\u63a5\u6536\u8bf7\u6c42\u548c\u751f\u6210\u54cd\u5e94\u7684\u65f6\u95f4\uff08\u79d2\uff09\uff1a import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \u5176\u4ed6\u4e2d\u95f4\u4ef6 \u00b6 \u9ad8\u7ea7\u7528\u6237\u6307\u5357\uff1a\u9ad8\u7ea7\u4e2d\u95f4\u4ef6 \u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u4e86\u66f4\u591a\u4e2d\u95f4\u4ef6\u3002 \u4e0b\u4e00\u7ae0\uff0c\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u5904\u7406 CORS \uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09\u3002","title":"\u4e2d\u95f4\u4ef6"},{"location":"tutorial/middleware/#_1","text":"FastAPI \u652f\u6301\u4e2d\u95f4\u4ef6\u3002 \u4e2d\u95f4\u4ef6 \u662f\u5728 \u8def\u5f84\u64cd\u4f5c \u5904\u7406 \u8bf7\u6c42 \u524d\u53ca \u54cd\u5e94 \u8fd4\u56de\u524d\u6267\u884c\u7684\u51fd\u6570\u3002 \u63a5\u6536\u5e94\u7528\u7684\u6bcf\u4e2a \u8bf7\u6c42 \u5904\u7406 \u8bf7\u6c42 \uff08\u901a\u8fc7 \u8def\u5f84\u64cd\u4f5c \uff09\u628a \u8bf7\u6c42 \u4f20\u9012\u7ed9\u5e94\u7528\u7684\u5176\u4ed6\u7ec4\u4ef6 \uff08\u901a\u8fc7 \u8def\u5f84\u64cd\u4f5c \uff09\u83b7\u53d6\u5e94\u7528\u7684 \u54cd\u5e94 \u5904\u7406 \u54cd\u5e94 \u8fd4\u56de \u54cd\u5e94 \u6280\u672f\u7ec6\u8282 \u4f7f\u7528 yield \u5173\u952e\u5b57\u4f9d\u8d56\u9879\u65f6, \u4f9d\u8d56\u9879\u4e2d\u7684\u9000\u51fa\u4ee3\u7801\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u6267\u884c\u3002 \u540e\u53f0\u4efb\u52a1\uff08\u7a0d\u540e\u4ecb\u7ecd\uff09\u5728\u6267\u884c\u4e2d\u95f4\u4ef6 \u540e \u8fd0\u884c\u3002","title":"\u4e2d\u95f4\u4ef6"},{"location":"tutorial/middleware/#_2","text":"\u5728\u51fd\u6570\u9876\u90e8\u4f7f\u7528\u88c5\u9970\u5668 @app.middleware(\"http\") \uff0c\u5373\u53ef\u521b\u5efa\u4e2d\u95f4\u4ef6\u3002 \u4e2d\u95f4\u4ef6\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a request \u51fd\u6570 call_next \u63a5\u6536\u53c2\u6570 request \u51fd\u6570\u628a request \u4f20\u9012\u7ed9\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c \u7136\u540e\u8fd4\u56de\u7531\u76f8\u5e94\u7684 \u8def\u5f84\u64cd\u4f5c \u751f\u6210\u7684 response \u7136\u540e\u5728\u8fd4\u56de response \u524d\u8fdb\u4e00\u6b65\u4fee\u6539 import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response \u63d0\u793a \u6ce8\u610f\uff0c\u53ef\u4ee5 \u4f7f\u7528'X-' \u524d\u7f00 \u6dfb\u52a0\u4e13\u7528\u7684\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\u3002 \u4f46\u5982\u679c\u60f3\u8ba9\u6d4f\u89c8\u5668\u4e2d\u7684\u5ba2\u6237\u7aef\u8bc6\u522b\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934\uff0c\u5219\u8981\u628a\u5b83\u4eec\u52a0\u5230 CORS \u914d\u7f6e ( CORS (Cross-Origin Resource Sharing) ) \u7684 expose_headers \u53c2\u6570\u4e2d\uff0c\u8be6\u89c1 Starlette \u7684 CORS \u6587\u6863 \u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.requests import Request \u3002 FastAPI \u4e3a\u4e86\u5f00\u53d1\u8005\u65b9\u4fbf\u63d0\u4f9b\u4e86\u8be5\u5bf9\u8c61\uff0c\u4f46\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u521b\u5efa\u4e2d\u95f4\u4ef6"},{"location":"tutorial/middleware/#response","text":"\u5728 \u8def\u5f84\u64cd\u4f5c \u63a5\u6536 request \u524d\uff0c\u6dfb\u52a0\u4e0e\u8bf7\u6c42\u4e00\u8d77\u8fd0\u884c\u7684\u4ee3\u7801\u3002 \u4e5f\u53ef\u4ee5\u5728 \u54cd\u5e94 \u751f\u6210\u540e\uff0c\u8fd4\u56de\u524d\u6dfb\u52a0\u4ee3\u7801\u3002 \u4f8b\u5982\uff0c\u6dfb\u52a0\u81ea\u5b9a\u4e49\u8bf7\u6c42\u5934 X-Process-Time \uff0c\u5305\u542b\u63a5\u6536\u8bf7\u6c42\u548c\u751f\u6210\u54cd\u5e94\u7684\u65f6\u95f4\uff08\u79d2\uff09\uff1a import time from fastapi import FastAPI , Request app = FastAPI () @app . middleware ( \"http\" ) async def add_process_time_header ( request : Request , call_next ): start_time = time . time () response = await call_next ( request ) process_time = time . time () - start_time response . headers [ \"X-Process-Time\" ] = str ( process_time ) return response","title":"response \u524d\u540e"},{"location":"tutorial/middleware/#_3","text":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357\uff1a\u9ad8\u7ea7\u4e2d\u95f4\u4ef6 \u4e00\u7ae0\u4e2d\u4ecb\u7ecd\u4e86\u66f4\u591a\u4e2d\u95f4\u4ef6\u3002 \u4e0b\u4e00\u7ae0\uff0c\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u4e2d\u95f4\u4ef6\u5904\u7406 CORS \uff08\u8de8\u57df\u8d44\u6e90\u5171\u4eab\uff09\u3002","title":"\u5176\u4ed6\u4e2d\u95f4\u4ef6"},{"location":"tutorial/path-operation-configuration/","text":"\u8def\u5f84\u64cd\u4f5c\u914d\u7f6e \u00b6 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u591a\u79cd\u914d\u7f6e\u53c2\u6570\u3002 \u8b66\u544a \u6ce8\u610f\uff1a\u4ee5\u4e0b\u53c2\u6570\u5e94\u76f4\u63a5\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u4e0d\u80fd\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 status_code \u72b6\u6001\u7801 \u00b6 status_code \u7528\u4e8e\u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c \u54cd\u5e94\u4e2d\u7684 HTTP \u72b6\u6001\u7801\u3002 \u53ef\u4ee5\u76f4\u63a5\u4f20\u9012 int \u4ee3\u7801\uff0c \u5982 404 \u3002 \u5982\u679c\u8bb0\u4e0d\u4f4f\u6570\u5b57\u7801\u7684\u6db5\u4e49\uff0c\u4e5f\u53ef\u4ee5\u7528 status \u7684\u5feb\u6377\u5e38\u91cf\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item from typing import Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item \u72b6\u6001\u7801\u5728\u54cd\u5e94\u4e2d\u4f7f\u7528\uff0c\u5e76\u4f1a\u88ab\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\u3002 \u6280\u672f\u7ec6\u8282 \u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u5bfc\u5165\u72b6\u6001\u7801\u3002 FastAPI \u7684 fastapi.status \u548c starlette.status \u4e00\u6837\uff0c\u53ea\u662f\u5feb\u6377\u65b9\u5f0f\u3002\u5b9e\u9645\u4e0a\uff0c fastapi.status \u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 tags \u53c2\u6570 \u00b6 tags \u53c2\u6570\u7684\u503c\u662f\u7531 str \u7ec4\u6210\u7684 list \uff08\u4e00\u822c\u53ea\u6709\u4e00\u4e2a str \uff09\uff0c tags \u7528\u4e8e\u4e3a \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u6807\u7b7e\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] OpenAPI \u6982\u56fe\u4f1a\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\uff0c\u4f9b API \u6587\u6863\u63a5\u53e3\u4f7f\u7528\uff1a \u4f7f\u7528 Enums \u7684\u6807\u7b7e \u00b6 \u5927\u578b\u5e94\u7528\u4e2d\u53ef\u80fd\u4f1a\u6709 \u591a\u4e2a\u6807\u7b7e \uff0c\u9700\u8981\u786e\u4fdd\u4e3a\u76f8\u5173\u7684 \u8def\u5f84\u64cd\u4f5c \u4f7f\u7528 \u76f8\u540c\u7684\u6807\u7b7e \u3002 \u6b64\u65f6\uff0c\u628a\u591a\u4e2a\u6807\u7b7e\u5b58\u50a8\u4e3a Enum \u7c7b\u578b\u662f\u4e2a\u4e0d\u9519\u7684\u65b9\u6cd5\u3002 FastAPI \u652f\u6301\u7684\u65b9\u5f0f\u4e0e\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u76f8\u540c\uff1a from enum import Enum from fastapi import FastAPI app = FastAPI () class Tags ( Enum ): items = \"items\" users = \"users\" @app . get ( \"/items/\" , tags = [ Tags . items ]) async def get_items (): return [ \"Portal gun\" , \"Plumbus\" ] @app . get ( \"/users/\" , tags = [ Tags . users ]) async def read_users (): return [ \"Rick\" , \"Morty\" ] summary \u548c description \u53c2\u6570 \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u8fd8\u652f\u6301 summary \u548c description \u53c2\u6570\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item \u6587\u6863\u5b57\u7b26\u4e32 ~ docstring \u00b6 \u63cf\u8ff0\u5185\u5bb9\u6bd4\u8f83\u957f\u4e14\u5360\u7528\u591a\u884c\u65f6\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u7684 docstring \u4e2d\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u7684\u63cf\u8ff0\uff0c FastAPI \u652f\u6301\u4ece\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u63cf\u8ff0\u5185\u5bb9\u3002 \u6587\u6863\u5b57\u7b26\u4e32\u652f\u6301 Markdown \uff0c\u80fd\u6b63\u786e\u89e3\u6790\u548c\u663e\u793a Markdown \u7684\u5185\u5bb9\uff0c\u4f46\u8981\u6ce8\u610f\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7f29\u8fdb\u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u4e0b\u56fe\u4e3a Markdown \u6587\u672c\u5728 API \u6587\u6863\u4e2d\u7684\u663e\u793a\u6548\u679c\uff1a \u54cd\u5e94\u63cf\u8ff0 \u00b6 response_description \u53c2\u6570\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684\u63cf\u8ff0\u8bf4\u660e\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u8bf4\u660e \u6ce8\u610f\uff0c response_description \u53ea\u7528\u4e8e\u63cf\u8ff0\u54cd\u5e94\uff0c description \u4e00\u822c\u5219\u7528\u4e8e\u63cf\u8ff0 \u8def\u5f84\u64cd\u4f5c \u3002 \u68c0\u67e5 OpenAPI \u89c4\u5b9a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u8981\u6709\u54cd\u5e94\u63cf\u8ff0\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u54cd\u5e94\u63cf\u8ff0\uff0c FastAPI \u5219\u81ea\u52a8\u751f\u6210\u5185\u5bb9\u4e3a \"Successful response\" \u7684\u54cd\u5e94\u63cf\u8ff0\u3002 \u5f03\u7528 \u8def\u5f84\u64cd\u4f5c \u00b6 deprecated \u53c2\u6570\u53ef\u4ee5\u628a \u8def\u5f84\u64cd\u4f5c \u6807\u8bb0\u4e3a \u5f03\u7528 \uff0c\u65e0\u9700\u76f4\u63a5\u5220\u9664\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] @app . get ( \"/elements/\" , tags = [ \"items\" ], deprecated = True ) async def read_elements (): return [{ \"item_id\" : \"Foo\" }] API \u6587\u6863\u4f1a\u628a\u8be5\u8def\u5f84\u64cd\u4f5c\u6807\u8bb0\u4e3a\u5f03\u7528\uff1a \u4e0b\u56fe\u663e\u793a\u4e86\u6b63\u5e38 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5f03\u7528 \u8def\u5f84\u64cd\u4f5c \u7684\u533a\u522b\uff1a \u5c0f\u7ed3 \u00b6 \u628a\u53c2\u6570\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u5373\u53ef\u8f7b\u677e\u5730\u914d\u7f6e \u8def\u5f84\u64cd\u4f5c \u3001\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u8def\u5f84\u64cd\u4f5c\u914d\u7f6e"},{"location":"tutorial/path-operation-configuration/#_1","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u591a\u79cd\u914d\u7f6e\u53c2\u6570\u3002 \u8b66\u544a \u6ce8\u610f\uff1a\u4ee5\u4e0b\u53c2\u6570\u5e94\u76f4\u63a5\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u4e0d\u80fd\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002","title":"\u8def\u5f84\u64cd\u4f5c\u914d\u7f6e"},{"location":"tutorial/path-operation-configuration/#status_code","text":"status_code \u7528\u4e8e\u5b9a\u4e49 \u8def\u5f84\u64cd\u4f5c \u54cd\u5e94\u4e2d\u7684 HTTP \u72b6\u6001\u7801\u3002 \u53ef\u4ee5\u76f4\u63a5\u4f20\u9012 int \u4ee3\u7801\uff0c \u5982 404 \u3002 \u5982\u679c\u8bb0\u4e0d\u4f4f\u6570\u5b57\u7801\u7684\u6db5\u4e49\uff0c\u4e5f\u53ef\u4ee5\u7528 status \u7684\u5feb\u6377\u5e38\u91cf\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item from typing import Union from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item from fastapi import FastAPI , status from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , status_code = status . HTTP_201_CREATED ) async def create_item ( item : Item ): return item \u72b6\u6001\u7801\u5728\u54cd\u5e94\u4e2d\u4f7f\u7528\uff0c\u5e76\u4f1a\u88ab\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\u3002 \u6280\u672f\u7ec6\u8282 \u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u5bfc\u5165\u72b6\u6001\u7801\u3002 FastAPI \u7684 fastapi.status \u548c starlette.status \u4e00\u6837\uff0c\u53ea\u662f\u5feb\u6377\u65b9\u5f0f\u3002\u5b9e\u9645\u4e0a\uff0c fastapi.status \u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"status_code \u72b6\u6001\u7801"},{"location":"tutorial/path-operation-configuration/#tags","text":"tags \u53c2\u6570\u7684\u503c\u662f\u7531 str \u7ec4\u6210\u7684 list \uff08\u4e00\u822c\u53ea\u6709\u4e00\u4e2a str \uff09\uff0c tags \u7528\u4e8e\u4e3a \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u6807\u7b7e\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , tags = [ \"items\" ]) async def create_item ( item : Item ): return item @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] OpenAPI \u6982\u56fe\u4f1a\u81ea\u52a8\u6dfb\u52a0\u6807\u7b7e\uff0c\u4f9b API \u6587\u6863\u63a5\u53e3\u4f7f\u7528\uff1a","title":"tags \u53c2\u6570"},{"location":"tutorial/path-operation-configuration/#enums","text":"\u5927\u578b\u5e94\u7528\u4e2d\u53ef\u80fd\u4f1a\u6709 \u591a\u4e2a\u6807\u7b7e \uff0c\u9700\u8981\u786e\u4fdd\u4e3a\u76f8\u5173\u7684 \u8def\u5f84\u64cd\u4f5c \u4f7f\u7528 \u76f8\u540c\u7684\u6807\u7b7e \u3002 \u6b64\u65f6\uff0c\u628a\u591a\u4e2a\u6807\u7b7e\u5b58\u50a8\u4e3a Enum \u7c7b\u578b\u662f\u4e2a\u4e0d\u9519\u7684\u65b9\u6cd5\u3002 FastAPI \u652f\u6301\u7684\u65b9\u5f0f\u4e0e\u4f7f\u7528\u5b57\u7b26\u4e32\u7684\u65b9\u5f0f\u76f8\u540c\uff1a from enum import Enum from fastapi import FastAPI app = FastAPI () class Tags ( Enum ): items = \"items\" users = \"users\" @app . get ( \"/items/\" , tags = [ Tags . items ]) async def get_items (): return [ \"Portal gun\" , \"Plumbus\" ] @app . get ( \"/users/\" , tags = [ Tags . users ]) async def read_users (): return [ \"Rick\" , \"Morty\" ]","title":"\u4f7f\u7528 Enums \u7684\u6807\u7b7e"},{"location":"tutorial/path-operation-configuration/#summary-description","text":"\u8def\u5f84\u88c5\u9970\u5668\u8fd8\u652f\u6301 summary \u548c description \u53c2\u6570\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , description = \"Create an item with all the information, name, description, price, tax and a set of unique tags\" , ) async def create_item ( item : Item ): return item","title":"summary \u548c description \u53c2\u6570"},{"location":"tutorial/path-operation-configuration/#docstring","text":"\u63cf\u8ff0\u5185\u5bb9\u6bd4\u8f83\u957f\u4e14\u5360\u7528\u591a\u884c\u65f6\uff0c\u53ef\u4ee5\u5728\u51fd\u6570\u7684 docstring \u4e2d\u58f0\u660e \u8def\u5f84\u64cd\u4f5c \u7684\u63cf\u8ff0\uff0c FastAPI \u652f\u6301\u4ece\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u8bfb\u53d6\u63cf\u8ff0\u5185\u5bb9\u3002 \u6587\u6863\u5b57\u7b26\u4e32\u652f\u6301 Markdown \uff0c\u80fd\u6b63\u786e\u89e3\u6790\u548c\u663e\u793a Markdown \u7684\u5185\u5bb9\uff0c\u4f46\u8981\u6ce8\u610f\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7f29\u8fdb\u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u4e0b\u56fe\u4e3a Markdown \u6587\u672c\u5728 API \u6587\u6863\u4e2d\u7684\u663e\u793a\u6548\u679c\uff1a","title":"\u6587\u6863\u5b57\u7b26\u4e32 ~ docstring"},{"location":"tutorial/path-operation-configuration/#_2","text":"response_description \u53c2\u6570\u7528\u4e8e\u5b9a\u4e49\u54cd\u5e94\u7684\u63cf\u8ff0\u8bf4\u660e\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import Set , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : Set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : set [ str ] = set () @app . post ( \"/items/\" , response_model = Item , summary = \"Create an item\" , response_description = \"The created item\" , ) async def create_item ( item : Item ): \"\"\" Create an item with all the information: - **name**: each item must have a name - **description**: a long description - **price**: required - **tax**: if the item doesn't have tax, you can omit this - **tags**: a set of unique tag strings for this item \"\"\" return item \u8bf4\u660e \u6ce8\u610f\uff0c response_description \u53ea\u7528\u4e8e\u63cf\u8ff0\u54cd\u5e94\uff0c description \u4e00\u822c\u5219\u7528\u4e8e\u63cf\u8ff0 \u8def\u5f84\u64cd\u4f5c \u3002 \u68c0\u67e5 OpenAPI \u89c4\u5b9a\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u8981\u6709\u54cd\u5e94\u63cf\u8ff0\u3002 \u5982\u679c\u6ca1\u6709\u5b9a\u4e49\u54cd\u5e94\u63cf\u8ff0\uff0c FastAPI \u5219\u81ea\u52a8\u751f\u6210\u5185\u5bb9\u4e3a \"Successful response\" \u7684\u54cd\u5e94\u63cf\u8ff0\u3002","title":"\u54cd\u5e94\u63cf\u8ff0"},{"location":"tutorial/path-operation-configuration/#_3","text":"deprecated \u53c2\u6570\u53ef\u4ee5\u628a \u8def\u5f84\u64cd\u4f5c \u6807\u8bb0\u4e3a \u5f03\u7528 \uff0c\u65e0\u9700\u76f4\u63a5\u5220\u9664\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" , tags = [ \"items\" ]) async def read_items (): return [{ \"name\" : \"Foo\" , \"price\" : 42 }] @app . get ( \"/users/\" , tags = [ \"users\" ]) async def read_users (): return [{ \"username\" : \"johndoe\" }] @app . get ( \"/elements/\" , tags = [ \"items\" ], deprecated = True ) async def read_elements (): return [{ \"item_id\" : \"Foo\" }] API \u6587\u6863\u4f1a\u628a\u8be5\u8def\u5f84\u64cd\u4f5c\u6807\u8bb0\u4e3a\u5f03\u7528\uff1a \u4e0b\u56fe\u663e\u793a\u4e86\u6b63\u5e38 \u8def\u5f84\u64cd\u4f5c \u4e0e\u5f03\u7528 \u8def\u5f84\u64cd\u4f5c \u7684\u533a\u522b\uff1a","title":"\u5f03\u7528\u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/path-operation-configuration/#_4","text":"\u628a\u53c2\u6570\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \uff0c\u5373\u53ef\u8f7b\u677e\u5730\u914d\u7f6e \u8def\u5f84\u64cd\u4f5c \u3001\u6dfb\u52a0\u5143\u6570\u636e\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/path-params-numeric-validations/","text":"\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c \u00b6 \u9664\u4e86\u53ef\u4ee5\u4e3a Query \u67e5\u8be2\u53c2\u6570\u58f0\u660e\u6821\u9a8c\u548c\u5143\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u4e3a Path \u8def\u5f84\u53c2\u6570\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u5bfc\u5165 Path \u00b6 \u9996\u5148\uff0c\u4ece fastapi \u5bfc\u5165 Path \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : str | None = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u58f0\u660e\u5143\u6570\u636e \u00b6 \u53ef\u4ee5\u58f0\u660e\u4e0e Query \u76f8\u540c\u7684\u6240\u6709\u53c2\u6570\u3002 \u4f8b\u5982\uff0c\u4e3a\u8def\u5f84\u53c2\u6570 item_id \u58f0\u660e title \u5143\u6570\u636e\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u8f93\u5165\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : str | None = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u7b14\u8bb0 \u56e0\u4e3a\u8def\u5f84\u53c2\u6570\u5fc5\u987b\u662f\u8def\u5f84\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u8def\u5f84\u53c2\u6570\u603b\u662f\u5fc5\u9009\u7684\u3002 \u56e0\u6b64\uff0c\u58f0\u660e\u8def\u5f84\u53c2\u6570\u65f6\u8981\u4f7f\u7528 ... \uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5fc5\u9009\u53c2\u6570\u3002 \u4e0d\u8fc7\uff0c\u5c31\u7b97\u4f7f\u7528 None \u58f0\u660e\u8def\u5f84\u53c2\u6570\uff0c\u6216\u8bbe\u7f6e\u5176\u4ed6\u9ed8\u8ba4\u503c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u8def\u5f84\u53c2\u6570\u4f9d\u7136\u662f\u5fc5\u9009\u53c2\u6570\u3002 \u6309\u9700\u6392\u5e8f\u53c2\u6570 \u00b6 \u5047\u8bbe\u8981\u628a\u67e5\u8be2\u53c2\u6570 q \u58f0\u660e\u4e3a\u5fc5\u9009\u7684 str \u7c7b\u578b\u3002 \u800c\u4e14\uff0c\u56e0\u4e3a\u4e0d\u7528\u4e3a\u8be5\u53c2\u6570\u58f0\u660e\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\uff0c\u56e0\u6b64\u65e0\u9700\u4f7f\u7528 Query \u3002 \u4f46\u4ecd\u9700\u4f7f\u7528 Path \u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \u3002 \u5982\u679c\u628a\u6709 \u9ed8\u8ba4\u503c \u7684\u53c2\u6570\u7f6e\u4e8e\u65e0 \u9ed8\u8ba4\u503c \u7684\u53c2\u6570\u524d\uff0cPython \u4f1a\u62a5\u9519\u3002 \u4f46\u53ef\u4ee5\u91cd\u65b0\u6392\u5e8f\uff0c\u628a\u65e0\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570 q \u653e\u5230\u6700\u524d\u9762\u3002 FastAPI \u4e0d\u5173\u6ce8\u53c2\u6570\u6392\u5e8f\u3002\u53ea\u662f\u901a\u8fc7\u58f0\u660e\u7684\u53c2\u6570\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\uff08 Query \u3001 Path \u7b49\uff09\u6765\u68c0\u6d4b\u53c2\u6570\uff0c\u4e0d\u5173\u6ce8\u53c2\u6570\u7684\u987a\u5e8f\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u628a\u51fd\u6570\u58f0\u660e\u4e3a\uff1a from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( q : str , item_id : int = Path ( title = \"The ID of the item to get\" )): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6309\u9700\u6392\u5e8f\u53c2\u6570\u7684\u6280\u5de7 \u00b6 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528 Query \u58f0\u660e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u4f46\u540c\u65f6\u8fd8\u8981\u4f7f\u7528 Path \u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \uff0c\u5e76\u4f7f\u7528\u4e0d\u540c\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u7684\u7279\u6b8a\u8bed\u6cd5\u3002 \u628a * \u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 Python \u4e0d\u5bf9 * \u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u4f46\u4f1a\u628a * \u4e4b\u540e\u7684\u53c2\u6570\u90fd\u5f53\u4f5c\u5173\u952e\u5b57\u53c2\u6570\uff08\u952e\u503c\u5bf9\uff0c\u53eb kwargs \uff09\uff0c\u5373\u4fbf\u8fd9\u4e9b\u53c2\u6570\u5e76\u6ca1\u6709\u9ed8\u8ba4\u503c\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u7b49\u4e8e \u00b6 \u4f7f\u7528 Query \u548c Path \uff08\u4ee5\u53ca\u540e\u6587\u4e2d\u7684\u5176\u4ed6\u7c7b\uff09\u65f6\uff0c\u65e2\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u4e32\u7ea6\u675f\uff0c\u4e5f\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u7ea6\u675f\u3002 \u6b64\u5904\uff0c\u6dfb\u52a0 ge=1 \u540e\uff0c item_id \u5c31\u5fc5\u987b\u662f\u5927\u4e8e\uff08 g reater than\uff09\u7b49\u4e8e\uff08 e qual\uff09 1 \u7684\u6574\u6570\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 1 ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u3001\u5c0f\u4e8e\u7b49\u4e8e \u00b6 \u540c\u6837\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , gt = 0 , le = 1000 ), q : str , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u6570\u503c\u6821\u9a8c\uff1a\u6d6e\u70b9\u6570\u3001\u5927\u4e8e\u548c\u5c0f\u4e8e \u00b6 \u6570\u503c\u6821\u9a8c\u540c\u6837\u9002\u7528\u4e8e float \u503c\u3002 \u6b64\u5904\uff0c\u91cd\u8981\u7684\u662f\u58f0\u660e gt \uff0c\u800c\u4e0d\u4ec5\u662f ge \u3002\u4f8b\u5982\uff0c\u503c\u5fc5\u987b\u5927\u4e8e 0 \uff0c\u5373\u4f7f\u8be5\u503c\u5c0f\u4e8e 1 \u3002 \u56e0\u6b64\uff0c 0.5 \u662f\u6709\u6548\u7684\uff0c\u4f46 0.0 \u6216 0 \u5219\u65e0\u6548\u3002 \u5bf9\u4e8e\u5c0f\u4e8e\uff08 lt \uff09\u4e5f\u662f\u4e00\u6837\u7684\u3002 from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str , size : float = Query ( gt = 0 , lt = 10.5 ) ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u5c0f\u7ed3 \u00b6 Query \u3001 Path \uff08\u53ca\u5176\u4ed6\u5c1a\u672a\u4ecb\u7ecd\u7684\u7c7b\uff09\u53ef\u4ee5\u4f7f\u7528 \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c \u4e2d\u7684\u65b9\u5f0f\u58f0\u660e\u5143\u6570\u636e\u548c\u5b57\u7b26\u4e32\u6821\u9a8c\u3002 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u6821\u9a8c\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 ge \uff1a\u5927\u4e8e\u7b49\u4e8e\uff08 g reater than or e qual\uff09 lt \uff1a\u5c0f\u4e8e\uff08 l ess t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 \u8bf4\u660e Query \u3001 Path \u53ca\u540e\u6587\u4e2d\u8981\u4ecb\u7ecd\u7684\u5176\u4ed6\u7c7b\u90fd\u7ee7\u627f\u81ea\u540c\u4e00\u4e2a Param \u7c7b\uff08\u65e0\u9700\u76f4\u63a5\u4f7f\u7528\uff09\u3002 \u800c\u4e14\uff0c\u5b83\u4eec\u5171\u4eab\u4f7f\u7528\u6240\u6709\u524d\u6587\u4e2d\u4ecb\u7ecd\u8fc7\u7684\uff0c\u7528\u4e8e\u6dfb\u52a0\u66f4\u591a\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u53c2\u6570\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u7b49\u5bf9\u8c61\u90fd\u662f\u51fd\u6570\u3002 \u8c03\u7528\u5b83\u4eec\u65f6\u4f1a\u8fd4\u56de\u540c\u540d\u7684\u7c7b\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u8c03\u7528\u5bfc\u5165\u7684 Query \u51fd\u6570\u65f6\uff0c\u5b83\u8fd4\u56de\u7684\u7c7b\u5b9e\u4f8b\u4e5f\u547d\u540d\u4e3a Query \u3002 \u4f7f\u7528\u51fd\u6570\uff08\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u7c7b\uff09\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u4e0d\u8ba9\u7f16\u8f91\u5668\u663e\u793a\u7c7b\u578b\u9519\u8bef\u3002 \u8fd9\u6837\uff0c\u5728\u4f7f\u7528\u7f16\u8f91\u5668\u548c\u5f00\u53d1\u5de5\u5177\u65f6\uff0c\u4e0d\u7528\u6dfb\u52a0\u81ea\u5b9a\u4e49\u914d\u7f6e\u6765\u5ffd\u7565\u8fd9\u4e9b\u9519\u8bef\u3002","title":"\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c"},{"location":"tutorial/path-params-numeric-validations/#_1","text":"\u9664\u4e86\u53ef\u4ee5\u4e3a Query \u67e5\u8be2\u53c2\u6570\u58f0\u660e\u6821\u9a8c\u548c\u5143\u6570\u636e\uff0c\u8fd8\u53ef\u4ee5\u4e3a Path \u8def\u5f84\u53c2\u6570\u58f0\u660e\u76f8\u540c\u7c7b\u578b\u7684\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002","title":"\u8def\u5f84\u53c2\u6570\u548c\u6570\u503c\u6821\u9a8c"},{"location":"tutorial/path-params-numeric-validations/#path","text":"\u9996\u5148\uff0c\u4ece fastapi \u5bfc\u5165 Path \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : str | None = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u5bfc\u5165 Path"},{"location":"tutorial/path-params-numeric-validations/#_2","text":"\u53ef\u4ee5\u58f0\u660e\u4e0e Query \u76f8\u540c\u7684\u6240\u6709\u53c2\u6570\u3002 \u4f8b\u5982\uff0c\u4e3a\u8def\u5f84\u53c2\u6570 item_id \u58f0\u660e title \u5143\u6570\u636e\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u8f93\u5165\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( item_id : int = Path ( title = \"The ID of the item to get\" ), q : str | None = Query ( default = None , alias = \"item-query\" ), ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results \u7b14\u8bb0 \u56e0\u4e3a\u8def\u5f84\u53c2\u6570\u5fc5\u987b\u662f\u8def\u5f84\u7684\u4e00\u90e8\u5206\uff0c\u6240\u4ee5\u8def\u5f84\u53c2\u6570\u603b\u662f\u5fc5\u9009\u7684\u3002 \u56e0\u6b64\uff0c\u58f0\u660e\u8def\u5f84\u53c2\u6570\u65f6\u8981\u4f7f\u7528 ... \uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u5fc5\u9009\u53c2\u6570\u3002 \u4e0d\u8fc7\uff0c\u5c31\u7b97\u4f7f\u7528 None \u58f0\u660e\u8def\u5f84\u53c2\u6570\uff0c\u6216\u8bbe\u7f6e\u5176\u4ed6\u9ed8\u8ba4\u503c\u4e5f\u4e0d\u4f1a\u6709\u4efb\u4f55\u5f71\u54cd\uff0c\u8def\u5f84\u53c2\u6570\u4f9d\u7136\u662f\u5fc5\u9009\u53c2\u6570\u3002","title":"\u58f0\u660e\u5143\u6570\u636e"},{"location":"tutorial/path-params-numeric-validations/#_3","text":"\u5047\u8bbe\u8981\u628a\u67e5\u8be2\u53c2\u6570 q \u58f0\u660e\u4e3a\u5fc5\u9009\u7684 str \u7c7b\u578b\u3002 \u800c\u4e14\uff0c\u56e0\u4e3a\u4e0d\u7528\u4e3a\u8be5\u53c2\u6570\u58f0\u660e\u4efb\u4f55\u5176\u4ed6\u5185\u5bb9\uff0c\u56e0\u6b64\u65e0\u9700\u4f7f\u7528 Query \u3002 \u4f46\u4ecd\u9700\u4f7f\u7528 Path \u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \u3002 \u5982\u679c\u628a\u6709 \u9ed8\u8ba4\u503c \u7684\u53c2\u6570\u7f6e\u4e8e\u65e0 \u9ed8\u8ba4\u503c \u7684\u53c2\u6570\u524d\uff0cPython \u4f1a\u62a5\u9519\u3002 \u4f46\u53ef\u4ee5\u91cd\u65b0\u6392\u5e8f\uff0c\u628a\u65e0\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570 q \u653e\u5230\u6700\u524d\u9762\u3002 FastAPI \u4e0d\u5173\u6ce8\u53c2\u6570\u6392\u5e8f\u3002\u53ea\u662f\u901a\u8fc7\u58f0\u660e\u7684\u53c2\u6570\u540d\u79f0\u3001\u7c7b\u578b\u548c\u9ed8\u8ba4\u503c\uff08 Query \u3001 Path \u7b49\uff09\u6765\u68c0\u6d4b\u53c2\u6570\uff0c\u4e0d\u5173\u6ce8\u53c2\u6570\u7684\u987a\u5e8f\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u628a\u51fd\u6570\u58f0\u660e\u4e3a\uff1a from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( q : str , item_id : int = Path ( title = \"The ID of the item to get\" )): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6309\u9700\u6392\u5e8f\u53c2\u6570"},{"location":"tutorial/path-params-numeric-validations/#_4","text":"\u5982\u679c\u4e0d\u60f3\u4f7f\u7528 Query \u58f0\u660e\u6ca1\u6709\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u4f46\u540c\u65f6\u8fd8\u8981\u4f7f\u7528 Path \u58f0\u660e\u8def\u5f84\u53c2\u6570 item_id \uff0c\u5e76\u4f7f\u7528\u4e0d\u540c\u7684\u6392\u5e8f\u65b9\u5f0f\uff0c\u53ef\u4ee5\u4f7f\u7528 Python \u7684\u7279\u6b8a\u8bed\u6cd5\u3002 \u628a * \u4f5c\u4e3a\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u3002 Python \u4e0d\u5bf9 * \u6267\u884c\u4efb\u4f55\u64cd\u4f5c\uff0c\u4f46\u4f1a\u628a * \u4e4b\u540e\u7684\u53c2\u6570\u90fd\u5f53\u4f5c\u5173\u952e\u5b57\u53c2\u6570\uff08\u952e\u503c\u5bf9\uff0c\u53eb kwargs \uff09\uff0c\u5373\u4fbf\u8fd9\u4e9b\u53c2\u6570\u5e76\u6ca1\u6709\u9ed8\u8ba4\u503c\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6309\u9700\u6392\u5e8f\u53c2\u6570\u7684\u6280\u5de7"},{"location":"tutorial/path-params-numeric-validations/#_5","text":"\u4f7f\u7528 Query \u548c Path \uff08\u4ee5\u53ca\u540e\u6587\u4e2d\u7684\u5176\u4ed6\u7c7b\uff09\u65f6\uff0c\u65e2\u53ef\u4ee5\u58f0\u660e\u5b57\u7b26\u4e32\u7ea6\u675f\uff0c\u4e5f\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u7ea6\u675f\u3002 \u6b64\u5904\uff0c\u6dfb\u52a0 ge=1 \u540e\uff0c item_id \u5c31\u5fc5\u987b\u662f\u5927\u4e8e\uff08 g reater than\uff09\u7b49\u4e8e\uff08 e qual\uff09 1 \u7684\u6574\u6570\u3002 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 1 ), q : str ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u7b49\u4e8e"},{"location":"tutorial/path-params-numeric-validations/#_6","text":"\u540c\u6837\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 from fastapi import FastAPI , Path app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , gt = 0 , le = 1000 ), q : str , ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6570\u503c\u6821\u9a8c\uff1a\u5927\u4e8e\u3001\u5c0f\u4e8e\u7b49\u4e8e"},{"location":"tutorial/path-params-numeric-validations/#_7","text":"\u6570\u503c\u6821\u9a8c\u540c\u6837\u9002\u7528\u4e8e float \u503c\u3002 \u6b64\u5904\uff0c\u91cd\u8981\u7684\u662f\u58f0\u660e gt \uff0c\u800c\u4e0d\u4ec5\u662f ge \u3002\u4f8b\u5982\uff0c\u503c\u5fc5\u987b\u5927\u4e8e 0 \uff0c\u5373\u4f7f\u8be5\u503c\u5c0f\u4e8e 1 \u3002 \u56e0\u6b64\uff0c 0.5 \u662f\u6709\u6548\u7684\uff0c\u4f46 0.0 \u6216 0 \u5219\u65e0\u6548\u3002 \u5bf9\u4e8e\u5c0f\u4e8e\uff08 lt \uff09\u4e5f\u662f\u4e00\u6837\u7684\u3002 from fastapi import FastAPI , Path , Query app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_items ( * , item_id : int = Path ( title = \"The ID of the item to get\" , ge = 0 , le = 1000 ), q : str , size : float = Query ( gt = 0 , lt = 10.5 ) ): results = { \"item_id\" : item_id } if q : results . update ({ \"q\" : q }) return results","title":"\u6570\u503c\u6821\u9a8c\uff1a\u6d6e\u70b9\u6570\u3001\u5927\u4e8e\u548c\u5c0f\u4e8e"},{"location":"tutorial/path-params-numeric-validations/#_8","text":"Query \u3001 Path \uff08\u53ca\u5176\u4ed6\u5c1a\u672a\u4ecb\u7ecd\u7684\u7c7b\uff09\u53ef\u4ee5\u4f7f\u7528 \u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c \u4e2d\u7684\u65b9\u5f0f\u58f0\u660e\u5143\u6570\u636e\u548c\u5b57\u7b26\u4e32\u6821\u9a8c\u3002 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u58f0\u660e\u6570\u503c\u6821\u9a8c\uff1a gt \uff1a\u5927\u4e8e\uff08 g reater t han\uff09 ge \uff1a\u5927\u4e8e\u7b49\u4e8e\uff08 g reater than or e qual\uff09 lt \uff1a\u5c0f\u4e8e\uff08 l ess t han\uff09 le \uff1a\u5c0f\u4e8e\u7b49\u4e8e\uff08 l ess than or e qual\uff09 \u8bf4\u660e Query \u3001 Path \u53ca\u540e\u6587\u4e2d\u8981\u4ecb\u7ecd\u7684\u5176\u4ed6\u7c7b\u90fd\u7ee7\u627f\u81ea\u540c\u4e00\u4e2a Param \u7c7b\uff08\u65e0\u9700\u76f4\u63a5\u4f7f\u7528\uff09\u3002 \u800c\u4e14\uff0c\u5b83\u4eec\u5171\u4eab\u4f7f\u7528\u6240\u6709\u524d\u6587\u4e2d\u4ecb\u7ecd\u8fc7\u7684\uff0c\u7528\u4e8e\u6dfb\u52a0\u66f4\u591a\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u53c2\u6570\u3002 \u6280\u672f\u7ec6\u8282 \u5b9e\u9645\u4e0a\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u7b49\u5bf9\u8c61\u90fd\u662f\u51fd\u6570\u3002 \u8c03\u7528\u5b83\u4eec\u65f6\u4f1a\u8fd4\u56de\u540c\u540d\u7684\u7c7b\u5b9e\u4f8b\u3002 \u56e0\u6b64\uff0c\u8c03\u7528\u5bfc\u5165\u7684 Query \u51fd\u6570\u65f6\uff0c\u5b83\u8fd4\u56de\u7684\u7c7b\u5b9e\u4f8b\u4e5f\u547d\u540d\u4e3a Query \u3002 \u4f7f\u7528\u51fd\u6570\uff08\u800c\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u7c7b\uff09\u7684\u539f\u56e0\u662f\u4e3a\u4e86\u4e0d\u8ba9\u7f16\u8f91\u5668\u663e\u793a\u7c7b\u578b\u9519\u8bef\u3002 \u8fd9\u6837\uff0c\u5728\u4f7f\u7528\u7f16\u8f91\u5668\u548c\u5f00\u53d1\u5de5\u5177\u65f6\uff0c\u4e0d\u7528\u6dfb\u52a0\u81ea\u5b9a\u4e49\u914d\u7f6e\u6765\u5ffd\u7565\u8fd9\u4e9b\u9519\u8bef\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/path-params/","text":"\u8def\u5f84\u53c2\u6570 \u00b6 FastAPI \u4f7f\u7528 Python \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u8bed\u6cd5\u58f0\u660e \u8def\u5f84\u53c2\u6570 \uff08 \u53d8\u91cf \uff09\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id ): return { \"item_id\" : item_id } \u8fd9\u6bb5\u4ee3\u7801\u628a\u8def\u5f84\u53c2\u6570 item_id \u7684\u503c\u4f20\u9012\u7ed9\u8def\u5f84\u51fd\u6570\u7684\u53c2\u6570 item_id \u3002 \u8fd0\u884c\u793a\u4f8b\uff0c\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"item_id\" : \"foo\" } \u58f0\u660e\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b \u00b6 \u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u6ce8\u89e3\uff0c\u58f0\u660e\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u4e2d\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } \u672c\u4f8b\u628a item_id \u7684\u7c7b\u578b\u58f0\u660e\u4e3a int \u3002 \u68c0\u67e5 \u58f0\u660e\u7c7b\u578b\u540e\uff0c\u7f16\u8f91\u5668\u5c31\u80fd\u4e3a\u51fd\u6570\u63d0\u4f9b\u9519\u8bef\u68c0\u67e5\u3001\u4ee3\u7801\u8865\u5168\u7b49\u652f\u6301\u3002 \u6570\u636e \u8f6c\u6362 \u00b6 \u8fd0\u884c\u793a\u4f8b\u5e76\u8bbf\u95ee http://127.0.0.1:8000/items/3 \uff0c\u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"item_id\" : 3 } \u68c0\u67e5 \u6ce8\u610f\uff0c\u51fd\u6570\u63a5\u6536\u5e76\u8fd4\u56de\u7684\u503c\u662f 3 \uff08 int \uff09\uff0c\u4e0d\u662f \"3\" \uff08 str \uff09\u3002 FastAPI \u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u81ea\u52a8 \u89e3\u6790 \u8bf7\u6c42\u4e2d\u7684\u6570\u636e \u3002 \u6570\u636e\u6821\u9a8c \u00b6 \u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u63a5\u6536\u5982\u4e0b HTTP \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u53c2\u6570 item_id \u7684\u503c \uff08 \"foo\" \uff09\u7684\u7c7b\u578b\u4e0d\u662f int \u3002 \u503c\u7684\u7c7b\u578b\u4e0d\u662f int \u800c\u662f\u6d6e\u70b9\u6570\uff08 float \uff09\u65f6\u4e5f\u4f1a\u663e\u793a\u540c\u6837\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1a http://127.0.0.1:8000/items/4.2 \u3002 \u68c0\u67e5 FastAPI \u4f7f\u7528 Python \u7c7b\u578b\u58f0\u660e\u5b9e\u73b0\u4e86\u6570\u636e\u6821\u9a8c\u3002 \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u9519\u8bef\u6307\u660e\u4e86\u672a\u901a\u8fc7\u6821\u9a8c\u7684\u5177\u4f53\u539f\u56e0\u3002 \u8fd9\u5728\u5f00\u53d1\u8c03\u8bd5\u4e0e API \u4ea4\u4e92\u7684\u4ee3\u7801\u65f6\u975e\u5e38\u6709\u7528\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u8bbf\u95ee http://127.0.0.1:8000/docs \uff0c\u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863\uff1a \u68c0\u67e5 FastAPI \uff08\u96c6\u6210 Swagger UI \u7684\uff09API \u6587\u6863\u4e5f\u53ef\u4ee5\u5229\u7528 Python \u7c7b\u578b\u58f0\u660e\u3002 \u6ce8\u610f\uff0c\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u662f\u6574\u6570\u3002 \u57fa\u4e8e\u6807\u51c6\u7684\u4f18\u52bf\uff0c\u5907\u9009\u6587\u6863 \u00b6 FastAPI \u4f7f\u7528 OpenAPI \u751f\u6210\u6982\u56fe\uff0c\u6240\u4ee5\u80fd\u517c\u5bb9\u5f88\u591a\u5de5\u5177\u3002 \u56e0\u6b64\uff0c FastAPI \u8fd8\u5185\u7f6e\u4e86 ReDoc \u751f\u6210\u7684\u5907\u9009 API \u6587\u6863\uff0c\u53ef\u5728\u6b64\u67e5\u770b http://127.0.0.1:8000/redoc \uff1a \u540c\u6837\uff0c\u8fd8\u6709\u5f88\u591a\u517c\u5bb9\u5de5\u5177\uff0c\u5305\u62ec\u591a\u79cd\u8bed\u8a00\u7684\u4ee3\u7801\u751f\u6210\u5de5\u5177\u3002 Pydantic \u00b6 FastAPI \u5145\u5206\u5730\u5229\u7528\u4e86 Pydantic \u7684\u4f18\u52bf\uff0c\u7528\u5b83\u5728\u540e\u53f0\u6821\u9a8c\u6570\u636e\u3002\u4f17\u6240\u5468\u77e5\uff0cPydantic \u64c5\u957f\u7684\u5c31\u662f\u6570\u636e\u6821\u9a8c\u3002 \u540c\u6837\uff0c str \u3001 float \u3001 bool \u4ee5\u53ca\u5f88\u591a\u590d\u5408\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u8be6\u7ec6\u5185\u5bb9\u3002 \u987a\u5e8f\u5f88\u91cd\u8981 \u00b6 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u8def\u5f84\u6709\u65f6\u662f\u5199\u6b7b\u7684\u3002 \u6bd4\u5982\u8981\u4f7f\u7528 /users/me \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u6570\u636e\u3002 \u7136\u540e\u8fd8\u8981\u4f7f\u7528 /users/{user_id} \uff0c\u901a\u8fc7\u7528\u6237 ID \u83b7\u53d6\u6307\u5b9a\u7528\u6237\u7684\u6570\u636e\u3002 \u7531\u4e8e \u8def\u5f84\u64cd\u4f5c \u662f\u6309\u987a\u5e8f\u4f9d\u6b21\u8fd0\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u4e00\u5b9a\u8981\u5728 /users/{user_id} \u4e4b\u524d\u58f0\u660e /users/me \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/me\" ) async def read_user_me (): return { \"user_id\" : \"the current user\" } @app . get ( \"/users/ {user_id} \" ) async def read_user ( user_id : str ): return { \"user_id\" : user_id } \u5426\u5219\uff0c /users/{user_id} \u5c06\u5339\u914d /users/me \uff0cFastAPI \u4f1a\u628a\u63a5\u6536\u7684\u503c \"me\" \u5f53\u4f5c user_id \u7684\u53c2\u6570\u3002 \u9884\u8bbe\u503c \u00b6 \u8def\u5f84\u64cd\u4f5c\u4f7f\u7528 Python \u7684 Enum \u7c7b\u578b\u63a5\u6536\u9884\u8bbe\u7684 \u8def\u5f84\u53c2\u6570 \u3002 \u521b\u5efa Enum \u7c7b \u00b6 \u5bfc\u5165 Enum \u5e76\u521b\u5efa\u7ee7\u627f\u81ea str \u548c Enum \u7684\u5b50\u7c7b\u3002 \u901a\u8fc7\u4ece str \u7ee7\u627f\uff0cAPI \u6587\u6863\u5c31\u80fd\u628a\u503c\u7684\u7c7b\u578b\u5b9a\u4e49\u4e3a \u5b57\u7b26\u4e32 \uff0c\u5e76\u4e14\u80fd\u6b63\u786e\u6e32\u67d3\u3002 \u7136\u540e\uff0c\u521b\u5efa\u5305\u542b\u56fa\u5b9a\u503c\u7684\u7c7b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u56fa\u5b9a\u503c\u662f\u53ef\u7528\u7684\u6709\u6548\u503c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u8bf4\u660e Python 3.4 \u53ca\u4e4b\u540e\u7248\u672c\u652f\u6301 \u679a\u4e3e\uff08\u5373 enums\uff09 \u3002 \u63d0\u793a AlexNet \u3001 ResNet \u3001 LeNet \u662f\u673a\u5668\u5b66\u4e60 \u6a21\u578b \u3002 \u58f0\u660e \u8def\u5f84\u53c2\u6570 \u00b6 \u4f7f\u7528 Enum \u7c7b\uff08 ModelName \uff09\u521b\u5efa\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u7684 \u8def\u5f84\u53c2\u6570 \uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u67e5\u770b\u6587\u6863 \u00b6 API \u6587\u6863\u4f1a\u663e\u793a\u9884\u5b9a\u4e49 \u8def\u5f84\u53c2\u6570 \u7684\u53ef\u7528\u503c\uff1a \u4f7f\u7528 Python \u679a\u4e3e\u7c7b\u578b \u00b6 \u8def\u5f84\u53c2\u6570 \u7684\u503c\u662f\u679a\u4e3e\u7684\u5143\u7d20\u3002 \u6bd4\u8f83 \u679a\u4e3e\u5143\u7d20 \u00b6 \u679a\u4e3e\u7c7b ModelName \u4e2d\u7684 \u679a\u4e3e\u5143\u7d20 \u652f\u6301\u6bd4\u8f83\u64cd\u4f5c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u83b7\u53d6 \u679a\u4e3e\u503c \u00b6 \u4f7f\u7528 model_name.value \u6216 your_enum_member.value \u83b7\u53d6\u5b9e\u9645\u7684\u503c\uff08\u672c\u4f8b\u4e2d\u4e3a \u5b57\u7b26\u4e32 \uff09\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u63d0\u793a \u4f7f\u7528 ModelName.lenet.value \u4e5f\u80fd\u83b7\u53d6\u503c \"lenet\" \u3002 \u8fd4\u56de \u679a\u4e3e\u5143\u7d20 \u00b6 \u5373\u4f7f\u5d4c\u5957\u5728 JSON \u8bf7\u6c42\u4f53\u91cc\uff08\u4f8b\u5982\uff0c dict \uff09\uff0c\u4e5f\u53ef\u4ee5\u4ece \u8def\u5f84\u64cd\u4f5c \u8fd4\u56de \u679a\u4e3e\u5143\u7d20 \u3002 \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u8981\u628a\u679a\u4e3e\u5143\u7d20\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u503c\uff08\u672c\u4f8b\u4e2d\u4e3a\u5b57\u7b26\u4e32\uff09\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u5ba2\u6237\u7aef\u4e2d\u7684 JSON \u54cd\u5e94\u5982\u4e0b\uff1a { \"model_name\" : \"alexnet\" , \"message\" : \"Deep Learning FTW!\" } \u5305\u542b\u8def\u5f84\u7684\u8def\u5f84\u53c2\u6570 \u00b6 \u5047\u8bbe \u8def\u5f84\u64cd\u4f5c \u7684\u8def\u5f84\u4e3a /files/{file_path} \u3002 \u4f46\u9700\u8981 file_path \u4e2d\u4e5f\u5305\u542b \u8def\u5f84 \uff0c\u6bd4\u5982\uff0c home/johndoe/myfile.txt \u3002 \u6b64\u65f6\uff0c\u6587\u4ef6 URL \u662f\u8fd9\u6837\u7684\uff1a /files/home/johndoe/myfile.txt \u3002 OpenAPI \u652f\u6301 \u00b6 OpenAPI \u4e0d\u652f\u6301\u58f0\u660e\u5305\u542b\u8def\u5f84\u7684 \u8def\u5f84\u53c2\u6570 \uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u6d4b\u8bd5\u548c\u5b9a\u4e49\u66f4\u52a0\u56f0\u96be\u3002 \u4e0d\u8fc7\uff0c\u4ecd\u53ef\u4f7f\u7528 Starlette \u5185\u7f6e\u5de5\u5177\u5728 FastAPI \u4e2d\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002 \u800c\u4e14\u4e0d\u5f71\u54cd\u6587\u6863\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u662f\u4e0d\u4f1a\u6dfb\u52a0\u8be5\u53c2\u6570\u5305\u542b\u8def\u5f84\u7684\u8bf4\u660e\u3002 \u8def\u5f84\u8f6c\u6362\u5668 \u00b6 \u76f4\u63a5\u4f7f\u7528 Starlette \u7684\u9009\u9879\u58f0\u660e\u5305\u542b \u8def\u5f84 \u7684 \u8def\u5f84\u53c2\u6570 \uff1a /files/{file_path:path} \u672c\u4f8b\u4e2d\uff0c\u53c2\u6570\u540d\u4e3a file_path \uff0c\u7ed3\u5c3e\u90e8\u5206\u7684 :path \u8bf4\u660e\u8be5\u53c2\u6570\u5e94\u5339\u914d \u8def\u5f84 \u3002 \u7528\u6cd5\u5982\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/files/{file_path:path}\" ) async def read_file ( file_path : str ): return { \"file_path\" : file_path } \u63d0\u793a \u6ce8\u610f\uff0c\u5305\u542b /home/johndoe/myfile.txt \u7684\u8def\u5f84\u53c2\u6570\u8981\u4ee5\u659c\u6760\uff08 / \uff09\u5f00\u5934\u3002 \u672c\u4f8b\u4e2d\u7684 URL \u662f /files//home/johndoe/myfile.txt \u3002\u6ce8\u610f\uff0c files \u548c home \u4e4b\u95f4\u8981\u4f7f\u7528 \u53cc\u659c\u6760 \uff08 // \uff09\u3002 \u5c0f\u7ed3 \u00b6 \u901a\u8fc7\u7b80\u77ed\u3001\u76f4\u89c2\u7684 Python \u6807\u51c6\u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u53ef\u4ee5\u652f\u6301\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff1a\u9519\u8bef\u68c0\u67e5\uff0c\u4ee3\u7801\u81ea\u52a8\u8865\u5168\u7b49 \u6570\u636e \u89e3\u6790 \u6570\u636e\u6821\u9a8c API \u6ce8\u89e3\u548c API \u6587\u6863 \u53ea\u9700\u8981\u58f0\u660e\u4e00\u6b21\u5373\u53ef\u3002 \u8fd9\u53ef\u80fd\u662f\u9664\u4e86\u6027\u80fd\u4ee5\u5916\uff0c FastAPI \u4e0e\u5176\u4ed6\u6846\u67b6\u76f8\u6bd4\u7684\u4e3b\u8981\u4f18\u52bf\u3002","title":"\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_1","text":"FastAPI \u4f7f\u7528 Python \u5b57\u7b26\u4e32\u683c\u5f0f\u5316\u8bed\u6cd5\u58f0\u660e \u8def\u5f84\u53c2\u6570 \uff08 \u53d8\u91cf \uff09\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id ): return { \"item_id\" : item_id } \u8fd9\u6bb5\u4ee3\u7801\u628a\u8def\u5f84\u53c2\u6570 item_id \u7684\u503c\u4f20\u9012\u7ed9\u8def\u5f84\u51fd\u6570\u7684\u53c2\u6570 item_id \u3002 \u8fd0\u884c\u793a\u4f8b\uff0c\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"item_id\" : \"foo\" }","title":"\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_2","text":"\u4f7f\u7528 Python \u6807\u51c6\u7c7b\u578b\u6ce8\u89e3\uff0c\u58f0\u660e\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u4e2d\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u3002 from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : int ): return { \"item_id\" : item_id } \u672c\u4f8b\u628a item_id \u7684\u7c7b\u578b\u58f0\u660e\u4e3a int \u3002 \u68c0\u67e5 \u58f0\u660e\u7c7b\u578b\u540e\uff0c\u7f16\u8f91\u5668\u5c31\u80fd\u4e3a\u51fd\u6570\u63d0\u4f9b\u9519\u8bef\u68c0\u67e5\u3001\u4ee3\u7801\u8865\u5168\u7b49\u652f\u6301\u3002","title":"\u58f0\u660e\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b"},{"location":"tutorial/path-params/#_3","text":"\u8fd0\u884c\u793a\u4f8b\u5e76\u8bbf\u95ee http://127.0.0.1:8000/items/3 \uff0c\u8fd4\u56de\u7684\u54cd\u5e94\u5982\u4e0b\uff1a { \"item_id\" : 3 } \u68c0\u67e5 \u6ce8\u610f\uff0c\u51fd\u6570\u63a5\u6536\u5e76\u8fd4\u56de\u7684\u503c\u662f 3 \uff08 int \uff09\uff0c\u4e0d\u662f \"3\" \uff08 str \uff09\u3002 FastAPI \u901a\u8fc7\u7c7b\u578b\u58f0\u660e\u81ea\u52a8 \u89e3\u6790 \u8bf7\u6c42\u4e2d\u7684\u6570\u636e \u3002","title":"\u6570\u636e\u8f6c\u6362"},{"location":"tutorial/path-params/#_4","text":"\u901a\u8fc7\u6d4f\u89c8\u5668\u8bbf\u95ee http://127.0.0.1:8000/items/foo \uff0c\u63a5\u6536\u5982\u4e0b HTTP \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"path\" , \"item_id\" ], \"msg\" : \"value is not a valid integer\" , \"type\" : \"type_error.integer\" } ] } \u8fd9\u662f\u56e0\u4e3a\u8def\u5f84\u53c2\u6570 item_id \u7684\u503c \uff08 \"foo\" \uff09\u7684\u7c7b\u578b\u4e0d\u662f int \u3002 \u503c\u7684\u7c7b\u578b\u4e0d\u662f int \u800c\u662f\u6d6e\u70b9\u6570\uff08 float \uff09\u65f6\u4e5f\u4f1a\u663e\u793a\u540c\u6837\u7684\u9519\u8bef\uff0c\u6bd4\u5982\uff1a http://127.0.0.1:8000/items/4.2 \u3002 \u68c0\u67e5 FastAPI \u4f7f\u7528 Python \u7c7b\u578b\u58f0\u660e\u5b9e\u73b0\u4e86\u6570\u636e\u6821\u9a8c\u3002 \u6ce8\u610f\uff0c\u4e0a\u9762\u7684\u9519\u8bef\u6307\u660e\u4e86\u672a\u901a\u8fc7\u6821\u9a8c\u7684\u5177\u4f53\u539f\u56e0\u3002 \u8fd9\u5728\u5f00\u53d1\u8c03\u8bd5\u4e0e API \u4ea4\u4e92\u7684\u4ee3\u7801\u65f6\u975e\u5e38\u6709\u7528\u3002","title":"\u6570\u636e\u6821\u9a8c"},{"location":"tutorial/path-params/#_5","text":"\u8bbf\u95ee http://127.0.0.1:8000/docs \uff0c\u67e5\u770b\u81ea\u52a8\u751f\u6210\u7684 API \u6587\u6863\uff1a \u68c0\u67e5 FastAPI \uff08\u96c6\u6210 Swagger UI \u7684\uff09API \u6587\u6863\u4e5f\u53ef\u4ee5\u5229\u7528 Python \u7c7b\u578b\u58f0\u660e\u3002 \u6ce8\u610f\uff0c\u8def\u5f84\u53c2\u6570\u7684\u7c7b\u578b\u662f\u6574\u6570\u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/path-params/#_6","text":"FastAPI \u4f7f\u7528 OpenAPI \u751f\u6210\u6982\u56fe\uff0c\u6240\u4ee5\u80fd\u517c\u5bb9\u5f88\u591a\u5de5\u5177\u3002 \u56e0\u6b64\uff0c FastAPI \u8fd8\u5185\u7f6e\u4e86 ReDoc \u751f\u6210\u7684\u5907\u9009 API \u6587\u6863\uff0c\u53ef\u5728\u6b64\u67e5\u770b http://127.0.0.1:8000/redoc \uff1a \u540c\u6837\uff0c\u8fd8\u6709\u5f88\u591a\u517c\u5bb9\u5de5\u5177\uff0c\u5305\u62ec\u591a\u79cd\u8bed\u8a00\u7684\u4ee3\u7801\u751f\u6210\u5de5\u5177\u3002","title":"\u57fa\u4e8e\u6807\u51c6\u7684\u4f18\u52bf\uff0c\u5907\u9009\u6587\u6863"},{"location":"tutorial/path-params/#pydantic","text":"FastAPI \u5145\u5206\u5730\u5229\u7528\u4e86 Pydantic \u7684\u4f18\u52bf\uff0c\u7528\u5b83\u5728\u540e\u53f0\u6821\u9a8c\u6570\u636e\u3002\u4f17\u6240\u5468\u77e5\uff0cPydantic \u64c5\u957f\u7684\u5c31\u662f\u6570\u636e\u6821\u9a8c\u3002 \u540c\u6837\uff0c str \u3001 float \u3001 bool \u4ee5\u53ca\u5f88\u591a\u590d\u5408\u6570\u636e\u7c7b\u578b\u90fd\u53ef\u4ee5\u4f7f\u7528\u7c7b\u578b\u58f0\u660e\u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u8be6\u7ec6\u5185\u5bb9\u3002","title":"Pydantic"},{"location":"tutorial/path-params/#_7","text":"\u8def\u5f84\u64cd\u4f5c \u4e2d\u7684\u8def\u5f84\u6709\u65f6\u662f\u5199\u6b7b\u7684\u3002 \u6bd4\u5982\u8981\u4f7f\u7528 /users/me \u83b7\u53d6\u5f53\u524d\u7528\u6237\u7684\u6570\u636e\u3002 \u7136\u540e\u8fd8\u8981\u4f7f\u7528 /users/{user_id} \uff0c\u901a\u8fc7\u7528\u6237 ID \u83b7\u53d6\u6307\u5b9a\u7528\u6237\u7684\u6570\u636e\u3002 \u7531\u4e8e \u8def\u5f84\u64cd\u4f5c \u662f\u6309\u987a\u5e8f\u4f9d\u6b21\u8fd0\u884c\u7684\uff0c\u56e0\u6b64\uff0c\u4e00\u5b9a\u8981\u5728 /users/{user_id} \u4e4b\u524d\u58f0\u660e /users/me \uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/me\" ) async def read_user_me (): return { \"user_id\" : \"the current user\" } @app . get ( \"/users/ {user_id} \" ) async def read_user ( user_id : str ): return { \"user_id\" : user_id } \u5426\u5219\uff0c /users/{user_id} \u5c06\u5339\u914d /users/me \uff0cFastAPI \u4f1a\u628a\u63a5\u6536\u7684\u503c \"me\" \u5f53\u4f5c user_id \u7684\u53c2\u6570\u3002","title":"\u987a\u5e8f\u5f88\u91cd\u8981"},{"location":"tutorial/path-params/#_8","text":"\u8def\u5f84\u64cd\u4f5c\u4f7f\u7528 Python \u7684 Enum \u7c7b\u578b\u63a5\u6536\u9884\u8bbe\u7684 \u8def\u5f84\u53c2\u6570 \u3002","title":"\u9884\u8bbe\u503c"},{"location":"tutorial/path-params/#enum","text":"\u5bfc\u5165 Enum \u5e76\u521b\u5efa\u7ee7\u627f\u81ea str \u548c Enum \u7684\u5b50\u7c7b\u3002 \u901a\u8fc7\u4ece str \u7ee7\u627f\uff0cAPI \u6587\u6863\u5c31\u80fd\u628a\u503c\u7684\u7c7b\u578b\u5b9a\u4e49\u4e3a \u5b57\u7b26\u4e32 \uff0c\u5e76\u4e14\u80fd\u6b63\u786e\u6e32\u67d3\u3002 \u7136\u540e\uff0c\u521b\u5efa\u5305\u542b\u56fa\u5b9a\u503c\u7684\u7c7b\u5c5e\u6027\uff0c\u8fd9\u4e9b\u56fa\u5b9a\u503c\u662f\u53ef\u7528\u7684\u6709\u6548\u503c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u8bf4\u660e Python 3.4 \u53ca\u4e4b\u540e\u7248\u672c\u652f\u6301 \u679a\u4e3e\uff08\u5373 enums\uff09 \u3002 \u63d0\u793a AlexNet \u3001 ResNet \u3001 LeNet \u662f\u673a\u5668\u5b66\u4e60 \u6a21\u578b \u3002","title":"\u521b\u5efa Enum \u7c7b"},{"location":"tutorial/path-params/#_9","text":"\u4f7f\u7528 Enum \u7c7b\uff08 ModelName \uff09\u521b\u5efa\u4f7f\u7528\u7c7b\u578b\u6ce8\u89e3\u7684 \u8def\u5f84\u53c2\u6570 \uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\u58f0\u660e\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#_10","text":"API \u6587\u6863\u4f1a\u663e\u793a\u9884\u5b9a\u4e49 \u8def\u5f84\u53c2\u6570 \u7684\u53ef\u7528\u503c\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/path-params/#python","text":"\u8def\u5f84\u53c2\u6570 \u7684\u503c\u662f\u679a\u4e3e\u7684\u5143\u7d20\u3002","title":"\u4f7f\u7528 Python \u679a\u4e3e\u7c7b\u578b"},{"location":"tutorial/path-params/#_11","text":"\u679a\u4e3e\u7c7b ModelName \u4e2d\u7684 \u679a\u4e3e\u5143\u7d20 \u652f\u6301\u6bd4\u8f83\u64cd\u4f5c\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" }","title":"\u6bd4\u8f83\u679a\u4e3e\u5143\u7d20"},{"location":"tutorial/path-params/#_12","text":"\u4f7f\u7528 model_name.value \u6216 your_enum_member.value \u83b7\u53d6\u5b9e\u9645\u7684\u503c\uff08\u672c\u4f8b\u4e2d\u4e3a \u5b57\u7b26\u4e32 \uff09\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u63d0\u793a \u4f7f\u7528 ModelName.lenet.value \u4e5f\u80fd\u83b7\u53d6\u503c \"lenet\" \u3002","title":"\u83b7\u53d6\u679a\u4e3e\u503c"},{"location":"tutorial/path-params/#_13","text":"\u5373\u4f7f\u5d4c\u5957\u5728 JSON \u8bf7\u6c42\u4f53\u91cc\uff08\u4f8b\u5982\uff0c dict \uff09\uff0c\u4e5f\u53ef\u4ee5\u4ece \u8def\u5f84\u64cd\u4f5c \u8fd4\u56de \u679a\u4e3e\u5143\u7d20 \u3002 \u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\u4e4b\u524d\uff0c\u8981\u628a\u679a\u4e3e\u5143\u7d20\u8f6c\u6362\u4e3a\u5bf9\u5e94\u7684\u503c\uff08\u672c\u4f8b\u4e2d\u4e3a\u5b57\u7b26\u4e32\uff09\uff1a from enum import Enum from fastapi import FastAPI class ModelName ( str , Enum ): alexnet = \"alexnet\" resnet = \"resnet\" lenet = \"lenet\" app = FastAPI () @app . get ( \"/models/ {model_name} \" ) async def get_model ( model_name : ModelName ): if model_name is ModelName . alexnet : return { \"model_name\" : model_name , \"message\" : \"Deep Learning FTW!\" } if model_name . value == \"lenet\" : return { \"model_name\" : model_name , \"message\" : \"LeCNN all the images\" } return { \"model_name\" : model_name , \"message\" : \"Have some residuals\" } \u5ba2\u6237\u7aef\u4e2d\u7684 JSON \u54cd\u5e94\u5982\u4e0b\uff1a { \"model_name\" : \"alexnet\" , \"message\" : \"Deep Learning FTW!\" }","title":"\u8fd4\u56de\u679a\u4e3e\u5143\u7d20"},{"location":"tutorial/path-params/#_14","text":"\u5047\u8bbe \u8def\u5f84\u64cd\u4f5c \u7684\u8def\u5f84\u4e3a /files/{file_path} \u3002 \u4f46\u9700\u8981 file_path \u4e2d\u4e5f\u5305\u542b \u8def\u5f84 \uff0c\u6bd4\u5982\uff0c home/johndoe/myfile.txt \u3002 \u6b64\u65f6\uff0c\u6587\u4ef6 URL \u662f\u8fd9\u6837\u7684\uff1a /files/home/johndoe/myfile.txt \u3002","title":"\u5305\u542b\u8def\u5f84\u7684\u8def\u5f84\u53c2\u6570"},{"location":"tutorial/path-params/#openapi","text":"OpenAPI \u4e0d\u652f\u6301\u58f0\u660e\u5305\u542b\u8def\u5f84\u7684 \u8def\u5f84\u53c2\u6570 \uff0c\u56e0\u4e3a\u8fd9\u4f1a\u5bfc\u81f4\u6d4b\u8bd5\u548c\u5b9a\u4e49\u66f4\u52a0\u56f0\u96be\u3002 \u4e0d\u8fc7\uff0c\u4ecd\u53ef\u4f7f\u7528 Starlette \u5185\u7f6e\u5de5\u5177\u5728 FastAPI \u4e2d\u5b9e\u73b0\u8fd9\u4e00\u529f\u80fd\u3002 \u800c\u4e14\u4e0d\u5f71\u54cd\u6587\u6863\u6b63\u5e38\u8fd0\u884c\uff0c\u4f46\u662f\u4e0d\u4f1a\u6dfb\u52a0\u8be5\u53c2\u6570\u5305\u542b\u8def\u5f84\u7684\u8bf4\u660e\u3002","title":"OpenAPI \u652f\u6301"},{"location":"tutorial/path-params/#_15","text":"\u76f4\u63a5\u4f7f\u7528 Starlette \u7684\u9009\u9879\u58f0\u660e\u5305\u542b \u8def\u5f84 \u7684 \u8def\u5f84\u53c2\u6570 \uff1a /files/{file_path:path} \u672c\u4f8b\u4e2d\uff0c\u53c2\u6570\u540d\u4e3a file_path \uff0c\u7ed3\u5c3e\u90e8\u5206\u7684 :path \u8bf4\u660e\u8be5\u53c2\u6570\u5e94\u5339\u914d \u8def\u5f84 \u3002 \u7528\u6cd5\u5982\u4e0b\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/files/{file_path:path}\" ) async def read_file ( file_path : str ): return { \"file_path\" : file_path } \u63d0\u793a \u6ce8\u610f\uff0c\u5305\u542b /home/johndoe/myfile.txt \u7684\u8def\u5f84\u53c2\u6570\u8981\u4ee5\u659c\u6760\uff08 / \uff09\u5f00\u5934\u3002 \u672c\u4f8b\u4e2d\u7684 URL \u662f /files//home/johndoe/myfile.txt \u3002\u6ce8\u610f\uff0c files \u548c home \u4e4b\u95f4\u8981\u4f7f\u7528 \u53cc\u659c\u6760 \uff08 // \uff09\u3002","title":"\u8def\u5f84\u8f6c\u6362\u5668"},{"location":"tutorial/path-params/#_16","text":"\u901a\u8fc7\u7b80\u77ed\u3001\u76f4\u89c2\u7684 Python \u6807\u51c6\u7c7b\u578b\u58f0\u660e\uff0c FastAPI \u53ef\u4ee5\u652f\u6301\uff1a \u7f16\u8f91\u5668\u652f\u6301\uff1a\u9519\u8bef\u68c0\u67e5\uff0c\u4ee3\u7801\u81ea\u52a8\u8865\u5168\u7b49 \u6570\u636e \u89e3\u6790 \u6570\u636e\u6821\u9a8c API \u6ce8\u89e3\u548c API \u6587\u6863 \u53ea\u9700\u8981\u58f0\u660e\u4e00\u6b21\u5373\u53ef\u3002 \u8fd9\u53ef\u80fd\u662f\u9664\u4e86\u6027\u80fd\u4ee5\u5916\uff0c FastAPI \u4e0e\u5176\u4ed6\u6846\u67b6\u76f8\u6bd4\u7684\u4e3b\u8981\u4f18\u52bf\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/query-params-str-validations/","text":"\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c \u00b6 FastAPI \u5141\u8bb8\u4e3a\u53c2\u6570\u58f0\u660e\u9644\u52a0\u4fe1\u606f\u4e0e\u6821\u9a8c\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u67e5\u8be2\u53c2\u6570 q \u7684\u7c7b\u578b\u662f Optional[str] \uff0c\u5373\u5b83\u7684\u7c7b\u578b\u662f str \uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f None \uff08\u5176\u5b9e\uff0c\u662f\u5b83\u7684\u9ed8\u8ba4\u503c\u4e3a None \uff09\uff0c q \u662f\u53ef\u9009\u53c2\u6570\u3002 \u7b14\u8bb0 \u9ed8\u8ba4\u503c\u662f None \uff0cFastAPI \u56e0\u6b64\u628a q \u5f53\u4f5c\u53ef\u9009\u53c2\u6570\u3002 FastAPI \u4e0d\u4f7f\u7528 Optional[str] \u4e2d\u7684 Optional \uff0c\u4f46 Optional \u53ef\u4ee5\u8ba9\u7f16\u8f91\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\uff0c\u6709\u52a9\u4e8e\u68c0\u67e5\u9519\u8bef\u3002 \u9644\u52a0\u6821\u9a8c \u00b6 \u63a5\u4e0b\u6765\uff0c\u6dfb\u52a0\u4e00\u4e9b\u7ea6\u675f\u6761\u4ef6\uff1a\u5373\u4f7f q \u662f\u53ef\u9009\u7684\uff0c\u4f46\u53ea\u8981\u63d0\u4f9b\u4e86\u8be5\u53c2\u6570\uff0c \u8be5\u53c2\u6570\u7684\u957f\u5ea6\u5c31\u4e0d\u80fd\u8d85\u8fc7 50 \u4e2a\u5b57\u7b26 \u3002 \u5bfc\u5165 Query \u00b6 \u9996\u5148\uff0c\u4ece fastapi \u5bfc\u5165 Query \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u4ee5 Query \u4e3a\u9ed8\u8ba4\u503c \u00b6 \u63a5\u4e0b\u6765\uff0c\u628a Query \u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u5e76\u628a max_length \u53c2\u6570\u8bbe\u7f6e\u4e3a 50\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u6b64\u5904\u5fc5\u987b\u7528 Query() \u66ff\u6362\u51fd\u6570\u91cc\u7684\u9ed8\u8ba4\u503c None \u3002\u5728\u6b64\uff0c\u53ef\u4ee5\u628a\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a Query(default=None) \uff0c\u5b83\u4e0e\u5b9a\u4e49\u7684\u9ed8\u8ba4\u503c\u6548\u679c\u76f8\u540c\u3002 \u6240\u4ee5\uff1a q : Union [ str , None ] = Query ( default = None ) \u2026\u2026\u8ba9\u53c2\u6570\u53d8\u4e3a\u53ef\u9009\uff0c\u53ef\u4f7f\u7528\uff1a q : Union [ str , None ] = None Python 3.10 \u4ee5\u4e0a\u7248\u672c\u65f6\uff1a q : str | None = Query ( default = None ) \u2026\u2026\u8ba9\u53c2\u6570\u53d8\u4e3a\u53ef\u9009\uff0c\u53ef\u4f7f\u7528\uff1a q : str | None = None \u4f46 Query \u80fd\u663e\u5f0f\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u3002 \u8bf4\u660e \u6ce8\u610f\uff0cFastAPI \u5173\u6ce8\u4ee5\u4e0b\u5185\u5bb9\uff1a = None \u6216\uff1a = Query ( default = None ) \u5e76\u4e14\u901a\u8fc7 None \u8bc6\u522b\u51fa\u67e5\u8be2\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002 Union[str, None] \u53ea\u662f\u4e3a\u4e86\u8ba9\u7f16\u8f91\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\uff0c\u5e76\u4e0d\u4f1a\u544a\u8bc9 FastAPI \u8be5\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a Query \u4f20\u9012\u66f4\u591a\u53c2\u6570\u3002\u672c\u4f8b\u4f7f\u7528 max_length \u53c2\u6570\u7ea6\u675f\u5b57\u7b26\u4e32\uff1a q : Union [ str , None ] = Query ( default = None , max_length = 50 ) \u8fd9\u884c\u4ee3\u7801\u4f1a\u6821\u9a8c\u6570\u636e\uff0c\u5728\u6570\u636e\u65e0\u6548\u65f6\u663e\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u5e76\u5728 OpenAPI \u6982\u56fe\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u5b58\u6863\u8be5\u53c2\u6570\u3002 \u6dfb\u52a0\u66f4\u591a\u6821\u9a8c \u00b6 FastAPI \u8fd8\u652f\u6301 min_length \u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , min_length = 3 , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u6dfb\u52a0\u6b63\u5219\u8868\u8fbe\u5f0f \u00b6 FastAPI \u8fd8\u80fd\u5b9a\u4e49\u5fc5\u987b\u4e0e \u6b63\u5219\u8868\u8fbe\u5f0f \u5339\u914d\u7684\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u8fd9\u4e2a\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u901a\u8fc7\u4ee5\u4e0b\u89c4\u5219\u68c0\u67e5\u63a5\u6536\u5230\u7684\u53c2\u6570\u503c\uff1a ^ \uff1a\u4ee5\u8be5\u7b26\u53f7\u4e4b\u540e\u7684\u5b57\u7b26\u5f00\u5934\uff0c\u7b26\u53f7\u4e4b\u524d\u6ca1\u6709\u5b57\u7b26 fixedquery \uff1a\u53c2\u6570\u503c\u5e94\u4e0e fixedquery \u5b8c\u5168\u5339\u914d $ \uff1a\u5230\u6b64\u7b26\u53f7\u7ed3\u675f\uff0c fixedquery \u540e\u6ca1\u6709\u5176\u4ed6\u5b57\u7b26 \u5c31\u7b97\u641e\u4e0d\u5b9a \u6b63\u5219\u8868\u8fbe\u5f0f \u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u5f88\u591a\u4eba\u90fd\u89c9\u5f97\u6b63\u5219\u8868\u8fbe\u5f0f\u5f88\u96be\u3002\u5176\u5b9e\u4e0d\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u5de5\u4f5c\u3002 \u4f46\u53ea\u8981\u60a8\u9700\u8981\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8bf7\u8bb0\u4f4f\uff0c FastAPI \u5bf9\u6b64\u63d0\u4f9b\u652f\u6301\u3002 \u9ed8\u8ba4\u503c \u00b6 Query \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u3002\u4e0d\u4ec5\u53ef\u4ee5\u4f7f\u7528 None \uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u503c\u3002 \u5982\uff0c\u58f0\u660e min_length \u662f 3 \uff0c\u9ed8\u8ba4\u503c\u662f fixedquery \u7684\u67e5\u8be2\u53c2\u6570 q \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = \"fixedquery\" , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u7b14\u8bb0 \u58f0\u660e\u4e86\u9ed8\u8ba4\u503c\u8ba9\u8be5\u53c2\u6570\u6210\u4e3a\u53ef\u9009\u53c2\u6570\u3002 \u6807\u8bb0\u4e3a\u5fc5\u9009 \u00b6 \u4e0d\u9700\u8981\u58f0\u660e\u6821\u9a8c\u6216\u5143\u6570\u636e\u65f6\uff0c\u53ea\u8981\u4e0d\u58f0\u660e\u9ed8\u8ba4\u503c\uff0c\u5c31\u53ef\u4ee5\u628a\u67e5\u8be2\u53c2\u6570 q \u53d8\u4e3a\u5fc5\u9009\u53c2\u6570\uff0c\u4f8b\u5982\u7528\uff1a q : str \u6216\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a q : Union [ str , None ] = None \u4f46\u73b0\u5728\u662f\u7528 Query \u58f0\u660e\u8be5\u53c2\u6570\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a q : Union [ str , None ] = Query ( default = None , min_length = 3 ) \u56e0\u6b64\uff0c\u4f7f\u7528 Query \u628a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u4e3a\u5fc5\u9009\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5e94\u4e3a ... \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u4f7f\u7528\u7701\u7565\u53f7\uff08 ... \uff09\u7684\u5fc5\u9009\u9879 \u00b6 \u8fd8\u6709\u4e00\u79cd\u53ef\u4ee5\u663e\u793a\u58f0\u660e\u5fc5\u9009\u503c\u7684\u5907\u9009\u65b9\u5f0f\u3002\u5373\u4f7f\u7528\u5b57\u9762\u503c ... \u8bbe\u7f6e default \u53c2\u6570\uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default =... , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u8bf4\u660e ... \uff1a\u7279\u6b8a\u7684\u5355\u503c\uff0c\u662f Python \u7684\u7279\u6b8a\u7b26\u53f7\uff0c\u79f0\u4e3a \u7701\u7565\u53f7 \u3002 \u5728 Pydantic \u548c FastAPI \u4e2d\uff0c\u7701\u7565\u53f7\u53ef\u7528\u4e8e\u628a\u4e00\u4e2a\u503c\u663e\u5f0f\u58f0\u660e\u4e3a\u5fc5\u9009\u9879\u3002 \u8fd9\u6837\u4e00\u6765\uff0c FastAPI \u5c31\u80fd\u628a\u8be5\u67e5\u8be2\u53c2\u6570\u8bc6\u522b\u4e3a\u5fc5\u9009\u53c2\u6570\u3002 \u4f7f\u7528 None \u5b9a\u4e49\u5fc5\u9009\u9879 \u00b6 \u58f0\u660e\u53ef\u4ee5\u63a5\u53d7 None \u7684\u53c2\u6570\uff0c\u4f46\u5b83\u4ecd\u662f\u5fc5\u9009\u7684\u3002\u8fd9\u5c06\u5f3a\u5236\u5ba2\u6237\u7aef\u53d1\u9001\u503c\uff0c\u5373\u4f7f\u8fd9\u4e2a\u503c\u662f None \u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u53ef\u4ee5\u58f0\u660e None \u662f\u4e00\u79cd\u6709\u6548\u7c7b\u578b\uff0c\u4f46\u4ecd\u8981\u4f7f\u7528 default=... \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default =... , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default =... , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u63d0\u793a Pydantic \u8d1f\u8d23\u5b9e\u73b0 FastAPI \u4e2d\u7684\u6570\u636e\u9a8c\u8bc1\u4e0e\u5e8f\u5217\u5316\uff0c\u5b83\u652f\u6301\u4e00\u79cd\u7279\u6b8a\u884c\u4e3a\uff0c\u5373\u4f7f\u7528 Optional \u6216 Union[Something, None] \u800c\u65e0\u987b\u9ed8\u8ba4\u503c, \u8be6\u89c1 Pydantic \u6587\u6863\u4e2d\u5173\u4e8e \u5fc5\u9009\u53ef\u9009\u5b57\u6bb5 \u7684\u8bf4\u660e\u3002 \u7528 Pydantic \u7684 Required \u66ff\u6362\u7701\u7565\u53f7\uff08 ... \uff09 \u00b6 \u5982\u679c\u4e0d\u60f3\u4f7f\u7528 ... \uff0c\u53ef\u4ee5\u4ece Pydantic \u5bfc\u5165 Required \uff1a from fastapi import FastAPI , Query from pydantic import Required app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = Required , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u63d0\u793a \u8bb0\u4f4f\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4ec5\u9700\u7701\u7565 default \u53c2\u6570\u5373\u53ef\u8bbe\u7f6e\u5fc5\u9009\uff0c\u56e0\u6b64\u901a\u5e38\u65e0\u987b\u4f7f\u7528 ... \u6216 Required . \u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c \u00b6 \u7528 Query \u663e\u5f0f\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570\u65f6\uff0c\u8fd8\u53ef\u4ee5\u8ba9\u5b83\u63a5\u6536\u4e00\u7ec4\u503c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u63a5\u6536\u591a\u4e2a\u503c\u3002 \u4f8b\u5982\uff0c\u5728 URL \u4e2d\u58f0\u660e\u591a\u4e2a\u67e5\u8be2\u53c2\u6570 q \u7684\u4ee3\u7801\u5982\u4e0b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ List [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ list [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list [ str ] | None = Query ( default = None )): query_items = { \"q\" : q } return query_items \u7136\u540e\uff0c\u8f93\u5165\u4ee5\u4e0b\u7f51\u5740\uff1a http://localhost:8000/items/?q=foo&q=bar \u5c31\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 \u67e5\u8be2\u53c2\u6570 q \u4e2d\u4ee5 Python \u5217\u8868 \u7684\u5f62\u5f0f\u63a5\u6536 \u67e5\u8be2\u53c2\u6570 q \u7684\u591a\u4e2a\u503c\uff08 foo \u548c bar \uff09\u3002 \u56e0\u6b64\uff0c\u8be5 URL \u7684\u54cd\u5e94\u4e3a\uff1a { \"q\" : [ \"foo\" , \"bar\" ] } \u63d0\u793a \u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u628a\u67e5\u8be2\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a list \uff0c\u8981\u663e\u5f0f\u4f7f\u7528 Query \uff0c\u5426\u5219\u8be5\u53c2\u6570\u4f1a\u88ab\u89e3\u91ca\u4e3a\u8bf7\u6c42\u4f53\u3002 API \u6587\u6863\u4f1a\u8fdb\u884c\u54cd\u5e94\u66f4\u65b0\uff0c\u5141\u8bb8\u4f7f\u7528\u591a\u4e2a\u503c\uff1a \u542b\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c \u00b6 FastAPI \u8fd8\u652f\u6301\u5728\u672a\u7ed9\u5b9a\u503c\u65f6\uff0c\u4e3a list \u5b9a\u4e49\u9ed8\u8ba4\u503c\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : List [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items \u8bbf\u95ee\u4ee5\u4e0b\u7f51\u5740\uff1a http://localhost:8000/items/ q \u7684\u9ed8\u8ba4\u503c\u662f\uff1a [\"foo\", \"bar\"] \uff0c\u54cd\u5e94\u662f\uff1a { \"q\" : [ \"foo\" , \"bar\" ] } \u4f7f\u7528 list \u00b6 \u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 list \u4ee3\u66ff List [str] \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list = Query ( default = [])): query_items = { \"q\" : q } return query_items \u7b14\u8bb0 \u6ce8\u610f\uff0c\u6b64\u65f6\uff0cFastAPI \u4e0d\u518d\u6821\u9a8c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c List[int] \u4f1a\u6821\u9a8c\uff08\u5e76\u5b58\u6863\uff09\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u662f\u6574\u6570\u3002\u4f46\u5982\u679c\u53ea\u4f7f\u7528 list \uff0c\u5c31\u6ca1\u6709\u8fd9\u79cd\u6821\u9a8c\u3002 \u58f0\u660e\u66f4\u591a\u5143\u6570\u636e \u00b6 FastAPI \u8fd8\u652f\u6301\u4e3a\u53c2\u6570\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u3002 \u8fd9\u4e9b\u4fe1\u606f\u5305\u542b\u5728 OpenAPI \u6982\u56fe\u91cc\uff0c\u7528\u4e8e API \u6587\u6863\u548c\u5916\u90e8\u5de5\u5177\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u4e0d\u540c\u5de5\u5177\u5bf9 OpenAPI \u7684\u652f\u6301\u53ef\u80fd\u4e0d\u540c\u3002 \u6709\u4e9b\u5de5\u5177\u53ef\u80fd\u4e0d\u4f1a\u663e\u793a\u6240\u6709\u5df2\u58f0\u660e\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u7f3a\u5931\u7684\u529f\u80fd\u5df2\u7ecf\u7eb3\u5165\u4e86\u8fd9\u4e9b\u5de5\u5177\u7684\u5f00\u53d1\u8ba1\u5212\u3002 \u4e3a Query \u6dfb\u52a0 title \u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u53ca description \u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u53c2\u6570\u522b\u540d \u00b6 \u5047\u8bbe\u8981\u4f7f\u7528\u7684\u67e5\u8be2\u53c2\u6570\u662f item-query \u3002 \u5982\u4e0b\u6240\u793a\uff1a http://127.0.0.1:8000/items/?item-query=foobaritems \u4f46 item-query \u4e0d\u662f\u6709\u6548\u7684 Python \u53d8\u91cf\u540d\u3002 \u6700\u63a5\u8fd1\u7684\u6709\u6548\u540d\u79f0\u662f item_query \u3002 \u4f46\u5982\u679c\u5fc5\u987b\u5728 URL \u4e2d\u4f7f\u7528 item-query \u2026\u2026 \u9700\u8981\u4f7f\u7528 alias \u53c2\u6570\u58f0\u660e\u522b\u540d\uff0c\u7528\u4e8e\u5728 URL \u4e2d\u67e5\u627e\u8fd9\u4e2a\u53c2\u6570\u503c\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u5f03\u7528\u53c2\u6570 \u00b6 \u5982\u679c\u4e0d\u518d\u9700\u8981\u67d0\u4e2a\u53c2\u6570\u3002 \u4f46\u56e0\u4e3a\u67d0\u4e9b\u5ba2\u6237\u7aef\u8fd8\u5728\u4f7f\u7528\u8be5\u53c2\u6570\uff0c\u800c\u4e0d\u5f97\u4e0d\u4fdd\u7559\u4e00\u6bb5\u65f6\u95f4\uff0c\u6b64\u65f6\uff0c\u9700\u8981\u5728\u6587\u6863\u4e2d\u628a\u5b83\u663e\u793a\u4e3a \u5df2\u5f03\u7528 \u3002 \u4e3a\u6b64\uff0c\u8981\u5728 Query \u4e2d\u4f7f\u7528\u53c2\u6570 deprecated=True \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results API \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a \u4ece OpenAPI \u4e2d\u6392\u9664 \u00b6 \u4ece\u751f\u6210\u7684 OpenAPI \u6982\u56fe\u4e2d\u6392\u9664\u67e5\u8be2\u53c2\u6570\uff08\u4ece\u81ea\u52a8\u6587\u6863\u7cfb\u7edf\uff09\uff0c\u628a Query \u7684 include_in_schema \u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( hidden_query : Union [ str , None ] = Query ( default = None , include_in_schema = False ) ): if hidden_query : return { \"hidden_query\" : hidden_query } else : return { \"hidden_query\" : \"Not found\" } from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( hidden_query : str | None = Query ( default = None , include_in_schema = False ) ): if hidden_query : return { \"hidden_query\" : hidden_query } else : return { \"hidden_query\" : \"Not found\" } \u5c0f\u7ed3 \u00b6 FastAPI \u652f\u6301\u4e3a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u66f4\u591a\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u5e38\u7528\u4e8e\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u53c2\u6570\u5305\u62ec\uff1a alias title description deprecated \u4e13\u7528\u4e8e\u6821\u9a8c\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u5305\u62ec\uff1a min_length max_length regex \u672c\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u6821\u9a8c \u5b57\u7b26\u4e32 \u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u5982\u4f55\u6821\u9a8c\u6570\u503c\u7b49\u5176\u4ed6\u7c7b\u578b\u3002","title":"\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#_1","text":"FastAPI \u5141\u8bb8\u4e3a\u53c2\u6570\u58f0\u660e\u9644\u52a0\u4fe1\u606f\u4e0e\u6821\u9a8c\u3002 \u793a\u4f8b\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = None ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u67e5\u8be2\u53c2\u6570 q \u7684\u7c7b\u578b\u662f Optional[str] \uff0c\u5373\u5b83\u7684\u7c7b\u578b\u662f str \uff0c\u4f46\u4e5f\u53ef\u4ee5\u662f None \uff08\u5176\u5b9e\uff0c\u662f\u5b83\u7684\u9ed8\u8ba4\u503c\u4e3a None \uff09\uff0c q \u662f\u53ef\u9009\u53c2\u6570\u3002 \u7b14\u8bb0 \u9ed8\u8ba4\u503c\u662f None \uff0cFastAPI \u56e0\u6b64\u628a q \u5f53\u4f5c\u53ef\u9009\u53c2\u6570\u3002 FastAPI \u4e0d\u4f7f\u7528 Optional[str] \u4e2d\u7684 Optional \uff0c\u4f46 Optional \u53ef\u4ee5\u8ba9\u7f16\u8f91\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\uff0c\u6709\u52a9\u4e8e\u68c0\u67e5\u9519\u8bef\u3002","title":"\u67e5\u8be2\u53c2\u6570\u548c\u5b57\u7b26\u4e32\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#_2","text":"\u63a5\u4e0b\u6765\uff0c\u6dfb\u52a0\u4e00\u4e9b\u7ea6\u675f\u6761\u4ef6\uff1a\u5373\u4f7f q \u662f\u53ef\u9009\u7684\uff0c\u4f46\u53ea\u8981\u63d0\u4f9b\u4e86\u8be5\u53c2\u6570\uff0c \u8be5\u53c2\u6570\u7684\u957f\u5ea6\u5c31\u4e0d\u80fd\u8d85\u8fc7 50 \u4e2a\u5b57\u7b26 \u3002","title":"\u9644\u52a0\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#query","text":"\u9996\u5148\uff0c\u4ece fastapi \u5bfc\u5165 Query \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u5bfc\u5165 Query"},{"location":"tutorial/query-params-str-validations/#query_1","text":"\u63a5\u4e0b\u6765\uff0c\u628a Query \u4f5c\u4e3a\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\uff0c\u5e76\u628a max_length \u53c2\u6570\u8bbe\u7f6e\u4e3a 50\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u6b64\u5904\u5fc5\u987b\u7528 Query() \u66ff\u6362\u51fd\u6570\u91cc\u7684\u9ed8\u8ba4\u503c None \u3002\u5728\u6b64\uff0c\u53ef\u4ee5\u628a\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a Query(default=None) \uff0c\u5b83\u4e0e\u5b9a\u4e49\u7684\u9ed8\u8ba4\u503c\u6548\u679c\u76f8\u540c\u3002 \u6240\u4ee5\uff1a q : Union [ str , None ] = Query ( default = None ) \u2026\u2026\u8ba9\u53c2\u6570\u53d8\u4e3a\u53ef\u9009\uff0c\u53ef\u4f7f\u7528\uff1a q : Union [ str , None ] = None Python 3.10 \u4ee5\u4e0a\u7248\u672c\u65f6\uff1a q : str | None = Query ( default = None ) \u2026\u2026\u8ba9\u53c2\u6570\u53d8\u4e3a\u53ef\u9009\uff0c\u53ef\u4f7f\u7528\uff1a q : str | None = None \u4f46 Query \u80fd\u663e\u5f0f\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u3002 \u8bf4\u660e \u6ce8\u610f\uff0cFastAPI \u5173\u6ce8\u4ee5\u4e0b\u5185\u5bb9\uff1a = None \u6216\uff1a = Query ( default = None ) \u5e76\u4e14\u901a\u8fc7 None \u8bc6\u522b\u51fa\u67e5\u8be2\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002 Union[str, None] \u53ea\u662f\u4e3a\u4e86\u8ba9\u7f16\u8f91\u5668\u63d0\u4f9b\u66f4\u597d\u7684\u652f\u6301\uff0c\u5e76\u4e0d\u4f1a\u544a\u8bc9 FastAPI \u8be5\u53c2\u6570\u662f\u53ef\u9009\u7684\u3002 \u8fd9\u6837\u5c31\u53ef\u4ee5\u4e3a Query \u4f20\u9012\u66f4\u591a\u53c2\u6570\u3002\u672c\u4f8b\u4f7f\u7528 max_length \u53c2\u6570\u7ea6\u675f\u5b57\u7b26\u4e32\uff1a q : Union [ str , None ] = Query ( default = None , max_length = 50 ) \u8fd9\u884c\u4ee3\u7801\u4f1a\u6821\u9a8c\u6570\u636e\uff0c\u5728\u6570\u636e\u65e0\u6548\u65f6\u663e\u793a\u9519\u8bef\u4fe1\u606f\uff0c\u5e76\u5728 OpenAPI \u6982\u56fe\u7684 \u8def\u5f84\u64cd\u4f5c \u4e2d\u5b58\u6863\u8be5\u53c2\u6570\u3002","title":"\u4ee5 Query \u4e3a\u9ed8\u8ba4\u503c"},{"location":"tutorial/query-params-str-validations/#_3","text":"FastAPI \u8fd8\u652f\u6301 min_length \u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , min_length = 3 , max_length = 50 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u6dfb\u52a0\u66f4\u591a\u6821\u9a8c"},{"location":"tutorial/query-params-str-validations/#_4","text":"FastAPI \u8fd8\u80fd\u5b9a\u4e49\u5fc5\u987b\u4e0e \u6b63\u5219\u8868\u8fbe\u5f0f \u5339\u914d\u7684\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u8fd9\u4e2a\u6307\u5b9a\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u901a\u8fc7\u4ee5\u4e0b\u89c4\u5219\u68c0\u67e5\u63a5\u6536\u5230\u7684\u53c2\u6570\u503c\uff1a ^ \uff1a\u4ee5\u8be5\u7b26\u53f7\u4e4b\u540e\u7684\u5b57\u7b26\u5f00\u5934\uff0c\u7b26\u53f7\u4e4b\u524d\u6ca1\u6709\u5b57\u7b26 fixedquery \uff1a\u53c2\u6570\u503c\u5e94\u4e0e fixedquery \u5b8c\u5168\u5339\u914d $ \uff1a\u5230\u6b64\u7b26\u53f7\u7ed3\u675f\uff0c fixedquery \u540e\u6ca1\u6709\u5176\u4ed6\u5b57\u7b26 \u5c31\u7b97\u641e\u4e0d\u5b9a \u6b63\u5219\u8868\u8fbe\u5f0f \u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u5f88\u591a\u4eba\u90fd\u89c9\u5f97\u6b63\u5219\u8868\u8fbe\u5f0f\u5f88\u96be\u3002\u5176\u5b9e\u4e0d\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4e5f\u53ef\u4ee5\u5b8c\u6210\u5f88\u591a\u5de5\u4f5c\u3002 \u4f46\u53ea\u8981\u60a8\u9700\u8981\u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u8bf7\u8bb0\u4f4f\uff0c FastAPI \u5bf9\u6b64\u63d0\u4f9b\u652f\u6301\u3002","title":"\u6dfb\u52a0\u6b63\u5219\u8868\u8fbe\u5f0f"},{"location":"tutorial/query-params-str-validations/#_5","text":"Query \u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u662f\u67e5\u8be2\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u3002\u4e0d\u4ec5\u53ef\u4ee5\u4f7f\u7528 None \uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528\u5176\u4ed6\u503c\u3002 \u5982\uff0c\u58f0\u660e min_length \u662f 3 \uff0c\u9ed8\u8ba4\u503c\u662f fixedquery \u7684\u67e5\u8be2\u53c2\u6570 q \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = \"fixedquery\" , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u7b14\u8bb0 \u58f0\u660e\u4e86\u9ed8\u8ba4\u503c\u8ba9\u8be5\u53c2\u6570\u6210\u4e3a\u53ef\u9009\u53c2\u6570\u3002","title":"\u9ed8\u8ba4\u503c"},{"location":"tutorial/query-params-str-validations/#_6","text":"\u4e0d\u9700\u8981\u58f0\u660e\u6821\u9a8c\u6216\u5143\u6570\u636e\u65f6\uff0c\u53ea\u8981\u4e0d\u58f0\u660e\u9ed8\u8ba4\u503c\uff0c\u5c31\u53ef\u4ee5\u628a\u67e5\u8be2\u53c2\u6570 q \u53d8\u4e3a\u5fc5\u9009\u53c2\u6570\uff0c\u4f8b\u5982\u7528\uff1a q : str \u6216\u4f7f\u7528\u4ee5\u4e0b\u4ee3\u7801\uff1a q : Union [ str , None ] = None \u4f46\u73b0\u5728\u662f\u7528 Query \u58f0\u660e\u8be5\u53c2\u6570\uff0c\u793a\u4f8b\u5982\u4e0b\uff1a q : Union [ str , None ] = Query ( default = None , min_length = 3 ) \u56e0\u6b64\uff0c\u4f7f\u7528 Query \u628a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u4e3a\u5fc5\u9009\u65f6\uff0c\u7b2c\u4e00\u4e2a\u53c2\u6570\u7684\u503c\u5e94\u4e3a ... \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u6807\u8bb0\u4e3a\u5fc5\u9009"},{"location":"tutorial/query-params-str-validations/#_7","text":"\u8fd8\u6709\u4e00\u79cd\u53ef\u4ee5\u663e\u793a\u58f0\u660e\u5fc5\u9009\u503c\u7684\u5907\u9009\u65b9\u5f0f\u3002\u5373\u4f7f\u7528\u5b57\u9762\u503c ... \u8bbe\u7f6e default \u53c2\u6570\uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default =... , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u8bf4\u660e ... \uff1a\u7279\u6b8a\u7684\u5355\u503c\uff0c\u662f Python \u7684\u7279\u6b8a\u7b26\u53f7\uff0c\u79f0\u4e3a \u7701\u7565\u53f7 \u3002 \u5728 Pydantic \u548c FastAPI \u4e2d\uff0c\u7701\u7565\u53f7\u53ef\u7528\u4e8e\u628a\u4e00\u4e2a\u503c\u663e\u5f0f\u58f0\u660e\u4e3a\u5fc5\u9009\u9879\u3002 \u8fd9\u6837\u4e00\u6765\uff0c FastAPI \u5c31\u80fd\u628a\u8be5\u67e5\u8be2\u53c2\u6570\u8bc6\u522b\u4e3a\u5fc5\u9009\u53c2\u6570\u3002","title":"\u4f7f\u7528\u7701\u7565\u53f7\uff08...\uff09\u7684\u5fc5\u9009\u9879"},{"location":"tutorial/query-params-str-validations/#none","text":"\u58f0\u660e\u53ef\u4ee5\u63a5\u53d7 None \u7684\u53c2\u6570\uff0c\u4f46\u5b83\u4ecd\u662f\u5fc5\u9009\u7684\u3002\u8fd9\u5c06\u5f3a\u5236\u5ba2\u6237\u7aef\u53d1\u9001\u503c\uff0c\u5373\u4f7f\u8fd9\u4e2a\u503c\u662f None \u3002 \u4e3a\u4e86\u8fbe\u5230\u8fd9\u4e00\u76ee\u7684\uff0c\u53ef\u4ee5\u58f0\u660e None \u662f\u4e00\u79cd\u6709\u6548\u7c7b\u578b\uff0c\u4f46\u4ecd\u8981\u4f7f\u7528 default=... \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default =... , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default =... , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u63d0\u793a Pydantic \u8d1f\u8d23\u5b9e\u73b0 FastAPI \u4e2d\u7684\u6570\u636e\u9a8c\u8bc1\u4e0e\u5e8f\u5217\u5316\uff0c\u5b83\u652f\u6301\u4e00\u79cd\u7279\u6b8a\u884c\u4e3a\uff0c\u5373\u4f7f\u7528 Optional \u6216 Union[Something, None] \u800c\u65e0\u987b\u9ed8\u8ba4\u503c, \u8be6\u89c1 Pydantic \u6587\u6863\u4e2d\u5173\u4e8e \u5fc5\u9009\u53ef\u9009\u5b57\u6bb5 \u7684\u8bf4\u660e\u3002","title":"\u4f7f\u7528 None \u5b9a\u4e49\u5fc5\u9009\u9879"},{"location":"tutorial/query-params-str-validations/#pydantic-required","text":"\u5982\u679c\u4e0d\u60f3\u4f7f\u7528 ... \uff0c\u53ef\u4ee5\u4ece Pydantic \u5bfc\u5165 Required \uff1a from fastapi import FastAPI , Query from pydantic import Required app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str = Query ( default = Required , min_length = 3 )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u63d0\u793a \u8bb0\u4f4f\uff0c\u5927\u90e8\u5206\u60c5\u51b5\u4e0b\uff0c\u4ec5\u9700\u7701\u7565 default \u53c2\u6570\u5373\u53ef\u8bbe\u7f6e\u5fc5\u9009\uff0c\u56e0\u6b64\u901a\u5e38\u65e0\u987b\u4f7f\u7528 ... \u6216 Required .","title":"\u7528 Pydantic \u7684 Required \u66ff\u6362\u7701\u7565\u53f7\uff08...\uff09"},{"location":"tutorial/query-params-str-validations/#_8","text":"\u7528 Query \u663e\u5f0f\u5b9a\u4e49\u67e5\u8be2\u53c2\u6570\u65f6\uff0c\u8fd8\u53ef\u4ee5\u8ba9\u5b83\u63a5\u6536\u4e00\u7ec4\u503c\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u63a5\u6536\u591a\u4e2a\u503c\u3002 \u4f8b\u5982\uff0c\u5728 URL \u4e2d\u58f0\u660e\u591a\u4e2a\u67e5\u8be2\u53c2\u6570 q \u7684\u4ee3\u7801\u5982\u4e0b\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ List [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ list [ str ], None ] = Query ( default = None )): query_items = { \"q\" : q } return query_items from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list [ str ] | None = Query ( default = None )): query_items = { \"q\" : q } return query_items \u7136\u540e\uff0c\u8f93\u5165\u4ee5\u4e0b\u7f51\u5740\uff1a http://localhost:8000/items/?q=foo&q=bar \u5c31\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684 \u67e5\u8be2\u53c2\u6570 q \u4e2d\u4ee5 Python \u5217\u8868 \u7684\u5f62\u5f0f\u63a5\u6536 \u67e5\u8be2\u53c2\u6570 q \u7684\u591a\u4e2a\u503c\uff08 foo \u548c bar \uff09\u3002 \u56e0\u6b64\uff0c\u8be5 URL \u7684\u54cd\u5e94\u4e3a\uff1a { \"q\" : [ \"foo\" , \"bar\" ] } \u63d0\u793a \u5982\u4e0a\u4f8b\u6240\u793a\uff0c\u628a\u67e5\u8be2\u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a list \uff0c\u8981\u663e\u5f0f\u4f7f\u7528 Query \uff0c\u5426\u5219\u8be5\u53c2\u6570\u4f1a\u88ab\u89e3\u91ca\u4e3a\u8bf7\u6c42\u4f53\u3002 API \u6587\u6863\u4f1a\u8fdb\u884c\u54cd\u5e94\u66f4\u65b0\uff0c\u5141\u8bb8\u4f7f\u7528\u591a\u4e2a\u503c\uff1a","title":"\u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c"},{"location":"tutorial/query-params-str-validations/#_9","text":"FastAPI \u8fd8\u652f\u6301\u5728\u672a\u7ed9\u5b9a\u503c\u65f6\uff0c\u4e3a list \u5b9a\u4e49\u9ed8\u8ba4\u503c\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : List [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list [ str ] = Query ( default = [ \"foo\" , \"bar\" ])): query_items = { \"q\" : q } return query_items \u8bbf\u95ee\u4ee5\u4e0b\u7f51\u5740\uff1a http://localhost:8000/items/ q \u7684\u9ed8\u8ba4\u503c\u662f\uff1a [\"foo\", \"bar\"] \uff0c\u54cd\u5e94\u662f\uff1a { \"q\" : [ \"foo\" , \"bar\" ] }","title":"\u542b\u9ed8\u8ba4\u503c\u7684\u67e5\u8be2\u53c2\u6570\u5217\u8868 / \u591a\u4e2a\u503c"},{"location":"tutorial/query-params-str-validations/#list","text":"\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 list \u4ee3\u66ff List [str] \uff1a from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : list = Query ( default = [])): query_items = { \"q\" : q } return query_items \u7b14\u8bb0 \u6ce8\u610f\uff0c\u6b64\u65f6\uff0cFastAPI \u4e0d\u518d\u6821\u9a8c\u5217\u8868\u4e2d\u7684\u5143\u7d20\u3002 \u4f8b\u5982\uff0c List[int] \u4f1a\u6821\u9a8c\uff08\u5e76\u5b58\u6863\uff09\u5217\u8868\u4e2d\u7684\u5143\u7d20\u662f\u4e0d\u662f\u6574\u6570\u3002\u4f46\u5982\u679c\u53ea\u4f7f\u7528 list \uff0c\u5c31\u6ca1\u6709\u8fd9\u79cd\u6821\u9a8c\u3002","title":"\u4f7f\u7528 list"},{"location":"tutorial/query-params-str-validations/#_10","text":"FastAPI \u8fd8\u652f\u6301\u4e3a\u53c2\u6570\u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u3002 \u8fd9\u4e9b\u4fe1\u606f\u5305\u542b\u5728 OpenAPI \u6982\u56fe\u91cc\uff0c\u7528\u4e8e API \u6587\u6863\u548c\u5916\u90e8\u5de5\u5177\u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u4e0d\u540c\u5de5\u5177\u5bf9 OpenAPI \u7684\u652f\u6301\u53ef\u80fd\u4e0d\u540c\u3002 \u6709\u4e9b\u5de5\u5177\u53ef\u80fd\u4e0d\u4f1a\u663e\u793a\u6240\u6709\u5df2\u58f0\u660e\u7684\u989d\u5916\u4fe1\u606f\uff0c\u5c3d\u7ba1\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u8fd9\u4e9b\u7f3a\u5931\u7684\u529f\u80fd\u5df2\u7ecf\u7eb3\u5165\u4e86\u8fd9\u4e9b\u5de5\u5177\u7684\u5f00\u53d1\u8ba1\u5212\u3002 \u4e3a Query \u6dfb\u52a0 title \u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , title = \"Query string\" , min_length = 3 ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results \u53ca description \u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u58f0\u660e\u66f4\u591a\u5143\u6570\u636e"},{"location":"tutorial/query-params-str-validations/#_11","text":"\u5047\u8bbe\u8981\u4f7f\u7528\u7684\u67e5\u8be2\u53c2\u6570\u662f item-query \u3002 \u5982\u4e0b\u6240\u793a\uff1a http://127.0.0.1:8000/items/?item-query=foobaritems \u4f46 item-query \u4e0d\u662f\u6709\u6548\u7684 Python \u53d8\u91cf\u540d\u3002 \u6700\u63a5\u8fd1\u7684\u6709\u6548\u540d\u79f0\u662f item_query \u3002 \u4f46\u5982\u679c\u5fc5\u987b\u5728 URL \u4e2d\u4f7f\u7528 item-query \u2026\u2026 \u9700\u8981\u4f7f\u7528 alias \u53c2\u6570\u58f0\u660e\u522b\u540d\uff0c\u7528\u4e8e\u5728 URL \u4e2d\u67e5\u627e\u8fd9\u4e2a\u53c2\u6570\u503c\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , alias = \"item-query\" )): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results","title":"\u53c2\u6570\u522b\u540d"},{"location":"tutorial/query-params-str-validations/#_12","text":"\u5982\u679c\u4e0d\u518d\u9700\u8981\u67d0\u4e2a\u53c2\u6570\u3002 \u4f46\u56e0\u4e3a\u67d0\u4e9b\u5ba2\u6237\u7aef\u8fd8\u5728\u4f7f\u7528\u8be5\u53c2\u6570\uff0c\u800c\u4e0d\u5f97\u4e0d\u4fdd\u7559\u4e00\u6bb5\u65f6\u95f4\uff0c\u6b64\u65f6\uff0c\u9700\u8981\u5728\u6587\u6863\u4e2d\u628a\u5b83\u663e\u793a\u4e3a \u5df2\u5f03\u7528 \u3002 \u4e3a\u6b64\uff0c\u8981\u5728 Query \u4e2d\u4f7f\u7528\u53c2\u6570 deprecated=True \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : Union [ str , None ] = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( q : str | None = Query ( default = None , alias = \"item-query\" , title = \"Query string\" , description = \"Query string for the items to search in the database that have a good match\" , min_length = 3 , max_length = 50 , regex = \"^fixedquery$\" , deprecated = True , ) ): results = { \"items\" : [{ \"item_id\" : \"Foo\" }, { \"item_id\" : \"Bar\" }]} if q : results . update ({ \"q\" : q }) return results API \u6587\u6863\u663e\u793a\u5982\u4e0b\uff1a","title":"\u5f03\u7528\u53c2\u6570"},{"location":"tutorial/query-params-str-validations/#openapi","text":"\u4ece\u751f\u6210\u7684 OpenAPI \u6982\u56fe\u4e2d\u6392\u9664\u67e5\u8be2\u53c2\u6570\uff08\u4ece\u81ea\u52a8\u6587\u6863\u7cfb\u7edf\uff09\uff0c\u628a Query \u7684 include_in_schema \u53c2\u6570\u8bbe\u7f6e\u4e3a False \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( hidden_query : Union [ str , None ] = Query ( default = None , include_in_schema = False ) ): if hidden_query : return { \"hidden_query\" : hidden_query } else : return { \"hidden_query\" : \"Not found\" } from fastapi import FastAPI , Query app = FastAPI () @app . get ( \"/items/\" ) async def read_items ( hidden_query : str | None = Query ( default = None , include_in_schema = False ) ): if hidden_query : return { \"hidden_query\" : hidden_query } else : return { \"hidden_query\" : \"Not found\" }","title":"\u4ece OpenAPI \u4e2d\u6392\u9664"},{"location":"tutorial/query-params-str-validations/#_13","text":"FastAPI \u652f\u6301\u4e3a\u67e5\u8be2\u53c2\u6570\u58f0\u660e\u66f4\u591a\u6821\u9a8c\u548c\u5143\u6570\u636e\u3002 \u5e38\u7528\u4e8e\u6821\u9a8c\u548c\u5143\u6570\u636e\u7684\u53c2\u6570\u5305\u62ec\uff1a alias title description deprecated \u4e13\u7528\u4e8e\u6821\u9a8c\u5b57\u7b26\u4e32\u7684\u53c2\u6570\u5305\u62ec\uff1a min_length max_length regex \u672c\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u6821\u9a8c \u5b57\u7b26\u4e32 \u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u5982\u4f55\u6821\u9a8c\u6570\u503c\u7b49\u5176\u4ed6\u7c7b\u578b\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/query-params/","text":"\u67e5\u8be2\u53c2\u6570 \u00b6 \u58f0\u660e\u7684\u53c2\u6570\u4e0d\u662f\u8def\u5f84\u53c2\u6570\u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u4f1a\u628a\u8be5\u53c2\u6570\u81ea\u52a8\u89e3\u91ca\u4e3a \u67e5\u8be2 \u53c2\u6570\u3002 from fastapi import FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] @app . get ( \"/items/\" ) async def read_item ( skip : int = 0 , limit : int = 10 ): return fake_items_db [ skip : skip + limit ] \u67e5\u8be2\u5b57\u7b26\u4e32\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f4d\u4e8e URL \u7684 ? \u4e4b\u540e\uff0c\u4ee5 & \u5206\u9694\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b URL \u4e2d\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 \u2026\u2026\u67e5\u8be2\u53c2\u6570\u4e3a\uff1a skip \uff1a\u503c\u4e3a 0 limit \uff1a\u503c\u4e3a 10 \u8fd9\u4e9b\u503c\u90fd\u662f URL \u7684\u7ec4\u6210\u90e8\u5206\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u7c7b\u578b \u672c\u5e94 \u662f\u5b57\u7b26\u4e32\u3002 \u4f46\u58f0\u660e Python \u7c7b\u578b\uff08\u4e0a\u4f8b\u4e2d\u4e3a int \uff09\u4e4b\u540e\uff0c\u8fd9\u4e9b\u503c\u5c31\u4f1a\u8f6c\u6362\u4e3a\u58f0\u660e\u7684\u7c7b\u578b\uff0c\u5e76\u8fdb\u884c\u7c7b\u578b\u6821\u9a8c\u3002 \u8def\u5f84\u53c2\u6570\u7684\u529f\u80fd\u4e5f\u9002\u7528\u4e8e\u67e5\u8be2\u53c2\u6570\uff1a \uff08\u663e\u800c\u6613\u89c1\u7684\uff09\u7f16\u8f91\u5668\u652f\u6301 \u6570\u636e \u89e3\u6790 \u6570\u636e\u6821\u9a8c API \u6587\u6863 \u9ed8\u8ba4\u503c \u00b6 \u67e5\u8be2\u53c2\u6570\u4e0d\u662f\u8def\u5f84\u7684\u56fa\u5b9a\u5185\u5bb9\uff0c\u5b83\u662f\u53ef\u9009\u7684\uff0c\u8fd8\u652f\u6301\u9ed8\u8ba4\u503c\u3002 \u4e0a\u4f8b\u7528 skip=0 \u548c limit=10 \u8bbe\u5b9a\u9ed8\u8ba4\u503c\u3002 \u8bbf\u95ee URL\uff1a http://127.0.0.1:8000/items/ \u4e0e\u8bbf\u95ee\u4ee5\u4e0b\u5730\u5740\u76f8\u540c\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 \u4f46\u5982\u679c\u8bbf\u95ee\uff1a http://127.0.0.1:8000/items/?skip=20 \u67e5\u8be2\u53c2\u6570\u7684\u503c\u5c31\u662f\uff1a skip=20 \uff1a\u5728 URL \u4e2d\u8bbe\u5b9a\u7684\u503c limit=10 \uff1a\u4f7f\u7528\u9ed8\u8ba4\u503c \u53ef\u9009\u53c2\u6570 \u00b6 \u540c\u7406\uff0c\u628a\u9ed8\u8ba4\u503c\u8bbe\u4e3a None \u5373\u53ef\u58f0\u660e \u53ef\u9009\u7684 \u67e5\u8be2\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : str | None = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } \u672c\u4f8b\u4e2d\uff0c\u67e5\u8be2\u53c2\u6570 q \u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a None \u3002 \u68c0\u67e5 \u6ce8\u610f\uff0c FastAPI \u53ef\u4ee5\u8bc6\u522b\u51fa item_id \u662f\u8def\u5f84\u53c2\u6570\uff0c q \u4e0d\u662f\u8def\u5f84\u53c2\u6570\uff0c\u800c\u662f\u67e5\u8be2\u53c2\u6570\u3002 \u67e5\u8be2\u53c2\u6570\u7c7b\u578b\u8f6c\u6362 \u00b6 \u53c2\u6570\u8fd8\u53ef\u4ee5\u58f0\u660e\u4e3a bool \u7c7b\u578b\uff0cFastAPI \u4f1a\u81ea\u52a8\u8f6c\u6362\u53c2\u6570\u7c7b\u578b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : str | None = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \u672c\u4f8b\u4e2d\uff0c\u8bbf\u95ee\uff1a http://127.0.0.1:8000/items/foo?short=1 \u6216 http://127.0.0.1:8000/items/foo?short=True \u6216 http://127.0.0.1:8000/items/foo?short=true \u6216 http://127.0.0.1:8000/items/foo?short=on \u6216 http://127.0.0.1:8000/items/foo?short=yes \u6216\u5176\u4ed6\u4efb\u610f\u5927\u5c0f\u5199\u5f62\u5f0f\uff08\u5927\u5199\u3001\u9996\u5b57\u6bcd\u5927\u5199\u7b49\uff09\uff0c\u51fd\u6570\u63a5\u6536\u7684 short \u53c2\u6570\u90fd\u662f\u5e03\u5c14\u503c True \u3002\u503c\u4e3a False \u65f6\u4e5f\u4e00\u6837\u3002 \u591a\u4e2a\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570 \u00b6 FastAPI \u53ef\u4ee5\u8bc6\u522b\u540c\u65f6\u58f0\u660e\u7684\u591a\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\u3002 \u800c\u4e14\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u3002 FastAPI \u901a\u8fc7\u53c2\u6570\u540d\u8fdb\u884c\u68c0\u6d4b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : str | None = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \u5fc5\u9009\u67e5\u8be2\u53c2\u6570 \u00b6 \u4e3a\u4e0d\u662f\u8def\u5f84\u53c2\u6570\u7684\u53c2\u6570\u58f0\u660e\u9ed8\u8ba4\u503c\uff08\u81f3\u6b64\uff0c\u4ec5\u6709\u67e5\u8be2\u53c2\u6570\uff09\uff0c\u8be5\u53c2\u6570\u5c31 \u4e0d\u662f\u5fc5\u9009 \u7684\u4e86\u3002 \u5982\u679c\u53ea\u60f3\u628a\u53c2\u6570\u8bbe\u4e3a \u53ef\u9009 \uff0c\u4f46\u53c8\u4e0d\u60f3\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5219\u8981\u628a\u9ed8\u8ba4\u503c\u8bbe\u4e3a None \u3002 \u5982\u679c\u8981\u628a\u67e5\u8be2\u53c2\u6570\u8bbe\u7f6e\u4e3a \u5fc5\u9009 \uff0c\u5c31\u4e0d\u8981\u58f0\u660e\u9ed8\u8ba4\u503c\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str ): item = { \"item_id\" : item_id , \"needy\" : needy } return item \u8fd9\u91cc\u7684\u67e5\u8be2\u53c2\u6570 needy \u662f\u7c7b\u578b\u4e3a str \u7684\u5fc5\u9009\u67e5\u8be2\u53c2\u6570\u3002 \u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u5982\u4e0b URL\uff1a http://127.0.0.1:8000/items/foo-item \u2026\u2026\u56e0\u4e3a\u8def\u5f84\u4e2d\u6ca1\u6709\u5fc5\u9009\u53c2\u6570 needy \uff0c\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"query\" , \"needy\" ], \"msg\" : \"field required\" , \"type\" : \"value_error.missing\" } ] } needy \u662f\u5fc5\u9009\u53c2\u6570\uff0c\u56e0\u6b64\u8981\u5728 URL \u4e2d\u8bbe\u7f6e\u503c\uff1a http://127.0.0.1:8000/items/foo-item?needy=sooooneedy \u2026\u2026\u8fd9\u6837\u5c31\u6b63\u5e38\u4e86\uff1a { \"item_id\" : \"foo-item\" , \"needy\" : \"sooooneedy\" } \u5f53\u7136\uff0c\u628a\u4e00\u4e9b\u53c2\u6570\u5b9a\u4e49\u4e3a\u5fc5\u9009\uff0c\u4e3a\u53e6\u4e00\u4e9b\u53c2\u6570\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u518d\u628a\u5176\u4ed6\u53c2\u6570\u5b9a\u4e49\u4e3a\u53ef\u9009\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u53ef\u4ee5\u7684\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : Union [ int , None ] = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : int | None = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item \u672c\u4f8b\u4e2d\u6709 3 \u4e2a\u67e5\u8be2\u53c2\u6570\uff1a needy \uff0c\u5fc5\u9009\u7684 str \u7c7b\u578b\u53c2\u6570 skip \uff0c\u9ed8\u8ba4\u503c\u4e3a 0 \u7684 int \u7c7b\u578b\u53c2\u6570 limit \uff0c\u53ef\u9009\u7684 int \u7c7b\u578b\u53c2\u6570 \u63d0\u793a \u8fd8\u53ef\u4ee5\u50cf\u5728 \u8def\u5f84\u53c2\u6570 \u4e2d\u90a3\u6837\u4f7f\u7528 Enum \u3002","title":"\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/query-params/#_1","text":"\u58f0\u660e\u7684\u53c2\u6570\u4e0d\u662f\u8def\u5f84\u53c2\u6570\u65f6\uff0c\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u4f1a\u628a\u8be5\u53c2\u6570\u81ea\u52a8\u89e3\u91ca\u4e3a \u67e5\u8be2 \u53c2\u6570\u3002 from fastapi import FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] @app . get ( \"/items/\" ) async def read_item ( skip : int = 0 , limit : int = 10 ): return fake_items_db [ skip : skip + limit ] \u67e5\u8be2\u5b57\u7b26\u4e32\u662f\u952e\u503c\u5bf9\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u952e\u503c\u5bf9\u4f4d\u4e8e URL \u7684 ? \u4e4b\u540e\uff0c\u4ee5 & \u5206\u9694\u3002 \u4f8b\u5982\uff0c\u4ee5\u4e0b URL \u4e2d\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 \u2026\u2026\u67e5\u8be2\u53c2\u6570\u4e3a\uff1a skip \uff1a\u503c\u4e3a 0 limit \uff1a\u503c\u4e3a 10 \u8fd9\u4e9b\u503c\u90fd\u662f URL \u7684\u7ec4\u6210\u90e8\u5206\uff0c\u56e0\u6b64\uff0c\u5b83\u4eec\u7684\u7c7b\u578b \u672c\u5e94 \u662f\u5b57\u7b26\u4e32\u3002 \u4f46\u58f0\u660e Python \u7c7b\u578b\uff08\u4e0a\u4f8b\u4e2d\u4e3a int \uff09\u4e4b\u540e\uff0c\u8fd9\u4e9b\u503c\u5c31\u4f1a\u8f6c\u6362\u4e3a\u58f0\u660e\u7684\u7c7b\u578b\uff0c\u5e76\u8fdb\u884c\u7c7b\u578b\u6821\u9a8c\u3002 \u8def\u5f84\u53c2\u6570\u7684\u529f\u80fd\u4e5f\u9002\u7528\u4e8e\u67e5\u8be2\u53c2\u6570\uff1a \uff08\u663e\u800c\u6613\u89c1\u7684\uff09\u7f16\u8f91\u5668\u652f\u6301 \u6570\u636e \u89e3\u6790 \u6570\u636e\u6821\u9a8c API \u6587\u6863","title":"\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/query-params/#_2","text":"\u67e5\u8be2\u53c2\u6570\u4e0d\u662f\u8def\u5f84\u7684\u56fa\u5b9a\u5185\u5bb9\uff0c\u5b83\u662f\u53ef\u9009\u7684\uff0c\u8fd8\u652f\u6301\u9ed8\u8ba4\u503c\u3002 \u4e0a\u4f8b\u7528 skip=0 \u548c limit=10 \u8bbe\u5b9a\u9ed8\u8ba4\u503c\u3002 \u8bbf\u95ee URL\uff1a http://127.0.0.1:8000/items/ \u4e0e\u8bbf\u95ee\u4ee5\u4e0b\u5730\u5740\u76f8\u540c\uff1a http://127.0.0.1:8000/items/?skip=0&limit=10 \u4f46\u5982\u679c\u8bbf\u95ee\uff1a http://127.0.0.1:8000/items/?skip=20 \u67e5\u8be2\u53c2\u6570\u7684\u503c\u5c31\u662f\uff1a skip=20 \uff1a\u5728 URL \u4e2d\u8bbe\u5b9a\u7684\u503c limit=10 \uff1a\u4f7f\u7528\u9ed8\u8ba4\u503c","title":"\u9ed8\u8ba4\u503c"},{"location":"tutorial/query-params/#_3","text":"\u540c\u7406\uff0c\u628a\u9ed8\u8ba4\u503c\u8bbe\u4e3a None \u5373\u53ef\u58f0\u660e \u53ef\u9009\u7684 \u67e5\u8be2\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : str | None = None ): if q : return { \"item_id\" : item_id , \"q\" : q } return { \"item_id\" : item_id } \u672c\u4f8b\u4e2d\uff0c\u67e5\u8be2\u53c2\u6570 q \u662f\u53ef\u9009\u7684\uff0c\u9ed8\u8ba4\u503c\u4e3a None \u3002 \u68c0\u67e5 \u6ce8\u610f\uff0c FastAPI \u53ef\u4ee5\u8bc6\u522b\u51fa item_id \u662f\u8def\u5f84\u53c2\u6570\uff0c q \u4e0d\u662f\u8def\u5f84\u53c2\u6570\uff0c\u800c\u662f\u67e5\u8be2\u53c2\u6570\u3002","title":"\u53ef\u9009\u53c2\u6570"},{"location":"tutorial/query-params/#_4","text":"\u53c2\u6570\u8fd8\u53ef\u4ee5\u58f0\u660e\u4e3a bool \u7c7b\u578b\uff0cFastAPI \u4f1a\u81ea\u52a8\u8f6c\u6362\u53c2\u6570\u7c7b\u578b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_item ( item_id : str , q : str | None = None , short : bool = False ): item = { \"item_id\" : item_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item \u672c\u4f8b\u4e2d\uff0c\u8bbf\u95ee\uff1a http://127.0.0.1:8000/items/foo?short=1 \u6216 http://127.0.0.1:8000/items/foo?short=True \u6216 http://127.0.0.1:8000/items/foo?short=true \u6216 http://127.0.0.1:8000/items/foo?short=on \u6216 http://127.0.0.1:8000/items/foo?short=yes \u6216\u5176\u4ed6\u4efb\u610f\u5927\u5c0f\u5199\u5f62\u5f0f\uff08\u5927\u5199\u3001\u9996\u5b57\u6bcd\u5927\u5199\u7b49\uff09\uff0c\u51fd\u6570\u63a5\u6536\u7684 short \u53c2\u6570\u90fd\u662f\u5e03\u5c14\u503c True \u3002\u503c\u4e3a False \u65f6\u4e5f\u4e00\u6837\u3002","title":"\u67e5\u8be2\u53c2\u6570\u7c7b\u578b\u8f6c\u6362"},{"location":"tutorial/query-params/#_5","text":"FastAPI \u53ef\u4ee5\u8bc6\u522b\u540c\u65f6\u58f0\u660e\u7684\u591a\u4e2a\u8def\u5f84\u53c2\u6570\u548c\u67e5\u8be2\u53c2\u6570\u3002 \u800c\u4e14\u58f0\u660e\u67e5\u8be2\u53c2\u6570\u7684\u987a\u5e8f\u5e76\u4e0d\u91cd\u8981\u3002 FastAPI \u901a\u8fc7\u53c2\u6570\u540d\u8fdb\u884c\u68c0\u6d4b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : Union [ str , None ] = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item from fastapi import FastAPI app = FastAPI () @app . get ( \"/users/ {user_id} /items/ {item_id} \" ) async def read_user_item ( user_id : int , item_id : str , q : str | None = None , short : bool = False ): item = { \"item_id\" : item_id , \"owner_id\" : user_id } if q : item . update ({ \"q\" : q }) if not short : item . update ( { \"description\" : \"This is an amazing item that has a long description\" } ) return item","title":"\u591a\u4e2a\u8def\u5f84\u548c\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/query-params/#_6","text":"\u4e3a\u4e0d\u662f\u8def\u5f84\u53c2\u6570\u7684\u53c2\u6570\u58f0\u660e\u9ed8\u8ba4\u503c\uff08\u81f3\u6b64\uff0c\u4ec5\u6709\u67e5\u8be2\u53c2\u6570\uff09\uff0c\u8be5\u53c2\u6570\u5c31 \u4e0d\u662f\u5fc5\u9009 \u7684\u4e86\u3002 \u5982\u679c\u53ea\u60f3\u628a\u53c2\u6570\u8bbe\u4e3a \u53ef\u9009 \uff0c\u4f46\u53c8\u4e0d\u60f3\u6307\u5b9a\u53c2\u6570\u7684\u503c\uff0c\u5219\u8981\u628a\u9ed8\u8ba4\u503c\u8bbe\u4e3a None \u3002 \u5982\u679c\u8981\u628a\u67e5\u8be2\u53c2\u6570\u8bbe\u7f6e\u4e3a \u5fc5\u9009 \uff0c\u5c31\u4e0d\u8981\u58f0\u660e\u9ed8\u8ba4\u503c\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str ): item = { \"item_id\" : item_id , \"needy\" : needy } return item \u8fd9\u91cc\u7684\u67e5\u8be2\u53c2\u6570 needy \u662f\u7c7b\u578b\u4e3a str \u7684\u5fc5\u9009\u67e5\u8be2\u53c2\u6570\u3002 \u5728\u6d4f\u89c8\u5668\u4e2d\u6253\u5f00\u5982\u4e0b URL\uff1a http://127.0.0.1:8000/items/foo-item \u2026\u2026\u56e0\u4e3a\u8def\u5f84\u4e2d\u6ca1\u6709\u5fc5\u9009\u53c2\u6570 needy \uff0c\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u4f1a\u663e\u793a\u5982\u4e0b\u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : [ { \"loc\" : [ \"query\" , \"needy\" ], \"msg\" : \"field required\" , \"type\" : \"value_error.missing\" } ] } needy \u662f\u5fc5\u9009\u53c2\u6570\uff0c\u56e0\u6b64\u8981\u5728 URL \u4e2d\u8bbe\u7f6e\u503c\uff1a http://127.0.0.1:8000/items/foo-item?needy=sooooneedy \u2026\u2026\u8fd9\u6837\u5c31\u6b63\u5e38\u4e86\uff1a { \"item_id\" : \"foo-item\" , \"needy\" : \"sooooneedy\" } \u5f53\u7136\uff0c\u628a\u4e00\u4e9b\u53c2\u6570\u5b9a\u4e49\u4e3a\u5fc5\u9009\uff0c\u4e3a\u53e6\u4e00\u4e9b\u53c2\u6570\u8bbe\u7f6e\u9ed8\u8ba4\u503c\uff0c\u518d\u628a\u5176\u4ed6\u53c2\u6570\u5b9a\u4e49\u4e3a\u53ef\u9009\uff0c\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u53ef\u4ee5\u7684\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : Union [ int , None ] = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item from fastapi import FastAPI app = FastAPI () @app . get ( \"/items/ {item_id} \" ) async def read_user_item ( item_id : str , needy : str , skip : int = 0 , limit : int | None = None ): item = { \"item_id\" : item_id , \"needy\" : needy , \"skip\" : skip , \"limit\" : limit } return item \u672c\u4f8b\u4e2d\u6709 3 \u4e2a\u67e5\u8be2\u53c2\u6570\uff1a needy \uff0c\u5fc5\u9009\u7684 str \u7c7b\u578b\u53c2\u6570 skip \uff0c\u9ed8\u8ba4\u503c\u4e3a 0 \u7684 int \u7c7b\u578b\u53c2\u6570 limit \uff0c\u53ef\u9009\u7684 int \u7c7b\u578b\u53c2\u6570 \u63d0\u793a \u8fd8\u53ef\u4ee5\u50cf\u5728 \u8def\u5f84\u53c2\u6570 \u4e2d\u90a3\u6837\u4f7f\u7528 Enum \u3002","title":"\u5fc5\u9009\u67e5\u8be2\u53c2\u6570"},{"location":"tutorial/request-files/","text":"\u8bf7\u6c42\u6587\u4ef6 \u00b6 File \u7528\u4e8e\u5b9a\u4e49\u5ba2\u6237\u7aef\u7684\u4e0a\u4f20\u6587\u4ef6\u3002 \u8bf4\u660e \u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\uff0c\u9996\u5148\u8981\u5b89\u88c5 python-multipart \u3002 \u5b89\u88c5\u547d\u4ee4\uff1a pip install python-multipart \u3002 \u8fd9\u662f\u56e0\u4e3a\u4e0a\u4f20\u6587\u4ef6\u53d1\u9001\u7684\u662f \u8868\u5355\u6570\u636e \u3002 \u5bfc\u5165 File \u00b6 \u4ece fastapi \u5bfc\u5165 File \u548c UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \u5b9a\u4e49 File \u53c2\u6570 \u00b6 \u521b\u5efa\u6587\u4ef6\uff08 File \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Form \u4e00\u6837\uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \u8bf4\u660e File \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Form \u7684\u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 File \uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u5b9a\u7c7b\u7684\u51fd\u6570\u3002 \u63d0\u793a \u58f0\u660e\u6587\u4ef6\u4f53\u5fc5\u987b\u4f7f\u7528 File \uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u6587\u4ef6\u4ee5 \u8868\u5355\u6570\u636e \u5f62\u5f0f\u4e0a\u4f20\u3002 \u5982\u679c\u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a bytes \uff0c FastAPI \u5c06\u4ee5 bytes \u5f62\u5f0f\u8bfb\u53d6\u548c\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002 \u8fd9\u79cd\u65b9\u5f0f\u628a\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5b58\u50a8\u5728\u5185\u5b58\u91cc\uff0c\u9002\u7528\u4e8e\u5c0f\u578b\u6587\u4ef6\u3002 \u4e0d\u8fc7\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c UploadFile \u66f4\u597d\u7528\u3002 \u542b UploadFile \u7684 File \u53c2\u6570 \u00b6 \u5b9a\u4e49 File \u53c2\u6570\u65f6\u4f7f\u7528 UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } UploadFile \u4e0e bytes \u76f8\u6bd4\u6709\u66f4\u591a\u4f18\u52bf\uff1a \u4e0d\u5fc5\u975e\u8981\u628a File() \u4f5c\u4e3a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u3002 \u4f7f\u7528 spooled \u6587\u4ef6\uff1a \u5b58\u50a8\u5728\u5185\u5b58\u7684\u6587\u4ef6\u8d85\u51fa\u6700\u5927\u4e0a\u9650\u65f6\uff0cFastAPI \u4f1a\u628a\u6587\u4ef6\u5b58\u5165\u78c1\u76d8 \u8fd9\u79cd\u65b9\u5f0f\u66f4\u9002\u4e8e\u5904\u7406\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7b49\u5927\u578b\u6587\u4ef6\uff0c\u597d\u5904\u662f\u4e0d\u4f1a\u5360\u7528\u6240\u6709\u5185\u5b58\u3002 \u53ef\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5143\u6570\u636e\u3002 \u81ea\u5e26 file-like async \u63a5\u53e3\u3002 \u66b4\u9732\u7684 Python SpooledTemporaryFile \u5bf9\u8c61\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f file-like \u5bf9\u8c61\u7684\u5e93\u3002 UploadFile \u00b6 UploadFile \u7684\u5c5e\u6027\u5982\u4e0b\uff1a filename \uff1a\u4e0a\u4f20\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff0c myimage.jpg content_type \uff1a\u5185\u5bb9\u7c7b\u578b\uff08MIME \u7c7b\u578b / \u5a92\u4f53\u7c7b\u578b\uff09\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff0c image/jpeg file \uff1a SpooledTemporaryFile \uff08 file-like \u5bf9\u8c61\uff09\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5176\u5b9e\u5c31\u662f Python\u6587\u4ef6\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f file-like \u5bf9\u8c61\u7684\u51fd\u6570\u6216\u652f\u6301\u5e93 UploadFile \u652f\u6301\u4ee5\u4e0b async \u65b9\u6cd5\uff0c\uff08\u4f7f\u7528\u5185\u90e8 SpooledTemporaryFile \uff09\u53ef\u8c03\u7528\u76f8\u5e94\u7684\u6587\u4ef6\u65b9\u6cd5\u3002 write(data) \uff1a\u628a data \uff08 str \u6216 bytes \uff09\u5199\u5165\u6587\u4ef6 read(size) \uff1a\u6309\u6307\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u6216\u5b57\u7b26\uff08 size ( int )\uff09\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 seek(offset) \uff1a\u79fb\u52a8\u81f3\u6587\u4ef6 offset \uff08 int \uff09\u5b57\u8282\u5904\u7684\u4f4d\u7f6e \u4f8b\u5982\uff0c await myfile.seek(0) \u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934 \u6267\u884c await myfile.read() \u540e\uff0c\u9700\u518d\u6b21\u8bfb\u53d6\u5df2\u8bfb\u53d6\u5185\u5bb9\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7279\u522b\u597d\u7528 close() \uff1a\u5173\u95ed\u6587\u4ef6 \u4e0a\u8ff0\u65b9\u6cd5\u90fd\u662f async \u65b9\u6cd5\uff0c\u8981\u642d\u914d await \u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728 async \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u8981\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff1a contents = await myfile . read () \u5728\u666e\u901a def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee UploadFile.file \uff0c\u4f8b\u5982\uff1a contents = myfile . file . read () async \u6280\u672f\u7ec6\u8282 \u4f7f\u7528 async \u65b9\u6cd5\u65f6\uff0c FastAPI \u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u6587\u4ef6\u65b9\u6cd5\uff0c\u5e76\u4f7f\u7528 awiat \u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u3002 Starlette \u6280\u672f\u7ec6\u8282 FastAPI \u7684 UploadFile \u76f4\u63a5\u7ee7\u627f\u81ea Starlette \u7684 UploadFile \uff0c\u4f46\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5fc5\u8981\u529f\u80fd\uff0c\u4f7f\u4e4b\u4e0e Pydantic \u53ca FastAPI \u7684\u5176\u4ed6\u90e8\u4ef6\u517c\u5bb9\u3002 \u4ec0\u4e48\u662f \u8868\u5355\u6570\u636e \u00b6 \u4e0e JSON \u4e0d\u4e00\u6837\uff0c\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u65f6\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u901a\u5e38\u4f1a\u4f7f\u7528 \u7279\u6b8a \u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u975e\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u4e0d\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u8868\u5355\u6570\u636e\u4e00\u822c\u7528 application/x-www-form-urlencoded \u5a92\u4f53\u7c7b\u578b \u7f16\u7801\u3002 \u4f46\u8868\u5355\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u7f16\u7801\u4e3a multipart/form-data \u3002 File \u8ba9 FastAPI \u77e5\u9053\u8981\u4ece\u8bf7\u6c42\u4f53\u7684\u6b63\u786e\u4f4d\u7f6e\u83b7\u53d6\u6587\u4ef6\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u548c Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u53ef\u9009\u6587\u4ef6\u4e0a\u4f20 \u00b6 \u4f7f\u7528\u6807\u51c6\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u5e76\u628a\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \uff0c\u53ef\u4ee5\u628a\u6587\u4ef6\u8bbe\u7f6e\u4e3a\u53ef\u9009\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : Union [ bytes , None ] = File ( default = None )): if not file : return { \"message\" : \"No file sent\" } else : return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : Union [ UploadFile , None ] = None ): if not file : return { \"message\" : \"No upload file sent\" } else : return { \"filename\" : file . filename } from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes | None = File ( default = None )): if not file : return { \"message\" : \"No file sent\" } else : return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile | None = None ): if not file : return { \"message\" : \"No upload file sent\" } else : return { \"filename\" : file . filename } UploadFile \u65f6\u9644\u52a0\u5143\u6570\u636e \u00b6 \u5728 File() \u4e2d\u4f7f\u7528 UploadFile \uff0c \u4f8b\u5982\uff0c\u8bbe\u7f6e\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ( description = \"A file read as bytes\" )): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile = File ( description = \"A file read as UploadFile\" ), ): return { \"filename\" : file . filename } \u591a\u6587\u4ef6\u4e0a\u4f20 \u00b6 FastAPI \u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u4f7f\u7528\u540c\u4e00\u4e2a \u8868\u5355\u5b57\u6bb5 \u53ef\u4ee5\u53d1\u9001\u542b\u591a\u4e2a\u6587\u4ef6\u7684 \u8868\u5355\u6570\u636e \u3002 \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u8981\u58f0\u660e\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\uff08 List \uff09\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : list [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : list [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \u63a5\u6536\u7684\u4e5f\u662f\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 fastapi.responses \u5176\u5b9e\u4e0e starlette.responses \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570 FastAPI \u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u4ece Starlette \u8c03\u7528\u3002 \u591a\u6587\u4ef6\u4e0a\u4f20\u65f6\u7684\u9644\u52a0\u5143\u6570\u636e \u00b6 \u540c\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528 File() \u8bbe\u7f6e\u591a\u4e2a\u9644\u52a0\u53c2\u6570\uff0c\u751a\u81f3\u662f UploadFile : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ( description = \"Multiple files as bytes\" ), ): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ] = File ( description = \"Multiple files as UploadFile\" ), ): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : list [ bytes ] = File ( description = \"Multiple files as bytes\" ), ): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : list [ UploadFile ] = File ( description = \"Multiple files as UploadFile\" ), ): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \u5c0f\u7ed3 \u00b6 \u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 File \u628a\u4e0a\u4f20\u6587\u4ef6\u58f0\u660e\u4e3a\uff08\u8868\u5355\u6570\u636e\u7684\uff09\u8f93\u5165\u53c2\u6570\u3002","title":"\u8bf7\u6c42\u6587\u4ef6"},{"location":"tutorial/request-files/#_1","text":"File \u7528\u4e8e\u5b9a\u4e49\u5ba2\u6237\u7aef\u7684\u4e0a\u4f20\u6587\u4ef6\u3002 \u8bf4\u660e \u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\uff0c\u9996\u5148\u8981\u5b89\u88c5 python-multipart \u3002 \u5b89\u88c5\u547d\u4ee4\uff1a pip install python-multipart \u3002 \u8fd9\u662f\u56e0\u4e3a\u4e0a\u4f20\u6587\u4ef6\u53d1\u9001\u7684\u662f \u8868\u5355\u6570\u636e \u3002","title":"\u8bf7\u6c42\u6587\u4ef6"},{"location":"tutorial/request-files/#file","text":"\u4ece fastapi \u5bfc\u5165 File \u548c UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename }","title":"\u5bfc\u5165 File"},{"location":"tutorial/request-files/#file_1","text":"\u521b\u5efa\u6587\u4ef6\uff08 File \uff09\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Form \u4e00\u6837\uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } \u8bf4\u660e File \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Form \u7684\u7c7b\u3002 \u6ce8\u610f\uff0c\u4ece fastapi \u5bfc\u5165\u7684 Query \u3001 Path \u3001 File \uff0c\u5b9e\u9645\u4e0a\u662f\u8fd4\u56de\u7279\u5b9a\u7c7b\u7684\u51fd\u6570\u3002 \u63d0\u793a \u58f0\u660e\u6587\u4ef6\u4f53\u5fc5\u987b\u4f7f\u7528 File \uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8be5\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u6587\u4ef6\u4ee5 \u8868\u5355\u6570\u636e \u5f62\u5f0f\u4e0a\u4f20\u3002 \u5982\u679c\u628a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u53c2\u6570\u7684\u7c7b\u578b\u58f0\u660e\u4e3a bytes \uff0c FastAPI \u5c06\u4ee5 bytes \u5f62\u5f0f\u8bfb\u53d6\u548c\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002 \u8fd9\u79cd\u65b9\u5f0f\u628a\u6587\u4ef6\u7684\u6240\u6709\u5185\u5bb9\u90fd\u5b58\u50a8\u5728\u5185\u5b58\u91cc\uff0c\u9002\u7528\u4e8e\u5c0f\u578b\u6587\u4ef6\u3002 \u4e0d\u8fc7\uff0c\u5f88\u591a\u60c5\u51b5\u4e0b\uff0c UploadFile \u66f4\u597d\u7528\u3002","title":"\u5b9a\u4e49 File \u53c2\u6570"},{"location":"tutorial/request-files/#uploadfile-file","text":"\u5b9a\u4e49 File \u53c2\u6570\u65f6\u4f7f\u7528 UploadFile \uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ()): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile ): return { \"filename\" : file . filename } UploadFile \u4e0e bytes \u76f8\u6bd4\u6709\u66f4\u591a\u4f18\u52bf\uff1a \u4e0d\u5fc5\u975e\u8981\u628a File() \u4f5c\u4e3a\u53c2\u6570\u7684\u9ed8\u8ba4\u503c\u3002 \u4f7f\u7528 spooled \u6587\u4ef6\uff1a \u5b58\u50a8\u5728\u5185\u5b58\u7684\u6587\u4ef6\u8d85\u51fa\u6700\u5927\u4e0a\u9650\u65f6\uff0cFastAPI \u4f1a\u628a\u6587\u4ef6\u5b58\u5165\u78c1\u76d8 \u8fd9\u79cd\u65b9\u5f0f\u66f4\u9002\u4e8e\u5904\u7406\u56fe\u50cf\u3001\u89c6\u9891\u3001\u4e8c\u8fdb\u5236\u6587\u4ef6\u7b49\u5927\u578b\u6587\u4ef6\uff0c\u597d\u5904\u662f\u4e0d\u4f1a\u5360\u7528\u6240\u6709\u5185\u5b58\u3002 \u53ef\u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u7684\u5143\u6570\u636e\u3002 \u81ea\u5e26 file-like async \u63a5\u53e3\u3002 \u66b4\u9732\u7684 Python SpooledTemporaryFile \u5bf9\u8c61\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f file-like \u5bf9\u8c61\u7684\u5e93\u3002","title":"\u542b UploadFile \u7684 File \u53c2\u6570"},{"location":"tutorial/request-files/#uploadfile","text":"UploadFile \u7684\u5c5e\u6027\u5982\u4e0b\uff1a filename \uff1a\u4e0a\u4f20\u6587\u4ef6\u540d\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff0c myimage.jpg content_type \uff1a\u5185\u5bb9\u7c7b\u578b\uff08MIME \u7c7b\u578b / \u5a92\u4f53\u7c7b\u578b\uff09\u5b57\u7b26\u4e32\uff0c\u4f8b\u5982\uff0c image/jpeg file \uff1a SpooledTemporaryFile \uff08 file-like \u5bf9\u8c61\uff09\u3002\u8fd9\u4e2a\u5bf9\u8c61\u5176\u5b9e\u5c31\u662f Python\u6587\u4ef6\uff0c\u53ef\u76f4\u63a5\u4f20\u9012\u7ed9\u5176\u4ed6\u9884\u671f file-like \u5bf9\u8c61\u7684\u51fd\u6570\u6216\u652f\u6301\u5e93 UploadFile \u652f\u6301\u4ee5\u4e0b async \u65b9\u6cd5\uff0c\uff08\u4f7f\u7528\u5185\u90e8 SpooledTemporaryFile \uff09\u53ef\u8c03\u7528\u76f8\u5e94\u7684\u6587\u4ef6\u65b9\u6cd5\u3002 write(data) \uff1a\u628a data \uff08 str \u6216 bytes \uff09\u5199\u5165\u6587\u4ef6 read(size) \uff1a\u6309\u6307\u5b9a\u6570\u91cf\u7684\u5b57\u8282\u6216\u5b57\u7b26\uff08 size ( int )\uff09\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9 seek(offset) \uff1a\u79fb\u52a8\u81f3\u6587\u4ef6 offset \uff08 int \uff09\u5b57\u8282\u5904\u7684\u4f4d\u7f6e \u4f8b\u5982\uff0c await myfile.seek(0) \u79fb\u52a8\u5230\u6587\u4ef6\u5f00\u5934 \u6267\u884c await myfile.read() \u540e\uff0c\u9700\u518d\u6b21\u8bfb\u53d6\u5df2\u8bfb\u53d6\u5185\u5bb9\u65f6\uff0c\u8fd9\u79cd\u65b9\u6cd5\u7279\u522b\u597d\u7528 close() \uff1a\u5173\u95ed\u6587\u4ef6 \u4e0a\u8ff0\u65b9\u6cd5\u90fd\u662f async \u65b9\u6cd5\uff0c\u8981\u642d\u914d await \u4f7f\u7528\u3002 \u4f8b\u5982\uff0c\u5728 async \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u8981\u7528\u4ee5\u4e0b\u65b9\u5f0f\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff1a contents = await myfile . read () \u5728\u666e\u901a def \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\uff0c\u5219\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee UploadFile.file \uff0c\u4f8b\u5982\uff1a contents = myfile . file . read () async \u6280\u672f\u7ec6\u8282 \u4f7f\u7528 async \u65b9\u6cd5\u65f6\uff0c FastAPI \u5728\u7ebf\u7a0b\u6c60\u4e2d\u6267\u884c\u6587\u4ef6\u65b9\u6cd5\uff0c\u5e76\u4f7f\u7528 awiat \u7b49\u5f85\u64cd\u4f5c\u5b8c\u6210\u3002 Starlette \u6280\u672f\u7ec6\u8282 FastAPI \u7684 UploadFile \u76f4\u63a5\u7ee7\u627f\u81ea Starlette \u7684 UploadFile \uff0c\u4f46\u6dfb\u52a0\u4e86\u4e00\u4e9b\u5fc5\u8981\u529f\u80fd\uff0c\u4f7f\u4e4b\u4e0e Pydantic \u53ca FastAPI \u7684\u5176\u4ed6\u90e8\u4ef6\u517c\u5bb9\u3002","title":"UploadFile"},{"location":"tutorial/request-files/#_2","text":"\u4e0e JSON \u4e0d\u4e00\u6837\uff0c\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u65f6\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u901a\u5e38\u4f1a\u4f7f\u7528 \u7279\u6b8a \u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u975e\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u4e0d\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u8868\u5355\u6570\u636e\u4e00\u822c\u7528 application/x-www-form-urlencoded \u5a92\u4f53\u7c7b\u578b \u7f16\u7801\u3002 \u4f46\u8868\u5355\u5305\u542b\u6587\u4ef6\u65f6\uff0c\u7f16\u7801\u4e3a multipart/form-data \u3002 File \u8ba9 FastAPI \u77e5\u9053\u8981\u4ece\u8bf7\u6c42\u4f53\u7684\u6b63\u786e\u4f4d\u7f6e\u83b7\u53d6\u6587\u4ef6\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u548c Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u4ec0\u4e48\u662f\u8868\u5355\u6570\u636e"},{"location":"tutorial/request-files/#_3","text":"\u4f7f\u7528\u6807\u51c6\u7684\u7c7b\u578b\u6ce8\u91ca\uff0c\u5e76\u628a\u9ed8\u8ba4\u503c\u8bbe\u7f6e\u4e3a None \uff0c\u53ef\u4ee5\u628a\u6587\u4ef6\u8bbe\u7f6e\u4e3a\u53ef\u9009\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : Union [ bytes , None ] = File ( default = None )): if not file : return { \"message\" : \"No file sent\" } else : return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : Union [ UploadFile , None ] = None ): if not file : return { \"message\" : \"No upload file sent\" } else : return { \"filename\" : file . filename } from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes | None = File ( default = None )): if not file : return { \"message\" : \"No file sent\" } else : return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile | None = None ): if not file : return { \"message\" : \"No upload file sent\" } else : return { \"filename\" : file . filename }","title":"\u53ef\u9009\u6587\u4ef6\u4e0a\u4f20"},{"location":"tutorial/request-files/#uploadfile_1","text":"\u5728 File() \u4e2d\u4f7f\u7528 UploadFile \uff0c \u4f8b\u5982\uff0c\u8bbe\u7f6e\u9644\u52a0\u7684\u5143\u6570\u636e\uff1a from fastapi import FastAPI , File , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File ( description = \"A file read as bytes\" )): return { \"file_size\" : len ( file )} @app . post ( \"/uploadfile/\" ) async def create_upload_file ( file : UploadFile = File ( description = \"A file read as UploadFile\" ), ): return { \"filename\" : file . filename }","title":"UploadFile \u65f6\u9644\u52a0\u5143\u6570\u636e"},{"location":"tutorial/request-files/#_4","text":"FastAPI \u652f\u6301\u540c\u65f6\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u3002 \u4f7f\u7528\u540c\u4e00\u4e2a \u8868\u5355\u5b57\u6bb5 \u53ef\u4ee5\u53d1\u9001\u542b\u591a\u4e2a\u6587\u4ef6\u7684 \u8868\u5355\u6570\u636e \u3002 \u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6\u65f6\uff0c\u8981\u58f0\u660e\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\uff08 List \uff09\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : list [ bytes ] = File ()): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : list [ UploadFile ]): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) \u63a5\u6536\u7684\u4e5f\u662f\u542b bytes \u6216 UploadFile \u7684\u5217\u8868\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.responses import HTMLResponse \u3002 fastapi.responses \u5176\u5b9e\u4e0e starlette.responses \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\u3002\u5b9e\u9645\u4e0a\uff0c\u5927\u591a\u6570 FastAPI \u7684\u54cd\u5e94\u90fd\u76f4\u63a5\u4ece Starlette \u8c03\u7528\u3002","title":"\u591a\u6587\u4ef6\u4e0a\u4f20"},{"location":"tutorial/request-files/#_5","text":"\u540c\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528 File() \u8bbe\u7f6e\u591a\u4e2a\u9644\u52a0\u53c2\u6570\uff0c\u751a\u81f3\u662f UploadFile : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : List [ bytes ] = File ( description = \"Multiple files as bytes\" ), ): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : List [ UploadFile ] = File ( description = \"Multiple files as UploadFile\" ), ): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content ) from fastapi import FastAPI , File , UploadFile from fastapi.responses import HTMLResponse app = FastAPI () @app . post ( \"/files/\" ) async def create_files ( files : list [ bytes ] = File ( description = \"Multiple files as bytes\" ), ): return { \"file_sizes\" : [ len ( file ) for file in files ]} @app . post ( \"/uploadfiles/\" ) async def create_upload_files ( files : list [ UploadFile ] = File ( description = \"Multiple files as UploadFile\" ), ): return { \"filenames\" : [ file . filename for file in files ]} @app . get ( \"/\" ) async def main (): content = \"\"\" <body> <form action=\"/files/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> <form action=\"/uploadfiles/\" enctype=\"multipart/form-data\" method=\"post\"> <input name=\"files\" type=\"file\" multiple> <input type=\"submit\"> </form> </body> \"\"\" return HTMLResponse ( content = content )","title":"\u591a\u6587\u4ef6\u4e0a\u4f20\u65f6\u7684\u9644\u52a0\u5143\u6570\u636e"},{"location":"tutorial/request-files/#_6","text":"\u672c\u8282\u4ecb\u7ecd\u4e86\u5982\u4f55\u7528 File \u628a\u4e0a\u4f20\u6587\u4ef6\u58f0\u660e\u4e3a\uff08\u8868\u5355\u6570\u636e\u7684\uff09\u8f93\u5165\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/request-forms-and-files/","text":"\u8bf7\u6c42\u8868\u5355\u4e0e\u6587\u4ef6 \u00b6 FastAPI \u652f\u6301\u540c\u65f6\u4f7f\u7528 File \u548c Form \u5b9a\u4e49\u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u3002 \u8bf4\u660e \u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\u6216\u8868\u5355\u6570\u636e\uff0c\u8bf7\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002 \u5bfc\u5165 File \u4e0e Form \u00b6 from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \u5b9a\u4e49 File \u4e0e Form \u53c2\u6570 \u00b6 \u521b\u5efa\u6587\u4ef6\u548c\u8868\u5355\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u4ee5\u8868\u5355\u6570\u636e\u7684\u5f62\u5f0f\u4e0a\u4f20\uff0c\u8fd9\u6837\u5c31\u80fd\u63a5\u6536\u6587\u4ef6\u4e0e\u8868\u5355\u5b57\u6bb5\u4e86\u3002 \u58f0\u660e\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 bytes \u6216 UploadFile \u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u4e0e Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u4e3a multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u5c0f\u7ed3 \u00b6 \u5728\u540c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u63a5\u6536\u6570\u636e\u548c\u6587\u4ef6\u65f6\uff0c\u8981\u540c\u65f6\u4f7f\u7528 File \u548c Form \u3002","title":"\u8bf7\u6c42\u8868\u5355\u4e0e\u6587\u4ef6"},{"location":"tutorial/request-forms-and-files/#_1","text":"FastAPI \u652f\u6301\u540c\u65f6\u4f7f\u7528 File \u548c Form \u5b9a\u4e49\u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u3002 \u8bf4\u660e \u63a5\u6536\u4e0a\u4f20\u6587\u4ef6\u6216\u8868\u5355\u6570\u636e\uff0c\u8bf7\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002","title":"\u8bf7\u6c42\u8868\u5355\u4e0e\u6587\u4ef6"},{"location":"tutorial/request-forms-and-files/#file-form","text":"from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , }","title":"\u5bfc\u5165 File \u4e0e Form"},{"location":"tutorial/request-forms-and-files/#file-form_1","text":"\u521b\u5efa\u6587\u4ef6\u548c\u8868\u5355\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , File , Form , UploadFile app = FastAPI () @app . post ( \"/files/\" ) async def create_file ( file : bytes = File (), fileb : UploadFile = File (), token : str = Form () ): return { \"file_size\" : len ( file ), \"token\" : token , \"fileb_content_type\" : fileb . content_type , } \u6587\u4ef6\u548c\u8868\u5355\u5b57\u6bb5\u4ee5\u8868\u5355\u6570\u636e\u7684\u5f62\u5f0f\u4e0a\u4f20\uff0c\u8fd9\u6837\u5c31\u80fd\u63a5\u6536\u6587\u4ef6\u4e0e\u8868\u5355\u5b57\u6bb5\u4e86\u3002 \u58f0\u660e\u6587\u4ef6\u53ef\u4ee5\u4f7f\u7528 bytes \u6216 UploadFile \u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a File \u4e0e Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u8981\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u4e3a multipart/form-data \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u5b9a\u4e49 File \u4e0e Form \u53c2\u6570"},{"location":"tutorial/request-forms-and-files/#_2","text":"\u5728\u540c\u4e00\u4e2a\u8bf7\u6c42\u4e2d\u63a5\u6536\u6570\u636e\u548c\u6587\u4ef6\u65f6\uff0c\u8981\u540c\u65f6\u4f7f\u7528 File \u548c Form \u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/request-forms/","text":"\u8868\u5355\u6570\u636e \u00b6 \u9700\u8981\u63a5\u6536\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f\u8868\u5355\uff08 Form \uff09\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 Form \u3002 \u8bf4\u660e \u4f7f\u7528\u8868\u5355\uff0c\u8bf7\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002 \u5bfc\u5165 Form \u00b6 \u4ece fastapi \u5bfc\u5165 Form \uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \u5b9a\u4e49 Form \u53c2\u6570 \u00b6 \u521b\u5efa\u8868\u5355\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \u4f8b\u5982\uff0cOAuth2 \u89c4\u8303\u7684 \u5bc6\u7801\u6d41 \u89c4\u5b9a\u8981\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001 username \u548c password \u3002 \u8be5\u89c4\u8303 \u660e\u786e\u8981\u6c42\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u5e76\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001\uff0c\u4e0d\u80fd\u7528 JSON\u3002 \u4f7f\u7528 Form \u53ef\u4ee5\u58f0\u660e\u4e0e Body \uff08\u53ca Query \u3001 Path \u3001 Cookie \uff09\u76f8\u540c\u7684\u5143\u6570\u636e\u548c\u9a8c\u8bc1\u3002 \u8bf4\u660e Form \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Body \u7684\u7c7b\u3002 \u63d0\u793a \u8981\u663e\u5f0f\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u4f53\uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8868\u5355\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002 \u5173\u4e8e \u8868\u5355\u5b57\u6bb5 \u00b6 \u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528 \u7279\u5b9a \u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u8868\u5355\u6570\u636e\u7684 \u5a92\u4f53\u7c7b\u578b \u7f16\u7801\u4e00\u822c\u4e3a application/x-www-form-urlencoded \u3002 \u4f46\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u7f16\u7801\u4e3a multipart/form-data \u3002\u6587\u4ef6\u5904\u7406\u8be6\u89c1\u4e0b\u4e00\u7ae0\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f application/x-www-form-urlencoded \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002 \u5c0f\u7ed3 \u00b6 \u672c\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u6570\u636e\u8f93\u5165\u53c2\u6570\u3002","title":"\u8868\u5355\u6570\u636e"},{"location":"tutorial/request-forms/#_1","text":"\u9700\u8981\u63a5\u6536\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f\u8868\u5355\uff08 Form \uff09\u5b57\u6bb5\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 Form \u3002 \u8bf4\u660e \u4f7f\u7528\u8868\u5355\uff0c\u8bf7\u5148\u5b89\u88c5 python-multipart \u3002 \u4f8b\u5982\uff0c pip install python-multipart \u3002","title":"\u8868\u5355\u6570\u636e"},{"location":"tutorial/request-forms/#form","text":"\u4ece fastapi \u5bfc\u5165 Form \uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username }","title":"\u5bfc\u5165 Form"},{"location":"tutorial/request-forms/#form_1","text":"\u521b\u5efa\u8868\u5355\u53c2\u6570\u7684\u65b9\u5f0f\u4e0e Body \u548c Query \u4e00\u6837\uff1a from fastapi import FastAPI , Form app = FastAPI () @app . post ( \"/login/\" ) async def login ( username : str = Form (), password : str = Form ()): return { \"username\" : username } \u4f8b\u5982\uff0cOAuth2 \u89c4\u8303\u7684 \u5bc6\u7801\u6d41 \u89c4\u5b9a\u8981\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001 username \u548c password \u3002 \u8be5\u89c4\u8303 \u660e\u786e\u8981\u6c42\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u5e76\u901a\u8fc7\u8868\u5355\u5b57\u6bb5\u53d1\u9001\uff0c\u4e0d\u80fd\u7528 JSON\u3002 \u4f7f\u7528 Form \u53ef\u4ee5\u58f0\u660e\u4e0e Body \uff08\u53ca Query \u3001 Path \u3001 Cookie \uff09\u76f8\u540c\u7684\u5143\u6570\u636e\u548c\u9a8c\u8bc1\u3002 \u8bf4\u660e Form \u662f\u76f4\u63a5\u7ee7\u627f\u81ea Body \u7684\u7c7b\u3002 \u63d0\u793a \u8981\u663e\u5f0f\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u4f53\uff0c\u5426\u5219\uff0cFastAPI \u4f1a\u628a\u8868\u5355\u53c2\u6570\u5f53\u4f5c\u67e5\u8be2\u53c2\u6570\u6216\u8bf7\u6c42\u4f53\uff08JSON\uff09\u53c2\u6570\u3002","title":"\u5b9a\u4e49 Form \u53c2\u6570"},{"location":"tutorial/request-forms/#_2","text":"\u4e0e JSON \u4e0d\u540c\uff0cHTML \u8868\u5355\uff08 <form></form> \uff09\u5411\u670d\u52a1\u5668\u53d1\u9001\u6570\u636e\u901a\u5e38\u4f7f\u7528 \u7279\u5b9a \u7f16\u7801\u3002 FastAPI \u8981\u786e\u4fdd\u4ece\u6b63\u786e\u7684\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\uff0c\u800c\u4e0d\u662f\u8bfb\u53d6 JSON\u3002 \u6280\u672f\u7ec6\u8282 \u8868\u5355\u6570\u636e\u7684 \u5a92\u4f53\u7c7b\u578b \u7f16\u7801\u4e00\u822c\u4e3a application/x-www-form-urlencoded \u3002 \u4f46\u5305\u542b\u6587\u4ef6\u7684\u8868\u5355\u7f16\u7801\u4e3a multipart/form-data \u3002\u6587\u4ef6\u5904\u7406\u8be6\u89c1\u4e0b\u4e00\u7ae0\u3002 \u7f16\u7801\u548c\u8868\u5355\u5b57\u6bb5\u8be6\u89c1 MDN Web \u6587\u6863\u7684 POST \u5c0f\u8282\u3002 \u8b66\u544a \u53ef\u5728\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u591a\u4e2a Form \u53c2\u6570\uff0c\u4f46\u4e0d\u80fd\u540c\u65f6\u58f0\u660e\u63a5\u6536 JSON \u7684 Body \u5b57\u6bb5\u3002\u56e0\u4e3a\u6b64\u65f6\u8bf7\u6c42\u4f53\u7684\u7f16\u7801\u662f application/x-www-form-urlencoded \uff0c\u4e0d\u662f application/json \u3002 \u8fd9\u4e0d\u662f FastAPI \u7684\u95ee\u9898\uff0c\u800c\u662f HTTP \u534f\u8bae\u7684\u89c4\u5b9a\u3002","title":"\u5173\u4e8e\u8868\u5355\u5b57\u6bb5"},{"location":"tutorial/request-forms/#_3","text":"\u672c\u7ae0\u4ecb\u7ecd\u4e86\u5982\u4f55\u4f7f\u7528 Form \u58f0\u660e\u8868\u5355\u6570\u636e\u8f93\u5165\u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/response-model/","text":"\u54cd\u5e94\u6a21\u578b \u00b6 \u4f7f\u7528 response_model \u53c2\u6570\uff0c\u5373\u53ef\u5728\u4ee5\u4e0b \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u54cd\u5e94\u6a21\u578b\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u2026\u2026 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : list [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item \u7b14\u8bb0 \u6ce8\u610f\uff0c response_model \u662f\uff08 get \u3001 post \u7b49\uff09 \u88c5\u9970\u5668 \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u4e0e\u4e4b\u524d\u7684\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u4e0d\u540c\uff0c\u5b83\u4e0d\u662f \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u3002 response_model \u63a5\u6536\u7684\u7c7b\u578b\u4e0e\u58f0\u660e Pydantic \u6a21\u578b\u5c5e\u6027\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u53ef\u4ee5\u662f Pydantic \u6a21\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f Pydantic \u6a21\u578b \u5217\u8868 \uff0c\u4f8b\u5982 List[Item] \u3002 FastAPI \u4f7f\u7528 response_model \uff1a \u8f6c\u6362\u4e3a\u7c7b\u578b\u58f0\u660e\u7684\u8f93\u51fa\u6570\u636e\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5728 OpenAPI \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u4e3a\u54cd\u5e94\u6dfb\u52a0 JSON Schema\u3002 \u751f\u6210 API \u6587\u6863\u3002 \u4f46\u6700\u91cd\u8981\u7684\u662f\uff1a \u628a\u8f93\u51fa\u6570\u636e\u9650\u5236\u5728\u8be5\u6a21\u578b\u5b9a\u4e49\u5185\u3002\u63a5\u4e0b\u6765\uff0c\u60a8\u5c31\u4f1a\u77e5\u9053\u8fd9\u4e00\u70b9\u6709\u591a\u91cd\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u54cd\u5e94\u6a21\u578b\u662f\u5728\u88c5\u9970\u5668\u53c2\u6570\u4e2d\u58f0\u660e\u7684\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u7c7b\u578b\u6ce8\u91ca\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u8def\u5f84\u51fd\u6570\u6ca1\u6709\u771f\u6b63\u8fd4\u56de\u8be5\u54cd\u5e94\u6a21\u578b\uff0c\u800c\u662f\u8fd4\u56de dict \u3001\u6570\u636e\u5e93\u5bf9\u8c61\u6216\u5176\u4ed6\u6a21\u578b\uff0c\u7136\u540e\u518d\u4f7f\u7528 response_model \u6267\u884c\u5b57\u6bb5\u7ea6\u675f\u548c\u5e8f\u5217\u5316\u3002 \u8fd4\u56de\u76f8\u540c\u7684\u8f93\u5165\u6570\u636e \u00b6 \u58f0\u660e UserIn \u6a21\u578b\uff0c\u5176\u4e2d\uff0c\u5305\u542b \u660e\u6587\u5bc6\u7801 \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u8bf4\u660e \u8981\u4f7f\u7528 EmailStr \uff0c\u9996\u5148\u8981\u5b89\u88c5 email_validator \u3002 \u5982 pip install email-validator \uff0c \u6216 pip install pydantic[email] \u3002 \u4f7f\u7528\u6b64\u6a21\u578b\u58f0\u660e\u8f93\u5165\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u578b\u58f0\u660e\u8f93\u51fa\u5bf9\u8c61\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u73b0\u5728\uff0c\u53ea\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528\u5bc6\u7801\u521b\u5efa\u7528\u6237\uff0cAPI \u5c31\u4f1a\u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u76f8\u540c\u7684\u5bc6\u7801\u3002 \u672c\u4f8b\u4e2d\uff0c\u56e0\u4e3a\u662f\u7528\u6237\u672c\u4eba\u53d1\u9001\u5bc6\u7801\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002 \u4f46\u5982\u679c\u5728\u5176\u4ed6 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u578b\uff0c\u5c31\u4f1a\u628a\u7528\u6237\u7684\u5bc6\u7801\u53d1\u9001\u7ed9\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u3002 \u5371\u9669 \u6c38\u8fdc\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u4e5f\u4e0d\u8981\u5728\u54cd\u5e94\u4e2d\u53d1\u9001\u5bc6\u7801\u3002 \u6dfb\u52a0\u8f93\u51fa\u6a21\u578b \u00b6 \u76f8\u5bf9\u4e8e\u5305\u542b\u660e\u6587\u5bc6\u7801\u7684\u8f93\u5165\u6a21\u578b\uff0c\u521b\u5efa\u4e0d\u542b\u660e\u6587\u5bc6\u7801\u7684\u8f93\u51fa\u6a21\u578b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u8fd9\u6837\uff0c\u5373\u4fbf \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u540c\u6837\u7684\u8f93\u5165\u7528\u6237\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u2026\u2026\u4f46\u56e0\u4e3a response_model \u4e2d\u58f0\u660e\u7684 UserOut \u6a21\u578b\u6ca1\u6709\u5305\u542b\u5bc6\u7801\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user FastAPI \u4f1a\u4f7f\u7528 Pydantic \u8fc7\u6ee4\u6389\u6240\u6709\u672a\u5728\u8f93\u51fa\u6a21\u578b\u4e2d\u58f0\u660e\u7684\u6570\u636e\u3002 \u67e5\u770b\u6587\u6863 \u00b6 API \u6587\u6863\u4e2d\uff0c\u8f93\u5165\u6a21\u578b\u548c\u8f93\u51fa\u6a21\u578b\u90fd\u6709\u81ea\u5df1\u7684 JSON Schema\uff1a \u5e76\u4e14\uff0cAPI \u6587\u6863\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6a21\u578b\uff1a \u54cd\u5e94\u6a21\u578b\u7f16\u7801\u53c2\u6570 \u00b6 \u54cd\u5e94\u6a21\u578b\u652f\u6301\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] description: Union[str, None] = None \uff08\u6216 Python 3.10 \u4e2d\u7684 str | None = None \uff09\u7684\u9ed8\u8ba4\u503c\u662f None \u3002 tax: float = 10.5 \u7684\u9ed8\u8ba4\u503c\u662f 10.5 \u3002 tags: List[str] = [] \u7684\u9ed8\u8ba4\u503c\u662f\u7a7a\u5217\u8868\uff1a [] \u4f46\u5982\u679c\u6ca1\u6709\u4e3a\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\u53e6\u8d4b\u65b0\u503c\uff0c\u8f93\u51fa\u7ed3\u679c\u4f1a\u7701\u7565\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\u3002 \u4f8b\u5982\uff0cNoSQL \u6570\u636e\u5e93\u7684\u6a21\u578b\u4e2d\u5f80\u5f80\u5305\u542b\u5f88\u591a\u53ef\u9009\u5c5e\u6027\uff0c\u5982\u679c\u8f93\u51fa\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\uff0c\u8f93\u51fa\u7684 JSON \u54cd\u5e94\u4f1a\u7279\u522b\u957f\uff0c\u6b64\u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u53ea\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\u3002 \u4f7f\u7528 response_model_exclude_unset \u53c2\u6570 \u00b6 \u628a \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684\u53c2\u6570\u8bbe\u7f6e\u4e3a response_model_exclude_unset=True \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] \u54cd\u5e94\u4e2d\u5c31\u4e0d\u4f1a\u518d\u5305\u542b\u672a\u4fee\u6539\u8fc7\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\uff0c\u800c\u662f\u53ea\u5305\u542b\u8bbe\u7f6e\u8fc7\u503c\u7684\u5c5e\u6027\u3002 \u56e0\u6b64\uff0c\u5411 \u8def\u5f84\u64cd\u4f5c \u53d1\u9001 ID \u4e3a foo \u7684\u5546\u54c1\u7684\u8bf7\u6c42\uff0c\u5219\uff08\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\u7684\uff09\u54cd\u5e94\u4e3a\uff1a { \"name\" : \"Foo\" , \"price\" : 50.2 } \u8bf4\u660e FastAPI \u4f7f\u7528 Pydantic \u6a21\u578b\u4e2d .dict() \u7684 exclude_unset \u53c2\u6570 \u5b9e\u73b0\u6b64\u529f\u80fd\u3002 \u8bf4\u660e \u8fd8\u53ef\u4ee5\u4f7f\u7528\uff1a response_model_exclude_defaults=True response_model_exclude_none=True \u8be6\u89c1 Pydantic \u6587\u6863 \u4e2d exclude_defaults \u548c exclude_none \u7684\u8bf4\u660e\u3002 \u9ed8\u8ba4\u503c\u5b57\u6bb5\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e \u00b6 \u4f46\u5982\u679c\u4e3a\u542b\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5b57\u6bb5\u8d4b\u4e88\u4e86\u65b0\u503c\uff0c\u4f8b\u5982 ID \u4e3a bar \u7684\u9879\uff1a { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \u8fd9\u4e9b\u503c\u5c31\u4f1a\u5305\u542b\u5728\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u3002 \u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u6570\u636e \u00b6 \u5982\u679c\u65b0\u7684\u6570\u636e\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\uff0c\u4f8b\u5982 ID \u4e3a baz \u7684\u9879\uff1a { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } \u867d\u7136 FastAPI \uff08\u5176\u5b9e\u662f Pydantic\uff09\u80fd\u591f\u8bc6\u522b\u51fa description \u3001 tax \u548c tags \u7684\u503c\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\uff0c\u8fd9\u4e9b\u503c\u4e5f\u4f1a\u663e\u5f0f\u8bbe\u7f6e\uff08\u800c\u4e0d\u662f\u53d6\u81ea\u9ed8\u8ba4\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u8fd9\u4e9b\u503c\u4f1a\u5305\u542b\u5728 JSON \u54cd\u5e94\u91cc\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5bf9\u8c61\uff0c\u4e0d\u53ea\u662f None\u3002 \u8fd8\u53ef\u4ee5\u662f\u5217\u8868 ( [] )\u3001 float \uff0810.5\uff09\u7b49\u3002 response_model_include \u548c response_model_exclude \u00b6 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u53c2\u6570\u8fd8\u6709 response_model_include \u548c response_model_exclude \u3002 \u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u503c\u662f\u7531\u5c5e\u6027\u540d str \u7ec4\u6210\u7684 set \uff0c\u7528\u4e8e\u5305\u542b\uff08\u5ffd\u7565\u5176\u4ed6\u5c5e\u6027\uff09\u6216\u6392\u9664\uff08\u5305\u542b\u5176\u4ed6\u5c5e\u6027\uff09\u96c6\u5408\u4e2d\u7684\u5c5e\u6027\u540d\u3002 \u5982\u679c\u53ea\u6709\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u4f46\u53c8\u60f3\u4ece\u4e2d\u79fb\u9664\u67d0\u4e9b\u8f93\u51fa\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5feb\u6377\u65b9\u6cd5\u3002 \u63d0\u793a \u4f46\u6211\u4eec\u4f9d\u7136\u5efa\u8bae\u4f7f\u7528\u591a\u4e2a\u7c7b\uff0c\u800c\u4e0d\u662f\u8fd9\u4e9b\u53c2\u6570\u3002 \u56e0\u4e3a\u5c31\u7b97\u4f7f\u7528 response_model_include \u6216 response_model_exclude \u7701\u7565\u5c5e\u6027\uff0c\u4f46\u5728 OpenAPI \u751f\u6210\u7684 JSON Schema \uff08\u53ca\u6587\u6863\uff09\u4e2d\u4ecd\u4f1a\u663e\u793a\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u8fd9\u79cd\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u7c7b\u4f3c\u7684 response_model_by_alias \u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] \u63d0\u793a {\"name\", \"description\"} \u8bed\u6cd5\u7528\u4e8e\u521b\u5efa\u5305\u542b\u8fd9\u4e24\u4e2a\u503c\u7684 set \u3002 \u7b49\u6548\u4e8e set([\"name\", \"description\"]) \u3002 \u7528 list \u4ee3\u66ff set \u00b6 \u4e0d\u4f7f\u7528 set \uff0c\u800c\u662f\u4f7f\u7528 list \u6216 tuple \uff0cFastAPI \u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a set \uff0c\u5e76\u4ecd\u80fd\u6b63\u5e38\u8fd0\u884c\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ] \u5c0f\u7ed3 \u00b6 \u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684\u53c2\u6570 response_model \u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\uff0c\u53ef\u4ee5\u8fc7\u6ee4\u6570\u636e\uff0c\u7279\u522b\u9002\u5408\u7528\u6765\u4fdd\u62a4\u9690\u79c1\u6570\u636e\u3002 \u53ea\u8fd4\u56de\u663e\u5f0f\u8bbe\u7f6e\u8fc7\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 response_model_exclude_unset \u53c2\u6570\u3002","title":"\u54cd\u5e94\u6a21\u578b"},{"location":"tutorial/response-model/#_1","text":"\u4f7f\u7528 response_model \u53c2\u6570\uff0c\u5373\u53ef\u5728\u4ee5\u4e0b \u8def\u5f84\u64cd\u4f5c \u4e2d\u58f0\u660e\u54cd\u5e94\u6a21\u578b\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u2026\u2026 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : List [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None tags : list [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None tags : list [ str ] = [] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item ): return item \u7b14\u8bb0 \u6ce8\u610f\uff0c response_model \u662f\uff08 get \u3001 post \u7b49\uff09 \u88c5\u9970\u5668 \u65b9\u6cd5\u7684\u53c2\u6570\u3002\u4e0e\u4e4b\u524d\u7684\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u4e0d\u540c\uff0c\u5b83\u4e0d\u662f \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u3002 response_model \u63a5\u6536\u7684\u7c7b\u578b\u4e0e\u58f0\u660e Pydantic \u6a21\u578b\u5c5e\u6027\u7684\u7c7b\u578b\u76f8\u540c\uff0c\u53ef\u4ee5\u662f Pydantic \u6a21\u578b\uff0c\u4e5f\u53ef\u4ee5\u662f Pydantic \u6a21\u578b \u5217\u8868 \uff0c\u4f8b\u5982 List[Item] \u3002 FastAPI \u4f7f\u7528 response_model \uff1a \u8f6c\u6362\u4e3a\u7c7b\u578b\u58f0\u660e\u7684\u8f93\u51fa\u6570\u636e\u3002 \u6821\u9a8c\u6570\u636e\u3002 \u5728 OpenAPI \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u4e3a\u54cd\u5e94\u6dfb\u52a0 JSON Schema\u3002 \u751f\u6210 API \u6587\u6863\u3002 \u4f46\u6700\u91cd\u8981\u7684\u662f\uff1a \u628a\u8f93\u51fa\u6570\u636e\u9650\u5236\u5728\u8be5\u6a21\u578b\u5b9a\u4e49\u5185\u3002\u63a5\u4e0b\u6765\uff0c\u60a8\u5c31\u4f1a\u77e5\u9053\u8fd9\u4e00\u70b9\u6709\u591a\u91cd\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u54cd\u5e94\u6a21\u578b\u662f\u5728\u88c5\u9970\u5668\u53c2\u6570\u4e2d\u58f0\u660e\u7684\uff0c\u800c\u4e0d\u662f\u8fd4\u56de\u7c7b\u578b\u6ce8\u91ca\u7684\u51fd\u6570\uff0c\u56e0\u4e3a\u8def\u5f84\u51fd\u6570\u6ca1\u6709\u771f\u6b63\u8fd4\u56de\u8be5\u54cd\u5e94\u6a21\u578b\uff0c\u800c\u662f\u8fd4\u56de dict \u3001\u6570\u636e\u5e93\u5bf9\u8c61\u6216\u5176\u4ed6\u6a21\u578b\uff0c\u7136\u540e\u518d\u4f7f\u7528 response_model \u6267\u884c\u5b57\u6bb5\u7ea6\u675f\u548c\u5e8f\u5217\u5316\u3002","title":"\u54cd\u5e94\u6a21\u578b"},{"location":"tutorial/response-model/#_2","text":"\u58f0\u660e UserIn \u6a21\u578b\uff0c\u5176\u4e2d\uff0c\u5305\u542b \u660e\u6587\u5bc6\u7801 \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u8bf4\u660e \u8981\u4f7f\u7528 EmailStr \uff0c\u9996\u5148\u8981\u5b89\u88c5 email_validator \u3002 \u5982 pip install email-validator \uff0c \u6216 pip install pydantic[email] \u3002 \u4f7f\u7528\u6b64\u6a21\u578b\u58f0\u660e\u8f93\u5165\u5bf9\u8c61\uff0c\u5e76\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u578b\u58f0\u660e\u8f93\u51fa\u5bf9\u8c61\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None # Don't do this in production! @app . post ( \"/user/\" , response_model = UserIn ) async def create_user ( user : UserIn ): return user \u73b0\u5728\uff0c\u53ea\u8981\u5728\u6d4f\u89c8\u5668\u4e2d\u4f7f\u7528\u5bc6\u7801\u521b\u5efa\u7528\u6237\uff0cAPI \u5c31\u4f1a\u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u76f8\u540c\u7684\u5bc6\u7801\u3002 \u672c\u4f8b\u4e2d\uff0c\u56e0\u4e3a\u662f\u7528\u6237\u672c\u4eba\u53d1\u9001\u5bc6\u7801\uff0c\u8fd9\u79cd\u64cd\u4f5c\u6ca1\u4ec0\u4e48\u95ee\u9898\u3002 \u4f46\u5982\u679c\u5728\u5176\u4ed6 \u8def\u5f84\u64cd\u4f5c \u4e2d\u4f7f\u7528\u540c\u4e00\u4e2a\u6a21\u578b\uff0c\u5c31\u4f1a\u628a\u7528\u6237\u7684\u5bc6\u7801\u53d1\u9001\u7ed9\u6bcf\u4e00\u4e2a\u5ba2\u6237\u7aef\u3002 \u5371\u9669 \u6c38\u8fdc\u4e0d\u8981\u5b58\u50a8\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u4e5f\u4e0d\u8981\u5728\u54cd\u5e94\u4e2d\u53d1\u9001\u5bc6\u7801\u3002","title":"\u8fd4\u56de\u76f8\u540c\u7684\u8f93\u5165\u6570\u636e"},{"location":"tutorial/response-model/#_3","text":"\u76f8\u5bf9\u4e8e\u5305\u542b\u660e\u6587\u5bc6\u7801\u7684\u8f93\u5165\u6a21\u578b\uff0c\u521b\u5efa\u4e0d\u542b\u660e\u6587\u5bc6\u7801\u7684\u8f93\u51fa\u6a21\u578b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u8fd9\u6837\uff0c\u5373\u4fbf \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd4\u56de\u540c\u6837\u7684\u8f93\u5165\u7528\u6237\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user \u2026\u2026\u4f46\u56e0\u4e3a response_model \u4e2d\u58f0\u660e\u7684 UserOut \u6a21\u578b\u6ca1\u6709\u5305\u542b\u5bc6\u7801\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : Union [ str , None ] = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : Union [ str , None ] = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user from fastapi import FastAPI from pydantic import BaseModel , EmailStr app = FastAPI () class UserIn ( BaseModel ): username : str password : str email : EmailStr full_name : str | None = None class UserOut ( BaseModel ): username : str email : EmailStr full_name : str | None = None @app . post ( \"/user/\" , response_model = UserOut ) async def create_user ( user : UserIn ): return user FastAPI \u4f1a\u4f7f\u7528 Pydantic \u8fc7\u6ee4\u6389\u6240\u6709\u672a\u5728\u8f93\u51fa\u6a21\u578b\u4e2d\u58f0\u660e\u7684\u6570\u636e\u3002","title":"\u6dfb\u52a0\u8f93\u51fa\u6a21\u578b"},{"location":"tutorial/response-model/#_4","text":"API \u6587\u6863\u4e2d\uff0c\u8f93\u5165\u6a21\u578b\u548c\u8f93\u51fa\u6a21\u578b\u90fd\u6709\u81ea\u5df1\u7684 JSON Schema\uff1a \u5e76\u4e14\uff0cAPI \u6587\u6863\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e24\u4e2a\u6a21\u578b\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/response-model/#_5","text":"\u54cd\u5e94\u6a21\u578b\u652f\u6301\u9ed8\u8ba4\u503c\uff0c\u4f8b\u5982\uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] description: Union[str, None] = None \uff08\u6216 Python 3.10 \u4e2d\u7684 str | None = None \uff09\u7684\u9ed8\u8ba4\u503c\u662f None \u3002 tax: float = 10.5 \u7684\u9ed8\u8ba4\u503c\u662f 10.5 \u3002 tags: List[str] = [] \u7684\u9ed8\u8ba4\u503c\u662f\u7a7a\u5217\u8868\uff1a [] \u4f46\u5982\u679c\u6ca1\u6709\u4e3a\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\u53e6\u8d4b\u65b0\u503c\uff0c\u8f93\u51fa\u7ed3\u679c\u4f1a\u7701\u7565\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\u3002 \u4f8b\u5982\uff0cNoSQL \u6570\u636e\u5e93\u7684\u6a21\u578b\u4e2d\u5f80\u5f80\u5305\u542b\u5f88\u591a\u53ef\u9009\u5c5e\u6027\uff0c\u5982\u679c\u8f93\u51fa\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\uff0c\u8f93\u51fa\u7684 JSON \u54cd\u5e94\u4f1a\u7279\u522b\u957f\uff0c\u6b64\u65f6\uff0c\u53ef\u4ee5\u7701\u7565\u53ea\u542b\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\u3002","title":"\u54cd\u5e94\u6a21\u578b\u7f16\u7801\u53c2\u6570"},{"location":"tutorial/response-model/#response_model_exclude_unset","text":"\u628a \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684\u53c2\u6570\u8bbe\u7f6e\u4e3a response_model_exclude_unset=True \uff1a Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : List [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 tags : list [ str ] = [] items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : []}, } @app . get ( \"/items/ {item_id} \" , response_model = Item , response_model_exclude_unset = True ) async def read_item ( item_id : str ): return items [ item_id ] \u54cd\u5e94\u4e2d\u5c31\u4e0d\u4f1a\u518d\u5305\u542b\u672a\u4fee\u6539\u8fc7\u9ed8\u8ba4\u503c\u7684\u5c5e\u6027\uff0c\u800c\u662f\u53ea\u5305\u542b\u8bbe\u7f6e\u8fc7\u503c\u7684\u5c5e\u6027\u3002 \u56e0\u6b64\uff0c\u5411 \u8def\u5f84\u64cd\u4f5c \u53d1\u9001 ID \u4e3a foo \u7684\u5546\u54c1\u7684\u8bf7\u6c42\uff0c\u5219\uff08\u4e0d\u5305\u62ec\u9ed8\u8ba4\u503c\u7684\uff09\u54cd\u5e94\u4e3a\uff1a { \"name\" : \"Foo\" , \"price\" : 50.2 } \u8bf4\u660e FastAPI \u4f7f\u7528 Pydantic \u6a21\u578b\u4e2d .dict() \u7684 exclude_unset \u53c2\u6570 \u5b9e\u73b0\u6b64\u529f\u80fd\u3002 \u8bf4\u660e \u8fd8\u53ef\u4ee5\u4f7f\u7528\uff1a response_model_exclude_defaults=True response_model_exclude_none=True \u8be6\u89c1 Pydantic \u6587\u6863 \u4e2d exclude_defaults \u548c exclude_none \u7684\u8bf4\u660e\u3002","title":"\u4f7f\u7528 response_model_exclude_unset \u53c2\u6570"},{"location":"tutorial/response-model/#_6","text":"\u4f46\u5982\u679c\u4e3a\u542b\u9ed8\u8ba4\u503c\u7684\u6a21\u578b\u5b57\u6bb5\u8d4b\u4e88\u4e86\u65b0\u503c\uff0c\u4f8b\u5982 ID \u4e3a bar \u7684\u9879\uff1a { \"name\" : \"Bar\" , \"description\" : \"The bartenders\" , \"price\" : 62 , \"tax\" : 20.2 } \u8fd9\u4e9b\u503c\u5c31\u4f1a\u5305\u542b\u5728\u8fd4\u56de\u7684\u54cd\u5e94\u4e2d\u3002","title":"\u9ed8\u8ba4\u503c\u5b57\u6bb5\u6709\u5b9e\u9645\u503c\u7684\u6570\u636e"},{"location":"tutorial/response-model/#_7","text":"\u5982\u679c\u65b0\u7684\u6570\u636e\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\uff0c\u4f8b\u5982 ID \u4e3a baz \u7684\u9879\uff1a { \"name\" : \"Baz\" , \"description\" : None , \"price\" : 50.2 , \"tax\" : 10.5 , \"tags\" : [] } \u867d\u7136 FastAPI \uff08\u5176\u5b9e\u662f Pydantic\uff09\u80fd\u591f\u8bc6\u522b\u51fa description \u3001 tax \u548c tags \u7684\u503c\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\uff0c\u8fd9\u4e9b\u503c\u4e5f\u4f1a\u663e\u5f0f\u8bbe\u7f6e\uff08\u800c\u4e0d\u662f\u53d6\u81ea\u9ed8\u8ba4\u503c\uff09\u3002 \u56e0\u6b64\uff0c\u8fd9\u4e9b\u503c\u4f1a\u5305\u542b\u5728 JSON \u54cd\u5e94\u91cc\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u9ed8\u8ba4\u503c\u53ef\u4ee5\u662f\u4efb\u4f55\u5bf9\u8c61\uff0c\u4e0d\u53ea\u662f None\u3002 \u8fd8\u53ef\u4ee5\u662f\u5217\u8868 ( [] )\u3001 float \uff0810.5\uff09\u7b49\u3002","title":"\u4e0e\u9ed8\u8ba4\u503c\u76f8\u540c\u7684\u6570\u636e"},{"location":"tutorial/response-model/#response_model_include-response_model_exclude","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u53c2\u6570\u8fd8\u6709 response_model_include \u548c response_model_exclude \u3002 \u8fd9\u4e24\u4e2a\u53c2\u6570\u7684\u503c\u662f\u7531\u5c5e\u6027\u540d str \u7ec4\u6210\u7684 set \uff0c\u7528\u4e8e\u5305\u542b\uff08\u5ffd\u7565\u5176\u4ed6\u5c5e\u6027\uff09\u6216\u6392\u9664\uff08\u5305\u542b\u5176\u4ed6\u5c5e\u6027\uff09\u96c6\u5408\u4e2d\u7684\u5c5e\u6027\u540d\u3002 \u5982\u679c\u53ea\u6709\u4e00\u4e2a Pydantic \u6a21\u578b\uff0c\u4f46\u53c8\u60f3\u4ece\u4e2d\u79fb\u9664\u67d0\u4e9b\u8f93\u51fa\u6570\u636e\uff0c\u5219\u53ef\u4ee5\u4f7f\u7528\u8fd9\u79cd\u5feb\u6377\u65b9\u6cd5\u3002 \u63d0\u793a \u4f46\u6211\u4eec\u4f9d\u7136\u5efa\u8bae\u4f7f\u7528\u591a\u4e2a\u7c7b\uff0c\u800c\u4e0d\u662f\u8fd9\u4e9b\u53c2\u6570\u3002 \u56e0\u4e3a\u5c31\u7b97\u4f7f\u7528 response_model_include \u6216 response_model_exclude \u7701\u7565\u5c5e\u6027\uff0c\u4f46\u5728 OpenAPI \u751f\u6210\u7684 JSON Schema \uff08\u53ca\u6587\u6863\uff09\u4e2d\u4ecd\u4f1a\u663e\u793a\u5b8c\u6574\u7684\u6a21\u578b\u3002 \u8fd9\u79cd\u64cd\u4f5c\u4e5f\u9002\u7528\u4e8e\u7c7b\u4f3c\u7684 response_model_by_alias \u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = { \"name\" , \"description\" }, ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = { \"tax\" }) async def read_item_public_data ( item_id : str ): return items [ item_id ] \u63d0\u793a {\"name\", \"description\"} \u8bed\u6cd5\u7528\u4e8e\u521b\u5efa\u5305\u542b\u8fd9\u4e24\u4e2a\u503c\u7684 set \u3002 \u7b49\u6548\u4e8e set([\"name\", \"description\"]) \u3002","title":"response_model_include \u548c response_model_exclude"},{"location":"tutorial/response-model/#list-set","text":"\u4e0d\u4f7f\u7528 set \uff0c\u800c\u662f\u4f7f\u7528 list \u6216 tuple \uff0cFastAPI \u53ef\u4ee5\u5c06\u5176\u8f6c\u6362\u4e3a set \uff0c\u5e76\u4ecd\u80fd\u6b63\u5e38\u8fd0\u884c\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ] from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float = 10.5 items = { \"foo\" : { \"name\" : \"Foo\" , \"price\" : 50.2 }, \"bar\" : { \"name\" : \"Bar\" , \"description\" : \"The Bar fighters\" , \"price\" : 62 , \"tax\" : 20.2 }, \"baz\" : { \"name\" : \"Baz\" , \"description\" : \"There goes my baz\" , \"price\" : 50.2 , \"tax\" : 10.5 , }, } @app . get ( \"/items/ {item_id} /name\" , response_model = Item , response_model_include = [ \"name\" , \"description\" ], ) async def read_item_name ( item_id : str ): return items [ item_id ] @app . get ( \"/items/ {item_id} /public\" , response_model = Item , response_model_exclude = [ \"tax\" ]) async def read_item_public_data ( item_id : str ): return items [ item_id ]","title":"\u7528 list \u4ee3\u66ff set"},{"location":"tutorial/response-model/#_8","text":"\u4f7f\u7528 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u7684\u53c2\u6570 response_model \u5b9a\u4e49\u54cd\u5e94\u6a21\u578b\uff0c\u53ef\u4ee5\u8fc7\u6ee4\u6570\u636e\uff0c\u7279\u522b\u9002\u5408\u7528\u6765\u4fdd\u62a4\u9690\u79c1\u6570\u636e\u3002 \u53ea\u8fd4\u56de\u663e\u5f0f\u8bbe\u7f6e\u8fc7\u7684\u503c\u65f6\uff0c\u53ef\u4ee5\u4f7f\u7528 response_model_exclude_unset \u53c2\u6570\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/response-status-code/","text":"\u54cd\u5e94\u72b6\u6001\u7801 \u00b6 \u4e0e\u6307\u5b9a\u54cd\u5e94\u6a21\u578b\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u5728\u4ee5\u4e0b\u4efb\u610f \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 status_code \u53c2\u6570\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u2026\u2026 from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } \u7b14\u8bb0 \u6ce8\u610f\uff0c status_code \u662f\uff08 get \u3001 post \u7b49\uff09 \u88c5\u9970\u5668 \u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u3002\u4e0e\u4e4b\u524d\u7684\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u4e0d\u540c\uff0c\u4e0d\u662f \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u3002 status_code \u53c2\u6570\u63a5\u6536\u8868\u793a HTTP \u72b6\u6001\u7801\u7684\u6570\u5b57\u3002 \u8bf4\u660e status_code \u8fd8\u80fd\u63a5\u6536 IntEnum \u7c7b\u578b\uff0c\u5982 Python \u7684 http.HTTPStatus \u3002 \u5b83\u53ef\u4ee5\uff1a \u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u72b6\u6001\u7801\u3002 \u5728 OpenAPI \u6982\u56fe\u53ca\u7528\u6237\u754c\u9762\u663e\u793a\u6587\u6863\uff1a \u7b14\u8bb0 \u67d0\u4e9b\u54cd\u5e94\u72b6\u6001\u7801\u8868\u793a\u54cd\u5e94\u6ca1\u6709\u54cd\u5e94\u4f53\uff08\u53c2\u9605\u4e0b\u4e00\u7ae0\uff09\u3002 FastAPI \u53ef\u4ee5\u8fdb\u884c\u8bc6\u522b\uff0c\u5e76\u751f\u6210\u8868\u660e\u65e0\u54cd\u5e94\u4f53\u7684 OpenAPI \u6587\u6863\u3002 \u5173\u4e8e HTTP \u72b6\u6001\u7801 \u00b6 \u7b14\u8bb0 \u5982\u679c\u60a8\u5df2\u4e86\u89e3 HTTP \u72b6\u6001\u7801\u7684\u77e5\u8bc6\uff0c\u8bf7\u8df3\u5230\u4e0b\u4e00\u7ae0\u3002 \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u53d1\u9001 3 \u4f4d\u6570\u7684\u6570\u5b57\u72b6\u6001\u7801\u662f\u54cd\u5e94\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u4e9b\u72b6\u6001\u7801\u90fd\u5177\u6709\u4fbf\u4e8e\u8bc6\u522b\u7684\u5173\u8054\u540d\u79f0\uff0c\u4f46\u662f\u91cd\u8981\u7684\u8fd8\u662f\u6570\u5b57\u3002 \u7b80\u8a00\u4e4b\uff1a 100 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8fd4\u56de \u4fe1\u606f \u3002\u8fd9\u7c7b\u72b6\u6001\u7801\u5f88\u5c11\u76f4\u63a5\u4f7f\u7528\u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u7801\u7684\u54cd\u5e94\u4e0d\u80fd\u5305\u542b\u54cd\u5e94\u4f53 200 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8868\u793a \u6210\u529f \u3002\u8fd9\u4e9b\u72b6\u6001\u7801\u662f\u6700\u5e38\u7528\u7684 200 \u662f\u9ed8\u8ba4\u72b6\u6001\u4ee3\u7801\uff0c\u8868\u793a\u4e00\u5207 \u6b63\u5e38 201 \u8868\u793a \u5df2\u521b\u5efa \uff0c\u901a\u5e38\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u65b0\u8bb0\u5f55\u540e\u4f7f\u7528 204 \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f8b\u5b50\uff0c\u8868\u793a \u65e0\u5185\u5bb9 \u3002\u8be5\u54cd\u5e94\u5728\u6ca1\u6709\u4e3a\u5ba2\u6237\u7aef\u8fd4\u56de\u5185\u5bb9\u65f6\u4f7f\u7528\uff0c\u56e0\u6b64\uff0c\u8be5\u54cd\u5e94\u4e0d\u80fd\u5305\u542b\u54cd\u5e94\u4f53 300 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e \u91cd\u5b9a\u5411 \u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u7801\u7684\u54cd\u5e94\u4e0d\u4e00\u5b9a\u5305\u542b\u54cd\u5e94\u4f53\uff0c\u4f46 304 \u672a\u4fee\u6539 \u662f\u4e2a\u4f8b\u5916\uff0c\u8be5\u54cd\u5e94\u4e0d\u5f97\u5305\u542b\u54cd\u5e94\u4f53 400 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8868\u793a \u5ba2\u6237\u7aef\u9519\u8bef \u3002\u8fd9\u4e9b\u53ef\u80fd\u662f\u7b2c\u4e8c\u5e38\u7528\u7684\u7c7b\u578b 404 \uff0c\u7528\u4e8e \u672a\u627e\u5230 \u54cd\u5e94 \u5bf9\u4e8e\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u4e00\u822c\u9519\u8bef\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528 400 500 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8868\u793a\u670d\u52a1\u5668\u7aef\u9519\u8bef\u3002\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u72b6\u6001\u7801\u3002\u5e94\u7528\u4ee3\u7801\u6216\u670d\u52a1\u5668\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u4f1a\u81ea\u52a8\u8fd4\u56de\u8fd9\u4e9b\u72b6\u6001\u4ee3\u7801 \u63d0\u793a \u72b6\u6001\u7801\u53ca\u9002\u7528\u573a\u666f\u7684\u8be6\u60c5\uff0c\u8be6\u89c1 MDN \u7684 HTTP \u72b6\u6001\u7801 \u6587\u6863 \u3002 \u72b6\u6001\u7801\u540d\u79f0\u5feb\u6377\u65b9\u5f0f \u00b6 \u518d\u770b\u4e0b\u4e4b\u524d\u7684\u4f8b\u5b50\uff1a from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } 201 \u8868\u793a \u5df2\u521b\u5efa \u7684\u72b6\u6001\u7801\u3002 \u4f46\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u8bb0\u4f4f\u6240\u6709\u4ee3\u7801\u7684\u542b\u4e49\u3002 \u53ef\u4ee5\u4f7f\u7528 fastapi.status \u4e2d\u7684\u5feb\u6377\u53d8\u91cf\u3002 from fastapi import FastAPI , status app = FastAPI () @app . post ( \"/items/\" , status_code = status . HTTP_201_CREATED ) async def create_item ( name : str ): return { \"name\" : name } \u8fd9\u53ea\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u5177\u6709\u76f8\u540c\u7684\u6570\u5b57\u4ee3\u7801\uff0c\u4f46\u5b83\u53ef\u4ee5\u4f7f\u7528\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff1a \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u3002 \u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u65b9\u4fbf\uff0c FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.status \u5b8c\u5168\u76f8\u540c\u7684 fastapi.status \uff0c\u4f46\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 \u66f4\u6539\u9ed8\u8ba4\u72b6\u6001\u7801 \u00b6 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\uff0c\u5c06\u4ecb\u7ecd\u5982\u4f55\u8fd4\u56de\u4e0e\u5728\u6b64\u58f0\u660e\u7684\u9ed8\u8ba4\u72b6\u6001\u7801\u4e0d\u540c\u7684\u72b6\u6001\u7801\u3002","title":"\u54cd\u5e94\u72b6\u6001\u7801"},{"location":"tutorial/response-status-code/#_1","text":"\u4e0e\u6307\u5b9a\u54cd\u5e94\u6a21\u578b\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u5728\u4ee5\u4e0b\u4efb\u610f \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528 status_code \u53c2\u6570\u58f0\u660e\u7528\u4e8e\u54cd\u5e94\u7684 HTTP \u72b6\u6001\u7801\uff1a @app.get() @app.post() @app.put() @app.delete() \u7b49\u2026\u2026 from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } \u7b14\u8bb0 \u6ce8\u610f\uff0c status_code \u662f\uff08 get \u3001 post \u7b49\uff09 \u88c5\u9970\u5668 \u65b9\u6cd5\u4e2d\u7684\u53c2\u6570\u3002\u4e0e\u4e4b\u524d\u7684\u53c2\u6570\u548c\u8bf7\u6c42\u4f53\u4e0d\u540c\uff0c\u4e0d\u662f \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u3002 status_code \u53c2\u6570\u63a5\u6536\u8868\u793a HTTP \u72b6\u6001\u7801\u7684\u6570\u5b57\u3002 \u8bf4\u660e status_code \u8fd8\u80fd\u63a5\u6536 IntEnum \u7c7b\u578b\uff0c\u5982 Python \u7684 http.HTTPStatus \u3002 \u5b83\u53ef\u4ee5\uff1a \u5728\u54cd\u5e94\u4e2d\u8fd4\u56de\u72b6\u6001\u7801\u3002 \u5728 OpenAPI \u6982\u56fe\u53ca\u7528\u6237\u754c\u9762\u663e\u793a\u6587\u6863\uff1a \u7b14\u8bb0 \u67d0\u4e9b\u54cd\u5e94\u72b6\u6001\u7801\u8868\u793a\u54cd\u5e94\u6ca1\u6709\u54cd\u5e94\u4f53\uff08\u53c2\u9605\u4e0b\u4e00\u7ae0\uff09\u3002 FastAPI \u53ef\u4ee5\u8fdb\u884c\u8bc6\u522b\uff0c\u5e76\u751f\u6210\u8868\u660e\u65e0\u54cd\u5e94\u4f53\u7684 OpenAPI \u6587\u6863\u3002","title":"\u54cd\u5e94\u72b6\u6001\u7801"},{"location":"tutorial/response-status-code/#http","text":"\u7b14\u8bb0 \u5982\u679c\u60a8\u5df2\u4e86\u89e3 HTTP \u72b6\u6001\u7801\u7684\u77e5\u8bc6\uff0c\u8bf7\u8df3\u5230\u4e0b\u4e00\u7ae0\u3002 \u5728 HTTP \u534f\u8bae\u4e2d\uff0c\u53d1\u9001 3 \u4f4d\u6570\u7684\u6570\u5b57\u72b6\u6001\u7801\u662f\u54cd\u5e94\u7684\u4e00\u90e8\u5206\u3002 \u8fd9\u4e9b\u72b6\u6001\u7801\u90fd\u5177\u6709\u4fbf\u4e8e\u8bc6\u522b\u7684\u5173\u8054\u540d\u79f0\uff0c\u4f46\u662f\u91cd\u8981\u7684\u8fd8\u662f\u6570\u5b57\u3002 \u7b80\u8a00\u4e4b\uff1a 100 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8fd4\u56de \u4fe1\u606f \u3002\u8fd9\u7c7b\u72b6\u6001\u7801\u5f88\u5c11\u76f4\u63a5\u4f7f\u7528\u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u7801\u7684\u54cd\u5e94\u4e0d\u80fd\u5305\u542b\u54cd\u5e94\u4f53 200 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8868\u793a \u6210\u529f \u3002\u8fd9\u4e9b\u72b6\u6001\u7801\u662f\u6700\u5e38\u7528\u7684 200 \u662f\u9ed8\u8ba4\u72b6\u6001\u4ee3\u7801\uff0c\u8868\u793a\u4e00\u5207 \u6b63\u5e38 201 \u8868\u793a \u5df2\u521b\u5efa \uff0c\u901a\u5e38\u5728\u6570\u636e\u5e93\u4e2d\u521b\u5efa\u65b0\u8bb0\u5f55\u540e\u4f7f\u7528 204 \u662f\u4e00\u79cd\u7279\u6b8a\u7684\u4f8b\u5b50\uff0c\u8868\u793a \u65e0\u5185\u5bb9 \u3002\u8be5\u54cd\u5e94\u5728\u6ca1\u6709\u4e3a\u5ba2\u6237\u7aef\u8fd4\u56de\u5185\u5bb9\u65f6\u4f7f\u7528\uff0c\u56e0\u6b64\uff0c\u8be5\u54cd\u5e94\u4e0d\u80fd\u5305\u542b\u54cd\u5e94\u4f53 300 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e \u91cd\u5b9a\u5411 \u3002\u5177\u6709\u8fd9\u4e9b\u72b6\u6001\u7801\u7684\u54cd\u5e94\u4e0d\u4e00\u5b9a\u5305\u542b\u54cd\u5e94\u4f53\uff0c\u4f46 304 \u672a\u4fee\u6539 \u662f\u4e2a\u4f8b\u5916\uff0c\u8be5\u54cd\u5e94\u4e0d\u5f97\u5305\u542b\u54cd\u5e94\u4f53 400 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8868\u793a \u5ba2\u6237\u7aef\u9519\u8bef \u3002\u8fd9\u4e9b\u53ef\u80fd\u662f\u7b2c\u4e8c\u5e38\u7528\u7684\u7c7b\u578b 404 \uff0c\u7528\u4e8e \u672a\u627e\u5230 \u54cd\u5e94 \u5bf9\u4e8e\u6765\u81ea\u5ba2\u6237\u7aef\u7684\u4e00\u822c\u9519\u8bef\uff0c\u53ef\u4ee5\u53ea\u4f7f\u7528 400 500 \u53ca\u4ee5\u4e0a\u7684\u72b6\u6001\u7801\u7528\u4e8e\u8868\u793a\u670d\u52a1\u5668\u7aef\u9519\u8bef\u3002\u51e0\u4e4e\u6c38\u8fdc\u4e0d\u4f1a\u76f4\u63a5\u4f7f\u7528\u8fd9\u4e9b\u72b6\u6001\u7801\u3002\u5e94\u7528\u4ee3\u7801\u6216\u670d\u52a1\u5668\u51fa\u73b0\u95ee\u9898\u65f6\uff0c\u4f1a\u81ea\u52a8\u8fd4\u56de\u8fd9\u4e9b\u72b6\u6001\u4ee3\u7801 \u63d0\u793a \u72b6\u6001\u7801\u53ca\u9002\u7528\u573a\u666f\u7684\u8be6\u60c5\uff0c\u8be6\u89c1 MDN \u7684 HTTP \u72b6\u6001\u7801 \u6587\u6863 \u3002","title":"\u5173\u4e8e HTTP \u72b6\u6001\u7801"},{"location":"tutorial/response-status-code/#_2","text":"\u518d\u770b\u4e0b\u4e4b\u524d\u7684\u4f8b\u5b50\uff1a from fastapi import FastAPI app = FastAPI () @app . post ( \"/items/\" , status_code = 201 ) async def create_item ( name : str ): return { \"name\" : name } 201 \u8868\u793a \u5df2\u521b\u5efa \u7684\u72b6\u6001\u7801\u3002 \u4f46\u6211\u4eec\u6ca1\u6709\u5fc5\u8981\u8bb0\u4f4f\u6240\u6709\u4ee3\u7801\u7684\u542b\u4e49\u3002 \u53ef\u4ee5\u4f7f\u7528 fastapi.status \u4e2d\u7684\u5feb\u6377\u53d8\u91cf\u3002 from fastapi import FastAPI , status app = FastAPI () @app . post ( \"/items/\" , status_code = status . HTTP_201_CREATED ) async def create_item ( name : str ): return { \"name\" : name } \u8fd9\u53ea\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c\u5177\u6709\u76f8\u540c\u7684\u6570\u5b57\u4ee3\u7801\uff0c\u4f46\u5b83\u53ef\u4ee5\u4f7f\u7528\u7f16\u8f91\u5668\u7684\u81ea\u52a8\u8865\u5168\u529f\u80fd\uff1a \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette import status \u3002 \u4e3a\u4e86\u8ba9\u5f00\u53d1\u8005\u66f4\u65b9\u4fbf\uff0c FastAPI \u63d0\u4f9b\u4e86\u4e0e starlette.status \u5b8c\u5168\u76f8\u540c\u7684 fastapi.status \uff0c\u4f46\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u72b6\u6001\u7801\u540d\u79f0\u5feb\u6377\u65b9\u5f0f"},{"location":"tutorial/response-status-code/#_3","text":"\u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\uff0c\u5c06\u4ecb\u7ecd\u5982\u4f55\u8fd4\u56de\u4e0e\u5728\u6b64\u58f0\u660e\u7684\u9ed8\u8ba4\u72b6\u6001\u7801\u4e0d\u540c\u7684\u72b6\u6001\u7801\u3002","title":"\u66f4\u6539\u9ed8\u8ba4\u72b6\u6001\u7801"},{"location":"tutorial/schema-extra-example/","text":"\u58f0\u660e\u8bf7\u6c42\u7684\u793a\u4f8b\u6570\u636e \u00b6 FastAPI \u652f\u6301\u4e3a\u5e94\u7528\u4e2d\u7684\u6570\u636e\u58f0\u660e\u793a\u4f8b\u3002 \u4ee5\u4e0b\u662f\u51e0\u79cd\u5b9e\u73b0\u7684\u65b9\u5f0f\u3002 Pydantic \u7684 schema_extra \u00b6 \u4f7f\u7528 Config \u4e0e schema_extra \u4e3a Pydantic \u6a21\u578b\u58f0\u660e example \uff0c \u8be6\u89c1 Pydantic \u6587\u6863\uff1a\u81ea\u5b9a\u4e49\u6982\u56fe \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8f93\u51fa\u7684 JSON Schema \u4e2d\u4f1a\u4e3a\u6a21\u578b\u6dfb\u52a0\u8fd9\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u5e76\u663e\u793a\u5728 API \u6587\u6863\u4e2d\u3002 \u63d0\u793a \u540c\u6837\uff0c\u53ef\u4ee5\u6269\u5c55 JSON Schema\uff0c\u5e76\u6dfb\u52a0\u66f4\u591a\u81ea\u5b9a\u4e49\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u4e3a\u524d\u7aef\u7528\u6237\u754c\u9762\u6dfb\u52a0\u5143\u6570\u636e\u7b49\u4fe1\u606f\u3002 \u66f4\u591a Field \u53c2\u6570 \u00b6 \u5411 Pydantic \u6a21\u578b\u7684 Field() \u4f20\u9012\u53c2\u6570\uff0c\u53ef\u4ee5\u4e3a JSON Schema \u58f0\u660e\u66f4\u591a\u4fe1\u606f\u3002 \u4f7f\u7528 Field() \u4e3a\u5b57\u6bb5\u6dfb\u52a0 example \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : Union [ str , None ] = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : Union [ float , None ] = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : str | None = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : float | None = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8b66\u544a \u6ce8\u610f\uff0c\u4f20\u9012\u7684\u8fd9\u4e9b\u53c2\u6570\u4e0d\u6dfb\u52a0\u9a8c\u8bc1\uff0c\u53ea\u6dfb\u52a0\u4f9b\u6587\u6863\u4f7f\u7528\u7684\u989d\u5916\u4fe1\u606f\u3002 OpenAPI \u4e2d\u7684 example \u4e0e examples \u00b6 \u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u65f6\uff1a Path() Query() Header() Cookie() Body() Form() File() \u8fd8\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u6570\u636e\u7684 example \uff0c\u6216\u4e00\u7ec4 examples \u5411 OpenAPI \u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u3002 \u5728 Body \u4e2d\u4f7f\u7528 example \u00b6 \u4e0b\u5217\u4ee3\u7801\u5411 Body() \u4f20\u9012 example \u6570\u636e\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results \u6587\u6863\u4e2d\u7684\u793a\u4f8b \u00b6 \u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u5728\u6587\u6863 /docs \u4e2d\u7684\u663e\u793a\u6548\u679c\u5982\u4e0b\uff1a \u5728 Body \u4e2d\u4f7f\u7528 examples \u00b6 \u9664\u4e86\u5355\u4e2a\u7684 example \uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 dict \u4f20\u9012 examples \uff0c\u4ee5\u6b64\u6765\u663e\u793a\u591a\u4e2a\u793a\u4f8b\uff0c\u8fd9\u4e9b\u793a\u4f8b\u4fe1\u606f\u4e5f\u4f1a\u88ab\u6dfb\u52a0\u81f3 OpenAPI \u3002 dict \u901a\u8fc7 \u952e \u8bc6\u522b\u793a\u4f8b\uff0c\u8fd9\u4e9b\u793a\u4f8b\u7684\u503c\u4e5f\u662f dict \u3002 examples \u7684 dict \u5305\u542b\u4e0b\u5217\u5185\u5bb9\uff1a summary \uff1a\u793a\u4f8b\u7b80\u8ff0\u3002 description \uff1a\u652f\u6301 Markdown \u683c\u5f0f\u7684\u8f83\u957f\u63cf\u8ff0\u3002 value \uff1a\u5b9e\u9645\u663e\u793a\u7684\u793a\u4f8b\uff0c\u53ef\u4ee5\u662f \u5b57\u5178 \u3002 externalValue \uff1a value \u7684\u5907\u9009\u9879\uff0c\u6307\u5411\u793a\u4f8b\u7684 URL\uff0c\u4f46\u53ef\u80fd\u6709\u4e9b\u5de5\u5177\u4e0d\u652f\u6301\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item = Body ( examples = { \"normal\" : { \"summary\" : \"A normal example\" , \"description\" : \"A **normal** item works correctly.\" , \"value\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, }, \"converted\" : { \"summary\" : \"An example with converted data\" , \"description\" : \"FastAPI can convert price `strings` to actual `numbers` automatically\" , \"value\" : { \"name\" : \"Bar\" , \"price\" : \"35.4\" , }, }, \"invalid\" : { \"summary\" : \"Invalid data is rejected with an error\" , \"value\" : { \"name\" : \"Baz\" , \"price\" : \"thirty five point four\" , }, }, }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item = Body ( examples = { \"normal\" : { \"summary\" : \"A normal example\" , \"description\" : \"A **normal** item works correctly.\" , \"value\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, }, \"converted\" : { \"summary\" : \"An example with converted data\" , \"description\" : \"FastAPI can convert price `strings` to actual `numbers` automatically\" , \"value\" : { \"name\" : \"Bar\" , \"price\" : \"35.4\" , }, }, \"invalid\" : { \"summary\" : \"Invalid data is rejected with an error\" , \"value\" : { \"name\" : \"Baz\" , \"price\" : \"thirty five point four\" , }, }, }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results \u6587\u6863\u4e2d\u7684\u591a\u4e2a\u793a\u4f8b \u00b6 Body() \u4e2d\u5305\u542b examples \u65f6\uff0c\u5728\u6587\u6863 /docs \u4e2d\u7684\u663e\u793a\u5982\u4e0b\u56fe\uff1a \u6280\u672f\u7ec6\u8282 \u00b6 \u8b66\u544a \u4e0e JSON Schema \u548c OpenAPI \u76f8\u5173\u7684\u6280\u672f\u7ec6\u8282\u5f88\u591a\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7406\u89e3\u4e0a\u6587\u4e2d\u7684\u4ee3\u7801\u5c31\u5df2\u7ecf\u591f\u7528\u4e86\uff0c\u4e0b\u9762\u7684\u6280\u672f\u7ec6\u8282\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u8df3\u8fc7\u9605\u8bfb\u4e5f\u65e0\u6240\u8c13\u3002 \u5728 Pydantic \u6a21\u578b\u5185\u90e8\u6dfb\u52a0\u793a\u4f8b\u65f6\uff0c \u4f7f\u7528 schema_extra \u6216 Field(example=\"something\") \uff0c\u5c31\u53ef\u4ee5\u628a Pydantic \u6a21\u578b\u7684\u793a\u4f8b\u6dfb\u52a0\u81f3 JSON Schema \u3002 Pydantic \u6a21\u578b\u7684 JSON Schema \u5305\u542b\u5728 API \u7684 OpenAPI \u4e2d\uff0c\u5e76\u5728\u6587\u6863\u4e2d\u663e\u793a\u3002 \u5b9e\u9645\u4e0a\uff0c JSON Schema \u6807\u51c6\u4e2d\u6ca1\u6709 example \u3002\u65b0\u7248 JSON Schema \u4e2d\u5b9a\u4e49\u4e86 examples \u5b57\u6bb5\uff0c\u4f46 OpenAPI 3.0.3 \u57fa\u4e8e\u7684\u65e7\u7248 JSON Schema \u6ca1\u6709 examples \u5b57\u6bb5\u3002 \u56e0\u6b64\uff0cOpenAPI 3.0.3 \u5b9a\u4e49\u4e86\u81ea\u5df1\u7684 example \uff0c\u4f9b\u65b0\u7248 JSON Schema \u4f7f\u7528\uff08\u4f46\u5b83\u7528\u7684\u53ea\u662f example \uff0c\u4e0d\u662f examples \uff09\u3002\u540c\u6837\uff0c\uff08\u4f7f\u7528 Swagger UI \u7684\uff09API \u6587\u6863\u4e2d\u7528\u7684\u4e5f\u662f example \u3002 example \u4e0d\u662f JSON Schema \u7684\u7ec4\u4ef6\uff0c\u4f46\u5b83\u662f OpenAPI \u4e3a JSON Schema \u5b9a\u5236\u7684\u7ec4\u4ef6\uff0c\u56e0\u6b64\uff0c\u6587\u6863\u4e2d\u4f7f\u7528 example \u3002 \u4f46\u5728\uff08 Query() \u3001 Body() \u7b49\uff09\u5176\u4ed6\u5de5\u5177\u4e2d\u4f7f\u7528 example \u6216 examples \u65f6\uff0c\u8fd9\u4e9b\u63cf\u8ff0\u6570\u636e\u7684\u793a\u4f8b\u4e0d\u4f1a\u88ab\u6dfb\u52a0\u81f3 JSON Schema\uff08\u5305\u62ec OpenAPI \u81ea\u5df1\u7684 JSON Schema\uff09\uff0c\u800c\u662f\u88ab\u76f4\u63a5\u6dfb\u52a0\u81f3 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u91cc\uff08OpenAPI \u4f7f\u7528 JSON Schema \u5916\u90e8\u7684\u7ec4\u4ef6\uff09\u3002 \u5bf9\u4e8e Path() \u3001 Query() \u3001 Header() \u3001 Cookie() \uff0c example \u6216 examples \u88ab\u6dfb\u52a0\u81f3 OpenAPI \u5b9a\u4e49\u4e2d\u7684 Parameter Object \uff08\u89c4\u8303\uff09 \u3002 \u5bf9\u4e8e Body() \u3001 File() \u3001 Form() \uff0c example \u6216 examples \u88ab\u6dfb\u52a0\u81f3 OpenAPI \u5b9a\u4e49\u4e2d content \u5b57\u6bb5\u91cc\u7684 Request Body Object \u4e2d\u7684 Media Type Object \uff08\u89c4\u8303\uff09 \u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u65b0\u8fd1\u53d1\u5e03\u7684 OpenAPI 3.1.0 \u7248\u5df2\u7ecf\u652f\u6301\u6700\u65b0\u7684 JSON Schema\uff0c \u79fb\u9664\u4e86\u7edd\u5927\u591a\u6570 OpenAPI \u81ea\u5b9a\u4e49\u7684 JSON Schema\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248 JSON Schema \u7684\u529f\u80fd\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u7ec6\u5fae\u533a\u522b\u4e5f\u8fdb\u4e00\u6b65\u51cf\u5c11\u3002\u4f46 Swagger UI \u73b0\u5728\u8fd8\u4e0d\u652f\u6301 OpenAPI 3.1.0\uff0c\u56e0\u6b64\uff0c\u73b0\u5728\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u672c\u7ae0\u4e2d\u7684\u5f00\u53d1\u601d\u8def\u3002","title":"\u58f0\u660e\u8bf7\u6c42\u7684\u793a\u4f8b\u6570\u636e"},{"location":"tutorial/schema-extra-example/#_1","text":"FastAPI \u652f\u6301\u4e3a\u5e94\u7528\u4e2d\u7684\u6570\u636e\u58f0\u660e\u793a\u4f8b\u3002 \u4ee5\u4e0b\u662f\u51e0\u79cd\u5b9e\u73b0\u7684\u65b9\u5f0f\u3002","title":"\u58f0\u660e\u8bf7\u6c42\u7684\u793a\u4f8b\u6570\u636e"},{"location":"tutorial/schema-extra-example/#pydantic-schema_extra","text":"\u4f7f\u7528 Config \u4e0e schema_extra \u4e3a Pydantic \u6a21\u578b\u58f0\u660e example \uff0c \u8be6\u89c1 Pydantic \u6587\u6863\uff1a\u81ea\u5b9a\u4e49\u6982\u56fe \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None class Config : schema_extra = { \"example\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , } } @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8f93\u51fa\u7684 JSON Schema \u4e2d\u4f1a\u4e3a\u6a21\u578b\u6dfb\u52a0\u8fd9\u4e9b\u9644\u52a0\u4fe1\u606f\uff0c\u5e76\u663e\u793a\u5728 API \u6587\u6863\u4e2d\u3002 \u63d0\u793a \u540c\u6837\uff0c\u53ef\u4ee5\u6269\u5c55 JSON Schema\uff0c\u5e76\u6dfb\u52a0\u66f4\u591a\u81ea\u5b9a\u4e49\u4fe1\u606f\u3002 \u4f8b\u5982\uff0c\u4e3a\u524d\u7aef\u7528\u6237\u754c\u9762\u6dfb\u52a0\u5143\u6570\u636e\u7b49\u4fe1\u606f\u3002","title":"Pydantic \u7684 schema_extra"},{"location":"tutorial/schema-extra-example/#field","text":"\u5411 Pydantic \u6a21\u578b\u7684 Field() \u4f20\u9012\u53c2\u6570\uff0c\u53ef\u4ee5\u4e3a JSON Schema \u58f0\u660e\u66f4\u591a\u4fe1\u606f\u3002 \u4f7f\u7528 Field() \u4e3a\u5b57\u6bb5\u6dfb\u52a0 example \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : Union [ str , None ] = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : Union [ float , None ] = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import FastAPI from pydantic import BaseModel , Field app = FastAPI () class Item ( BaseModel ): name : str = Field ( example = \"Foo\" ) description : str | None = Field ( default = None , example = \"A very nice Item\" ) price : float = Field ( example = 35.4 ) tax : float | None = Field ( default = None , example = 3.2 ) @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item ): results = { \"item_id\" : item_id , \"item\" : item } return results \u8b66\u544a \u6ce8\u610f\uff0c\u4f20\u9012\u7684\u8fd9\u4e9b\u53c2\u6570\u4e0d\u6dfb\u52a0\u9a8c\u8bc1\uff0c\u53ea\u6dfb\u52a0\u4f9b\u6587\u6863\u4f7f\u7528\u7684\u989d\u5916\u4fe1\u606f\u3002","title":"\u66f4\u591a Field \u53c2\u6570"},{"location":"tutorial/schema-extra-example/#openapi-example-examples","text":"\u4f7f\u7528\u4ee5\u4e0b\u51fd\u6570\u65f6\uff1a Path() Query() Header() Cookie() Body() Form() File() \u8fd8\u53ef\u4ee5\u901a\u8fc7\u58f0\u660e\u6570\u636e\u7684 example \uff0c\u6216\u4e00\u7ec4 examples \u5411 OpenAPI \u6dfb\u52a0\u66f4\u591a\u4fe1\u606f\u3002","title":"OpenAPI \u4e2d\u7684 example \u4e0e examples"},{"location":"tutorial/schema-extra-example/#body-example","text":"\u4e0b\u5217\u4ee3\u7801\u5411 Body() \u4f20\u9012 example \u6570\u636e\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( item_id : int , item : Item = Body ( example = { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u5728 Body \u4e2d\u4f7f\u7528 example"},{"location":"tutorial/schema-extra-example/#_2","text":"\u4e0a\u8ff0\u793a\u4f8b\u4ee3\u7801\u5728\u6587\u6863 /docs \u4e2d\u7684\u663e\u793a\u6548\u679c\u5982\u4e0b\uff1a","title":"\u6587\u6863\u4e2d\u7684\u793a\u4f8b"},{"location":"tutorial/schema-extra-example/#body-examples","text":"\u9664\u4e86\u5355\u4e2a\u7684 example \uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 dict \u4f20\u9012 examples \uff0c\u4ee5\u6b64\u6765\u663e\u793a\u591a\u4e2a\u793a\u4f8b\uff0c\u8fd9\u4e9b\u793a\u4f8b\u4fe1\u606f\u4e5f\u4f1a\u88ab\u6dfb\u52a0\u81f3 OpenAPI \u3002 dict \u901a\u8fc7 \u952e \u8bc6\u522b\u793a\u4f8b\uff0c\u8fd9\u4e9b\u793a\u4f8b\u7684\u503c\u4e5f\u662f dict \u3002 examples \u7684 dict \u5305\u542b\u4e0b\u5217\u5185\u5bb9\uff1a summary \uff1a\u793a\u4f8b\u7b80\u8ff0\u3002 description \uff1a\u652f\u6301 Markdown \u683c\u5f0f\u7684\u8f83\u957f\u63cf\u8ff0\u3002 value \uff1a\u5b9e\u9645\u663e\u793a\u7684\u793a\u4f8b\uff0c\u53ef\u4ee5\u662f \u5b57\u5178 \u3002 externalValue \uff1a value \u7684\u5907\u9009\u9879\uff0c\u6307\u5411\u793a\u4f8b\u7684 URL\uff0c\u4f46\u53ef\u80fd\u6709\u4e9b\u5de5\u5177\u4e0d\u652f\u6301\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : Union [ str , None ] = None price : float tax : Union [ float , None ] = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item = Body ( examples = { \"normal\" : { \"summary\" : \"A normal example\" , \"description\" : \"A **normal** item works correctly.\" , \"value\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, }, \"converted\" : { \"summary\" : \"An example with converted data\" , \"description\" : \"FastAPI can convert price `strings` to actual `numbers` automatically\" , \"value\" : { \"name\" : \"Bar\" , \"price\" : \"35.4\" , }, }, \"invalid\" : { \"summary\" : \"Invalid data is rejected with an error\" , \"value\" : { \"name\" : \"Baz\" , \"price\" : \"thirty five point four\" , }, }, }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results from fastapi import Body , FastAPI from pydantic import BaseModel app = FastAPI () class Item ( BaseModel ): name : str description : str | None = None price : float tax : float | None = None @app . put ( \"/items/ {item_id} \" ) async def update_item ( * , item_id : int , item : Item = Body ( examples = { \"normal\" : { \"summary\" : \"A normal example\" , \"description\" : \"A **normal** item works correctly.\" , \"value\" : { \"name\" : \"Foo\" , \"description\" : \"A very nice Item\" , \"price\" : 35.4 , \"tax\" : 3.2 , }, }, \"converted\" : { \"summary\" : \"An example with converted data\" , \"description\" : \"FastAPI can convert price `strings` to actual `numbers` automatically\" , \"value\" : { \"name\" : \"Bar\" , \"price\" : \"35.4\" , }, }, \"invalid\" : { \"summary\" : \"Invalid data is rejected with an error\" , \"value\" : { \"name\" : \"Baz\" , \"price\" : \"thirty five point four\" , }, }, }, ), ): results = { \"item_id\" : item_id , \"item\" : item } return results","title":"\u5728Body \u4e2d\u4f7f\u7528 examples"},{"location":"tutorial/schema-extra-example/#_3","text":"Body() \u4e2d\u5305\u542b examples \u65f6\uff0c\u5728\u6587\u6863 /docs \u4e2d\u7684\u663e\u793a\u5982\u4e0b\u56fe\uff1a","title":"\u6587\u6863\u4e2d\u7684\u591a\u4e2a\u793a\u4f8b"},{"location":"tutorial/schema-extra-example/#_4","text":"\u8b66\u544a \u4e0e JSON Schema \u548c OpenAPI \u76f8\u5173\u7684\u6280\u672f\u7ec6\u8282\u5f88\u591a\u3002 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u7406\u89e3\u4e0a\u6587\u4e2d\u7684\u4ee3\u7801\u5c31\u5df2\u7ecf\u591f\u7528\u4e86\uff0c\u4e0b\u9762\u7684\u6280\u672f\u7ec6\u8282\u4e0d\u662f\u5fc5\u987b\u7684\uff0c\u8df3\u8fc7\u9605\u8bfb\u4e5f\u65e0\u6240\u8c13\u3002 \u5728 Pydantic \u6a21\u578b\u5185\u90e8\u6dfb\u52a0\u793a\u4f8b\u65f6\uff0c \u4f7f\u7528 schema_extra \u6216 Field(example=\"something\") \uff0c\u5c31\u53ef\u4ee5\u628a Pydantic \u6a21\u578b\u7684\u793a\u4f8b\u6dfb\u52a0\u81f3 JSON Schema \u3002 Pydantic \u6a21\u578b\u7684 JSON Schema \u5305\u542b\u5728 API \u7684 OpenAPI \u4e2d\uff0c\u5e76\u5728\u6587\u6863\u4e2d\u663e\u793a\u3002 \u5b9e\u9645\u4e0a\uff0c JSON Schema \u6807\u51c6\u4e2d\u6ca1\u6709 example \u3002\u65b0\u7248 JSON Schema \u4e2d\u5b9a\u4e49\u4e86 examples \u5b57\u6bb5\uff0c\u4f46 OpenAPI 3.0.3 \u57fa\u4e8e\u7684\u65e7\u7248 JSON Schema \u6ca1\u6709 examples \u5b57\u6bb5\u3002 \u56e0\u6b64\uff0cOpenAPI 3.0.3 \u5b9a\u4e49\u4e86\u81ea\u5df1\u7684 example \uff0c\u4f9b\u65b0\u7248 JSON Schema \u4f7f\u7528\uff08\u4f46\u5b83\u7528\u7684\u53ea\u662f example \uff0c\u4e0d\u662f examples \uff09\u3002\u540c\u6837\uff0c\uff08\u4f7f\u7528 Swagger UI \u7684\uff09API \u6587\u6863\u4e2d\u7528\u7684\u4e5f\u662f example \u3002 example \u4e0d\u662f JSON Schema \u7684\u7ec4\u4ef6\uff0c\u4f46\u5b83\u662f OpenAPI \u4e3a JSON Schema \u5b9a\u5236\u7684\u7ec4\u4ef6\uff0c\u56e0\u6b64\uff0c\u6587\u6863\u4e2d\u4f7f\u7528 example \u3002 \u4f46\u5728\uff08 Query() \u3001 Body() \u7b49\uff09\u5176\u4ed6\u5de5\u5177\u4e2d\u4f7f\u7528 example \u6216 examples \u65f6\uff0c\u8fd9\u4e9b\u63cf\u8ff0\u6570\u636e\u7684\u793a\u4f8b\u4e0d\u4f1a\u88ab\u6dfb\u52a0\u81f3 JSON Schema\uff08\u5305\u62ec OpenAPI \u81ea\u5df1\u7684 JSON Schema\uff09\uff0c\u800c\u662f\u88ab\u76f4\u63a5\u6dfb\u52a0\u81f3 OpenAPI \u7684 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u91cc\uff08OpenAPI \u4f7f\u7528 JSON Schema \u5916\u90e8\u7684\u7ec4\u4ef6\uff09\u3002 \u5bf9\u4e8e Path() \u3001 Query() \u3001 Header() \u3001 Cookie() \uff0c example \u6216 examples \u88ab\u6dfb\u52a0\u81f3 OpenAPI \u5b9a\u4e49\u4e2d\u7684 Parameter Object \uff08\u89c4\u8303\uff09 \u3002 \u5bf9\u4e8e Body() \u3001 File() \u3001 Form() \uff0c example \u6216 examples \u88ab\u6dfb\u52a0\u81f3 OpenAPI \u5b9a\u4e49\u4e2d content \u5b57\u6bb5\u91cc\u7684 Request Body Object \u4e2d\u7684 Media Type Object \uff08\u89c4\u8303\uff09 \u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u65b0\u8fd1\u53d1\u5e03\u7684 OpenAPI 3.1.0 \u7248\u5df2\u7ecf\u652f\u6301\u6700\u65b0\u7684 JSON Schema\uff0c \u79fb\u9664\u4e86\u7edd\u5927\u591a\u6570 OpenAPI \u81ea\u5b9a\u4e49\u7684 JSON Schema\uff0c\u4ece\u800c\u53ef\u4ee5\u4f7f\u7528\u65b0\u7248 JSON Schema \u7684\u529f\u80fd\uff0c\u5b83\u4eec\u4e4b\u95f4\u7684\u7ec6\u5fae\u533a\u522b\u4e5f\u8fdb\u4e00\u6b65\u51cf\u5c11\u3002\u4f46 Swagger UI \u73b0\u5728\u8fd8\u4e0d\u652f\u6301 OpenAPI 3.1.0\uff0c\u56e0\u6b64\uff0c\u73b0\u5728\u6700\u597d\u8fd8\u662f\u4f7f\u7528\u672c\u7ae0\u4e2d\u7684\u5f00\u53d1\u601d\u8def\u3002","title":"\u6280\u672f\u7ec6\u8282"},{"location":"tutorial/sql-databases/","text":"SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u00b6 FastAPI \u4e0d\u5f3a\u5236\u4f7f\u7528\u67d0\u4e2a SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 \u4f46\u652f\u6301\u591a\u79cd\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQLAlchemy \u63a7\u5236\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 SQLAlchemy \u53ef\u4ee5\u8ba9 FastAPI \u63a7\u5236\u4ee5\u4e0b\u6570\u636e\u5e93\uff1a PostgreSQL MySQL SQLite Oracle Microsoft SQL Server \u7b49 \u672c\u7ae0\u793a\u4f8b\u4f7f\u7528 SQLite \uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u5355\u4e2a\u6587\u4ef6\uff0c\u800c\u4e14 Python \u76f4\u63a5\u96c6\u6210\u4e86 SQLite\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u590d\u5236\u8fd9\u4e2a\u793a\u4f8b\uff0c\u5e76\u6309\u539f\u6837\u8fd0\u884c\u3002 \u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528 PostgreSQL \u7b49\u6570\u636e\u5e93\u670d\u52a1\u5668\u3002 \u63d0\u793a FastAPI \u5b98\u65b9\u57fa\u4e8e Docker \u5bb9\u5668\uff0c\u63d0\u4f9b\u4e86\u4f7f\u7528 FastAPI \u3001 PostgreSQL \u53ca\u524d\u7aef\u5de5\u5177\u7684\u6a21\u677f\u9879\u76ee\uff0c\u8be6\u89c1\uff1a https://github.com/tiangolo/full-stack-fastapi-postgresql \u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u7ae0\u4e2d\u5927\u591a\u6570 SQLAlchemy \u6807\u51c6\u4ee3\u7801\u53ef\u4ee5\u5728\u4efb\u4f55\u6846\u67b6\u4e2d\u4f7f\u7528\u3002 \u4e13\u7528\u4e8e FastAPI \u7684\u4ee3\u7801\u5f88\u5c11\u3002 ORMs \u00b6 FastAPI \u4f7f\u7528\u5404\u79cd\u6570\u636e\u5e93\u548c\u5404\u79cd\u98ce\u683c\u7684\u652f\u6301\u5e93\u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u5bf9\u8bdd\u3002 \u5e38\u7528\u7684\u6a21\u5f0f\u662f ORM \uff1a\u5373 Object-Relational Mapping\uff08\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff09\u652f\u6301\u5e93\u3002 ORM \u662f\u8f6c\u6362\uff08 \u6620\u5c04 \uff09\u4ee3\u7801\u4e2d\u7684 \u5bf9\u8c61 \u548c\u6570\u636e\u5e93\u8868\uff08 \u5173\u7cfb \uff09\u7684\u5de5\u5177\u3002 \u4f7f\u7528 ORM\uff0c\u901a\u5e38\u8981\u521b\u5efa\u8868\u793a SQL \u6570\u636e\u5e93\u8868\u7684\u7c7b\uff0c\u7c7b\u7684\u5c5e\u6027\u8868\u793a\u5217\uff0c\u5305\u542b\u5217\u540d\u548c\u6570\u636e\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u7c7b Pet \u8868\u793a SQL \u8868 pets \u3002 \u6bcf\u4e2a \u7c7b\u5b9e\u4f8b \u5bf9\u8c61\u8868\u793a\u6570\u636e\u8868\u4e2d\u7684\u4e00\u884c\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u5bf9\u8c61 orion_cat \uff08 Pet \u7684\u5b9e\u4f8b\uff09\u53ef\u4ee5\u5305\u542b\u5c5e\u6027 orion_cat.type \uff0c\u8868\u793a\u5217 type \uff0c\u8be5\u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u662f \"cat\" \u3002 ORM \u8fd8\u63d0\u4f9b\u4e86\u521b\u5efa\u8fde\u63a5\u8868\u4e0e\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u5de5\u5177\u3002 \u8fd9\u6837\uff0c orion_cat \u5bf9\u8c61\u4e2d\u5c31\u53ef\u4ee5\u5305\u542b\u5c5e\u6027 orion_cat.owner \uff0c\u5c5e\u6027 owner \u8868\u793a\u5ba0\u7269\u4e3b\u4eba\u7684\u6570\u636e\uff0c\u53d6\u81ea\u8868 owners \u3002 \u56e0\u6b64\uff0c orion_cat.owner.name \u662f\u5ba0\u7269\u4e3b\u4eba\u7684\u540d\u5b57\uff08\u6765\u81ea owners \u8868\u4e2d\u7684 name \u5217\uff09\u3002 \u5b83\u7684\u503c\u662f \"Arquilian\" \u3002 \u4ece\u5ba0\u7269\u5bf9\u8c61\u8bbf\u95ee\u5bf9\u5e94\u7684\u8868 owners \u65f6\uff0cORM \u4f1a\u5b8c\u6210\u6240\u6709\u83b7\u53d6\u4fe1\u606f\u7684\u5de5\u4f5c\u3002 \u5e38\u7528\u7684 ORM \u5305\u62ec\uff1aDjango-ORM\uff08Django \u7ec4\u4ef6\uff09\u3001SQLAlchemy ORM\uff08SQLAlchemy \u7ec4\u4ef6\uff0c\u72ec\u7acb\u7684\u652f\u6301\u5e93\uff09\u548c Peewee\uff08\u72ec\u7acb\u7684\u652f\u6301\u5e93\uff09\u7b49\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQLAlchemy ORM \u3002 \u5176\u4ed6 ORM \u7684\u4f7f\u7528\u65b9\u5f0f\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u63d0\u793a \u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u6709\u4e00\u7ae0\u4e13\u95e8\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Peewee\u3002 \u6587\u4ef6\u67b6\u6784 \u00b6 \u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u5047\u8bbe\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e3a my_super_project \uff0c\u5176\u4e2d\u5305\u542b sql_app \u7b49\u5b50\u6587\u4ef6\u5939\uff0c\u67b6\u6784\u5982\u4e0b\uff1a . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u2514\u2500\u2500 schemas.py __init__.py \u662f\u7a7a\u6587\u4ef6\uff0c\u7528\u4e8e\u8ba9 Python \u8bc6\u522b\u51fa sql_app \u4e0e\u6587\u4ef6\u5939\u5185\u7684\u6240\u6709\u6a21\u5757\uff08Python \u6587\u4ef6\uff09\u662f\u5305\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u6bcf\u4e00\u4e2a\u6587\u4ef6/\u6a21\u5757\u3002 \u5b89\u88c5 SQLAlchemy \u00b6 \u9996\u5148\uff0c\u9700\u8981\u5b89\u88c5 SQLAlchemy \uff1a $ pip install sqlalchemy ---> 100% \u521b\u5efa SQLAlchemy \u7ec4\u4ef6 \u00b6 \u4f7f\u7528\u7684\u6587\u4ef6\u662f sql_app/database.py \u3002 \u5bfc\u5165 SQLAlchemy \u7ec4\u4ef6 \u00b6 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \u4e3a SQLAlchemy \u521b\u5efa\u6570\u636e\u5e93 URL \u00b6 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \u672c\u4f8b\u4e2d\uff0c \u8fde\u63a5 \u7684\u662f SQLite \u6570\u636e\u5e93\uff08\u6253\u5f00 SQLite \u6570\u636e\u5e93\u6587\u4ef6\uff09\u3002 \u8be5\u6570\u636e\u5e93\u5b58\u50a8\u5728\u4e0e\u5176\u4ed6\u6587\u4ef6\u540c\u4e00\u6587\u4ef6\u5939\u7684 sql_app.db \u91cc\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 URL \u4ee5 ./sql_app.db \u7ed3\u5c3e\u3002 \u4f7f\u7528 PostgreSQL \u6570\u636e\u5e93\u65f6\uff0c\u53ea\u9700\u53d6\u6d88\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u7684\u6ce8\u91ca\uff1a SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" \u2026\u2026\u5e76\u6839\u636e\u6570\u636e\u5e93\u7684\u6570\u636e\u548c\u8bc1\u4e66\u8fdb\u884c\u8c03\u6574\uff08 \u4e5f\u9002\u7528\u4e8e MySQL\u3001MariaDB \u7b49\u6570\u636e\u5e93\uff09\u3002 \u63d0\u793a \u4f7f\u7528\u5176\u4ed6\u6570\u636e\u5e93\u65f6\u5fc5\u987b\u4fee\u6539\u8fd9\u884c\u4ee3\u7801\u3002 \u521b\u5efa SQLAlchemy \u7684 engine \u00b6 \u9996\u5148\uff0c\u521b\u5efa SQLAlchemy \u7684 \u5f15\u64ce \u3002 \u7a0d\u540e\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a engine \u3002 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \u6ce8\u610f \u00b6 \u53c2\u6570\uff1a connect_args = { \"check_same_thread\" : False } \u2026\u2026\u53ea\u7528\u4e8e SQLite\uff0c\u5176\u4ed6\u6570\u636e\u5e93\u4e0d\u9700\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQLite \u53ea\u80fd\u4e0e\u4e00\u4e2a\u7ebf\u7a0b\u901a\u4fe1\uff0c\u5373\u6bcf\u4e2a\u7ebf\u7a0b\u53ea\u5904\u7406\u4e00\u4e2a\u72ec\u7acb\u7684\u8bf7\u6c42\u3002 \u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u610f\u5916\u4e3a\u4e0d\u540c\u64cd\u4f5c\uff08\u9488\u5bf9\u4e0d\u540c\u7684\u8bf7\u6c42\uff09\u5171\u4eab\u76f8\u540c\u7684\u8fde\u63a5\u3002 \u4f46\u5728 FastAPI \u4e2d\uff0c\u4f7f\u7528\u666e\u901a\u51fd\u6570\uff08 def \uff09\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\u4e3a\u4e86\u76f8\u540c\u8bf7\u6c42\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 connect_args={\"check_same_thread\": False} \u8ba9 SQLite \u652f\u6301\u591a\u7ebf\u7a0b\u3002 \u6b64\u5916\uff0c\u8981\u786e\u4fdd\u6bcf\u4e2a\u8bf7\u6c42\u5728\u4f9d\u8d56\u9879\u4e2d\u83b7\u5f97\u81ea\u5df1\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4f1a\u8bdd\uff0c\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u9ed8\u8ba4\u673a\u5236\u3002 \u521b\u5efa SessionLocal \u7c7b \u00b6 SessionLocal \u7684\u7c7b\u5b9e\u4f8b\u662f\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u4f46\u5b83\u672c\u8eab\u4e0d\u662f\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u4e00\u65e6\u521b\u5efa\u4e86 SessionLocal \u7684\u7c7b\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u5c31\u662f\u5b9e\u9645\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u547d\u540d\u4e3a SessionLocal \u662f\u4e3a\u4e86\u533a\u522b\u4ece SQLAlchemy \u5bfc\u5165\u7684 Session \u3002 \u7a0d\u540e\uff0c\u518d\u4f7f\u7528\uff08\u4ece SQLAlchemy \u5bfc\u5165\u7684\uff09 Session \u3002 \u4f7f\u7528\u51fd\u6570 sessionmaker \u521b\u5efa SessionLocal \u7c7b\uff1a from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \u521b\u5efa Base \u7c7b \u00b6 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u8fd4\u56de\u7c7b\u7684\u51fd\u6570 declarative_base() \u3002 \u521b\u5efa\u7ee7\u627f\u81ea\u8be5\u7c7b\u7684\u6570\u636e\u5e93\u6a21\u578b\u6216\u7c7b\uff08ORM\u6a21\u578b\uff09\uff1a from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \u521b\u5efa\u6570\u636e\u5e93\u6a21\u578b \u00b6 \u8fd9\u91cc\u7528\u7684\u662f sql_app/models.py \u3002 \u4ece Base \u7c7b\u521b\u5efa SQLAlchemy \u6a21\u578b \u00b6 \u4f7f\u7528 Base \u7c7b\u521b\u5efa SQLAlchemy \u6a21\u578b\u3002 \u63d0\u793a SQLAlchemy \u4f7f\u7528\u672f\u8bed \u6a21\u578b \u8868\u793a\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u7c7b\u548c\u5b9e\u4f8b\u3002 \u4f46\u662f Pydantic \u4e5f\u4f7f\u7528\u672f\u8bed \u6a21\u578b \u8868\u793a\u6982\u56fe\uff0c\u5373\u6570\u636e\u9a8c\u8bc1\u3001\u8f6c\u6362\u4ee5\u53ca\u6587\u6863\u7c7b\u548c\u5b9e\u4f8b\u3002 \u4ece database \uff08 database.py \uff09 \u5bfc\u5165 Base \u3002 \u521b\u5efa\u4ece\u5b83\u7ee7\u627f\u7684\u7c7b\u3002 \u8fd9\u4e9b\u7c7b\u5c31\u662f SQLAlchemy \u6a21\u578b\u3002 from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) __tablename__ \u5c5e\u6027\u662f SQLAlchemy \u5728\u6570\u636e\u5e93\u4e2d\u6a21\u578b\u7684\u8868\u540d\u3002 \u521b\u5efa\u6a21\u578b\u5c5e\u6027/\u5217 \u00b6 \u521b\u5efa\u6a21\u578b\u7684\uff08\u7c7b\uff09\u5c5e\u6027\u3002 \u6bcf\u4e2a\u5c5e\u6027\u90fd\u8868\u793a\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u4e2d\u7684\u4e00\u5217\u3002 \u4f7f\u7528 SQLAlchemy \u4e2d\u7684 Column \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u5e76\u4e14\uff0c\u4ee5 Integer \u3001 String \u3001 Boolean \u7b49\u53c2\u6570\u4f20\u9012 SQLAlchemy \u7684\u7c7b type \uff0c\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u3002 from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) \u521b\u5efa\u5173\u7cfb \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5173\u7cfb\u3002 \u4e3a\u6b64\uff0c\u8981\u4f7f\u7528 SQLAlchemy ORM \u7684 relationship \u3002 \u8fd9\u662f\u4e00\u4e2a\u5f88 \u9b54\u6027 \u7684\u5c5e\u6027\uff0c\u80fd\u591f\u5305\u542b\u76f8\u5173\u8868\u7684\u503c\u3002 from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) \u8bbf\u95ee User \u7684 items \u5c5e\u6027\u65f6\uff0c\u6bd4\u5982 my_user.items \uff0c\u5b83\u4f1a\u5305\u542b SQLAlchemy \u6a21\u578b Item \u7684\u5217\u8868\uff08\u6765\u81ea items \u8868\uff09\uff0c\u8fd9\u4e9b\u6a21\u578b\u4e2d\u5305\u542b\u6307\u5411 users \u8868\u4e2d\u8fd9\u6761\u8bb0\u5f55\u7684\u5916\u952e\u3002 \u8bbf\u95ee my_user.items \uff0c SQLAlchemy \u5b9e\u9645\u4e0a\u4f1a\u4ece\u6570\u636e\u5e93 items \u8868\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u4eec\u586b\u5145\u5230\u8fd9\u91cc\u3002 \u8bbf\u95ee Item \u4e2d\u7684 owner \u5c5e\u6027\u65f6\uff0c\u5305\u542b users \u8868\u4e2d\u7684 SQLAlchemy \u6a21\u578b User \u3002\u4f7f\u7528 owner_id \u5c5e\u6027/\u5217\u4f5c\u4e3a\u5916\u952e\uff0c\u4ee5\u4fbf\u4ece users \u8868\u63d0\u53d6\u6570\u636e\u3002 \u521b\u5efa Pydantic \u6a21\u578b \u00b6 \u63a5\u4e0b\u6765\u662f sql_app/schemas.py \u3002 \u63d0\u793a \u4e3a\u4e86\u907f\u514d SQLAlchemy \u6a21\u578b \u548c Pydantic \u6a21\u578b \u4e4b\u95f4\u7684\u6df7\u6dc6\uff0c\u5728\u6b64\uff0c\u4f7f\u7528 models.py \u8868\u793a SQLAlchemy \u6a21\u578b\uff0c\u4f7f\u7528 schemas.py \u8868\u793a Pydantic \u6a21\u578b\u3002 Pydantic \u6a21\u578b\u81f3\u5c11\u8981\u5b9a\u4e49\u4e00\u4e2a \u6982\u56fe \uff08\u6709\u6548\u7684\u6570\u636e\u5f62\u72b6\uff09\u3002 \u8fd9\u6837\u505a\uff0c\u53ef\u4ee5\u907f\u514d\u6df7\u6dc6\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002 \u521b\u5efa\u521d\u59cb Pydantic \u6a21\u578b /\u6982\u56fe \u00b6 \u521b\u5efa\u4e24\u4e2a Pydantic \u6a21\u578b \uff08 \u6982\u56fe \uff09\uff0c ItemBase \u548c UserBase \uff0c\u5e76\u5b9a\u4e49\u521b\u5efa\u6216\u8bfb\u53d6\u6570\u636e\u65f6\u7684\u5171\u7528\u5c5e\u6027\u3002 \u7136\u540e\uff0c\u521b\u5efa ItemCreate \u548c UserCreate \uff0c\u4ece\u4e24\u4e2a\u57fa\u7c7b\u7ee7\u627f\uff08\u8fd9\u6837\u4e24\u4e2a Create \u7c7b\u5c31\u62e5\u6709\u76f8\u540c\u7684\u5c5e\u6027\uff09\uff0c\u518d\u52a0\u4e0a\u521b\u5efa\u5bf9\u8c61\u6240\u9700\u7684\u5176\u4ed6\u6570\u636e\uff08\u5c5e\u6027\uff09\u3002 \u56e0\u6b64\uff0c\u5728\u521b\u5efa\u7528\u6237\u65f6\u4e5f\u4f1a\u5305\u542b \u5bc6\u7801 \u3002 \u4f46\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c password \u4e0d\u80fd\u5728\u5176\u4ed6 Pydantic \u6982\u56fe \u4e2d\uff0c\u4f8b\u5982\uff0c\u8bfb\u53d6\u7528\u6237\u65f6\uff0c\u4e0d\u8981\u8ba9 API \u53d1\u9001\u5bc6\u7801\u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True SQLAlchemy \u98ce\u683c\u548c Pydantic \u98ce\u683c \u00b6 \u6ce8\u610f\uff0cSQLAlchemy \u6a21\u578b \u4f7f\u7528 = \u5b9a\u4e49\u5c5e\u6027\uff0c\u5e76\u628a\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 Column \uff0c\u5982\uff1a name = Column ( String ) \u800c Pydantic \u6a21\u578b \u4f7f\u7528 : \u58f0\u660e\u7c7b\u578b\uff0c\u5373\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u8bed\u6cd5/\u7c7b\u578b\u63d0\u793a\uff1a name : str \u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u8fd9\u6837\u5728\u628a = \u4e0e : \u548c\u5b83\u4eec\u4e00\u8d77\u4f7f\u7528\u65f6\u5c31\u4e0d\u4f1a\u6df7\u6dc6\u4e86\u3002 \u4e3a\u8bfb\u53d6/\u8fd4\u56de\u6570\u636e\u521b\u5efa Pydantic \u6a21\u578b /\u6982\u56fe \u00b6 \u73b0\u5728\uff0c\u521b\u5efa Pydantic \u6a21\u578b \uff08\u6982\u56fe\uff09\uff0c\u7528\u4e8e\u5728\u8bfb\u53d6\u6570\u636e\u548c\u4ece API \u8fd4\u56de\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u521b\u5efa item \u524d\uff0c\u4e0d\u77e5\u9053\u5206\u914d\u7ed9\u5b83\u7684 ID \u662f\u4ec0\u4e48\uff0c\u4f46\u8bfb\u53d6 item \u65f6\uff08\u4ece API \u8fd4\u56de item \u65f6\uff09\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86 item \u7684 ID\u3002 \u540c\u6837\uff0c\u5728\u8bfb\u53d6\u7528\u6237\u65f6\uff0c\u53ef\u4ee5\u65ad\u8a00 items \u8981\u5305\u542b\u5c5e\u4e8e\u8be5\u7528\u6237\u7684 items\u3002 \u4e0d\u4ec5\u662f\u8fd9\u4e9b items \u7684 ID\uff0c\u8fd8\u6709\u5728 Pydantic \u6a21\u578b \u4e2d\u5b9a\u4e49\u7684\u7528\u4e8e\u8bfb\u53d6 items \u7684\u6240\u6709\u6570\u636e\uff1a Item \u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True \u63d0\u793a \u6ce8\u610f User \uff0c\u8bfb\u53d6\u7528\u6237\uff08\u4ece API \u8fd4\u56de\u7528\u6237\uff09\u7684 Pydantic \u6982\u56fe \u4e0d\u5305\u542b\u5bc6\u7801\u3002 \u4f7f\u7528 Pydantic \u7684 orm_mode \u00b6 \u73b0\u5728\uff0c\u5728\u8bfb\u53d6 Pydantic \u6982\u56fe \u7684 Item \u548c User \u4e2d\uff0c\u6dfb\u52a0 Config \u5185\u90e8\u7c7b\u3002 Config \u7c7b\u7528\u4e8e\u914d\u7f6e Pydantic\u3002 \u5728 Config \u7c7b\u4e2d, \u8bbe\u7f6e\u5c5e\u6027 orm_mode = True \u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True \u63d0\u793a \u6ce8\u610f orm_mode \u7528 = \u8d4b\u503c\uff0c\u4f8b\u5982\uff1a orm_mode = True \u4e0e\u7c7b\u578b\u58f0\u660e\u4f7f\u7528 : \u4e0d\u540c \u3002 \u8fd9\u91cc\u662f\u8bbe\u7f6e\u914d\u7f6e\u503c\uff0c\u4e0d\u662f\u58f0\u660e\u7c7b\u578b\u3002 Pydantic \u7684 orm_mode \u544a\u8bc9 Pydantic \u6982\u56fe \u8bfb\u53d6\u6570\u636e\uff0c\u5373\u4f7f\u5b83\u4e0d\u662f \u5b57\u5178 \uff0c\u800c\u662f ORM \u6a21\u578b\uff08\u6216\u5176\u4ed6\u5177\u6709\u5c5e\u6027\u7684\u5bf9\u8c61\uff09\u3002 \u8fd9\u6837\uff0c\u5c31\u4e0d\u518d\u53ea\u662f\u4ece dict \u4e2d\u83b7\u53d6 id \u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a id = data [ \"id\" ] \u8fd8\u4f1a\u4ece\u5c5e\u6027\u4e2d\u83b7\u53d6 id \u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a id = data . id \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0cPydantic \u6a21\u578b \u4e0e ORM \u517c\u5bb9\uff0c\u53ea\u9700\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684 response_model \u53c2\u6570\u4e2d\u8fdb\u884c\u58f0\u660e\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u6570\u636e\u5e93\u6a21\u578b\uff0c\u5e76\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u3002 ORM \u6a21\u5f0f\u7684\u6280\u672f\u7ec6\u8282 \u00b6 SQLAlchemy \u548c\u5176\u4ed6\u8bb8\u591a\u5de5\u5177\u9ed8\u8ba4\u662f \u61d2\u52a0\u8f7d \u7684\u3002 \u5373\uff0c\u4e0d\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u5173\u7cfb\u6570\u636e\uff0c\u76f4\u5230\u8981\u8bbf\u95ee\u5305\u542b\u8be5\u6570\u636e\u7684\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u8bbf\u95ee\u5c5e\u6027 items \uff1a current_user . items \u5c06\u4f7f SQLAlchemy \u8bbf\u95ee items \u8868\u5e76\u4e3a\u8fd9\u4e2a\u7528\u6237\u83b7\u53d6 items\uff0c\u4f46\u4e0d\u662f\u5728\u6b64\u4e4b\u524d\u3002 \u6ca1\u6709 orm_mode \uff0c\u4ece \u8def\u5f84\u64cd\u4f5c \u8fd4\u56de\u7684 SQLAlchemy \u6a21\u578b\u4e0d\u5305\u542b\u5173\u7cfb\u6570\u636e\u3002 \u5373\u4f7f Pydantic \u6a21\u578b\u4e2d\u58f0\u660e\u4e86\u8fd9\u4e9b\u5173\u7cfb\u3002 \u4f46\u5728 ORM \u6a21\u5f0f\u4e0b\uff0c\u7531\u4e8e Pydantic \u8981\u4ece\u5c5e\u6027\uff08\u800c\u4e0d\u662f\u5047\u8bbe\u7684 dict \uff09\u4e2d\u8bbf\u95ee\u6240\u9700\u6570\u636e\uff0c\u53ef\u4ee5\u58f0\u660e\u8981\u8fd4\u56de\u7684\u7279\u5b9a\u6570\u636e\uff0cPydantic \u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 ORM \u4e2d\u83b7\u53d6\u6570\u636e\u3002 CRUD \u5de5\u5177 \u00b6 \u63a5\u4e0b\u6765\u662f sql_app/crud.py \u3002 \u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4f7f\u7528\u53ef\u590d\u7528\u7684\u51fd\u6570\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u4ea4\u4e92\u3002 CRUD \uff1a C reate\u3001 R ead\u3001 U pdate\u3001 D elete\u3002 \u2026\u2026\u672c\u4f8b\u53ea\u6d89\u53ca \u521b\u5efa \uff08create\uff09\u548c \u8bfb\u53d6 \uff08read\uff09\u6570\u636e\u3002 \u8bfb\u53d6\u6570\u636e \u00b6 \u4ece sqlalchemy.orm \u4e2d\u5bfc\u5165 Session \uff0c\u58f0\u660e db \u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e76\u5728\u51fd\u6570\u4e2d\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u548c\u81ea\u52a8\u8865\u5168\u3002 \u5bfc\u5165 models \uff08SQLAlchemy \u6a21\u578b\uff09\u548c schemas \uff08Pydantic \u6a21\u578b /\u6982\u56fe\uff09\u3002 \u521b\u5efa\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\u7684\u5de5\u5177\u51fd\u6570\uff1a \u901a\u8fc7 ID \u548c\u7535\u5b50\u90ae\u4ef6\u8bfb\u53d6\u5355\u4e2a\u7528\u6237\u3002 \u8bfb\u53d6\u591a\u4e2a\u7528\u6237\u3002 \u8bfb\u53d6\u591a\u4e2a\u6761\u76ee\u3002 from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \u63d0\u793a \u521b\u5efa\u72ec\u7acb\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u53ea\u7528\u4e8e\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff08\u83b7\u53d6\u7528\u6237\u6216\u9879\u76ee\uff09\u7684\u51fd\u6570\uff0c\u65b9\u4fbf\u5728\u5176\u4ed6\u90e8\u5206\u590d\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u4ee5\u53ca\u8fdb\u884c \u5355\u5143\u6d4b\u8bd5 \u3002 \u521b\u5efa\u6570\u636e \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5de5\u5177\u51fd\u6570\u6765\u521b\u5efa\u6570\u636e\u3002 \u6b65\u9aa4\u662f\uff1a \u4f7f\u7528\u6570\u636e\u521b\u5efa SQLAlchemy \u6a21\u578b \u5b9e\u4f8b \u3002 add \u5b9e\u4f8b\u5bf9\u8c61\u5230\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 commit \u66f4\u6539\u5230\u6570\u636e\u5e93\uff08\u4fdd\u5b58\u6570\u636e\uff09\u3002 refresh \u5b9e\u4f8b\uff08\u5305\u542b\u6765\u81ea\u6570\u636e\u5e93\u7684\u4efb\u4f55\u65b0\u6570\u636e\uff0c\u5982\uff0c\u751f\u6210\u7684 ID\uff09\u3002 from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \u63d0\u793a SQLAlchemy \u7684\u6a21\u578b User \u4e2d\u5305\u542b hashed_password \uff0c\u56e0\u6b64\u5e94\u8be5\u5305\u542b\u54c8\u5e0c\u5bc6\u7801\u3002 \u4f46\u662f\u7531\u4e8e API \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684\u662f\u539f\u59cb\u5bc6\u7801\uff0c\u6240\u4ee5\u9700\u8981\u5148\u4f7f\u7528\u539f\u59cb\u5bc6\u7801\u751f\u6210\u54c8\u5e0c\u5bc6\u7801\u3002 \u7136\u540e\uff0c\u628a\u503c\u4f20\u9012\u7ed9 hashed_password \u53c2\u6570\uff0c\u5e76\u4fdd\u5b58\u3002 \u8b66\u544a \u6b64\u793a\u4f8b\u4e0d\u5b89\u5168\uff0c\u5bc6\u7801\u5e76\u6ca1\u6709\u54c8\u5e0c\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u8981\u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\uff0c\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\u3002 \u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605\u672c\u6559\u7a0b\u4e2d\u7684 \u5b89\u5168 \u76f8\u5173\u7684\u5185\u5bb9\u3002 \u8fd9\u91cc\u5173\u6ce8\u7684\u53ea\u662f\u6570\u636e\u5e93\u7684\u5de5\u5177\u548c\u673a\u5236\u3002 \u63d0\u793a \u4e0d\u5fc5\u4ece Pydantic \u6a21\u578b \u4e2d\u8bfb\u53d6\u6bcf\u4e2a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9 Item \uff0c\u800c\u662f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u751f\u6210\u5e26\u6709 Pydantic \u6a21\u578b \u7684\u6570\u636e\u7684 dict \uff1a item.dict() \u7136\u540e\uff0c\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u5f62\u5f0f\u628a dict \u7684\u952e\u503c\u5bf9\u4f20\u9012\u7ed9 SQLAlchemy \u7684 Item \uff1a Item(**item.dict()) \u7136\u540e\uff0c\u4f20\u9012 Pydantic \u6a21\u578b \u4e0d\u63d0\u4f9b\u7684\u989d\u5916\u5173\u952e\u5b57\u53c2\u6570 owner_id : Item(**item.dict(), owner_id=user_id) FastAPI \u7684\u4e3b\u5e94\u7528 \u00b6 \u5728 sql_app/main.py \u4e2d\uff0c\u96c6\u6210\u548c\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684\u7ec4\u4ef6\u3002 \u521b\u5efa\u6570\u636e\u5e93\u8868 \u00b6 \u521b\u5efa\u6570\u636e\u5e93\u8868\u975e\u5e38\u7b80\u5355\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items Alembic \u6ce8\u610f\u4e8b\u9879 \u00b6 \u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 Alembic \u521d\u59cb\u5316\u6570\u636e\u5e93\uff08\u521b\u5efa\u8868\u7b49\uff09\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528 Alembic \u8fc1\u79fb \u6570\u636e\u5e93\uff08Alembic \u7684\u4e3b\u8981\u529f\u80fd\uff09\u3002 \u8fc1\u79fb \u662f\u5728\u66f4\u6539 SQLAlchemy \u6a21\u578b\u7684\u7ed3\u6784\u3001\u6dfb\u52a0\u5c5e\u6027\u540e\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u590d\u5236\u66f4\u6539\u4e0e\u6dfb\u52a0\u65b0\u5217\u3001\u65b0\u8868\u65f6\u6240\u9700\u7684\u4e00\u7ec4\u6b65\u9aa4\u3002 Alembic \u7684\u793a\u4f8b\u5728 FastAPI \u7684\u6a21\u677f\u9879\u76ee\u91cc\u3002 Project Generation - Template . \u7279\u522b\u662f\u5728 \u6e90\u4ee3\u7801\u7684 alembic \u76ee\u5f55\u4e2d \u3002 \u521b\u5efa\u4f9d\u8d56\u9879 \u00b6 \u6b64\u5904\uff0c\u4f7f\u7528 sql_app/databases.py \u4e2d\u7684 SessionLocal \u7c7b\u6765\u521b\u5efa\u4f9d\u8d56\u9879\u3002 \u8981\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u63d0\u4f9b\u72ec\u7acb\u7684\u6570\u636e\u5e93\u4f1a\u8bdd/\u8fde\u63a5\uff08 SessionLocal \uff09\uff0c\u5728\u6240\u6709\u8bf7\u6c42\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u4f1a\u8bdd\uff0c\u5e76\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u3002 \u7136\u540e\uff0c\u4e3a\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u521b\u5efa\u65b0\u4f1a\u8bdd\u3002 \u4e3a\u6b64\uff0c\u8981\u521b\u5efa\u65b0\u7684 yield \u751f\u6210\u5668\u4f9d\u8d56\u9879\uff0c\u8be6\u89c1 yield \u751f\u6210\u5668\u4f9d\u8d56\u9879 \u4e00\u7ae0\u3002 \u4f9d\u8d56\u9879\u4f1a\u521b\u5efa\u65b0\u7684 SQLAlchemy SessionLocal \uff0c\u7528\u4e8e\u5355\u4e2a\u8bf7\u6c42\uff0c\u5e76\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u3002 Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u8bf4\u660e \u521b\u5efa SessionLocal() \uff0c\u5e76\u628a\u5904\u7406\u8bf7\u6c42\u653e\u5165 try \u4ee3\u7801\u5757\u3002 \u7136\u540e\uff0c\u5728 finally \u4ee3\u7801\u5757\u4e2d\u5173\u95ed\u3002 \u8fd9\u6837\u5373\u53ef\u786e\u4fdd\u5c31\u7b97\u5728\u5904\u7406\u8bf7\u6c42\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u6570\u636e\u5e93\u4f1a\u8bdd\u4e5f\u4f1a\u5728\u8bf7\u6c42\u4e4b\u540e\u5173\u95ed\u3002\u3002 \u4f46\u4e0d\u80fd\u4ece\u9000\u51fa\u4ee3\u7801\u4e2d\u89e6\u53d1\u53e6\u4e00\u4e2a\u5f02\u5e38\u3002\u8be6\u89c1 yield \u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e0e HTTPException \u3002 \u7136\u540e\uff0c\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u65f6\uff0c\u4f7f\u7528\u76f4\u63a5\u4ece SQLAlchemy \u5bfc\u5165\u7684\u7c7b\u578b Session \u58f0\u660e\u3002 \u8fd9\u5c06\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u56e0\u4e3a\u7f16\u8f91\u5668\u77e5\u9053 db \u53c2\u6570\u7684\u7c7b\u578b\u662f Session : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u6280\u672f\u7ec6\u8282 \u53c2\u6570 db \u5b9e\u9645\u4e0a\u662f SessionLocal \u7c7b\u578b, \u4f46\u662f\u8fd9\u4e2a\u7c7b\uff08\u4f7f\u7528 sessionmaker() \u521b\u5efa\uff09\u662f SQLAlchemy Session \u7684 \u4ee3\u7406 \uff0c\u56e0\u6b64, \u7f16\u8f91\u5668\u5b9e\u9645\u4e0a\u5e76\u4e0d\u77e5\u9053\u63d0\u4f9b\u4e86\u4ec0\u4e48\u65b9\u6cd5\u3002 \u4f46\u662f\u901a\u8fc7\u5c06\u7c7b\u578b\u58f0\u660e\u4e3a Session , \u7f16\u8f91\u5668\u5c31\u53ef\u4ee5\u77e5\u9053\u53ef\u7528\u7684\u65b9\u6cd5\uff08 .add() \u3001 .query() \u3001 .commit() , \u7b49\uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\u7b49\u652f\u6301\u3002\u7c7b\u578b\u58f0\u660e\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u5bf9\u8c61\u3002 \u521b\u5efa FastAPI \u8def\u5f84\u64cd\u4f5c \u00b6 \u6700\u540e\u8981\u8bf4\u7684\u662f\uff0c\u8fd9\u91cc\u662f\u6807\u51c6\u7684 FastAPI \u8def\u5f84\u64cd\u4f5c \u4ee3\u7801\u3002 Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e4b\u524d\u901a\u8fc7\u751f\u6210\u5668\u4f9d\u8d56\u9879\u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u5728\u4e4b\u540e\u5173\u95ed\u3002 \u7136\u540e\uff0c\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u521b\u5efa\u6240\u9700\u7684\u4f9d\u8d56\u9879\uff0c\u4ee5\u76f4\u63a5\u83b7\u5f97\u8be5\u4f1a\u8bdd\u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\u90e8\u76f4\u63a5\u8c03\u7528 crud.get_user \uff0c\u5e76\u4f7f\u7528\u8be5\u4f1a\u8bdd\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u503c\u662f SQLAlchemy \u6a21\u578b\u6216 SQLAlchemy \u6a21\u578b\u5217\u8868\u3002 \u4f46\u662f\uff0c\u7531\u4e8e\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u6709\u5e26\u6709\u4f7f\u7528 orm_mode \u7684 Pydantic \u6a21\u578b /\u6982\u56fe\u7684 response_model \uff0cPydantic \u6a21\u578b\u4e2d\u58f0\u660e\u7684\u6570\u636e\u5c06\u4ece\u5b83\u4eec\u4e2d\u63d0\u53d6\u51fa\u6765\uff0c\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u8fdb\u884c\u6240\u6709\u6b63\u5e38\u7684\u8fc7\u6ee4\u548c\u9a8c\u8bc1\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u6709\u4e9b response_models \u5177\u6709\u6807\u51c6\u7684 Python \u7c7b\u578b\uff0c\u5982 List[schemas.Item] \u3002 \u4f46\u662f\u7531\u4e8e\u8be5 List \u7684\u5185\u5bb9/\u53c2\u6570\u662f\u5e26\u6709 orm_mode \u7684 Pydantic \u6a21\u578b \uff0c\u6570\u636e\u5c06\u50cf\u5f80\u5e38\u4e00\u6837\u88ab\u68c0\u7d22\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u6ca1\u6709\u95ee\u9898\u3002 def \u548c async def \u7b80\u4ecb \u00b6 \u5728\u8fd9\u91cc\uff0c\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\u90e8\u548c\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528 SQLAlchemy \u4ee3\u7801\uff0c\u53cd\u8fc7\u6765\uff0c\u5b83\u5c06\u4e0e\u5916\u90e8\u6570\u636e\u5e93\u901a\u4fe1\u3002 \u8fd9\u53ef\u80fd\u9700\u8981 \u7b49\u5f85 \u4e00\u4f1a\u513f\u3002 \u4f46\u7531\u4e8e SQLAlchemy \u4e0d\u517c\u5bb9\u76f4\u63a5\u4f7f\u7528 await \uff0c\u5982\u4e0b\u7684\u4ee3\u7801: user = await db . query ( User ) . first () \u2026\u2026\u53cd\u4e4b\uff0c\u8981\u4f7f\u7528\uff1a user = db . query ( User ) . first () \u7136\u540e\uff0c\u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u548c\u4f9d\u8d56\u6ca1\u6709\u4f7f\u7528 async def \uff0c\u53ea\u662f\u666e\u901a\u7684 def \uff0c\u5982\uff1a @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) ... \u8bf4\u660e \u5982\u9700\u5f02\u6b65\u8fde\u63a5\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u3002 \u6280\u672f\u7ec6\u8282 \u5982\u679c\u60a8\u5f88\u597d\u5947\uff0c\u5e76\u4e14\u6280\u672f\u9ad8\u8d85\uff0c\u53ef\u4ee5\u9605\u8bfb\u672c\u6587\uff0c\u4e86\u89e3 async def \u548c def \u5982\u4f55\u5904\u7406\u6280\u672f\u7ec6\u8282 Async \u6587\u6863\u3002 \u8fc1\u79fb \u00b6 \u56e0\u4e3a\u76f4\u63a5\u4f7f\u7528 SQLAlchemy\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u5176\u4ed6\u63d2\u4ef6\u4f7f\u5b83\u4e0e FastAPI \u4e00\u8d77\u5de5\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Alembic \u5b9e\u73b0\u6570\u636e\u5e93 \u8fc1\u79fb \u3002 \u7531\u4e8e\u4e0e SQLAlchemy \u548c SQLAlchemy \u6a21\u578b\u76f8\u5173\u7684\u4ee3\u7801\u5b58\u5728\u4e8e\u72ec\u7acb\u7684\u6587\u4ef6\u4e2d\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528 Alembic \u6267\u884c\u8fc1\u79fb\uff0c\u800c\u65e0\u9700\u5b89\u88c5 FastAPI\u3001Pydantic \u7b49\u652f\u6301\u5e93\u3002 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0e FastAPI \u65e0\u5173\u7684\u4ee3\u7801\u7684\u5176\u4ed6\u90e8\u5206\u4e2d\u4f7f\u7528\u76f8\u540c\u7684 SQLAlchemy \u6a21\u578b\u548c\u5b9e\u7528\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0c\u5728\u540e\u53f0\u7684 task worker Celery \u3001 RQ \u6216 ARQ . \u56de\u987e\u6240\u6709\u6587\u4ef6 \u00b6 \u6ce8\u610f\uff0c\u9879\u76ee\u6587\u4ef6\u5939\u5e94\u4e3a my_super_project \uff0c\u8be5\u6587\u4ef6\u5939\u5305\u542b sql_app \u5b50\u6587\u4ef6\u5939\u3002 sql_app \u5e94\u5305\u542b\u4ee5\u4e0b\u6587\u4ef6\uff1a sql_app/__init__.py \uff1a\u7a7a\u6587\u4ef6 sql_app/database.py \uff1a from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () sql_app/models.py : from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) sql_app/schemas.py : Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True sql_app/crud.py : from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item sql_app/main.py : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u67e5\u770b\u6587\u6863 \u00b6 \u590d\u5236\u6b64\u4ee3\u7801\u5e76\u6309\u539f\u6837\u4f7f\u7528\u3002 \u8bf4\u660e \u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u663e\u793a\u7684\u4ee3\u7801\u662f\u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\u3002\u548c\u8fd9\u4e9b\u6587\u6863\u4e2d\u7684\u5927\u90e8\u5206\u4ee3\u7801\u4e00\u6837 \u7136\u540e\uff0c\u7528 uvicorn \u8fd0\u884c\uff1a $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee http://127.0.0.1:8000/docs\u3002 \u5728\u8fd9\u91cc\u53ef\u4ee5\u4e0e FastAPI \u5e94\u7528\u4ea4\u4e92\uff0c\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\uff1a \u4e0e\u6570\u636e\u5e93\u76f4\u63a5\u4ea4\u4e92 \u00b6 \u5982\u679c\u60f3\u5728 FastAPI \u4e4b\u5916\uff0c\u76f4\u63a5\u5904\u7406 SQLite \u6570\u636e\u5e93\u6587\u4ef6\uff0c\u8c03\u8bd5\u5185\u5bb9\u3001\u6dfb\u52a0\u8868\u3001\u5217\u3001\u8bb0\u5f55\u3001\u4fee\u6539\u6570\u636e\u7b49\uff0c\u53ef\u4ee5\u4f7f\u7528 DB Browser for SQLite \u3002 \u754c\u9762\u5982\u4e0b\uff1a \u4e5f\u53ef\u4ee5\u4f7f\u7528SQLite \u5728\u7ebf\u6d4f\u89c8\u5668 SQLite Viewer \u6216 ExtendsClass \u3002 \u4f7f\u7528\u4e2d\u95f4\u4ef6\u7684\u5907\u9009 DB \u4f1a\u8bdd \u00b6 \u5982\u679c\u4e0d\u4f7f\u7528\u751f\u6210\u5668\u4f9d\u8d56\u9879 -- \u4f8b\u5982\uff0c\u5982\u679c\u4e0d\u4f7f\u7528 Python 3.7 \uff0c\u4e5f\u4e0d\u80fd\u4e3a Python 3.6 \u5b89\u88c5 backports -- \u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5728 \u4e2d\u95f4\u4ef6 \u4e2d\u8bbe\u7f6e\u4f1a\u8bdd\u3002 \u4e2d\u95f4\u4ef6 \u662f\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u6267\u884c\u7684\u51fd\u6570\uff0c\u6709\u4e9b\u4ee3\u7801\u5728\u7aef\u70b9\u51fd\u6570\u4e4b\u524d\u6267\u884c\uff0c\u6709\u4e9b\u4ee3\u7801\u5728\u7aef\u70b9\u51fd\u6570\u4e4b\u540e\u6267\u884c\u3002 \u521b\u5efa\u4e2d\u95f4\u4ef6 \u00b6 \u4e2d\u95f4\u4ef6\uff08\u53ea\u662f\u51fd\u6570\uff09\u5c06\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u65b0\u7684 SQLAlchemy SessionLocal \uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u8bf7\u6c42\u4e2d\uff0c\u7136\u540e\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u3002 Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u8bf4\u660e \u5728 try \u4ee3\u7801\u5757\u4e2d\uff0c\u521b\u5efa SessionLocal() \u53ca\u5904\u7406\u8bf7\u6c42\u3002 \u7136\u540e\uff0c\u5728 finally \u4ee3\u7801\u5757\u4e2d\u5173\u95ed SessionLocal() \u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u786e\u4fdd\u6570\u636e\u5e93\u4f1a\u8bdd\u59cb\u7ec8\u5728\u8bf7\u6c42\u4e4b\u540e\u5173\u95ed\uff0c\u5373\u4f7f\u5728\u5904\u7406\u8bf7\u6c42\u65f6\u51fa\u73b0\u5f02\u5e38\u3002 \u5173\u4e8e request.state \u00b6 request.state \u662f\u6bcf\u4e2a Request \u5bf9\u8c61\u7684\u5c5e\u6027\u3002\u5b83\u7528\u4e8e\u5b58\u50a8\u9644\u52a0\u5230\u8bf7\u6c42\u672c\u8eab\u7684\u4efb\u610f\u5bf9\u8c61\uff0c\u5982\u672c\u4f8b\u4e2d\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u3002\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Starlette \u5b98\u6863 - Request \u72b6\u6001 \u3002 \u672c\u4f8b\u4e2d\uff0c\u5b83\u7528\u4e8e\u786e\u4fdd\u5728\u6240\u6709\u8bf7\u6c42\u4e2d\u4f7f\u7528\u5355\u4e2a\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u7136\u540e\uff0c\u5728\u4e2d\u95f4\u4ef6\u91cc\u5173\u95ed\u3002 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u6216\u4e2d\u95f4\u4ef6 \u00b6 \u5728\u6b64\uff0c\u6dfb\u52a0 \u4e2d\u95f4\u4ef6 \u4e0e\u751f\u6210\u5668\u4f9d\u8d56\u9879\u7c7b\u4f3c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u533a\u522b\uff1a \u5b83\u9700\u8981\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u6709\u70b9\u590d\u6742 \u4e2d\u95f4\u4ef6\u5fc5\u987b\u662f \u5f02\u6b65 \u51fd\u6570 \u5982\u679c\u6709\u4ee3\u7801\u5728\u5b83\u5fc5\u987b \u7b49\u5f85 \u7f51\u7edc\uff0c\u5b83\u53ef\u80fd\u5c06\u5e94\u7528 \u963b\u585e \u5728\u90a3\u91cc\uff0c\u964d\u4f4e\u4e00\u70b9\u6027\u80fd \u5c3d\u7ba1\u5728\u8fd9\u91cc SQLAlchemy \u7684\u5de5\u4f5c\u65b9\u5f0f\u53ef\u80fd\u4e0d\u662f\u5f88\u6210\u95ee\u9898 \u4f46\u5982\u679c\u6dfb\u52a0\u66f4\u591a\u7684\u4ee3\u7801\u5230\u4e2d\u95f4\u4ef6\u6709\u5927\u91cf\u7684 I/O \u7b49\u5f85\uff0c\u5c31\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\u3002 \u4e2d\u95f4\u4ef6\u4e3a \u6bcf\u4e2a \u8bf7\u6c42\u8fd0\u884c\u3002 \u56e0\u6b64\uff0c\u5c06\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u8fde\u63a5\u3002 \u5373\u4f7f\u5904\u7406\u8be5\u8bf7\u6c42\u7684 \u8def\u5f84\u64cd\u4f5c \u4e0d\u9700\u8981\u6570\u636e\u5e93\u3002 \u63d0\u793a \u5f53\u751f\u6210\u5668\u4f9d\u8d56\u9879\u5bf9\u4e8e\u7528\u4f8b\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u65f6\uff0c\u4f7f\u7528 yield \u53ef\u80fd\u4f1a\u66f4\u597d\u3002 \u8bf4\u660e FastAPI \u65b0\u8fd1\u6dfb\u52a0\u4e86\u751f\u6210\u5668\u4f9d\u8d56\u9879\u3002 \u672c\u6559\u7a0b\u7684\u4e0a\u4e2a\u7248\u672c\u53ea\u6709\u4e2d\u95f4\u4ef6\u793a\u4f8b\uff0c\u53ef\u80fd\u6709\u51e0\u4e2a\u5e94\u7528\u4f7f\u7528\u4e2d\u95f4\u4ef6\u8fdb\u884c\u6570\u636e\u5e93\u4f1a\u8bdd\u7ba1\u7406\u3002","title":"SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"tutorial/sql-databases/#sql","text":"FastAPI \u4e0d\u5f3a\u5236\u4f7f\u7528\u67d0\u4e2a SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 \u4f46\u652f\u6301\u591a\u79cd\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQLAlchemy \u63a7\u5236\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3002 SQLAlchemy \u53ef\u4ee5\u8ba9 FastAPI \u63a7\u5236\u4ee5\u4e0b\u6570\u636e\u5e93\uff1a PostgreSQL MySQL SQLite Oracle Microsoft SQL Server \u7b49 \u672c\u7ae0\u793a\u4f8b\u4f7f\u7528 SQLite \uff0c\u56e0\u4e3a\u5b83\u4f7f\u7528\u5355\u4e2a\u6587\u4ef6\uff0c\u800c\u4e14 Python \u76f4\u63a5\u96c6\u6210\u4e86 SQLite\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u590d\u5236\u8fd9\u4e2a\u793a\u4f8b\uff0c\u5e76\u6309\u539f\u6837\u8fd0\u884c\u3002 \u751f\u4ea7\u73af\u5883\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528 PostgreSQL \u7b49\u6570\u636e\u5e93\u670d\u52a1\u5668\u3002 \u63d0\u793a FastAPI \u5b98\u65b9\u57fa\u4e8e Docker \u5bb9\u5668\uff0c\u63d0\u4f9b\u4e86\u4f7f\u7528 FastAPI \u3001 PostgreSQL \u53ca\u524d\u7aef\u5de5\u5177\u7684\u6a21\u677f\u9879\u76ee\uff0c\u8be6\u89c1\uff1a https://github.com/tiangolo/full-stack-fastapi-postgresql \u3002 \u7b14\u8bb0 \u6ce8\u610f\uff0c\u672c\u7ae0\u4e2d\u5927\u591a\u6570 SQLAlchemy \u6807\u51c6\u4ee3\u7801\u53ef\u4ee5\u5728\u4efb\u4f55\u6846\u67b6\u4e2d\u4f7f\u7528\u3002 \u4e13\u7528\u4e8e FastAPI \u7684\u4ee3\u7801\u5f88\u5c11\u3002","title":"SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93"},{"location":"tutorial/sql-databases/#orms","text":"FastAPI \u4f7f\u7528\u5404\u79cd\u6570\u636e\u5e93\u548c\u5404\u79cd\u98ce\u683c\u7684\u652f\u6301\u5e93\u4e0e\u6570\u636e\u5e93\u8fdb\u884c\u5bf9\u8bdd\u3002 \u5e38\u7528\u7684\u6a21\u5f0f\u662f ORM \uff1a\u5373 Object-Relational Mapping\uff08\u5bf9\u8c61\u5173\u7cfb\u6620\u5c04\uff09\u652f\u6301\u5e93\u3002 ORM \u662f\u8f6c\u6362\uff08 \u6620\u5c04 \uff09\u4ee3\u7801\u4e2d\u7684 \u5bf9\u8c61 \u548c\u6570\u636e\u5e93\u8868\uff08 \u5173\u7cfb \uff09\u7684\u5de5\u5177\u3002 \u4f7f\u7528 ORM\uff0c\u901a\u5e38\u8981\u521b\u5efa\u8868\u793a SQL \u6570\u636e\u5e93\u8868\u7684\u7c7b\uff0c\u7c7b\u7684\u5c5e\u6027\u8868\u793a\u5217\uff0c\u5305\u542b\u5217\u540d\u548c\u6570\u636e\u7c7b\u578b\u3002 \u4f8b\u5982\uff0c\u7c7b Pet \u8868\u793a SQL \u8868 pets \u3002 \u6bcf\u4e2a \u7c7b\u5b9e\u4f8b \u5bf9\u8c61\u8868\u793a\u6570\u636e\u8868\u4e2d\u7684\u4e00\u884c\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u5bf9\u8c61 orion_cat \uff08 Pet \u7684\u5b9e\u4f8b\uff09\u53ef\u4ee5\u5305\u542b\u5c5e\u6027 orion_cat.type \uff0c\u8868\u793a\u5217 type \uff0c\u8be5\u5c5e\u6027\u7684\u503c\u53ef\u4ee5\u662f \"cat\" \u3002 ORM \u8fd8\u63d0\u4f9b\u4e86\u521b\u5efa\u8fde\u63a5\u8868\u4e0e\u5b9e\u4f53\u4e4b\u95f4\u5173\u7cfb\u7684\u5de5\u5177\u3002 \u8fd9\u6837\uff0c orion_cat \u5bf9\u8c61\u4e2d\u5c31\u53ef\u4ee5\u5305\u542b\u5c5e\u6027 orion_cat.owner \uff0c\u5c5e\u6027 owner \u8868\u793a\u5ba0\u7269\u4e3b\u4eba\u7684\u6570\u636e\uff0c\u53d6\u81ea\u8868 owners \u3002 \u56e0\u6b64\uff0c orion_cat.owner.name \u662f\u5ba0\u7269\u4e3b\u4eba\u7684\u540d\u5b57\uff08\u6765\u81ea owners \u8868\u4e2d\u7684 name \u5217\uff09\u3002 \u5b83\u7684\u503c\u662f \"Arquilian\" \u3002 \u4ece\u5ba0\u7269\u5bf9\u8c61\u8bbf\u95ee\u5bf9\u5e94\u7684\u8868 owners \u65f6\uff0cORM \u4f1a\u5b8c\u6210\u6240\u6709\u83b7\u53d6\u4fe1\u606f\u7684\u5de5\u4f5c\u3002 \u5e38\u7528\u7684 ORM \u5305\u62ec\uff1aDjango-ORM\uff08Django \u7ec4\u4ef6\uff09\u3001SQLAlchemy ORM\uff08SQLAlchemy \u7ec4\u4ef6\uff0c\u72ec\u7acb\u7684\u652f\u6301\u5e93\uff09\u548c Peewee\uff08\u72ec\u7acb\u7684\u652f\u6301\u5e93\uff09\u7b49\u3002 \u672c\u7ae0\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 SQLAlchemy ORM \u3002 \u5176\u4ed6 ORM \u7684\u4f7f\u7528\u65b9\u5f0f\u4e0e\u6b64\u7c7b\u4f3c\u3002 \u63d0\u793a \u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u6709\u4e00\u7ae0\u4e13\u95e8\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Peewee\u3002","title":"ORMs"},{"location":"tutorial/sql-databases/#_1","text":"\u4ee5\u4e0b\u56fe\u4e3a\u4f8b\uff0c\u5047\u8bbe\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e3a my_super_project \uff0c\u5176\u4e2d\u5305\u542b sql_app \u7b49\u5b50\u6587\u4ef6\u5939\uff0c\u67b6\u6784\u5982\u4e0b\uff1a . \u2514\u2500\u2500 sql_app \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 crud.py \u251c\u2500\u2500 database.py \u251c\u2500\u2500 main.py \u251c\u2500\u2500 models.py \u2514\u2500\u2500 schemas.py __init__.py \u662f\u7a7a\u6587\u4ef6\uff0c\u7528\u4e8e\u8ba9 Python \u8bc6\u522b\u51fa sql_app \u4e0e\u6587\u4ef6\u5939\u5185\u7684\u6240\u6709\u6a21\u5757\uff08Python \u6587\u4ef6\uff09\u662f\u5305\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u6bcf\u4e00\u4e2a\u6587\u4ef6/\u6a21\u5757\u3002","title":"\u6587\u4ef6\u67b6\u6784"},{"location":"tutorial/sql-databases/#sqlalchemy","text":"\u9996\u5148\uff0c\u9700\u8981\u5b89\u88c5 SQLAlchemy \uff1a $ pip install sqlalchemy ---> 100%","title":"\u5b89\u88c5 SQLAlchemy"},{"location":"tutorial/sql-databases/#sqlalchemy_1","text":"\u4f7f\u7528\u7684\u6587\u4ef6\u662f sql_app/database.py \u3002","title":"\u521b\u5efa SQLAlchemy \u7ec4\u4ef6"},{"location":"tutorial/sql-databases/#sqlalchemy_2","text":"from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"\u5bfc\u5165 SQLAlchemy \u7ec4\u4ef6"},{"location":"tutorial/sql-databases/#sqlalchemy-url","text":"from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () \u672c\u4f8b\u4e2d\uff0c \u8fde\u63a5 \u7684\u662f SQLite \u6570\u636e\u5e93\uff08\u6253\u5f00 SQLite \u6570\u636e\u5e93\u6587\u4ef6\uff09\u3002 \u8be5\u6570\u636e\u5e93\u5b58\u50a8\u5728\u4e0e\u5176\u4ed6\u6587\u4ef6\u540c\u4e00\u6587\u4ef6\u5939\u7684 sql_app.db \u91cc\u3002 \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 URL \u4ee5 ./sql_app.db \u7ed3\u5c3e\u3002 \u4f7f\u7528 PostgreSQL \u6570\u636e\u5e93\u65f6\uff0c\u53ea\u9700\u53d6\u6d88\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u7684\u6ce8\u91ca\uff1a SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" \u2026\u2026\u5e76\u6839\u636e\u6570\u636e\u5e93\u7684\u6570\u636e\u548c\u8bc1\u4e66\u8fdb\u884c\u8c03\u6574\uff08 \u4e5f\u9002\u7528\u4e8e MySQL\u3001MariaDB \u7b49\u6570\u636e\u5e93\uff09\u3002 \u63d0\u793a \u4f7f\u7528\u5176\u4ed6\u6570\u636e\u5e93\u65f6\u5fc5\u987b\u4fee\u6539\u8fd9\u884c\u4ee3\u7801\u3002","title":"\u4e3a SQLAlchemy \u521b\u5efa\u6570\u636e\u5e93 URL"},{"location":"tutorial/sql-databases/#sqlalchemy-engine","text":"\u9996\u5148\uff0c\u521b\u5efa SQLAlchemy \u7684 \u5f15\u64ce \u3002 \u7a0d\u540e\u9700\u8981\u4f7f\u7528\u8fd9\u4e2a engine \u3002 from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"\u521b\u5efa SQLAlchemy \u7684 engine"},{"location":"tutorial/sql-databases/#_2","text":"\u53c2\u6570\uff1a connect_args = { \"check_same_thread\" : False } \u2026\u2026\u53ea\u7528\u4e8e SQLite\uff0c\u5176\u4ed6\u6570\u636e\u5e93\u4e0d\u9700\u8981\u3002 \u6280\u672f\u7ec6\u8282 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0cSQLite \u53ea\u80fd\u4e0e\u4e00\u4e2a\u7ebf\u7a0b\u901a\u4fe1\uff0c\u5373\u6bcf\u4e2a\u7ebf\u7a0b\u53ea\u5904\u7406\u4e00\u4e2a\u72ec\u7acb\u7684\u8bf7\u6c42\u3002 \u8fd9\u662f\u4e3a\u4e86\u9632\u6b62\u610f\u5916\u4e3a\u4e0d\u540c\u64cd\u4f5c\uff08\u9488\u5bf9\u4e0d\u540c\u7684\u8bf7\u6c42\uff09\u5171\u4eab\u76f8\u540c\u7684\u8fde\u63a5\u3002 \u4f46\u5728 FastAPI \u4e2d\uff0c\u4f7f\u7528\u666e\u901a\u51fd\u6570\uff08 def \uff09\u53ef\u4ee5\u6709\u591a\u4e2a\u7ebf\u7a0b\u4e3a\u4e86\u76f8\u540c\u8bf7\u6c42\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff0c\u6240\u4ee5\u8981\u4f7f\u7528 connect_args={\"check_same_thread\": False} \u8ba9 SQLite \u652f\u6301\u591a\u7ebf\u7a0b\u3002 \u6b64\u5916\uff0c\u8981\u786e\u4fdd\u6bcf\u4e2a\u8bf7\u6c42\u5728\u4f9d\u8d56\u9879\u4e2d\u83b7\u5f97\u81ea\u5df1\u7684\u6570\u636e\u5e93\u8fde\u63a5\u4f1a\u8bdd\uff0c\u56e0\u6b64\uff0c\u4e0d\u9700\u8981\u4f7f\u7528\u9ed8\u8ba4\u673a\u5236\u3002","title":"\u6ce8\u610f"},{"location":"tutorial/sql-databases/#sessionlocal","text":"SessionLocal \u7684\u7c7b\u5b9e\u4f8b\u662f\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u4f46\u5b83\u672c\u8eab\u4e0d\u662f\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u4e00\u65e6\u521b\u5efa\u4e86 SessionLocal \u7684\u7c7b\u5b9e\u4f8b\uff0c\u8be5\u5b9e\u4f8b\u5c31\u662f\u5b9e\u9645\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 \u547d\u540d\u4e3a SessionLocal \u662f\u4e3a\u4e86\u533a\u522b\u4ece SQLAlchemy \u5bfc\u5165\u7684 Session \u3002 \u7a0d\u540e\uff0c\u518d\u4f7f\u7528\uff08\u4ece SQLAlchemy \u5bfc\u5165\u7684\uff09 Session \u3002 \u4f7f\u7528\u51fd\u6570 sessionmaker \u521b\u5efa SessionLocal \u7c7b\uff1a from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"\u521b\u5efa SessionLocal \u7c7b"},{"location":"tutorial/sql-databases/#base","text":"\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528\u8fd4\u56de\u7c7b\u7684\u51fd\u6570 declarative_base() \u3002 \u521b\u5efa\u7ee7\u627f\u81ea\u8be5\u7c7b\u7684\u6570\u636e\u5e93\u6a21\u578b\u6216\u7c7b\uff08ORM\u6a21\u578b\uff09\uff1a from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base ()","title":"\u521b\u5efa Base \u7c7b"},{"location":"tutorial/sql-databases/#_3","text":"\u8fd9\u91cc\u7528\u7684\u662f sql_app/models.py \u3002","title":"\u521b\u5efa\u6570\u636e\u5e93\u6a21\u578b"},{"location":"tutorial/sql-databases/#base-sqlalchemy","text":"\u4f7f\u7528 Base \u7c7b\u521b\u5efa SQLAlchemy \u6a21\u578b\u3002 \u63d0\u793a SQLAlchemy \u4f7f\u7528\u672f\u8bed \u6a21\u578b \u8868\u793a\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\u7684\u7c7b\u548c\u5b9e\u4f8b\u3002 \u4f46\u662f Pydantic \u4e5f\u4f7f\u7528\u672f\u8bed \u6a21\u578b \u8868\u793a\u6982\u56fe\uff0c\u5373\u6570\u636e\u9a8c\u8bc1\u3001\u8f6c\u6362\u4ee5\u53ca\u6587\u6863\u7c7b\u548c\u5b9e\u4f8b\u3002 \u4ece database \uff08 database.py \uff09 \u5bfc\u5165 Base \u3002 \u521b\u5efa\u4ece\u5b83\u7ee7\u627f\u7684\u7c7b\u3002 \u8fd9\u4e9b\u7c7b\u5c31\u662f SQLAlchemy \u6a21\u578b\u3002 from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) __tablename__ \u5c5e\u6027\u662f SQLAlchemy \u5728\u6570\u636e\u5e93\u4e2d\u6a21\u578b\u7684\u8868\u540d\u3002","title":"\u4ece Base \u7c7b\u521b\u5efa SQLAlchemy \u6a21\u578b"},{"location":"tutorial/sql-databases/#_4","text":"\u521b\u5efa\u6a21\u578b\u7684\uff08\u7c7b\uff09\u5c5e\u6027\u3002 \u6bcf\u4e2a\u5c5e\u6027\u90fd\u8868\u793a\u5bf9\u5e94\u6570\u636e\u5e93\u8868\u4e2d\u7684\u4e00\u5217\u3002 \u4f7f\u7528 SQLAlchemy \u4e2d\u7684 Column \u4f5c\u4e3a\u9ed8\u8ba4\u503c\u3002 \u5e76\u4e14\uff0c\u4ee5 Integer \u3001 String \u3001 Boolean \u7b49\u53c2\u6570\u4f20\u9012 SQLAlchemy \u7684\u7c7b type \uff0c\u5b9a\u4e49\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u7c7b\u578b\u3002 from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" )","title":"\u521b\u5efa\u6a21\u578b\u5c5e\u6027/\u5217"},{"location":"tutorial/sql-databases/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5173\u7cfb\u3002 \u4e3a\u6b64\uff0c\u8981\u4f7f\u7528 SQLAlchemy ORM \u7684 relationship \u3002 \u8fd9\u662f\u4e00\u4e2a\u5f88 \u9b54\u6027 \u7684\u5c5e\u6027\uff0c\u80fd\u591f\u5305\u542b\u76f8\u5173\u8868\u7684\u503c\u3002 from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) \u8bbf\u95ee User \u7684 items \u5c5e\u6027\u65f6\uff0c\u6bd4\u5982 my_user.items \uff0c\u5b83\u4f1a\u5305\u542b SQLAlchemy \u6a21\u578b Item \u7684\u5217\u8868\uff08\u6765\u81ea items \u8868\uff09\uff0c\u8fd9\u4e9b\u6a21\u578b\u4e2d\u5305\u542b\u6307\u5411 users \u8868\u4e2d\u8fd9\u6761\u8bb0\u5f55\u7684\u5916\u952e\u3002 \u8bbf\u95ee my_user.items \uff0c SQLAlchemy \u5b9e\u9645\u4e0a\u4f1a\u4ece\u6570\u636e\u5e93 items \u8868\u4e2d\u63d0\u53d6\u6570\u636e\uff0c\u5e76\u5c06\u5b83\u4eec\u586b\u5145\u5230\u8fd9\u91cc\u3002 \u8bbf\u95ee Item \u4e2d\u7684 owner \u5c5e\u6027\u65f6\uff0c\u5305\u542b users \u8868\u4e2d\u7684 SQLAlchemy \u6a21\u578b User \u3002\u4f7f\u7528 owner_id \u5c5e\u6027/\u5217\u4f5c\u4e3a\u5916\u952e\uff0c\u4ee5\u4fbf\u4ece users \u8868\u63d0\u53d6\u6570\u636e\u3002","title":"\u521b\u5efa\u5173\u7cfb"},{"location":"tutorial/sql-databases/#pydantic","text":"\u63a5\u4e0b\u6765\u662f sql_app/schemas.py \u3002 \u63d0\u793a \u4e3a\u4e86\u907f\u514d SQLAlchemy \u6a21\u578b \u548c Pydantic \u6a21\u578b \u4e4b\u95f4\u7684\u6df7\u6dc6\uff0c\u5728\u6b64\uff0c\u4f7f\u7528 models.py \u8868\u793a SQLAlchemy \u6a21\u578b\uff0c\u4f7f\u7528 schemas.py \u8868\u793a Pydantic \u6a21\u578b\u3002 Pydantic \u6a21\u578b\u81f3\u5c11\u8981\u5b9a\u4e49\u4e00\u4e2a \u6982\u56fe \uff08\u6709\u6548\u7684\u6570\u636e\u5f62\u72b6\uff09\u3002 \u8fd9\u6837\u505a\uff0c\u53ef\u4ee5\u907f\u514d\u6df7\u6dc6\u8fd9\u4e24\u79cd\u65b9\u6cd5\u3002","title":"\u521b\u5efa Pydantic \u6a21\u578b"},{"location":"tutorial/sql-databases/#pydantic_1","text":"\u521b\u5efa\u4e24\u4e2a Pydantic \u6a21\u578b \uff08 \u6982\u56fe \uff09\uff0c ItemBase \u548c UserBase \uff0c\u5e76\u5b9a\u4e49\u521b\u5efa\u6216\u8bfb\u53d6\u6570\u636e\u65f6\u7684\u5171\u7528\u5c5e\u6027\u3002 \u7136\u540e\uff0c\u521b\u5efa ItemCreate \u548c UserCreate \uff0c\u4ece\u4e24\u4e2a\u57fa\u7c7b\u7ee7\u627f\uff08\u8fd9\u6837\u4e24\u4e2a Create \u7c7b\u5c31\u62e5\u6709\u76f8\u540c\u7684\u5c5e\u6027\uff09\uff0c\u518d\u52a0\u4e0a\u521b\u5efa\u5bf9\u8c61\u6240\u9700\u7684\u5176\u4ed6\u6570\u636e\uff08\u5c5e\u6027\uff09\u3002 \u56e0\u6b64\uff0c\u5728\u521b\u5efa\u7528\u6237\u65f6\u4e5f\u4f1a\u5305\u542b \u5bc6\u7801 \u3002 \u4f46\u4e3a\u4e86\u5b89\u5168\u8d77\u89c1\uff0c password \u4e0d\u80fd\u5728\u5176\u4ed6 Pydantic \u6982\u56fe \u4e2d\uff0c\u4f8b\u5982\uff0c\u8bfb\u53d6\u7528\u6237\u65f6\uff0c\u4e0d\u8981\u8ba9 API \u53d1\u9001\u5bc6\u7801\u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True","title":"\u521b\u5efa\u521d\u59cb Pydantic \u6a21\u578b/\u6982\u56fe"},{"location":"tutorial/sql-databases/#sqlalchemy-pydantic","text":"\u6ce8\u610f\uff0cSQLAlchemy \u6a21\u578b \u4f7f\u7528 = \u5b9a\u4e49\u5c5e\u6027\uff0c\u5e76\u628a\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9 Column \uff0c\u5982\uff1a name = Column ( String ) \u800c Pydantic \u6a21\u578b \u4f7f\u7528 : \u58f0\u660e\u7c7b\u578b\uff0c\u5373\u4f7f\u7528\u7c7b\u578b\u6ce8\u91ca\u8bed\u6cd5/\u7c7b\u578b\u63d0\u793a\uff1a name : str \u8bb0\u4f4f\u8fd9\u4e00\u70b9\uff0c\u8fd9\u6837\u5728\u628a = \u4e0e : \u548c\u5b83\u4eec\u4e00\u8d77\u4f7f\u7528\u65f6\u5c31\u4e0d\u4f1a\u6df7\u6dc6\u4e86\u3002","title":"SQLAlchemy \u98ce\u683c\u548c Pydantic \u98ce\u683c"},{"location":"tutorial/sql-databases/#pydantic_2","text":"\u73b0\u5728\uff0c\u521b\u5efa Pydantic \u6a21\u578b \uff08\u6982\u56fe\uff09\uff0c\u7528\u4e8e\u5728\u8bfb\u53d6\u6570\u636e\u548c\u4ece API \u8fd4\u56de\u6570\u636e\u3002 \u4f8b\u5982\uff0c\u521b\u5efa item \u524d\uff0c\u4e0d\u77e5\u9053\u5206\u914d\u7ed9\u5b83\u7684 ID \u662f\u4ec0\u4e48\uff0c\u4f46\u8bfb\u53d6 item \u65f6\uff08\u4ece API \u8fd4\u56de item \u65f6\uff09\u5c31\u5df2\u7ecf\u77e5\u9053\u4e86 item \u7684 ID\u3002 \u540c\u6837\uff0c\u5728\u8bfb\u53d6\u7528\u6237\u65f6\uff0c\u53ef\u4ee5\u65ad\u8a00 items \u8981\u5305\u542b\u5c5e\u4e8e\u8be5\u7528\u6237\u7684 items\u3002 \u4e0d\u4ec5\u662f\u8fd9\u4e9b items \u7684 ID\uff0c\u8fd8\u6709\u5728 Pydantic \u6a21\u578b \u4e2d\u5b9a\u4e49\u7684\u7528\u4e8e\u8bfb\u53d6 items \u7684\u6240\u6709\u6570\u636e\uff1a Item \u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True \u63d0\u793a \u6ce8\u610f User \uff0c\u8bfb\u53d6\u7528\u6237\uff08\u4ece API \u8fd4\u56de\u7528\u6237\uff09\u7684 Pydantic \u6982\u56fe \u4e0d\u5305\u542b\u5bc6\u7801\u3002","title":"\u4e3a\u8bfb\u53d6/\u8fd4\u56de\u6570\u636e\u521b\u5efa Pydantic \u6a21\u578b/\u6982\u56fe"},{"location":"tutorial/sql-databases/#pydantic-orm_mode","text":"\u73b0\u5728\uff0c\u5728\u8bfb\u53d6 Pydantic \u6982\u56fe \u7684 Item \u548c User \u4e2d\uff0c\u6dfb\u52a0 Config \u5185\u90e8\u7c7b\u3002 Config \u7c7b\u7528\u4e8e\u914d\u7f6e Pydantic\u3002 \u5728 Config \u7c7b\u4e2d, \u8bbe\u7f6e\u5c5e\u6027 orm_mode = True \u3002 Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True \u63d0\u793a \u6ce8\u610f orm_mode \u7528 = \u8d4b\u503c\uff0c\u4f8b\u5982\uff1a orm_mode = True \u4e0e\u7c7b\u578b\u58f0\u660e\u4f7f\u7528 : \u4e0d\u540c \u3002 \u8fd9\u91cc\u662f\u8bbe\u7f6e\u914d\u7f6e\u503c\uff0c\u4e0d\u662f\u58f0\u660e\u7c7b\u578b\u3002 Pydantic \u7684 orm_mode \u544a\u8bc9 Pydantic \u6982\u56fe \u8bfb\u53d6\u6570\u636e\uff0c\u5373\u4f7f\u5b83\u4e0d\u662f \u5b57\u5178 \uff0c\u800c\u662f ORM \u6a21\u578b\uff08\u6216\u5176\u4ed6\u5177\u6709\u5c5e\u6027\u7684\u5bf9\u8c61\uff09\u3002 \u8fd9\u6837\uff0c\u5c31\u4e0d\u518d\u53ea\u662f\u4ece dict \u4e2d\u83b7\u53d6 id \u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a id = data [ \"id\" ] \u8fd8\u4f1a\u4ece\u5c5e\u6027\u4e2d\u83b7\u53d6 id \u503c\uff0c\u5982\u4e0b\u6240\u793a\uff1a id = data . id \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0cPydantic \u6a21\u578b \u4e0e ORM \u517c\u5bb9\uff0c\u53ea\u9700\u5728 \u8def\u5f84\u64cd\u4f5c \u4e2d\u7684 response_model \u53c2\u6570\u4e2d\u8fdb\u884c\u58f0\u660e\u5c31\u53ef\u4ee5\u4e86\u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u8fd4\u56de\u6570\u636e\u5e93\u6a21\u578b\uff0c\u5e76\u4ece\u4e2d\u8bfb\u53d6\u6570\u636e\u3002","title":"\u4f7f\u7528 Pydantic \u7684 orm_mode"},{"location":"tutorial/sql-databases/#orm","text":"SQLAlchemy \u548c\u5176\u4ed6\u8bb8\u591a\u5de5\u5177\u9ed8\u8ba4\u662f \u61d2\u52a0\u8f7d \u7684\u3002 \u5373\uff0c\u4e0d\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u5173\u7cfb\u6570\u636e\uff0c\u76f4\u5230\u8981\u8bbf\u95ee\u5305\u542b\u8be5\u6570\u636e\u7684\u5c5e\u6027\u3002 \u4f8b\u5982\uff0c\u8bbf\u95ee\u5c5e\u6027 items \uff1a current_user . items \u5c06\u4f7f SQLAlchemy \u8bbf\u95ee items \u8868\u5e76\u4e3a\u8fd9\u4e2a\u7528\u6237\u83b7\u53d6 items\uff0c\u4f46\u4e0d\u662f\u5728\u6b64\u4e4b\u524d\u3002 \u6ca1\u6709 orm_mode \uff0c\u4ece \u8def\u5f84\u64cd\u4f5c \u8fd4\u56de\u7684 SQLAlchemy \u6a21\u578b\u4e0d\u5305\u542b\u5173\u7cfb\u6570\u636e\u3002 \u5373\u4f7f Pydantic \u6a21\u578b\u4e2d\u58f0\u660e\u4e86\u8fd9\u4e9b\u5173\u7cfb\u3002 \u4f46\u5728 ORM \u6a21\u5f0f\u4e0b\uff0c\u7531\u4e8e Pydantic \u8981\u4ece\u5c5e\u6027\uff08\u800c\u4e0d\u662f\u5047\u8bbe\u7684 dict \uff09\u4e2d\u8bbf\u95ee\u6240\u9700\u6570\u636e\uff0c\u53ef\u4ee5\u58f0\u660e\u8981\u8fd4\u56de\u7684\u7279\u5b9a\u6570\u636e\uff0cPydantic \u751a\u81f3\u53ef\u4ee5\u901a\u8fc7 ORM \u4e2d\u83b7\u53d6\u6570\u636e\u3002","title":"ORM \u6a21\u5f0f\u7684\u6280\u672f\u7ec6\u8282"},{"location":"tutorial/sql-databases/#crud","text":"\u63a5\u4e0b\u6765\u662f sql_app/crud.py \u3002 \u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\uff0c\u4f7f\u7528\u53ef\u590d\u7528\u7684\u51fd\u6570\u4e0e\u6570\u636e\u5e93\u4e2d\u7684\u6570\u636e\u4ea4\u4e92\u3002 CRUD \uff1a C reate\u3001 R ead\u3001 U pdate\u3001 D elete\u3002 \u2026\u2026\u672c\u4f8b\u53ea\u6d89\u53ca \u521b\u5efa \uff08create\uff09\u548c \u8bfb\u53d6 \uff08read\uff09\u6570\u636e\u3002","title":"CRUD \u5de5\u5177"},{"location":"tutorial/sql-databases/#_6","text":"\u4ece sqlalchemy.orm \u4e2d\u5bfc\u5165 Session \uff0c\u58f0\u660e db \u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e76\u5728\u51fd\u6570\u4e2d\u652f\u6301\u7c7b\u578b\u68c0\u67e5\u548c\u81ea\u52a8\u8865\u5168\u3002 \u5bfc\u5165 models \uff08SQLAlchemy \u6a21\u578b\uff09\u548c schemas \uff08Pydantic \u6a21\u578b /\u6982\u56fe\uff09\u3002 \u521b\u5efa\u5b9e\u73b0\u4ee5\u4e0b\u529f\u80fd\u7684\u5de5\u5177\u51fd\u6570\uff1a \u901a\u8fc7 ID \u548c\u7535\u5b50\u90ae\u4ef6\u8bfb\u53d6\u5355\u4e2a\u7528\u6237\u3002 \u8bfb\u53d6\u591a\u4e2a\u7528\u6237\u3002 \u8bfb\u53d6\u591a\u4e2a\u6761\u76ee\u3002 from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \u63d0\u793a \u521b\u5efa\u72ec\u7acb\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff0c\u53ea\u7528\u4e8e\u4e0e\u6570\u636e\u5e93\u4ea4\u4e92\uff08\u83b7\u53d6\u7528\u6237\u6216\u9879\u76ee\uff09\u7684\u51fd\u6570\uff0c\u65b9\u4fbf\u5728\u5176\u4ed6\u90e8\u5206\u590d\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u4ee5\u53ca\u8fdb\u884c \u5355\u5143\u6d4b\u8bd5 \u3002","title":"\u8bfb\u53d6\u6570\u636e"},{"location":"tutorial/sql-databases/#_7","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u5de5\u5177\u51fd\u6570\u6765\u521b\u5efa\u6570\u636e\u3002 \u6b65\u9aa4\u662f\uff1a \u4f7f\u7528\u6570\u636e\u521b\u5efa SQLAlchemy \u6a21\u578b \u5b9e\u4f8b \u3002 add \u5b9e\u4f8b\u5bf9\u8c61\u5230\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 commit \u66f4\u6539\u5230\u6570\u636e\u5e93\uff08\u4fdd\u5b58\u6570\u636e\uff09\u3002 refresh \u5b9e\u4f8b\uff08\u5305\u542b\u6765\u81ea\u6570\u636e\u5e93\u7684\u4efb\u4f55\u65b0\u6570\u636e\uff0c\u5982\uff0c\u751f\u6210\u7684 ID\uff09\u3002 from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item \u63d0\u793a SQLAlchemy \u7684\u6a21\u578b User \u4e2d\u5305\u542b hashed_password \uff0c\u56e0\u6b64\u5e94\u8be5\u5305\u542b\u54c8\u5e0c\u5bc6\u7801\u3002 \u4f46\u662f\u7531\u4e8e API \u5ba2\u6237\u7aef\u63d0\u4f9b\u7684\u662f\u539f\u59cb\u5bc6\u7801\uff0c\u6240\u4ee5\u9700\u8981\u5148\u4f7f\u7528\u539f\u59cb\u5bc6\u7801\u751f\u6210\u54c8\u5e0c\u5bc6\u7801\u3002 \u7136\u540e\uff0c\u628a\u503c\u4f20\u9012\u7ed9 hashed_password \u53c2\u6570\uff0c\u5e76\u4fdd\u5b58\u3002 \u8b66\u544a \u6b64\u793a\u4f8b\u4e0d\u5b89\u5168\uff0c\u5bc6\u7801\u5e76\u6ca1\u6709\u54c8\u5e0c\u3002 \u5728\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u8981\u5bf9\u5bc6\u7801\u8fdb\u884c\u54c8\u5e0c\uff0c\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\u3002 \u66f4\u591a\u7ec6\u8282\uff0c\u8bf7\u53c2\u9605\u672c\u6559\u7a0b\u4e2d\u7684 \u5b89\u5168 \u76f8\u5173\u7684\u5185\u5bb9\u3002 \u8fd9\u91cc\u5173\u6ce8\u7684\u53ea\u662f\u6570\u636e\u5e93\u7684\u5de5\u5177\u548c\u673a\u5236\u3002 \u63d0\u793a \u4e0d\u5fc5\u4ece Pydantic \u6a21\u578b \u4e2d\u8bfb\u53d6\u6bcf\u4e2a\u5173\u952e\u5b57\u53c2\u6570\uff0c\u7136\u540e\u5c06\u5b83\u4eec\u4f20\u9012\u7ed9 Item \uff0c\u800c\u662f\u4f7f\u7528\u4ee5\u4e0b\u65b9\u6cd5\u751f\u6210\u5e26\u6709 Pydantic \u6a21\u578b \u7684\u6570\u636e\u7684 dict \uff1a item.dict() \u7136\u540e\uff0c\u4ee5\u5173\u952e\u5b57\u53c2\u6570\u5f62\u5f0f\u628a dict \u7684\u952e\u503c\u5bf9\u4f20\u9012\u7ed9 SQLAlchemy \u7684 Item \uff1a Item(**item.dict()) \u7136\u540e\uff0c\u4f20\u9012 Pydantic \u6a21\u578b \u4e0d\u63d0\u4f9b\u7684\u989d\u5916\u5173\u952e\u5b57\u53c2\u6570 owner_id : Item(**item.dict(), owner_id=user_id)","title":"\u521b\u5efa\u6570\u636e"},{"location":"tutorial/sql-databases/#fastapi","text":"\u5728 sql_app/main.py \u4e2d\uff0c\u96c6\u6210\u548c\u4f7f\u7528\u4e4b\u524d\u521b\u5efa\u7684\u7ec4\u4ef6\u3002","title":"FastAPI \u7684\u4e3b\u5e94\u7528"},{"location":"tutorial/sql-databases/#_8","text":"\u521b\u5efa\u6570\u636e\u5e93\u8868\u975e\u5e38\u7b80\u5355\uff1a Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items","title":"\u521b\u5efa\u6570\u636e\u5e93\u8868"},{"location":"tutorial/sql-databases/#alembic","text":"\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528 Alembic \u521d\u59cb\u5316\u6570\u636e\u5e93\uff08\u521b\u5efa\u8868\u7b49\uff09\u3002 \u8fd8\u53ef\u4ee5\u4f7f\u7528 Alembic \u8fc1\u79fb \u6570\u636e\u5e93\uff08Alembic \u7684\u4e3b\u8981\u529f\u80fd\uff09\u3002 \u8fc1\u79fb \u662f\u5728\u66f4\u6539 SQLAlchemy \u6a21\u578b\u7684\u7ed3\u6784\u3001\u6dfb\u52a0\u5c5e\u6027\u540e\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u590d\u5236\u66f4\u6539\u4e0e\u6dfb\u52a0\u65b0\u5217\u3001\u65b0\u8868\u65f6\u6240\u9700\u7684\u4e00\u7ec4\u6b65\u9aa4\u3002 Alembic \u7684\u793a\u4f8b\u5728 FastAPI \u7684\u6a21\u677f\u9879\u76ee\u91cc\u3002 Project Generation - Template . \u7279\u522b\u662f\u5728 \u6e90\u4ee3\u7801\u7684 alembic \u76ee\u5f55\u4e2d \u3002","title":"Alembic \u6ce8\u610f\u4e8b\u9879"},{"location":"tutorial/sql-databases/#_9","text":"\u6b64\u5904\uff0c\u4f7f\u7528 sql_app/databases.py \u4e2d\u7684 SessionLocal \u7c7b\u6765\u521b\u5efa\u4f9d\u8d56\u9879\u3002 \u8981\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u63d0\u4f9b\u72ec\u7acb\u7684\u6570\u636e\u5e93\u4f1a\u8bdd/\u8fde\u63a5\uff08 SessionLocal \uff09\uff0c\u5728\u6240\u6709\u8bf7\u6c42\u4e2d\u4f7f\u7528\u76f8\u540c\u7684\u4f1a\u8bdd\uff0c\u5e76\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u3002 \u7136\u540e\uff0c\u4e3a\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u521b\u5efa\u65b0\u4f1a\u8bdd\u3002 \u4e3a\u6b64\uff0c\u8981\u521b\u5efa\u65b0\u7684 yield \u751f\u6210\u5668\u4f9d\u8d56\u9879\uff0c\u8be6\u89c1 yield \u751f\u6210\u5668\u4f9d\u8d56\u9879 \u4e00\u7ae0\u3002 \u4f9d\u8d56\u9879\u4f1a\u521b\u5efa\u65b0\u7684 SQLAlchemy SessionLocal \uff0c\u7528\u4e8e\u5355\u4e2a\u8bf7\u6c42\uff0c\u5e76\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u3002 Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u8bf4\u660e \u521b\u5efa SessionLocal() \uff0c\u5e76\u628a\u5904\u7406\u8bf7\u6c42\u653e\u5165 try \u4ee3\u7801\u5757\u3002 \u7136\u540e\uff0c\u5728 finally \u4ee3\u7801\u5757\u4e2d\u5173\u95ed\u3002 \u8fd9\u6837\u5373\u53ef\u786e\u4fdd\u5c31\u7b97\u5728\u5904\u7406\u8bf7\u6c42\u65f6\u51fa\u73b0\u5f02\u5e38\uff0c\u6570\u636e\u5e93\u4f1a\u8bdd\u4e5f\u4f1a\u5728\u8bf7\u6c42\u4e4b\u540e\u5173\u95ed\u3002\u3002 \u4f46\u4e0d\u80fd\u4ece\u9000\u51fa\u4ee3\u7801\u4e2d\u89e6\u53d1\u53e6\u4e00\u4e2a\u5f02\u5e38\u3002\u8be6\u89c1 yield \u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e0e HTTPException \u3002 \u7136\u540e\uff0c\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u65f6\uff0c\u4f7f\u7528\u76f4\u63a5\u4ece SQLAlchemy \u5bfc\u5165\u7684\u7c7b\u578b Session \u58f0\u660e\u3002 \u8fd9\u5c06\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u63d0\u4f9b\u66f4\u597d\u7684\u7f16\u8f91\u5668\u652f\u6301\uff0c\u56e0\u4e3a\u7f16\u8f91\u5668\u77e5\u9053 db \u53c2\u6570\u7684\u7c7b\u578b\u662f Session : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u6280\u672f\u7ec6\u8282 \u53c2\u6570 db \u5b9e\u9645\u4e0a\u662f SessionLocal \u7c7b\u578b, \u4f46\u662f\u8fd9\u4e2a\u7c7b\uff08\u4f7f\u7528 sessionmaker() \u521b\u5efa\uff09\u662f SQLAlchemy Session \u7684 \u4ee3\u7406 \uff0c\u56e0\u6b64, \u7f16\u8f91\u5668\u5b9e\u9645\u4e0a\u5e76\u4e0d\u77e5\u9053\u63d0\u4f9b\u4e86\u4ec0\u4e48\u65b9\u6cd5\u3002 \u4f46\u662f\u901a\u8fc7\u5c06\u7c7b\u578b\u58f0\u660e\u4e3a Session , \u7f16\u8f91\u5668\u5c31\u53ef\u4ee5\u77e5\u9053\u53ef\u7528\u7684\u65b9\u6cd5\uff08 .add() \u3001 .query() \u3001 .commit() , \u7b49\uff09\uff0c\u5e76\u4e14\u53ef\u4ee5\u63d0\u4f9b\u81ea\u52a8\u8865\u5168\u7b49\u652f\u6301\u3002\u7c7b\u578b\u58f0\u660e\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u5bf9\u8c61\u3002","title":"\u521b\u5efa\u4f9d\u8d56\u9879"},{"location":"tutorial/sql-databases/#fastapi_1","text":"\u6700\u540e\u8981\u8bf4\u7684\u662f\uff0c\u8fd9\u91cc\u662f\u6807\u51c6\u7684 FastAPI \u8def\u5f84\u64cd\u4f5c \u4ee3\u7801\u3002 Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u5728\u6bcf\u4e2a\u8bf7\u6c42\u4e4b\u524d\u901a\u8fc7\u751f\u6210\u5668\u4f9d\u8d56\u9879\u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u5728\u4e4b\u540e\u5173\u95ed\u3002 \u7136\u540e\uff0c\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u521b\u5efa\u6240\u9700\u7684\u4f9d\u8d56\u9879\uff0c\u4ee5\u76f4\u63a5\u83b7\u5f97\u8be5\u4f1a\u8bdd\u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\u90e8\u76f4\u63a5\u8c03\u7528 crud.get_user \uff0c\u5e76\u4f7f\u7528\u8be5\u4f1a\u8bdd\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u8fd4\u56de\u7684\u503c\u662f SQLAlchemy \u6a21\u578b\u6216 SQLAlchemy \u6a21\u578b\u5217\u8868\u3002 \u4f46\u662f\uff0c\u7531\u4e8e\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u90fd\u6709\u5e26\u6709\u4f7f\u7528 orm_mode \u7684 Pydantic \u6a21\u578b /\u6982\u56fe\u7684 response_model \uff0cPydantic \u6a21\u578b\u4e2d\u58f0\u660e\u7684\u6570\u636e\u5c06\u4ece\u5b83\u4eec\u4e2d\u63d0\u53d6\u51fa\u6765\uff0c\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u540c\u65f6\u8fdb\u884c\u6240\u6709\u6b63\u5e38\u7684\u8fc7\u6ee4\u548c\u9a8c\u8bc1\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u6709\u4e9b response_models \u5177\u6709\u6807\u51c6\u7684 Python \u7c7b\u578b\uff0c\u5982 List[schemas.Item] \u3002 \u4f46\u662f\u7531\u4e8e\u8be5 List \u7684\u5185\u5bb9/\u53c2\u6570\u662f\u5e26\u6709 orm_mode \u7684 Pydantic \u6a21\u578b \uff0c\u6570\u636e\u5c06\u50cf\u5f80\u5e38\u4e00\u6837\u88ab\u68c0\u7d22\u5e76\u8fd4\u56de\u7ed9\u5ba2\u6237\u7aef\uff0c\u6ca1\u6709\u95ee\u9898\u3002","title":"\u521b\u5efa FastAPI \u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/sql-databases/#def-async-def","text":"\u5728\u8fd9\u91cc\uff0c\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u5185\u90e8\u548c\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528 SQLAlchemy \u4ee3\u7801\uff0c\u53cd\u8fc7\u6765\uff0c\u5b83\u5c06\u4e0e\u5916\u90e8\u6570\u636e\u5e93\u901a\u4fe1\u3002 \u8fd9\u53ef\u80fd\u9700\u8981 \u7b49\u5f85 \u4e00\u4f1a\u513f\u3002 \u4f46\u7531\u4e8e SQLAlchemy \u4e0d\u517c\u5bb9\u76f4\u63a5\u4f7f\u7528 await \uff0c\u5982\u4e0b\u7684\u4ee3\u7801: user = await db . query ( User ) . first () \u2026\u2026\u53cd\u4e4b\uff0c\u8981\u4f7f\u7528\uff1a user = db . query ( User ) . first () \u7136\u540e\uff0c\u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u548c\u4f9d\u8d56\u6ca1\u6709\u4f7f\u7528 async def \uff0c\u53ea\u662f\u666e\u901a\u7684 def \uff0c\u5982\uff1a @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) ... \u8bf4\u660e \u5982\u9700\u5f02\u6b65\u8fde\u63a5\u5173\u7cfb\u578b\u6570\u636e\u5e93\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65 SQL \u5173\u7cfb\u578b\u6570\u636e\u5e93 \u3002 \u6280\u672f\u7ec6\u8282 \u5982\u679c\u60a8\u5f88\u597d\u5947\uff0c\u5e76\u4e14\u6280\u672f\u9ad8\u8d85\uff0c\u53ef\u4ee5\u9605\u8bfb\u672c\u6587\uff0c\u4e86\u89e3 async def \u548c def \u5982\u4f55\u5904\u7406\u6280\u672f\u7ec6\u8282 Async \u6587\u6863\u3002","title":"def \u548c async def \u7b80\u4ecb"},{"location":"tutorial/sql-databases/#_10","text":"\u56e0\u4e3a\u76f4\u63a5\u4f7f\u7528 SQLAlchemy\uff0c\u4e0d\u9700\u8981\u4efb\u4f55\u5176\u4ed6\u63d2\u4ef6\u4f7f\u5b83\u4e0e FastAPI \u4e00\u8d77\u5de5\u4f5c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 Alembic \u5b9e\u73b0\u6570\u636e\u5e93 \u8fc1\u79fb \u3002 \u7531\u4e8e\u4e0e SQLAlchemy \u548c SQLAlchemy \u6a21\u578b\u76f8\u5173\u7684\u4ee3\u7801\u5b58\u5728\u4e8e\u72ec\u7acb\u7684\u6587\u4ef6\u4e2d\uff0c\u751a\u81f3\u53ef\u4ee5\u4f7f\u7528 Alembic \u6267\u884c\u8fc1\u79fb\uff0c\u800c\u65e0\u9700\u5b89\u88c5 FastAPI\u3001Pydantic \u7b49\u652f\u6301\u5e93\u3002 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u5728\u4e0e FastAPI \u65e0\u5173\u7684\u4ee3\u7801\u7684\u5176\u4ed6\u90e8\u5206\u4e2d\u4f7f\u7528\u76f8\u540c\u7684 SQLAlchemy \u6a21\u578b\u548c\u5b9e\u7528\u7a0b\u5e8f\u3002 \u4f8b\u5982\uff0c\u5728\u540e\u53f0\u7684 task worker Celery \u3001 RQ \u6216 ARQ .","title":"\u8fc1\u79fb"},{"location":"tutorial/sql-databases/#_11","text":"\u6ce8\u610f\uff0c\u9879\u76ee\u6587\u4ef6\u5939\u5e94\u4e3a my_super_project \uff0c\u8be5\u6587\u4ef6\u5939\u5305\u542b sql_app \u5b50\u6587\u4ef6\u5939\u3002 sql_app \u5e94\u5305\u542b\u4ee5\u4e0b\u6587\u4ef6\uff1a sql_app/__init__.py \uff1a\u7a7a\u6587\u4ef6 sql_app/database.py \uff1a from sqlalchemy import create_engine from sqlalchemy.ext.declarative import declarative_base from sqlalchemy.orm import sessionmaker SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\" # SQLALCHEMY_DATABASE_URL = \"postgresql://user:password@postgresserver/db\" engine = create_engine ( SQLALCHEMY_DATABASE_URL , connect_args = { \"check_same_thread\" : False } ) SessionLocal = sessionmaker ( autocommit = False , autoflush = False , bind = engine ) Base = declarative_base () sql_app/models.py : from sqlalchemy import Boolean , Column , ForeignKey , Integer , String from sqlalchemy.orm import relationship from .database import Base class User ( Base ): __tablename__ = \"users\" id = Column ( Integer , primary_key = True , index = True ) email = Column ( String , unique = True , index = True ) hashed_password = Column ( String ) is_active = Column ( Boolean , default = True ) items = relationship ( \"Item\" , back_populates = \"owner\" ) class Item ( Base ): __tablename__ = \"items\" id = Column ( Integer , primary_key = True , index = True ) title = Column ( String , index = True ) description = Column ( String , index = True ) owner_id = Column ( Integer , ForeignKey ( \"users.id\" )) owner = relationship ( \"User\" , back_populates = \"items\" ) sql_app/schemas.py : Python 3.6 and above Python 3.9 and above Python 3.10 and above from typing import List , Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : List [ Item ] = [] class Config : orm_mode = True from typing import Union from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : Union [ str , None ] = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True from pydantic import BaseModel class ItemBase ( BaseModel ): title : str description : str | None = None class ItemCreate ( ItemBase ): pass class Item ( ItemBase ): id : int owner_id : int class Config : orm_mode = True class UserBase ( BaseModel ): email : str class UserCreate ( UserBase ): password : str class User ( UserBase ): id : int is_active : bool items : list [ Item ] = [] class Config : orm_mode = True sql_app/crud.py : from sqlalchemy.orm import Session from . import models , schemas def get_user ( db : Session , user_id : int ): return db . query ( models . User ) . filter ( models . User . id == user_id ) . first () def get_user_by_email ( db : Session , email : str ): return db . query ( models . User ) . filter ( models . User . email == email ) . first () def get_users ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . User ) . offset ( skip ) . limit ( limit ) . all () def create_user ( db : Session , user : schemas . UserCreate ): fake_hashed_password = user . password + \"notreallyhashed\" db_user = models . User ( email = user . email , hashed_password = fake_hashed_password ) db . add ( db_user ) db . commit () db . refresh ( db_user ) return db_user def get_items ( db : Session , skip : int = 0 , limit : int = 100 ): return db . query ( models . Item ) . offset ( skip ) . limit ( limit ) . all () def create_user_item ( db : Session , item : schemas . ItemCreate , user_id : int ): db_item = models . Item ( ** item . dict (), owner_id = user_id ) db . add ( db_item ) db . commit () db . refresh ( db_item ) return db_item sql_app/main.py : Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () # Dependency def get_db (): db = SessionLocal () try : yield db finally : db . close () @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items","title":"\u56de\u987e\u6240\u6709\u6587\u4ef6"},{"location":"tutorial/sql-databases/#_12","text":"\u590d\u5236\u6b64\u4ee3\u7801\u5e76\u6309\u539f\u6837\u4f7f\u7528\u3002 \u8bf4\u660e \u5b9e\u9645\u4e0a\uff0c\u8fd9\u91cc\u663e\u793a\u7684\u4ee3\u7801\u662f\u6d4b\u8bd5\u7684\u4e00\u90e8\u5206\u3002\u548c\u8fd9\u4e9b\u6587\u6863\u4e2d\u7684\u5927\u90e8\u5206\u4ee3\u7801\u4e00\u6837 \u7136\u540e\uff0c\u7528 uvicorn \u8fd0\u884c\uff1a $ uvicorn sql_app.main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u6253\u5f00\u6d4f\u89c8\u5668\uff0c\u8bbf\u95ee http://127.0.0.1:8000/docs\u3002 \u5728\u8fd9\u91cc\u53ef\u4ee5\u4e0e FastAPI \u5e94\u7528\u4ea4\u4e92\uff0c\u4ece\u6570\u636e\u5e93\u4e2d\u8bfb\u53d6\u6570\u636e\uff1a","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/sql-databases/#_13","text":"\u5982\u679c\u60f3\u5728 FastAPI \u4e4b\u5916\uff0c\u76f4\u63a5\u5904\u7406 SQLite \u6570\u636e\u5e93\u6587\u4ef6\uff0c\u8c03\u8bd5\u5185\u5bb9\u3001\u6dfb\u52a0\u8868\u3001\u5217\u3001\u8bb0\u5f55\u3001\u4fee\u6539\u6570\u636e\u7b49\uff0c\u53ef\u4ee5\u4f7f\u7528 DB Browser for SQLite \u3002 \u754c\u9762\u5982\u4e0b\uff1a \u4e5f\u53ef\u4ee5\u4f7f\u7528SQLite \u5728\u7ebf\u6d4f\u89c8\u5668 SQLite Viewer \u6216 ExtendsClass \u3002","title":"\u4e0e\u6570\u636e\u5e93\u76f4\u63a5\u4ea4\u4e92"},{"location":"tutorial/sql-databases/#db","text":"\u5982\u679c\u4e0d\u4f7f\u7528\u751f\u6210\u5668\u4f9d\u8d56\u9879 -- \u4f8b\u5982\uff0c\u5982\u679c\u4e0d\u4f7f\u7528 Python 3.7 \uff0c\u4e5f\u4e0d\u80fd\u4e3a Python 3.6 \u5b89\u88c5 backports -- \u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u5728 \u4e2d\u95f4\u4ef6 \u4e2d\u8bbe\u7f6e\u4f1a\u8bdd\u3002 \u4e2d\u95f4\u4ef6 \u662f\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u6267\u884c\u7684\u51fd\u6570\uff0c\u6709\u4e9b\u4ee3\u7801\u5728\u7aef\u70b9\u51fd\u6570\u4e4b\u524d\u6267\u884c\uff0c\u6709\u4e9b\u4ee3\u7801\u5728\u7aef\u70b9\u51fd\u6570\u4e4b\u540e\u6267\u884c\u3002","title":"\u4f7f\u7528\u4e2d\u95f4\u4ef6\u7684\u5907\u9009 DB \u4f1a\u8bdd"},{"location":"tutorial/sql-databases/#_14","text":"\u4e2d\u95f4\u4ef6\uff08\u53ea\u662f\u51fd\u6570\uff09\u5c06\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u65b0\u7684 SQLAlchemy SessionLocal \uff0c\u5c06\u5176\u6dfb\u52a0\u5230\u8bf7\u6c42\u4e2d\uff0c\u7136\u540e\u5728\u8bf7\u6c42\u5b8c\u6210\u540e\u5173\u95ed\u3002 Python 3.6 and above Python 3.9 and above from typing import List from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = List [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = List [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items from fastapi import Depends , FastAPI , HTTPException , Request , Response from sqlalchemy.orm import Session from . import crud , models , schemas from .database import SessionLocal , engine models . Base . metadata . create_all ( bind = engine ) app = FastAPI () @app . middleware ( \"http\" ) async def db_session_middleware ( request : Request , call_next ): response = Response ( \"Internal server error\" , status_code = 500 ) try : request . state . db = SessionLocal () response = await call_next ( request ) finally : request . state . db . close () return response # Dependency def get_db ( request : Request ): return request . state . db @app . post ( \"/users/\" , response_model = schemas . User ) def create_user ( user : schemas . UserCreate , db : Session = Depends ( get_db )): db_user = crud . get_user_by_email ( db , email = user . email ) if db_user : raise HTTPException ( status_code = 400 , detail = \"Email already registered\" ) return crud . create_user ( db = db , user = user ) @app . get ( \"/users/\" , response_model = list [ schemas . User ]) def read_users ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): users = crud . get_users ( db , skip = skip , limit = limit ) return users @app . get ( \"/users/ {user_id} \" , response_model = schemas . User ) def read_user ( user_id : int , db : Session = Depends ( get_db )): db_user = crud . get_user ( db , user_id = user_id ) if db_user is None : raise HTTPException ( status_code = 404 , detail = \"User not found\" ) return db_user @app . post ( \"/users/ {user_id} /items/\" , response_model = schemas . Item ) def create_item_for_user ( user_id : int , item : schemas . ItemCreate , db : Session = Depends ( get_db ) ): return crud . create_user_item ( db = db , item = item , user_id = user_id ) @app . get ( \"/items/\" , response_model = list [ schemas . Item ]) def read_items ( skip : int = 0 , limit : int = 100 , db : Session = Depends ( get_db )): items = crud . get_items ( db , skip = skip , limit = limit ) return items \u8bf4\u660e \u5728 try \u4ee3\u7801\u5757\u4e2d\uff0c\u521b\u5efa SessionLocal() \u53ca\u5904\u7406\u8bf7\u6c42\u3002 \u7136\u540e\uff0c\u5728 finally \u4ee3\u7801\u5757\u4e2d\u5173\u95ed SessionLocal() \u3002 \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u786e\u4fdd\u6570\u636e\u5e93\u4f1a\u8bdd\u59cb\u7ec8\u5728\u8bf7\u6c42\u4e4b\u540e\u5173\u95ed\uff0c\u5373\u4f7f\u5728\u5904\u7406\u8bf7\u6c42\u65f6\u51fa\u73b0\u5f02\u5e38\u3002","title":"\u521b\u5efa\u4e2d\u95f4\u4ef6"},{"location":"tutorial/sql-databases/#requeststate","text":"request.state \u662f\u6bcf\u4e2a Request \u5bf9\u8c61\u7684\u5c5e\u6027\u3002\u5b83\u7528\u4e8e\u5b58\u50a8\u9644\u52a0\u5230\u8bf7\u6c42\u672c\u8eab\u7684\u4efb\u610f\u5bf9\u8c61\uff0c\u5982\u672c\u4f8b\u4e2d\u7684\u6570\u636e\u5e93\u4f1a\u8bdd\u3002\u66f4\u591a\u8be6\u60c5\uff0c\u8bf7\u53c2\u9605 Starlette \u5b98\u6863 - Request \u72b6\u6001 \u3002 \u672c\u4f8b\u4e2d\uff0c\u5b83\u7528\u4e8e\u786e\u4fdd\u5728\u6240\u6709\u8bf7\u6c42\u4e2d\u4f7f\u7528\u5355\u4e2a\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u7136\u540e\uff0c\u5728\u4e2d\u95f4\u4ef6\u91cc\u5173\u95ed\u3002","title":"\u5173\u4e8e request.state"},{"location":"tutorial/sql-databases/#_15","text":"\u5728\u6b64\uff0c\u6dfb\u52a0 \u4e2d\u95f4\u4ef6 \u4e0e\u751f\u6210\u5668\u4f9d\u8d56\u9879\u7c7b\u4f3c\uff0c\u4f46\u4e5f\u6709\u4e00\u4e9b\u533a\u522b\uff1a \u5b83\u9700\u8981\u66f4\u591a\u7684\u4ee3\u7801\uff0c\u6709\u70b9\u590d\u6742 \u4e2d\u95f4\u4ef6\u5fc5\u987b\u662f \u5f02\u6b65 \u51fd\u6570 \u5982\u679c\u6709\u4ee3\u7801\u5728\u5b83\u5fc5\u987b \u7b49\u5f85 \u7f51\u7edc\uff0c\u5b83\u53ef\u80fd\u5c06\u5e94\u7528 \u963b\u585e \u5728\u90a3\u91cc\uff0c\u964d\u4f4e\u4e00\u70b9\u6027\u80fd \u5c3d\u7ba1\u5728\u8fd9\u91cc SQLAlchemy \u7684\u5de5\u4f5c\u65b9\u5f0f\u53ef\u80fd\u4e0d\u662f\u5f88\u6210\u95ee\u9898 \u4f46\u5982\u679c\u6dfb\u52a0\u66f4\u591a\u7684\u4ee3\u7801\u5230\u4e2d\u95f4\u4ef6\u6709\u5927\u91cf\u7684 I/O \u7b49\u5f85\uff0c\u5c31\u53ef\u80fd\u4f1a\u6709\u95ee\u9898\u3002 \u4e2d\u95f4\u4ef6\u4e3a \u6bcf\u4e2a \u8bf7\u6c42\u8fd0\u884c\u3002 \u56e0\u6b64\uff0c\u5c06\u4e3a\u6bcf\u4e2a\u8bf7\u6c42\u521b\u5efa\u8fde\u63a5\u3002 \u5373\u4f7f\u5904\u7406\u8be5\u8bf7\u6c42\u7684 \u8def\u5f84\u64cd\u4f5c \u4e0d\u9700\u8981\u6570\u636e\u5e93\u3002 \u63d0\u793a \u5f53\u751f\u6210\u5668\u4f9d\u8d56\u9879\u5bf9\u4e8e\u7528\u4f8b\u6765\u8bf4\u5df2\u7ecf\u8db3\u591f\u65f6\uff0c\u4f7f\u7528 yield \u53ef\u80fd\u4f1a\u66f4\u597d\u3002 \u8bf4\u660e FastAPI \u65b0\u8fd1\u6dfb\u52a0\u4e86\u751f\u6210\u5668\u4f9d\u8d56\u9879\u3002 \u672c\u6559\u7a0b\u7684\u4e0a\u4e2a\u7248\u672c\u53ea\u6709\u4e2d\u95f4\u4ef6\u793a\u4f8b\uff0c\u53ef\u80fd\u6709\u51e0\u4e2a\u5e94\u7528\u4f7f\u7528\u4e2d\u95f4\u4ef6\u8fdb\u884c\u6570\u636e\u5e93\u4f1a\u8bdd\u7ba1\u7406\u3002","title":"\u751f\u6210\u5668\u4f9d\u8d56\u9879\u6216\u4e2d\u95f4\u4ef6"},{"location":"tutorial/static-files/","text":"\u9759\u6001\u6587\u4ef6 \u00b6 \u4f7f\u7528 StaticFiles \u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u5939\u81ea\u52a8\u63d0\u4f9b\u9759\u6001\u6587\u4ef6\u670d\u52a1\u3002 \u5b89\u88c5 aiofiles \u00b6 \u9996\u5148\uff0c\u5b89\u88c5 aiofiles \uff1a $ pip install aiofiles ---> 100% \u4f7f\u7528 StaticFiles \u00b6 \u5bfc\u5165 StaticFiles \u5728\u6307\u5b9a\u8def\u5f84\u4e2d \u6302\u8f7d StaticFiles() from fastapi import FastAPI from fastapi.staticfiles import StaticFiles app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 from starlette.staticfiles import StaticFiles \u3002 FastAPI \u7684 fastapi.staticfiles \u4e0e starlette.staticfiles \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c fastapi.staticfiles \u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 \u4ec0\u4e48\u662f \u6302\u8f7d \u00b6 \u6302\u8f7d \u662f\u6307\u5728\u8def\u5f84\u4e2d\u6dfb\u52a0\u5b8c\u5168 \u72ec\u7acb \u7684\u5e94\u7528\uff0c\u7136\u540e\u7528\u5b83\u5904\u7406\u6240\u6709\u5b50\u8def\u5f84\u3002 \u4e0e APIRouter \u4e0d\u540c\uff0c\u6302\u8f7d\u7684\u5e94\u7528\u662f\u5b8c\u5168\u72ec\u7acb\u7684\u3002\u4e3b\u5e94\u7528\u7684 OpenAPI \u4e0e API \u6587\u6863\u4e0d\u5305\u542b\u6302\u8f7d\u5e94\u7528\u4e2d\u7684\u5185\u5bb9\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u4f1a\u4ecb\u7ecd\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002 \u7ec6\u8282 \u00b6 \u7b2c\u4e00\u4e2a /static \u662f\u8981 \u6302\u8f7d \u7684 \u5b50\u5e94\u7528 \u7684\u8def\u5f84\u3002\u56e0\u6b64\uff0c\u6302\u8f7d\u5b50\u5e94\u7528\u4f1a\u5904\u7406\u6240\u6709\u4ee5 /static \u5f00\u5934\u7684\u8def\u5f84\u3002 directory=\"static\" \u662f\u9759\u6001\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u3002 name=\"static\" \u7528\u4e8e\u6307\u5b9a FastAPI \u5185\u90e8\u4f7f\u7528\u7684\u540d\u79f0\u3002 \u8fd9\u4e9b\u53c2\u6570\u90fd\u4e0d\u5fc5\u547d\u540d\u4e3a static \uff0c\u53ef\u4ee5\u6309\u9700\u66f4\u6539\u3002 \u66f4\u591a\u8bf4\u660e \u00b6 \u66f4\u591a\u7ec6\u8282\u4e0e\u9009\u9879\uff0c\u8be6\u89c1 Starlette \u6587\u6863\uff1a \u9759\u6001\u6587\u4ef6 \u3002","title":"\u9759\u6001\u6587\u4ef6"},{"location":"tutorial/static-files/#_1","text":"\u4f7f\u7528 StaticFiles \u53ef\u4ee5\u6307\u5b9a\u6587\u4ef6\u5939\u81ea\u52a8\u63d0\u4f9b\u9759\u6001\u6587\u4ef6\u670d\u52a1\u3002","title":"\u9759\u6001\u6587\u4ef6"},{"location":"tutorial/static-files/#aiofiles","text":"\u9996\u5148\uff0c\u5b89\u88c5 aiofiles \uff1a $ pip install aiofiles ---> 100%","title":"\u5b89\u88c5 aiofiles"},{"location":"tutorial/static-files/#staticfiles","text":"\u5bfc\u5165 StaticFiles \u5728\u6307\u5b9a\u8def\u5f84\u4e2d \u6302\u8f7d StaticFiles() from fastapi import FastAPI from fastapi.staticfiles import StaticFiles app = FastAPI () app . mount ( \"/static\" , StaticFiles ( directory = \"static\" ), name = \"static\" ) \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 from starlette.staticfiles import StaticFiles \u3002 FastAPI \u7684 fastapi.staticfiles \u4e0e starlette.staticfiles \u76f8\u540c\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\u3002\u4f46\u5b9e\u9645\u4e0a\uff0c fastapi.staticfiles \u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002","title":"\u4f7f\u7528 StaticFiles"},{"location":"tutorial/static-files/#_2","text":"\u6302\u8f7d \u662f\u6307\u5728\u8def\u5f84\u4e2d\u6dfb\u52a0\u5b8c\u5168 \u72ec\u7acb \u7684\u5e94\u7528\uff0c\u7136\u540e\u7528\u5b83\u5904\u7406\u6240\u6709\u5b50\u8def\u5f84\u3002 \u4e0e APIRouter \u4e0d\u540c\uff0c\u6302\u8f7d\u7684\u5e94\u7528\u662f\u5b8c\u5168\u72ec\u7acb\u7684\u3002\u4e3b\u5e94\u7528\u7684 OpenAPI \u4e0e API \u6587\u6863\u4e0d\u5305\u542b\u6302\u8f7d\u5e94\u7528\u4e2d\u7684\u5185\u5bb9\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u4f1a\u4ecb\u7ecd\u66f4\u591a\u76f8\u5173\u5185\u5bb9\u3002","title":"\u4ec0\u4e48\u662f\u6302\u8f7d"},{"location":"tutorial/static-files/#_3","text":"\u7b2c\u4e00\u4e2a /static \u662f\u8981 \u6302\u8f7d \u7684 \u5b50\u5e94\u7528 \u7684\u8def\u5f84\u3002\u56e0\u6b64\uff0c\u6302\u8f7d\u5b50\u5e94\u7528\u4f1a\u5904\u7406\u6240\u6709\u4ee5 /static \u5f00\u5934\u7684\u8def\u5f84\u3002 directory=\"static\" \u662f\u9759\u6001\u6587\u4ef6\u6240\u5728\u7684\u6587\u4ef6\u5939\u3002 name=\"static\" \u7528\u4e8e\u6307\u5b9a FastAPI \u5185\u90e8\u4f7f\u7528\u7684\u540d\u79f0\u3002 \u8fd9\u4e9b\u53c2\u6570\u90fd\u4e0d\u5fc5\u547d\u540d\u4e3a static \uff0c\u53ef\u4ee5\u6309\u9700\u66f4\u6539\u3002","title":"\u7ec6\u8282"},{"location":"tutorial/static-files/#_4","text":"\u66f4\u591a\u7ec6\u8282\u4e0e\u9009\u9879\uff0c\u8be6\u89c1 Starlette \u6587\u6863\uff1a \u9759\u6001\u6587\u4ef6 \u3002","title":"\u66f4\u591a\u8bf4\u660e"},{"location":"tutorial/testing/","text":"\u6d4b\u8bd5 \u00b6 \u501f\u52a9 Starlette \uff0c\u53ef\u4ee5\u8f7b\u677e\u3001\u7b80\u5355\u5730\u6d4b\u8bd5 FastAPI \u5e94\u7528\u3002 Starlette \u57fa\u4e8e Requests \uff0c\u6240\u4ee5\uff0c\u5927\u5bb6\u5e94\u8be5\u5bf9\u6d4b\u8bd5 FastAPI \u5e94\u7528\u5e76\u4e0d\u964c\u751f\u3002 \u501f\u52a9 Starlette\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 pytest \u6d4b\u8bd5 FastAPI \u5e94\u7528\u3002 \u4f7f\u7528 TestClient \u00b6 \u8bf4\u660e \u4f7f\u7528 TestClient \uff0c\u9996\u5148\u8981\u5b89\u88c5 httpx \u3002 \u4f8b\u5982\uff0c pip install httpx \u3002 \u5bfc\u5165 TestClient \u3002 \u521b\u5efa TestClient \uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9 FastAPI \u5e94\u7528\u3002 \u521b\u5efa\u4ee5 test_ \u5f00\u5934\u7684\u51fd\u6570\uff0c\u8fd9\u662f pytest \u7684\u6807\u51c6\u60ef\u4f8b\u3002 \u4f7f\u7528 TestClient \u5bf9\u8c61\u7684\u65b9\u5f0f\u4e0e requests \u7684\u65b9\u5f0f\u4e00\u6837\u3002 \u4f7f\u7528 Python \u6807\u51c6\u8868\u8fbe\u5f0f\u7f16\u5199\u7b80\u5355\u7684 assert \u8bed\u53e5\u8fdb\u884c\u68c0\u6d4b\uff0c\u8fd9\u4e5f\u662f pytest \u7684\u6807\u51c6\u60ef\u4f8b\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \u63d0\u793a \u6ce8\u610f\uff0c\u6d4b\u8bd5\u51fd\u6570\u662f\u666e\u901a\u51fd\u6570\uff08 def \uff09\uff0c\u4e0d\u662f\u5f02\u6b65\u51fd\u6570\uff08 async def \uff09\u3002 \u5e76\u4e14\uff0c\u8c03\u7528 client \u4e5f\u8981\u4f7f\u7528\u666e\u901a\u65b9\u5f0f\uff0c\u4e0d\u8981\u4f7f\u7528 await \u3002 \u8fd9\u6837\uff0c\u76f4\u63a5\u4f7f\u7528 pytest \u5c31\u4e0d\u4f1a\u53d8\u5f97\u590d\u6742\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.testclient import TestClient \u3002 FastAPI \u7684 fastapi.testclient \u4e0e starlette.testclient \u4e00\u6837\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\uff0c\u4f46\u5176\u5b9e\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 \u63d0\u793a \u9664\u4e86\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u5411 FastAPI \u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u5916\uff08\u4f8b\u5982\uff0c\u5f02\u6b65\u6570\u636e\u5e93\u51fd\u6570\uff09\uff0c\u5982\u679c\u60f3\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528 async \u5f02\u6b65\u51fd\u6570\uff0c\u8bf7\u53c2\u9605\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u7684 \u5f02\u6b65\u6d4b\u8bd5 \u3002 \u5206\u62c6\u6d4b\u8bd5 \u00b6 \u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6d4b\u8bd5\u4f1a\u5206\u4e3a\u591a\u4e2a\u4e0d\u540c\u6587\u4ef6\u3002 \u800c\u4e14\uff0c FastAPI \u5e94\u7528\u4e5f\u5f88\u6709\u53ef\u80fd\u662f\u7531\u591a\u4e2a\u6587\u4ef6/\u6a21\u5757\u7ec4\u6210\u7684\u3002 FastAPI \u7684 app \u6587\u4ef6 \u00b6 \u5047\u8bbe\u8981\u6d4b\u8bd5\u7684\u9879\u76ee\u4f7f\u7528\u4e0e \u5927\u578b\u5e94\u7528 \u4e00\u8282\u4e2d\u76f8\u540c\u7684\u6587\u4ef6\u67b6\u6784\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py FastAPI \u5e94\u7528\u4e2d\u7684 main.py \u5982\u4e0b\u6240\u793a\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } \u6d4b\u8bd5\u6587\u4ef6 \u00b6 \u521b\u5efa\u6d4b\u8bd5\u6587\u4ef6 test_main.py \u3002\u8be5\u6587\u4ef6\u53ef\u4ee5\u4e0e main.py \u5728\u540c\u4e00\u4e2a Python \u5305\u91cc\uff08\u5373\u5305\u542b __init__.py \u7684\u540c\u4e00\u4e2a\u76ee\u5f55\u5185\uff09\u3002 . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 test_main.py \u56e0\u4e3a\u8be5\u6587\u4ef6\u4e0e main.py \u5728\u540c\u4e00\u4e2a\u5305\u91cc\uff0c\u6b64\u5904\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\uff0c\u5373\u4ece main \u6a21\u5757\uff08 main.py \uff09\u4e2d\u5bfc\u5165 app \u5bf9\u8c61\uff1a from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u4e86\u3002 \u6d4b\u8bd5\uff1a\u6269\u5c55\u793a\u4f8b \u00b6 \u6269\u5c55\u4e0a\u8ff0\u793a\u4f8b\uff0c\u6dfb\u52a0\u66f4\u591a\u7ec6\u8282\uff0c\u4e86\u89e3\u5982\u4f55\u6d4b\u8bd5\u4e0d\u540c\u7ec4\u4ef6\u3002 \u6269\u5c55 FastAPI \u5e94\u7528\u6587\u4ef6 \u00b6 \u7ee7\u7eed\u4f7f\u7528\u4e0e\u4e0a\u6587\u76f8\u540c\u7684\u6587\u4ef6\u67b6\u6784\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 test_main.py \u5047\u8bbe FastAPI \u5e94\u7528\u7684 main.py \u4e2d\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6 \u8def\u5f84\u64cd\u4f5c \u3002 \u5176\u4e2d\uff0c GET \u64cd\u4f5c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002 \u800c POST \u64cd\u4f5c\u8fd4\u56de\u591a\u4e2a\u9519\u8bef\u3002 \u4e24\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u9700\u8981 X-Token \u8bf7\u6c42\u5934\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : Union [ str , None ] = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : str | None = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item \u6269\u5c55\u6d4b\u8bd5\u6587\u4ef6 \u00b6 \u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u6269\u5c55\u6d4b\u8bd5\u6587\u4ef6\uff0c test_main.py \u66f4\u65b0\u5982\u4e0b\u6240\u793a\uff1a from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_item (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 200 assert response . json () == { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" , } def test_read_item_bad_token (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"hailhydra\" }) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_read_inexistent_item (): response = client . get ( \"/items/baz\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 404 assert response . json () == { \"detail\" : \"Item not found\" } def test_create_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" }, ) assert response . status_code == 200 assert response . json () == { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" , } def test_create_item_bad_token (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"hailhydra\" }, json = { \"id\" : \"bazz\" , \"title\" : \"Bazz\" , \"description\" : \"Drop the bazz\" }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_create_existing_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foo\" , \"title\" : \"The Foo ID Stealers\" , \"description\" : \"There goes my stealer\" , }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Item already exists\" } \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u4f7f\u7528\u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u4e2d\u4f20\u9012\u4fe1\u606f\uff0c\u8bf7\u53bb\u8c37\u6b4c\u641c\u7d22\u5982\u4f55\u5728 httpx \u6216 requests \u4e2d\u6267\u884c\u8fd9\u4e00\u64cd\u4f5c\u3002\u6ce8\u610f\uff0cHTTPX \u662f\u57fa\u4e8e Request \u8bbe\u8ba1\u7684\u3002 \u6267\u884c\u540c\u6837\u7684\u6d4b\u8bd5\u64cd\u4f5c\u3002 \u4f8b\u5982\uff1a \u4f20\u9012 \u8def\u5f84 \u6216 \u67e5\u8be2 \u53c2\u6570\uff0c\u628a\u5b83\u6dfb\u52a0\u81f3 URL\u3002 \u4f20\u9012 JSON \u8bf7\u6c42\u4f53\u65f6\uff0c\u9700\u8981\u628a dict \u7b49 Python \u5bf9\u8c61\u4f20\u9012\u7ed9 json \u53c2\u6570\u3002 \u5982\u9700\u53d1\u9001\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f \u8868\u5355\u6570\u636e \uff0c\u5219\u8981\u4f7f\u7528 data \u53c2\u6570\u3002 \u4f20\u9012 \u8bf7\u6c42\u5934 \u65f6\uff0c\u53ef\u5728 headers \u53c2\u6570\u4e2d\u4f7f\u7528 dict \u3002 \u4f20\u9012 cookies \u65f6\uff0c\u53ef\u5728 cookies \u53c2\u6570\u4e2d\u4f7f\u7528 dict \u3002 \u5173\u4e8e\u5982\u4f55\u4f7f\u7528 httpx \u6216 TestClient \u628a\u6570\u636e\u4f20\u9012\u7ed9\u540e\u7aef\u7684\u8bf4\u660e\uff0c\u8be6\u89c1 HTTPX \u6587\u6863 \u3002 \u8bf4\u660e \u6ce8\u610f\uff0c TestClient \u63a5\u6536\u7684\u662f\u53ef\u4ee5\u8f6c\u6362\u4e3a JSON \u7684\u6570\u636e\uff0c\u4e0d\u662f Pydantic \u6a21\u578b\u3002 \u5982\u679c\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u5e76\u5e0c\u671b\u5728\u6d4b\u8bd5\u4e2d\u628a\u6a21\u578b\u7684\u6570\u636e\u53d1\u9001\u7ed9 FastAPI \u5e94\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 JSON \u7f16\u7801\u5668 \u4e2d\u7684 jsonable_encoder \u3002 \u8fd0\u884c\u6d4b\u8bd5 \u00b6 \u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5b89\u88c5 pytest \uff1a $ pip install pytest ---> 100% pytest \u4f1a\u81ea\u52a8\u68c0\u6d4b\u6587\u4ef6\uff0c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u6267\u884c\u6d4b\u8bd5\u6587\u4ef6\uff0c\u5c31\u80fd\u751f\u6210\u6d4b\u8bd5\u62a5\u544a\u3002 \u8fd0\u884c\u6d4b\u8bd5\uff1a $ pytest ================ test session starts ================ platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 rootdir: /home/user/code/superawesome-cli/app plugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1 collected 6 items ---> 100% test_main.py <span style=\"color: green; white-space: pre;\">...... [100%]</span> <span style=\"color: green;\">================= 1 passed in 0.03s =================</span>","title":"\u6d4b\u8bd5"},{"location":"tutorial/testing/#_1","text":"\u501f\u52a9 Starlette \uff0c\u53ef\u4ee5\u8f7b\u677e\u3001\u7b80\u5355\u5730\u6d4b\u8bd5 FastAPI \u5e94\u7528\u3002 Starlette \u57fa\u4e8e Requests \uff0c\u6240\u4ee5\uff0c\u5927\u5bb6\u5e94\u8be5\u5bf9\u6d4b\u8bd5 FastAPI \u5e94\u7528\u5e76\u4e0d\u964c\u751f\u3002 \u501f\u52a9 Starlette\uff0c\u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 pytest \u6d4b\u8bd5 FastAPI \u5e94\u7528\u3002","title":"\u6d4b\u8bd5"},{"location":"tutorial/testing/#testclient","text":"\u8bf4\u660e \u4f7f\u7528 TestClient \uff0c\u9996\u5148\u8981\u5b89\u88c5 httpx \u3002 \u4f8b\u5982\uff0c pip install httpx \u3002 \u5bfc\u5165 TestClient \u3002 \u521b\u5efa TestClient \uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9 FastAPI \u5e94\u7528\u3002 \u521b\u5efa\u4ee5 test_ \u5f00\u5934\u7684\u51fd\u6570\uff0c\u8fd9\u662f pytest \u7684\u6807\u51c6\u60ef\u4f8b\u3002 \u4f7f\u7528 TestClient \u5bf9\u8c61\u7684\u65b9\u5f0f\u4e0e requests \u7684\u65b9\u5f0f\u4e00\u6837\u3002 \u4f7f\u7528 Python \u6807\u51c6\u8868\u8fbe\u5f0f\u7f16\u5199\u7b80\u5355\u7684 assert \u8bed\u53e5\u8fdb\u884c\u68c0\u6d4b\uff0c\u8fd9\u4e5f\u662f pytest \u7684\u6807\u51c6\u60ef\u4f8b\u3002 from fastapi import FastAPI from fastapi.testclient import TestClient app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" } client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \u63d0\u793a \u6ce8\u610f\uff0c\u6d4b\u8bd5\u51fd\u6570\u662f\u666e\u901a\u51fd\u6570\uff08 def \uff09\uff0c\u4e0d\u662f\u5f02\u6b65\u51fd\u6570\uff08 async def \uff09\u3002 \u5e76\u4e14\uff0c\u8c03\u7528 client \u4e5f\u8981\u4f7f\u7528\u666e\u901a\u65b9\u5f0f\uff0c\u4e0d\u8981\u4f7f\u7528 await \u3002 \u8fd9\u6837\uff0c\u76f4\u63a5\u4f7f\u7528 pytest \u5c31\u4e0d\u4f1a\u53d8\u5f97\u590d\u6742\u3002 \u6280\u672f\u7ec6\u8282 \u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528 from starlette.testclient import TestClient \u3002 FastAPI \u7684 fastapi.testclient \u4e0e starlette.testclient \u4e00\u6837\uff0c\u53ea\u662f\u4e3a\u4e86\u65b9\u4fbf\u5f00\u53d1\u8005\u8c03\u7528\uff0c\u4f46\u5176\u5b9e\u5b83\u76f4\u63a5\u7ee7\u627f\u81ea Starlette\u3002 \u63d0\u793a \u9664\u4e86\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\u5411 FastAPI \u5e94\u7528\u53d1\u9001\u8bf7\u6c42\u5916\uff08\u4f8b\u5982\uff0c\u5f02\u6b65\u6570\u636e\u5e93\u51fd\u6570\uff09\uff0c\u5982\u679c\u60f3\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528 async \u5f02\u6b65\u51fd\u6570\uff0c\u8bf7\u53c2\u9605\u9ad8\u7ea7\u7528\u6237\u6307\u5357\u4e2d\u7684 \u5f02\u6b65\u6d4b\u8bd5 \u3002","title":"\u4f7f\u7528 TestClient"},{"location":"tutorial/testing/#_2","text":"\u5b9e\u9645\u5e94\u7528\u4e2d\uff0c\u6d4b\u8bd5\u4f1a\u5206\u4e3a\u591a\u4e2a\u4e0d\u540c\u6587\u4ef6\u3002 \u800c\u4e14\uff0c FastAPI \u5e94\u7528\u4e5f\u5f88\u6709\u53ef\u80fd\u662f\u7531\u591a\u4e2a\u6587\u4ef6/\u6a21\u5757\u7ec4\u6210\u7684\u3002","title":"\u5206\u62c6\u6d4b\u8bd5"},{"location":"tutorial/testing/#fastapi-app","text":"\u5047\u8bbe\u8981\u6d4b\u8bd5\u7684\u9879\u76ee\u4f7f\u7528\u4e0e \u5927\u578b\u5e94\u7528 \u4e00\u8282\u4e2d\u76f8\u540c\u7684\u6587\u4ef6\u67b6\u6784\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 main.py FastAPI \u5e94\u7528\u4e2d\u7684 main.py \u5982\u4e0b\u6240\u793a\uff1a from fastapi import FastAPI app = FastAPI () @app . get ( \"/\" ) async def read_main (): return { \"msg\" : \"Hello World\" }","title":"FastAPI \u7684 app \u6587\u4ef6"},{"location":"tutorial/testing/#_3","text":"\u521b\u5efa\u6d4b\u8bd5\u6587\u4ef6 test_main.py \u3002\u8be5\u6587\u4ef6\u53ef\u4ee5\u4e0e main.py \u5728\u540c\u4e00\u4e2a Python \u5305\u91cc\uff08\u5373\u5305\u542b __init__.py \u7684\u540c\u4e00\u4e2a\u76ee\u5f55\u5185\uff09\u3002 . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 test_main.py \u56e0\u4e3a\u8be5\u6587\u4ef6\u4e0e main.py \u5728\u540c\u4e00\u4e2a\u5305\u91cc\uff0c\u6b64\u5904\u53ef\u4ee5\u4f7f\u7528\u76f8\u5bf9\u5bfc\u5165\uff0c\u5373\u4ece main \u6a21\u5757\uff08 main.py \uff09\u4e2d\u5bfc\u5165 app \u5bf9\u8c61\uff1a from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_main (): response = client . get ( \"/\" ) assert response . status_code == 200 assert response . json () == { \"msg\" : \"Hello World\" } \u8fd9\u6837\uff0c\u5c31\u53ef\u4ee5\u7f16\u5199\u6d4b\u8bd5\u4ee3\u7801\u4e86\u3002","title":"\u6d4b\u8bd5\u6587\u4ef6"},{"location":"tutorial/testing/#_4","text":"\u6269\u5c55\u4e0a\u8ff0\u793a\u4f8b\uff0c\u6dfb\u52a0\u66f4\u591a\u7ec6\u8282\uff0c\u4e86\u89e3\u5982\u4f55\u6d4b\u8bd5\u4e0d\u540c\u7ec4\u4ef6\u3002","title":"\u6d4b\u8bd5\uff1a\u6269\u5c55\u793a\u4f8b"},{"location":"tutorial/testing/#fastapi","text":"\u7ee7\u7eed\u4f7f\u7528\u4e0e\u4e0a\u6587\u76f8\u540c\u7684\u6587\u4ef6\u67b6\u6784\uff1a . \u251c\u2500\u2500 app \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 main.py \u2502 \u2514\u2500\u2500 test_main.py \u5047\u8bbe FastAPI \u5e94\u7528\u7684 main.py \u4e2d\u8fd8\u6709\u4e00\u4e9b\u5176\u4ed6 \u8def\u5f84\u64cd\u4f5c \u3002 \u5176\u4e2d\uff0c GET \u64cd\u4f5c\u8fd4\u56de\u4e00\u4e2a\u9519\u8bef\u3002 \u800c POST \u64cd\u4f5c\u8fd4\u56de\u591a\u4e2a\u9519\u8bef\u3002 \u4e24\u4e2a \u8def\u5f84\u64cd\u4f5c \u90fd\u9700\u8981 X-Token \u8bf7\u6c42\u5934\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : Union [ str , None ] = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item from fastapi import FastAPI , Header , HTTPException from pydantic import BaseModel fake_secret_token = \"coneofsilence\" fake_db = { \"foo\" : { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" }, \"bar\" : { \"id\" : \"bar\" , \"title\" : \"Bar\" , \"description\" : \"The bartenders\" }, } app = FastAPI () class Item ( BaseModel ): id : str title : str description : str | None = None @app . get ( \"/items/ {item_id} \" , response_model = Item ) async def read_main ( item_id : str , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item_id not in fake_db : raise HTTPException ( status_code = 404 , detail = \"Item not found\" ) return fake_db [ item_id ] @app . post ( \"/items/\" , response_model = Item ) async def create_item ( item : Item , x_token : str = Header ()): if x_token != fake_secret_token : raise HTTPException ( status_code = 400 , detail = \"Invalid X-Token header\" ) if item . id in fake_db : raise HTTPException ( status_code = 400 , detail = \"Item already exists\" ) fake_db [ item . id ] = item return item","title":"\u6269\u5c55 FastAPI \u5e94\u7528\u6587\u4ef6"},{"location":"tutorial/testing/#_5","text":"\u540c\u6837\uff0c\u4e5f\u53ef\u4ee5\u6269\u5c55\u6d4b\u8bd5\u6587\u4ef6\uff0c test_main.py \u66f4\u65b0\u5982\u4e0b\u6240\u793a\uff1a from fastapi.testclient import TestClient from .main import app client = TestClient ( app ) def test_read_item (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 200 assert response . json () == { \"id\" : \"foo\" , \"title\" : \"Foo\" , \"description\" : \"There goes my hero\" , } def test_read_item_bad_token (): response = client . get ( \"/items/foo\" , headers = { \"X-Token\" : \"hailhydra\" }) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_read_inexistent_item (): response = client . get ( \"/items/baz\" , headers = { \"X-Token\" : \"coneofsilence\" }) assert response . status_code == 404 assert response . json () == { \"detail\" : \"Item not found\" } def test_create_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" }, ) assert response . status_code == 200 assert response . json () == { \"id\" : \"foobar\" , \"title\" : \"Foo Bar\" , \"description\" : \"The Foo Barters\" , } def test_create_item_bad_token (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"hailhydra\" }, json = { \"id\" : \"bazz\" , \"title\" : \"Bazz\" , \"description\" : \"Drop the bazz\" }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Invalid X-Token header\" } def test_create_existing_item (): response = client . post ( \"/items/\" , headers = { \"X-Token\" : \"coneofsilence\" }, json = { \"id\" : \"foo\" , \"title\" : \"The Foo ID Stealers\" , \"description\" : \"There goes my stealer\" , }, ) assert response . status_code == 400 assert response . json () == { \"detail\" : \"Item already exists\" } \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u8be5\u5982\u4f55\u4f7f\u7528\u5ba2\u6237\u7aef\u5728\u8bf7\u6c42\u4e2d\u4f20\u9012\u4fe1\u606f\uff0c\u8bf7\u53bb\u8c37\u6b4c\u641c\u7d22\u5982\u4f55\u5728 httpx \u6216 requests \u4e2d\u6267\u884c\u8fd9\u4e00\u64cd\u4f5c\u3002\u6ce8\u610f\uff0cHTTPX \u662f\u57fa\u4e8e Request \u8bbe\u8ba1\u7684\u3002 \u6267\u884c\u540c\u6837\u7684\u6d4b\u8bd5\u64cd\u4f5c\u3002 \u4f8b\u5982\uff1a \u4f20\u9012 \u8def\u5f84 \u6216 \u67e5\u8be2 \u53c2\u6570\uff0c\u628a\u5b83\u6dfb\u52a0\u81f3 URL\u3002 \u4f20\u9012 JSON \u8bf7\u6c42\u4f53\u65f6\uff0c\u9700\u8981\u628a dict \u7b49 Python \u5bf9\u8c61\u4f20\u9012\u7ed9 json \u53c2\u6570\u3002 \u5982\u9700\u53d1\u9001\u7684\u4e0d\u662f JSON\uff0c\u800c\u662f \u8868\u5355\u6570\u636e \uff0c\u5219\u8981\u4f7f\u7528 data \u53c2\u6570\u3002 \u4f20\u9012 \u8bf7\u6c42\u5934 \u65f6\uff0c\u53ef\u5728 headers \u53c2\u6570\u4e2d\u4f7f\u7528 dict \u3002 \u4f20\u9012 cookies \u65f6\uff0c\u53ef\u5728 cookies \u53c2\u6570\u4e2d\u4f7f\u7528 dict \u3002 \u5173\u4e8e\u5982\u4f55\u4f7f\u7528 httpx \u6216 TestClient \u628a\u6570\u636e\u4f20\u9012\u7ed9\u540e\u7aef\u7684\u8bf4\u660e\uff0c\u8be6\u89c1 HTTPX \u6587\u6863 \u3002 \u8bf4\u660e \u6ce8\u610f\uff0c TestClient \u63a5\u6536\u7684\u662f\u53ef\u4ee5\u8f6c\u6362\u4e3a JSON \u7684\u6570\u636e\uff0c\u4e0d\u662f Pydantic \u6a21\u578b\u3002 \u5982\u679c\u5728\u6d4b\u8bd5\u4e2d\u4f7f\u7528 Pydantic \u6a21\u578b\uff0c\u5e76\u5e0c\u671b\u5728\u6d4b\u8bd5\u4e2d\u628a\u6a21\u578b\u7684\u6570\u636e\u53d1\u9001\u7ed9 FastAPI \u5e94\u7528\uff0c\u53ef\u4ee5\u4f7f\u7528 JSON \u7f16\u7801\u5668 \u4e2d\u7684 jsonable_encoder \u3002","title":"\u6269\u5c55\u6d4b\u8bd5\u6587\u4ef6"},{"location":"tutorial/testing/#_6","text":"\u63a5\u4e0b\u6765\uff0c\u9700\u8981\u5b89\u88c5 pytest \uff1a $ pip install pytest ---> 100% pytest \u4f1a\u81ea\u52a8\u68c0\u6d4b\u6587\u4ef6\uff0c\u5e76\u8fdb\u884c\u6d4b\u8bd5\u3002\u6267\u884c\u6d4b\u8bd5\u6587\u4ef6\uff0c\u5c31\u80fd\u751f\u6210\u6d4b\u8bd5\u62a5\u544a\u3002 \u8fd0\u884c\u6d4b\u8bd5\uff1a $ pytest ================ test session starts ================ platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1 rootdir: /home/user/code/superawesome-cli/app plugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1 collected 6 items ---> 100% test_main.py <span style=\"color: green; white-space: pre;\">...... [100%]</span> <span style=\"color: green;\">================= 1 passed in 0.03s =================</span>","title":"\u8fd0\u884c\u6d4b\u8bd5"},{"location":"tutorial/dependencies/","text":"\u4f9d\u8d56\u9879 - \u7b2c\u4e00\u6b65 \u00b6 FastAPI \u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\uff0c\u4f46\u529f\u80fd\u5f3a\u5927\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u8fd9\u4e2a\u4f9d\u8d56\u7cfb\u7edf\u8bbe\u8ba1\u7684\u7b80\u5355\u6613\u7528\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u8f7b\u677e\u5730\u628a\u5404\u79cd\u7ec4\u4ef6\u96c6\u6210\u81f3 FastAPI \u3002 \u4ec0\u4e48\u662f \u4f9d\u8d56\u6ce8\u5165 \u00b6 \u7f16\u7a0b\u4e2d\u7684 \u4f9d\u8d56\u6ce8\u5165 \u662f\u58f0\u660e\u4ee3\u7801\uff08\u672c\u6587\u4e2d\u4e3a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff09\u8fd0\u884c\u6240\u9700\u7684\uff0c\u6216\u8981\u4f7f\u7528\u7684 \u4f9d\u8d56 \u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u7136\u540e\uff0c\u7531\u7cfb\u7edf\uff08\u672c\u6587\u4e2d\u4e3a FastAPI \uff09\u8d1f\u8d23\u6267\u884c\u4efb\u610f\u9700\u8981\u7684\u903b\u8f91\uff0c\u4e3a\u4ee3\u7801\u63d0\u4f9b\u8fd9\u4e9b\u4f9d\u8d56\uff08 \u6ce8\u5165 \u4f9d\u8d56\u9879\uff09\u3002 \u4f9d\u8d56\u6ce8\u5165\u5e38\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a \u5171\u4eab\u4e1a\u52a1\u903b\u8f91\uff08\u590d\u7528\u76f8\u540c\u7684\u4ee3\u7801\u903b\u8f91\uff09 \u5171\u4eab\u6570\u636e\u5e93\u8fde\u63a5 \u5b9e\u73b0\u5b89\u5168\u3001\u9a8c\u8bc1\u3001\u89d2\u8272\u6743\u9650 \u7b49\u7b49\u2026\u2026 \u4e0a\u8ff0\u573a\u666f\u5747\u53ef\u4ee5\u4f7f\u7528 \u4f9d\u8d56\u6ce8\u5165 \uff0c\u5c06\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\u3002 \u7b2c\u4e00\u6b65 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c3d\u7ba1\u5b83\u8fc7\u4e8e\u7b80\u5355\uff0c\u4e0d\u662f\u5f88\u5b9e\u7528\u3002 \u4f46\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u521d\u6b65\u4e86\u89e3 \u4f9d\u8d56\u6ce8\u5165 \u7684\u5de5\u4f5c\u673a\u5236\u3002 \u521b\u5efa\u4f9d\u8d56\u9879 \u00b6 \u9996\u5148\uff0c\u8981\u5173\u6ce8\u7684\u662f\u4f9d\u8d56\u9879\u3002 \u4f9d\u8d56\u9879\u662f\u4f7f\u7528\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f8\u540c\u53c2\u6570\u7684\u51fd\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u641e\u5b9a\u6536\u5de5\u3002 \u53ea\u7528\u4e86 2 \u884c \u4ee3\u7801\u3002 \u4f9d\u8d56\u9879\u51fd\u6570\u7684\u5f62\u5f0f\u548c\u7ed3\u6784\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u3002 \u56e0\u6b64\uff0c\u4f9d\u8d56\u9879\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709 \u88c5\u9970\u5668 \uff08\u5373\uff0c\u6ca1\u6709 @app.get(\"/some-path\") \uff09\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002 \u4f9d\u8d56\u9879\u53ef\u4ee5\u8fd4\u56de\u5404\u79cd\u5185\u5bb9\u3002 \u672c\u4f8b\u7684\u4f9d\u8d56\u9879\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a str \u7c7b\u578b\u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q int \u7c7b\u578b\u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 skip \uff0c\u9ed8\u8ba4\u503c\u662f 0 int \u7c7b\u578b\u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 limit \uff0c\u9ed8\u8ba4\u503c\u662f 100 \u4f9d\u8d56\u9879\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5305\u542b\u8fd9\u4e9b\u503c\u7684 \u5b57\u5178 \u3002 \u5bfc\u5165 Depends \u00b6 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u58f0\u660e\u4f9d\u8d56\u9879 \u00b6 \u4e0e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528 Body \u3001 Query \u7b49\u53c2\u6570\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u58f0\u660e\u4f9d\u8d56\u9879\u4f7f\u7528 Depends \u548c\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u867d\u7136\uff0c\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u4f7f\u7528 Depends \u7684\u65b9\u5f0f\u4e0e Body \u3001 Query \u76f8\u540c\uff0c\u4f46 Depends \u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002 \u8fd9\u91cc\u53ea\u80fd\u4f20\u7ed9 Depends \u4e00\u4e2a\u53c2\u6570\u3002 \u4e14\u8be5\u53c2\u6570\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u6bd4\u5982\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u63a5\u6536\u7684\u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u4e00\u6837\u3002 \u63d0\u793a \u4e0b\u4e00\u8282\u4ecb\u7ecd\uff0c\u9664\u4e86\u51fd\u6570\u4e4b\u5916\uff0c\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b \u5bf9\u8c61 \u3002 \u63a5\u6536\u5230\u65b0\u7684\u8bf7\u6c42\u65f6\uff0c FastAPI \u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u4f9d\u8d56\u9879\u51fd\u6570\uff08 \u53ef\u4f9d\u8d56\u9879 \uff09 \u83b7\u53d6\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c \u628a\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users \u8fd9\u6837\uff0c\u53ea\u7f16\u5199\u4e00\u6b21\u4ee3\u7801\uff0c FastAPI \u5c31\u53ef\u4ee5\u4e3a\u591a\u4e2a \u8def\u5f84\u64cd\u4f5c \u5171\u4eab\u8fd9\u6bb5\u4ee3\u7801 \u3002 \u68c0\u67e5 \u6ce8\u610f\uff0c\u65e0\u9700\u521b\u5efa\u4e13\u95e8\u7684\u7c7b\uff0c\u5e76\u5c06\u4e4b\u4f20\u9012\u7ed9 FastAPI \u4ee5\u8fdb\u884c \u6ce8\u518c \u6216\u6267\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 \u53ea\u8981\u628a\u5b83\u4f20\u9012\u7ed9 Depends \uff0c FastAPI \u5c31\u77e5\u9053\u8be5\u5982\u4f55\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u3002 \u8981\u4e0d\u8981\u4f7f\u7528 async \uff1f \u00b6 FastAPI \u8c03\u7528\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u5b9a\u4e49\u4f9d\u8d56\u9879\u51fd\u6570\u4e5f\u8981\u4f7f\u7528\u4e0e\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u76f8\u540c\u7684\u89c4\u5219\u3002 \u5373\uff0c\u65e2\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u51fd\u6570\u5b9a\u4e49\u4f9d\u8d56\u9879\u3002 \u5728\u666e\u901a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u53ef\u4ee5\u58f0\u660e\u5f02\u6b65\u4f9d\u8d56\u9879\uff1b\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u58f0\u660e\u666e\u901a\u4f9d\u8d56\u9879\u3002 \u4e0a\u8ff0\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u53ef\u884c\u7684\uff0c FastAPI \u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u3002 \u7b14\u8bb0 \u5982\u91cc\u4e0d\u4e86\u89e3\u5f02\u6b65\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65\uff1a \u201c\u7b49\u4e0d\u53ca\u4e86\uff1f\u201d \u4e00\u8282\u4e2d async \u548c await \u7684\u5185\u5bb9\u3002 \u4e0e OpenAPI \u96c6\u6210 \u00b6 \u4f9d\u8d56\u9879\u53ca\u5b50\u4f9d\u8d56\u9879\u7684\u6240\u6709\u8bf7\u6c42\u58f0\u660e\u3001\u9a8c\u8bc1\u548c\u9700\u6c42\u90fd\u53ef\u4ee5\u96c6\u6210\u81f3\u540c\u4e00\u4e2a OpenAPI \u6982\u56fe\u3002 \u6240\u4ee5\uff0c\u4ea4\u4e92\u6587\u6863\u91cc\u4e5f\u4f1a\u663e\u793a\u4f9d\u8d56\u9879\u7684\u6240\u6709\u4fe1\u606f\uff1a \u7b80\u5355\u7528\u6cd5 \u00b6 \u89c2\u5bdf\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u53ea\u8981 \u8def\u5f84 \u548c \u64cd\u4f5c \u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u58f0\u660e\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002\u7136\u540e\uff0c FastAPI \u4f1a\u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u63d0\u53d6\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\uff08\u6216\u5927\u591a\u6570\uff09\u7f51\u7edc\u6846\u67b6\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u662f\u8fd9\u6837\u7684\u3002 \u5f00\u53d1\u8005\u6c38\u8fdc\u90fd\u4e0d\u9700\u8981\u76f4\u63a5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f\u7531\u6846\u67b6\uff08\u5728\u6b64\u4e3a FastAPI \uff09\u8c03\u7528\u7684\u3002 \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\uff0c\u53ea\u8981\u544a\u8bc9 FastAPI \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd8\u8981 \u4f9d\u8d56 \u5176\u4ed6\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e4b\u524d\u6267\u884c\u7684\u5185\u5bb9\uff0c FastAPI \u5c31\u4f1a\u6267\u884c\u51fd\u6570\u4ee3\u7801\uff0c\u5e76 \u6ce8\u5165 \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u5176\u4ed6\u4e0e \u4f9d\u8d56\u6ce8\u5165 \u6982\u5ff5\u76f8\u540c\u7684\u672f\u8bed\u4e3a\uff1a \u8d44\u6e90\uff08Resource\uff09 \u63d0\u4f9b\u65b9\uff08Provider\uff09 \u670d\u52a1\uff08Service\uff09 \u53ef\u6ce8\u5165\u5bf9\u8c61\uff08Injectable\uff09 \u7ec4\u4ef6\uff08Component\uff09 FastAPI \u63d2\u4ef6 \u00b6 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u652f\u6301 \u63d2\u4ef6 \u3002\u4f46\u5b9e\u9645\u4e0a\uff0cFastAPI \u5e76 \u4e0d\u9700\u8981\u521b\u5efa\u63d2\u4ef6 \uff0c\u56e0\u4e3a\u4f7f\u7528\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u4e0d\u9650\u6570\u91cf\u7684\u3001\u53ef\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u96c6\u6210\u4e0e\u4ea4\u4e92\u3002 \u521b\u5efa\u4f9d\u8d56\u9879\u975e\u5e38\u7b80\u5355\u3001\u76f4\u89c2\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u5bfc\u5165 Python \u5305\u3002\u6beb\u4e0d\u5938\u5f20\u5730\u8bf4\uff0c\u53ea\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u628a Python \u5305\u4e0e API \u51fd\u6570\u96c6\u6210\u5728\u4e00\u8d77\u3002 \u4e0b\u4e00\u8282\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3001NoSQL \u6570\u636e\u5e93\u3001\u5b89\u5168\u63aa\u65bd\u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u3002 FastAPI \u517c\u5bb9\u6027 \u00b6 \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u5982\u6b64\u7b80\u6d01\u7684\u7279\u6027\uff0c\u8ba9 FastAPI \u4e0e\u4e0b\u5217\u7cfb\u7edf\u517c\u5bb9\uff1a \u5173\u7cfb\u578b\u6570\u636e\u5e93 NoSQL \u6570\u636e\u5e93 \u5916\u90e8\u652f\u6301\u5e93 \u5916\u90e8 API \u9a8c\u8bc1\u548c\u9274\u6743\u7cfb\u7edf API \u4f7f\u7528\u76d1\u63a7\u7cfb\u7edf \u54cd\u5e94\u6570\u636e\u6ce8\u5165\u7cfb\u7edf \u7b49\u7b49\u2026\u2026 \u7b80\u5355\u800c\u5f3a\u5927 \u00b6 \u867d\u7136\uff0c \u5c42\u7ea7\u5f0f\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u7684\u5b9a\u4e49\u4e0e\u4f7f\u7528\u5341\u5206\u7b80\u5355\uff0c\u4f46\u5b83\u5374\u975e\u5e38\u5f3a\u5927\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4f9d\u8d56\u5176\u4ed6\u4f9d\u8d56\u9879\u7684\u4f9d\u8d56\u9879\u3002 \u6700\u540e\uff0c\u4f9d\u8d56\u9879\u5c42\u7ea7\u6811\u6784\u5efa\u540e\uff0c \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u4f1a\u5904\u7406\u6240\u6709\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\uff0c\u5e76\u4e3a\u6bcf\u4e00\u6b65\u64cd\u4f5c\u63d0\u4f9b\uff08\u6ce8\u5165\uff09\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u6709 4 \u4e2a API \u7aef\u70b9\uff08 \u8def\u5f84\u64cd\u4f5c \uff09\uff1a /items/public/ /items/private/ /users/{user_id}/activate /items/pro/ \u5f00\u53d1\u8005\u4f7f\u7528\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\u5c31\u80fd\u4e3a\u4ee5\u4e0b\u8def\u5f84\u64cd\u4f5c\u6dfb\u52a0\u4e0d\u540c\u6743\u9650\uff1a graph TB current_user([\"current_user\"]) active_user([\"active_user\"]) admin_user([\"admin_user\"]) paying_user([\"paying_user\"]) public[\"/items/public/\"] private[\"/items/private/\"] activate_user[\"/users/{user_id}/activate\"] pro_items[\"/items/pro/\"] current_user --> active_user active_user --> admin_user active_user --> paying_user current_user --> public active_user --> private admin_user --> activate_user paying_user --> pro_items \u4e0e OpenAPI \u96c6\u6210 \u00b6 \u58f0\u660e\u9700\u6c42\u65f6\uff0c\u4f9d\u8d56\u9879\u8fd8\u4f1a\u628a\u53c2\u6570\u3001\u9a8c\u8bc1\u7b49\u529f\u80fd\u6dfb\u52a0\u81f3 \u8def\u5f84\u64cd\u4f5c \u3002 FastAPI \u8d1f\u8d23\u628a\u5b83\u4eec\u5168\u90e8\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\uff0c\u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u3002","title":"\u4f9d\u8d56\u9879 - \u7b2c\u4e00\u6b65"},{"location":"tutorial/dependencies/#-","text":"FastAPI \u63d0\u4f9b\u4e86\u7b80\u5355\u6613\u7528\uff0c\u4f46\u529f\u80fd\u5f3a\u5927\u7684 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u3002 \u8fd9\u4e2a\u4f9d\u8d56\u7cfb\u7edf\u8bbe\u8ba1\u7684\u7b80\u5355\u6613\u7528\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u8f7b\u677e\u5730\u628a\u5404\u79cd\u7ec4\u4ef6\u96c6\u6210\u81f3 FastAPI \u3002","title":"\u4f9d\u8d56\u9879 - \u7b2c\u4e00\u6b65"},{"location":"tutorial/dependencies/#_1","text":"\u7f16\u7a0b\u4e2d\u7684 \u4f9d\u8d56\u6ce8\u5165 \u662f\u58f0\u660e\u4ee3\u7801\uff08\u672c\u6587\u4e2d\u4e3a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \uff09\u8fd0\u884c\u6240\u9700\u7684\uff0c\u6216\u8981\u4f7f\u7528\u7684 \u4f9d\u8d56 \u7684\u4e00\u79cd\u65b9\u5f0f\u3002 \u7136\u540e\uff0c\u7531\u7cfb\u7edf\uff08\u672c\u6587\u4e2d\u4e3a FastAPI \uff09\u8d1f\u8d23\u6267\u884c\u4efb\u610f\u9700\u8981\u7684\u903b\u8f91\uff0c\u4e3a\u4ee3\u7801\u63d0\u4f9b\u8fd9\u4e9b\u4f9d\u8d56\uff08 \u6ce8\u5165 \u4f9d\u8d56\u9879\uff09\u3002 \u4f9d\u8d56\u6ce8\u5165\u5e38\u7528\u4e8e\u4ee5\u4e0b\u573a\u666f\uff1a \u5171\u4eab\u4e1a\u52a1\u903b\u8f91\uff08\u590d\u7528\u76f8\u540c\u7684\u4ee3\u7801\u903b\u8f91\uff09 \u5171\u4eab\u6570\u636e\u5e93\u8fde\u63a5 \u5b9e\u73b0\u5b89\u5168\u3001\u9a8c\u8bc1\u3001\u89d2\u8272\u6743\u9650 \u7b49\u7b49\u2026\u2026 \u4e0a\u8ff0\u573a\u666f\u5747\u53ef\u4ee5\u4f7f\u7528 \u4f9d\u8d56\u6ce8\u5165 \uff0c\u5c06\u4ee3\u7801\u91cd\u590d\u6700\u5c0f\u5316\u3002","title":"\u4ec0\u4e48\u662f\u4f9d\u8d56\u6ce8\u5165"},{"location":"tutorial/dependencies/#_2","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u4e00\u4e2a\u975e\u5e38\u7b80\u5355\u7684\u4f8b\u5b50\uff0c\u5c3d\u7ba1\u5b83\u8fc7\u4e8e\u7b80\u5355\uff0c\u4e0d\u662f\u5f88\u5b9e\u7528\u3002 \u4f46\u901a\u8fc7\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u60a8\u53ef\u4ee5\u521d\u6b65\u4e86\u89e3 \u4f9d\u8d56\u6ce8\u5165 \u7684\u5de5\u4f5c\u673a\u5236\u3002","title":"\u7b2c\u4e00\u6b65"},{"location":"tutorial/dependencies/#_3","text":"\u9996\u5148\uff0c\u8981\u5173\u6ce8\u7684\u662f\u4f9d\u8d56\u9879\u3002 \u4f9d\u8d56\u9879\u662f\u4f7f\u7528\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f8\u540c\u53c2\u6570\u7684\u51fd\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u641e\u5b9a\u6536\u5de5\u3002 \u53ea\u7528\u4e86 2 \u884c \u4ee3\u7801\u3002 \u4f9d\u8d56\u9879\u51fd\u6570\u7684\u5f62\u5f0f\u548c\u7ed3\u6784\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u3002 \u56e0\u6b64\uff0c\u4f9d\u8d56\u9879\u5c31\u76f8\u5f53\u4e8e\u6ca1\u6709 \u88c5\u9970\u5668 \uff08\u5373\uff0c\u6ca1\u6709 @app.get(\"/some-path\") \uff09\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002 \u4f9d\u8d56\u9879\u53ef\u4ee5\u8fd4\u56de\u5404\u79cd\u5185\u5bb9\u3002 \u672c\u4f8b\u7684\u4f9d\u8d56\u9879\u63a5\u6536\u5982\u4e0b\u53c2\u6570\uff1a str \u7c7b\u578b\u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q int \u7c7b\u578b\u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 skip \uff0c\u9ed8\u8ba4\u503c\u662f 0 int \u7c7b\u578b\u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 limit \uff0c\u9ed8\u8ba4\u503c\u662f 100 \u4f9d\u8d56\u9879\u51fd\u6570\u8fd4\u56de\u7684\u662f\u5305\u542b\u8fd9\u4e9b\u503c\u7684 \u5b57\u5178 \u3002","title":"\u521b\u5efa\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/#depends","text":"Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons","title":"\u5bfc\u5165 Depends"},{"location":"tutorial/dependencies/#_4","text":"\u4e0e\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528 Body \u3001 Query \u7b49\u53c2\u6570\u7684\u65b9\u5f0f\u76f8\u540c\uff0c\u58f0\u660e\u4f9d\u8d56\u9879\u4f7f\u7528 Depends \u548c\u4e00\u4e2a\u65b0\u7684\u53c2\u6570\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u867d\u7136\uff0c\u5728\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u7684\u53c2\u6570\u4e2d\u4f7f\u7528 Depends \u7684\u65b9\u5f0f\u4e0e Body \u3001 Query \u76f8\u540c\uff0c\u4f46 Depends \u7684\u5de5\u4f5c\u65b9\u5f0f\u7565\u6709\u4e0d\u540c\u3002 \u8fd9\u91cc\u53ea\u80fd\u4f20\u7ed9 Depends \u4e00\u4e2a\u53c2\u6570\u3002 \u4e14\u8be5\u53c2\u6570\u5fc5\u987b\u662f\u53ef\u8c03\u7528\u5bf9\u8c61\uff0c\u6bd4\u5982\u51fd\u6570\u3002 \u8be5\u51fd\u6570\u63a5\u6536\u7684\u53c2\u6570\u548c \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u4e00\u6837\u3002 \u63d0\u793a \u4e0b\u4e00\u8282\u4ecb\u7ecd\uff0c\u9664\u4e86\u51fd\u6570\u4e4b\u5916\uff0c\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u4f7f\u7528\u54ea\u4e9b \u5bf9\u8c61 \u3002 \u63a5\u6536\u5230\u65b0\u7684\u8bf7\u6c42\u65f6\uff0c FastAPI \u6267\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a \u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u4f9d\u8d56\u9879\u51fd\u6570\uff08 \u53ef\u4f9d\u8d56\u9879 \uff09 \u83b7\u53d6\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c \u628a\u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u8d4b\u503c\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 graph TB common_parameters([\"common_parameters\"]) read_items[\"/items/\"] read_users[\"/users/\"] common_parameters --> read_items common_parameters --> read_users \u8fd9\u6837\uff0c\u53ea\u7f16\u5199\u4e00\u6b21\u4ee3\u7801\uff0c FastAPI \u5c31\u53ef\u4ee5\u4e3a\u591a\u4e2a \u8def\u5f84\u64cd\u4f5c \u5171\u4eab\u8fd9\u6bb5\u4ee3\u7801 \u3002 \u68c0\u67e5 \u6ce8\u610f\uff0c\u65e0\u9700\u521b\u5efa\u4e13\u95e8\u7684\u7c7b\uff0c\u5e76\u5c06\u4e4b\u4f20\u9012\u7ed9 FastAPI \u4ee5\u8fdb\u884c \u6ce8\u518c \u6216\u6267\u884c\u7c7b\u4f3c\u7684\u64cd\u4f5c\u3002 \u53ea\u8981\u628a\u5b83\u4f20\u9012\u7ed9 Depends \uff0c FastAPI \u5c31\u77e5\u9053\u8be5\u5982\u4f55\u6267\u884c\u540e\u7eed\u64cd\u4f5c\u3002","title":"\u58f0\u660e\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/#async","text":"FastAPI \u8c03\u7528\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\uff0c\u56e0\u6b64\uff0c\u5b9a\u4e49\u4f9d\u8d56\u9879\u51fd\u6570\u4e5f\u8981\u4f7f\u7528\u4e0e\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u76f8\u540c\u7684\u89c4\u5219\u3002 \u5373\uff0c\u65e2\u53ef\u4ee5\u4f7f\u7528\u5f02\u6b65\u51fd\u6570\uff0c\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u51fd\u6570\u5b9a\u4e49\u4f9d\u8d56\u9879\u3002 \u5728\u666e\u901a \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\uff0c\u53ef\u4ee5\u58f0\u660e\u5f02\u6b65\u4f9d\u8d56\u9879\uff1b\u4e5f\u53ef\u4ee5\u5728\u5f02\u6b65 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u58f0\u660e\u666e\u901a\u4f9d\u8d56\u9879\u3002 \u4e0a\u8ff0\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u662f\u53ef\u884c\u7684\uff0c FastAPI \u77e5\u9053\u8be5\u600e\u4e48\u5904\u7406\u3002 \u7b14\u8bb0 \u5982\u91cc\u4e0d\u4e86\u89e3\u5f02\u6b65\uff0c\u8bf7\u53c2\u9605 \u5f02\u6b65\uff1a \u201c\u7b49\u4e0d\u53ca\u4e86\uff1f\u201d \u4e00\u8282\u4e2d async \u548c await \u7684\u5185\u5bb9\u3002","title":"\u8981\u4e0d\u8981\u4f7f\u7528 async\uff1f"},{"location":"tutorial/dependencies/#openapi","text":"\u4f9d\u8d56\u9879\u53ca\u5b50\u4f9d\u8d56\u9879\u7684\u6240\u6709\u8bf7\u6c42\u58f0\u660e\u3001\u9a8c\u8bc1\u548c\u9700\u6c42\u90fd\u53ef\u4ee5\u96c6\u6210\u81f3\u540c\u4e00\u4e2a OpenAPI \u6982\u56fe\u3002 \u6240\u4ee5\uff0c\u4ea4\u4e92\u6587\u6863\u91cc\u4e5f\u4f1a\u663e\u793a\u4f9d\u8d56\u9879\u7684\u6240\u6709\u4fe1\u606f\uff1a","title":"\u4e0e OpenAPI \u96c6\u6210"},{"location":"tutorial/dependencies/#_5","text":"\u89c2\u5bdf\u4e00\u4e0b\u5c31\u4f1a\u53d1\u73b0\uff0c\u53ea\u8981 \u8def\u5f84 \u548c \u64cd\u4f5c \u5339\u914d\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u58f0\u660e\u7684\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002\u7136\u540e\uff0c FastAPI \u4f1a\u7528\u6b63\u786e\u7684\u53c2\u6570\u8c03\u7528\u51fd\u6570\uff0c\u5e76\u63d0\u53d6\u8bf7\u6c42\u4e2d\u7684\u6570\u636e\u3002 \u5b9e\u9645\u4e0a\uff0c\u6240\u6709\uff08\u6216\u5927\u591a\u6570\uff09\u7f51\u7edc\u6846\u67b6\u7684\u5de5\u4f5c\u65b9\u5f0f\u90fd\u662f\u8fd9\u6837\u7684\u3002 \u5f00\u53d1\u8005\u6c38\u8fdc\u90fd\u4e0d\u9700\u8981\u76f4\u63a5\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff0c\u8fd9\u4e9b\u51fd\u6570\u662f\u7531\u6846\u67b6\uff08\u5728\u6b64\u4e3a FastAPI \uff09\u8c03\u7528\u7684\u3002 \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\uff0c\u53ea\u8981\u544a\u8bc9 FastAPI \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u8fd8\u8981 \u4f9d\u8d56 \u5176\u4ed6\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e4b\u524d\u6267\u884c\u7684\u5185\u5bb9\uff0c FastAPI \u5c31\u4f1a\u6267\u884c\u51fd\u6570\u4ee3\u7801\uff0c\u5e76 \u6ce8\u5165 \u51fd\u6570\u8fd4\u56de\u7684\u7ed3\u679c\u3002 \u5176\u4ed6\u4e0e \u4f9d\u8d56\u6ce8\u5165 \u6982\u5ff5\u76f8\u540c\u7684\u672f\u8bed\u4e3a\uff1a \u8d44\u6e90\uff08Resource\uff09 \u63d0\u4f9b\u65b9\uff08Provider\uff09 \u670d\u52a1\uff08Service\uff09 \u53ef\u6ce8\u5165\u5bf9\u8c61\uff08Injectable\uff09 \u7ec4\u4ef6\uff08Component\uff09","title":"\u7b80\u5355\u7528\u6cd5"},{"location":"tutorial/dependencies/#fastapi","text":"\u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u652f\u6301 \u63d2\u4ef6 \u3002\u4f46\u5b9e\u9645\u4e0a\uff0cFastAPI \u5e76 \u4e0d\u9700\u8981\u521b\u5efa\u63d2\u4ef6 \uff0c\u56e0\u4e3a\u4f7f\u7528\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u4e0d\u9650\u6570\u91cf\u7684\u3001\u53ef\u7528\u4e8e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u96c6\u6210\u4e0e\u4ea4\u4e92\u3002 \u521b\u5efa\u4f9d\u8d56\u9879\u975e\u5e38\u7b80\u5355\u3001\u76f4\u89c2\uff0c\u800c\u4e14\u8fd8\u652f\u6301\u5bfc\u5165 Python \u5305\u3002\u6beb\u4e0d\u5938\u5f20\u5730\u8bf4\uff0c\u53ea\u8981\u51e0\u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u628a Python \u5305\u4e0e API \u51fd\u6570\u96c6\u6210\u5728\u4e00\u8d77\u3002 \u4e0b\u4e00\u8282\u8be6\u7ec6\u4ecb\u7ecd\u5982\u4f55\u5173\u7cfb\u578b\u6570\u636e\u5e93\u3001NoSQL \u6570\u636e\u5e93\u3001\u5b89\u5168\u63aa\u65bd\u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u3002","title":"FastAPI \u63d2\u4ef6"},{"location":"tutorial/dependencies/#fastapi_1","text":"\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u5982\u6b64\u7b80\u6d01\u7684\u7279\u6027\uff0c\u8ba9 FastAPI \u4e0e\u4e0b\u5217\u7cfb\u7edf\u517c\u5bb9\uff1a \u5173\u7cfb\u578b\u6570\u636e\u5e93 NoSQL \u6570\u636e\u5e93 \u5916\u90e8\u652f\u6301\u5e93 \u5916\u90e8 API \u9a8c\u8bc1\u548c\u9274\u6743\u7cfb\u7edf API \u4f7f\u7528\u76d1\u63a7\u7cfb\u7edf \u54cd\u5e94\u6570\u636e\u6ce8\u5165\u7cfb\u7edf \u7b49\u7b49\u2026\u2026","title":"FastAPI \u517c\u5bb9\u6027"},{"location":"tutorial/dependencies/#_6","text":"\u867d\u7136\uff0c \u5c42\u7ea7\u5f0f\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u7684\u5b9a\u4e49\u4e0e\u4f7f\u7528\u5341\u5206\u7b80\u5355\uff0c\u4f46\u5b83\u5374\u975e\u5e38\u5f3a\u5927\u3002 \u4f8b\u5982\uff0c\u53ef\u4ee5\u5b9a\u4e49\u4f9d\u8d56\u5176\u4ed6\u4f9d\u8d56\u9879\u7684\u4f9d\u8d56\u9879\u3002 \u6700\u540e\uff0c\u4f9d\u8d56\u9879\u5c42\u7ea7\u6811\u6784\u5efa\u540e\uff0c \u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf \u4f1a\u5904\u7406\u6240\u6709\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\uff0c\u5e76\u4e3a\u6bcf\u4e00\u6b65\u64cd\u4f5c\u63d0\u4f9b\uff08\u6ce8\u5165\uff09\u7ed3\u679c\u3002 \u4f8b\u5982\uff0c\u4e0b\u9762\u6709 4 \u4e2a API \u7aef\u70b9\uff08 \u8def\u5f84\u64cd\u4f5c \uff09\uff1a /items/public/ /items/private/ /users/{user_id}/activate /items/pro/ \u5f00\u53d1\u8005\u4f7f\u7528\u4f9d\u8d56\u9879\u53ca\u5176\u5b50\u4f9d\u8d56\u9879\u5c31\u80fd\u4e3a\u4ee5\u4e0b\u8def\u5f84\u64cd\u4f5c\u6dfb\u52a0\u4e0d\u540c\u6743\u9650\uff1a graph TB current_user([\"current_user\"]) active_user([\"active_user\"]) admin_user([\"admin_user\"]) paying_user([\"paying_user\"]) public[\"/items/public/\"] private[\"/items/private/\"] activate_user[\"/users/{user_id}/activate\"] pro_items[\"/items/pro/\"] current_user --> active_user active_user --> admin_user active_user --> paying_user current_user --> public active_user --> private admin_user --> activate_user paying_user --> pro_items","title":"\u7b80\u5355\u800c\u5f3a\u5927"},{"location":"tutorial/dependencies/#openapi_1","text":"\u58f0\u660e\u9700\u6c42\u65f6\uff0c\u4f9d\u8d56\u9879\u8fd8\u4f1a\u628a\u53c2\u6570\u3001\u9a8c\u8bc1\u7b49\u529f\u80fd\u6dfb\u52a0\u81f3 \u8def\u5f84\u64cd\u4f5c \u3002 FastAPI \u8d1f\u8d23\u628a\u5b83\u4eec\u5168\u90e8\u6dfb\u52a0\u5230 OpenAPI \u6982\u56fe\uff0c\u5e76\u5728 API \u6587\u6863\u4e2d\u663e\u793a\u3002","title":"\u4e0e OpenAPI \u96c6\u6210"},{"location":"tutorial/dependencies/classes-as-dependencies/","text":"\u7c7b\u4e3a\u4f9d\u8d56\u9879 \u00b6 \u5728\u6df1\u5165\u7814\u7a76 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u524d\uff0c\u6211\u4eec\u5148\u5347\u7ea7\u4e00\u4e0b\u4e0a\u4e00\u8282\u4e2d\u7684\u793a\u4f8b\u3002 \u4e0a\u4e00\u7ae0\u793a\u4f8b\u4e2d\u7684 dict \u00b6 \u4e0a\u8282\u793a\u4f8b\u4e2d\uff0c\u4f9d\u8d56\u9879\u8fd4\u56de\u7684\u662f \u5b57\u5178 \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u968f\u540e\uff0c\u8fd9\u4e2a \u5b57\u5178 \u88ab\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 commons \u3002 \u56e0\u4e3a\u7f16\u8f91\u5668\u4e0d\u80fd\u83b7\u53d6 \u5b57\u5178 \u4e2d\u952e\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u65e0\u6cd5\u4e3a \u5b57\u5178 \u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u7b49\u66f4\u591a\u652f\u6301\u3002 FastAPI \u53ef\u4ee5\u505a\u7684\u66f4\u597d\u2026\u2026 \u4ec0\u4e48\u662f\u4f9d\u8d56\u9879 \u00b6 \u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u53ea\u7528\u51fd\u6570\u5b9a\u4e49\u8fc7\u4f9d\u8d56\u9879\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u5b9a\u4e49\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u5f88\u5e38\u7528\uff0c\u4f46\u5e76\u4e0d\u662f\u5b9a\u4e49\u4f9d\u8d56\u9879\u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u8fd9\u91cc\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff0c\u4f9d\u8d56\u9879\u5e94\u8be5\u662f \u53ef\u8c03\u7528\u9879 \u3002 Python \u53ef\u8c03\u7528\u9879 \u662f\u6307\u4efb\u4f55\u4e0e\u51fd\u6570\u7c7b\u4f3c\u7684\u3001 \u53ef\u8c03\u7528 \u7684\u5bf9\u8c61\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u80fd\u4ee5\u5982\u4e0b\u65b9\u5f0f \u8c03\u7528 \u6216\u6267\u884c\u5bf9\u8c61 something \uff08 \u4e0d\u4e00\u5b9a\u662f \u51fd\u6570\uff09\uff1a something () \u6216 something ( some_argument , some_keyword_argument = \"foo\" ) \u8fd9\u4e2a\u5bf9\u8c61\u5c31\u662f \u53ef\u8c03\u7528\u9879 \u3002 \u7c7b\u4e3a\u4f9d\u8d56\u9879 \u00b6 \u6ce8\u610f\uff0cPython \u4f7f\u7528\u4e0e\u8c03\u7528\u51fd\u6570\u76f8\u540c\u7684\u8bed\u6cd5\u521b\u5efa\u7c7b\u5b9e\u4f8b\u3002 \u4f8b\u5982\uff1a class Cat : def __init__ ( self , name : str ): self . name = name fluffy = Cat ( name = \"Mr Fluffy\" ) fluffy \u662f\u7c7b Cat \u7684\u5b9e\u4f8b\u3002 \u521b\u5efa fluffy \u9700\u8981 \u8c03\u7528 Cat \u3002 \u56e0\u6b64\uff0cPython \u7684\u7c7b\u4e5f\u662f \u53ef\u8c03\u7528\u9879 \u3002 \u7136\u540e\uff0c FastAPI \u5c31\u53ef\u4ee5\u7528 Python \u7684\u7c7b\u58f0\u660e\u4f9d\u8d56\u9879\u3002 \u5b9e\u9645\u4e0a\uff0cFastAPI \u68c0\u67e5\u7684\u662f\u8be5\u5bf9\u8c61\u662f\u4e0d\u662f \u53ef\u8c03\u7528\u9879 \uff08\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u53ca\u6240\u5b9a\u4e49\u7684\u53c2\u6570\u3002 \u5728 FastAPI \u4e2d\u4f20\u9012 \u53ef\u8c03\u7528 \u4f9d\u8d56\u9879\u65f6\uff0cFastAPI \u4f1a\u5206\u6790 \u53ef\u8c03\u7528\u9879 \u7684\u53c2\u6570\uff0c\u5e76\u7528\u4e0e\u5904\u7406 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u53c2\u6570\uff0c\u5305\u62ec\u5b50\u4f9d\u8d56\u9879\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e5f\u9002\u7528\u4e8e\u65e0\u53c2\u6570\u8c03\u7528\uff0c\u5904\u7406\u65b9\u5f0f\u4e0e\u65e0\u53c2\u6570\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f8\u540c\u3002 \u63a5\u4e0b\u6765\uff0c\u628a\u4e0a\u4f8b\u4e2d\u7684\u4f9d\u8d56\u9879 common_parameters \u6539\u4e3a CommonQueryParams \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u8bf7\u6ce8\u610f\u4e0b\u4f8b\u4e2d\u521b\u5efa\u7c7b\u5b9e\u4f8b\u7684 __init__ \u65b9\u6cd5\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u2026\u2026\u5b83\u7684\u53c2\u6570\u4e0e common_parameters \u7684\u53c2\u6570\u4e00\u6837\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons FastAPI \u7528\u8fd9\u4e9b\u53c2\u6570 \u5904\u7406 \u4f9d\u8d56\u9879\u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f9d\u8d56\u9879\u7684\u53c2\u6570\u5305\u62ec\uff1a \u53ef\u9009\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u7c7b\u578b\u4e3a str \u3002 \u67e5\u8be2\u53c2\u6570 skip \uff0c\u7c7b\u578b\u4e3a int \uff0c\u9ed8\u8ba4\u503c\u4e3a 0 \u3002 \u67e5\u8be2\u53c2\u6570 limit \uff0c\u7c7b\u578b\u4e3a int \uff0c\u9ed8\u8ba4\u503c\u4e3a 100 \u3002 \u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\uff0cFastAPI \u90fd\u4f1a\u8f6c\u6362\u4e0e\u9a8c\u8bc1\u6570\u636e\uff0c\u5e76\u5728 OpenAPI \u6982\u56fe\u7684 API \u6587\u6863\u4e2d\u663e\u793a\u3002 \u4f7f\u7528\u58f0\u660e\u7684\u7c7b \u00b6 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 CommonQueryParams \u7c7b\u5b9a\u4e49\u4f9d\u8d56\u9879\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response FastAPI \u8c03\u7528 CommonQueryParams \u7c7b\uff0c\u521b\u5efa \u7c7b\u5b9e\u4f8b \uff0c\u5e76\u7528\u53c2\u6570 commons \u628a\u8fd9\u4e2a\u7c7b\u5b9e\u4f8b\u4f20\u9012\u7ed9\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002 \u7c7b\u578b\u6ce8\u91ca vs Depends \u00b6 \u6ce8\u610f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21 CommonQueryParams : commons : CommonQueryParams = Depends ( CommonQueryParams ) \u5b9e\u9645\u4e0a\uff0c FastAPI \u901a\u8fc7\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e2d\u7684 CommonQueryParams \u5224\u65ad\u54ea\u4e2a\u5bf9\u8c61\u662f\u4f9d\u8d56\u9879\uff1a ... = Depends ( CommonQueryParams ) ... \u662f FastAPI \u5b9e\u9645\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u3002 FastAPI \u4ece\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u63d0\u53d6\u58f0\u660e\u7684\u53c2\u6570\uff0c\u4e5f\u662f FastAPI \u5b9e\u9645\u8c03\u7528\u7684\u3002 \u672c\u4f8b\u4e2d\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e2d\u7684 CommonQueryParams \u5bf9\u4e8e FastAPI \u6ca1\u6709\u5b9e\u9645\u610f\u4e49\uff1a commons : CommonQueryParams ... FastAPI \u4e0d\u7528\u8fd9\u4e2a\u53c2\u6570\u8f6c\u6362\u4e0e\u9a8c\u8bc1\u6570\u636e\uff0c\u56e0\u4e3a\u8be5\u53c2\u6570\u5df2\u7ecf\u4f7f\u7528\u4e86 = Depends(CommonQueryParams) \u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1a commons = Depends ( CommonQueryParams ) \u2026\u2026\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u662f\u9f13\u52b1\u58f0\u660e\u7c7b\u578b\uff0c\u8fd9\u6837\u505a\u80fd\u8ba9\u7f16\u8f91\u5668\u77e5\u9053\u53c2\u6570 commons \u4f20\u9012\u7684\u662f\u54ea\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u5b9e\u73b0\u4ee3\u7801\u8865\u5168\u3001\u7c7b\u578b\u68c0\u67e5\u7b49\u66f4\u591a\u652f\u6301\uff1a \u5feb\u6377\u65b9\u5f0f \u00b6 \u8fd9\u6bb5\u4ee3\u7801\u91cc\u91cd\u590d\u5199\u4e86\u4e24\u6b21 CommonQueryParams : commons : CommonQueryParams = Depends ( CommonQueryParams ) \u5bf9\u4e8e\u8fd9\u79cd\u7528\u7c7b\u5b9a\u4e49\u4f9d\u8d56\u9879\uff0c\u4e14 FastAPI \u8c03\u7528\u7c7b\u5b9e\u4f8b\u81ea\u8eab\u7684\u60c5\u51b5\uff0c FastAPI \u63d0\u4f9b\u4e86\u4f18\u5316\u7684\u5feb\u6377\u65b9\u5f0f\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u7279\u5b9a\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801\uff1a \u65e0\u9700\u5728\u4e24\u4e2a\u4f4d\u7f6e\u90fd\u5199\u4e0a\u8c03\u7528\u7684\u7c7b\uff1a commons : CommonQueryParams = Depends ( CommonQueryParams ) \u2026\u2026\u53ef\u4ee5\u7b80\u5199\u6210\uff1a commons : CommonQueryParams = Depends () \u8fd9\u6bb5\u4ee3\u7801\u7528\u4f9d\u8d56\u9879\u58f0\u660e\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e76\u628a Depends() \u4f5c\u4e3a\u8be5\u53c2\u6570\uff08\u5728 = \u4e4b\u540e\uff09\u7684 \u9ed8\u8ba4\u503c \u3002\u56e0\u4e3a Depends() \u4e2d\u6ca1\u6709\u53c2\u6570\uff0c\u6240\u4ee5\u4e0d\u7528\u5728 Depends() \u4e2d \u91cd\u590d \u5199\u51fa\u5b8c\u6574\u7684\u7c7b\uff0c Depends(CommonQueryParams) \u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e0e\u524d\u4f8b\u7684\u6548\u679c\u4e00\u6837\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u2026\u2026 FastAPI \u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u600e\u4e48\u505a\u3002 \u63d0\u793a \u5982\u679c\u60a8\u89c9\u5f97\u8fd9\u79cd\u5feb\u6377\u65b9\u5f0f\u6ca1\u4ec0\u4e48\u7528\u5904\uff0c\u53cd\u800c\u589e\u6dfb\u4e86\u56f0\u6270\uff0c\u5c3d\u53ef\u5f03\u4e4b\u4e0d\u7528\uff0c \u4e0d\u7528 \u5feb\u6377\u65b9\u5f0f\u4e5f\u6ca1\u95ee\u9898\u3002 \u8fd9\u53ea\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c FastAPI \u5e0c\u671b\u80fd\u8ba9\u60a8\u5c3d\u91cf\u5c11\u5199\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801\u3002","title":"\u7c7b\u4e3a\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/classes-as-dependencies/#_1","text":"\u5728\u6df1\u5165\u7814\u7a76 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u524d\uff0c\u6211\u4eec\u5148\u5347\u7ea7\u4e00\u4e0b\u4e0a\u4e00\u8282\u4e2d\u7684\u793a\u4f8b\u3002","title":"\u7c7b\u4e3a\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/classes-as-dependencies/#dict","text":"\u4e0a\u8282\u793a\u4f8b\u4e2d\uff0c\u4f9d\u8d56\u9879\u8fd4\u56de\u7684\u662f \u5b57\u5178 \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons \u968f\u540e\uff0c\u8fd9\u4e2a \u5b57\u5178 \u88ab\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 commons \u3002 \u56e0\u4e3a\u7f16\u8f91\u5668\u4e0d\u80fd\u83b7\u53d6 \u5b57\u5178 \u4e2d\u952e\u503c\u7684\u7c7b\u578b\uff0c\u6240\u4ee5\u65e0\u6cd5\u4e3a \u5b57\u5178 \u63d0\u4f9b\u4ee3\u7801\u8865\u5168\u7b49\u66f4\u591a\u652f\u6301\u3002 FastAPI \u53ef\u4ee5\u505a\u7684\u66f4\u597d\u2026\u2026","title":"\u4e0a\u4e00\u7ae0\u793a\u4f8b\u4e2d\u7684 dict"},{"location":"tutorial/dependencies/classes-as-dependencies/#_2","text":"\u5728\u6b64\u4e4b\u524d\uff0c\u6211\u4eec\u53ea\u7528\u51fd\u6570\u5b9a\u4e49\u8fc7\u4f9d\u8d56\u9879\u3002 \u5c3d\u7ba1\u8fd9\u79cd\u5b9a\u4e49\u4f9d\u8d56\u9879\u7684\u65b9\u5f0f\u5f88\u5e38\u7528\uff0c\u4f46\u5e76\u4e0d\u662f\u5b9a\u4e49\u4f9d\u8d56\u9879\u7684\u552f\u4e00\u65b9\u5f0f\u3002 \u8fd9\u91cc\u7684\u6838\u5fc3\u7406\u5ff5\u662f\uff0c\u4f9d\u8d56\u9879\u5e94\u8be5\u662f \u53ef\u8c03\u7528\u9879 \u3002 Python \u53ef\u8c03\u7528\u9879 \u662f\u6307\u4efb\u4f55\u4e0e\u51fd\u6570\u7c7b\u4f3c\u7684\u3001 \u53ef\u8c03\u7528 \u7684\u5bf9\u8c61\u3002 \u6240\u4ee5\uff0c\u5982\u679c\u80fd\u4ee5\u5982\u4e0b\u65b9\u5f0f \u8c03\u7528 \u6216\u6267\u884c\u5bf9\u8c61 something \uff08 \u4e0d\u4e00\u5b9a\u662f \u51fd\u6570\uff09\uff1a something () \u6216 something ( some_argument , some_keyword_argument = \"foo\" ) \u8fd9\u4e2a\u5bf9\u8c61\u5c31\u662f \u53ef\u8c03\u7528\u9879 \u3002","title":"\u4ec0\u4e48\u662f\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/classes-as-dependencies/#_3","text":"\u6ce8\u610f\uff0cPython \u4f7f\u7528\u4e0e\u8c03\u7528\u51fd\u6570\u76f8\u540c\u7684\u8bed\u6cd5\u521b\u5efa\u7c7b\u5b9e\u4f8b\u3002 \u4f8b\u5982\uff1a class Cat : def __init__ ( self , name : str ): self . name = name fluffy = Cat ( name = \"Mr Fluffy\" ) fluffy \u662f\u7c7b Cat \u7684\u5b9e\u4f8b\u3002 \u521b\u5efa fluffy \u9700\u8981 \u8c03\u7528 Cat \u3002 \u56e0\u6b64\uff0cPython \u7684\u7c7b\u4e5f\u662f \u53ef\u8c03\u7528\u9879 \u3002 \u7136\u540e\uff0c FastAPI \u5c31\u53ef\u4ee5\u7528 Python \u7684\u7c7b\u58f0\u660e\u4f9d\u8d56\u9879\u3002 \u5b9e\u9645\u4e0a\uff0cFastAPI \u68c0\u67e5\u7684\u662f\u8be5\u5bf9\u8c61\u662f\u4e0d\u662f \u53ef\u8c03\u7528\u9879 \uff08\u51fd\u6570\u3001\u7c7b\u7b49\uff09\u53ca\u6240\u5b9a\u4e49\u7684\u53c2\u6570\u3002 \u5728 FastAPI \u4e2d\u4f20\u9012 \u53ef\u8c03\u7528 \u4f9d\u8d56\u9879\u65f6\uff0cFastAPI \u4f1a\u5206\u6790 \u53ef\u8c03\u7528\u9879 \u7684\u53c2\u6570\uff0c\u5e76\u7528\u4e0e\u5904\u7406 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u76f8\u540c\u7684\u65b9\u5f0f\u5904\u7406\u8fd9\u4e9b\u53c2\u6570\uff0c\u5305\u62ec\u5b50\u4f9d\u8d56\u9879\u3002 \u8fd9\u79cd\u65b9\u5f0f\u4e5f\u9002\u7528\u4e8e\u65e0\u53c2\u6570\u8c03\u7528\uff0c\u5904\u7406\u65b9\u5f0f\u4e0e\u65e0\u53c2\u6570\u7684 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u76f8\u540c\u3002 \u63a5\u4e0b\u6765\uff0c\u628a\u4e0a\u4f8b\u4e2d\u7684\u4f9d\u8d56\u9879 common_parameters \u6539\u4e3a CommonQueryParams \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u8bf7\u6ce8\u610f\u4e0b\u4f8b\u4e2d\u521b\u5efa\u7c7b\u5b9e\u4f8b\u7684 __init__ \u65b9\u6cd5\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u2026\u2026\u5b83\u7684\u53c2\u6570\u4e0e common_parameters \u7684\u53c2\u6570\u4e00\u6837\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons from fastapi import Depends , FastAPI app = FastAPI () async def common_parameters ( q : str | None = None , skip : int = 0 , limit : int = 100 ): return { \"q\" : q , \"skip\" : skip , \"limit\" : limit } @app . get ( \"/items/\" ) async def read_items ( commons : dict = Depends ( common_parameters )): return commons @app . get ( \"/users/\" ) async def read_users ( commons : dict = Depends ( common_parameters )): return commons FastAPI \u7528\u8fd9\u4e9b\u53c2\u6570 \u5904\u7406 \u4f9d\u8d56\u9879\u3002 \u5728\u8fd9\u4e24\u79cd\u60c5\u51b5\u4e0b\uff0c\u4f9d\u8d56\u9879\u7684\u53c2\u6570\u5305\u62ec\uff1a \u53ef\u9009\u7684\u67e5\u8be2\u53c2\u6570 q \uff0c\u7c7b\u578b\u4e3a str \u3002 \u67e5\u8be2\u53c2\u6570 skip \uff0c\u7c7b\u578b\u4e3a int \uff0c\u9ed8\u8ba4\u503c\u4e3a 0 \u3002 \u67e5\u8be2\u53c2\u6570 limit \uff0c\u7c7b\u578b\u4e3a int \uff0c\u9ed8\u8ba4\u503c\u4e3a 100 \u3002 \u65e0\u8bba\u54ea\u79cd\u60c5\u51b5\uff0cFastAPI \u90fd\u4f1a\u8f6c\u6362\u4e0e\u9a8c\u8bc1\u6570\u636e\uff0c\u5e76\u5728 OpenAPI \u6982\u56fe\u7684 API \u6587\u6863\u4e2d\u663e\u793a\u3002","title":"\u7c7b\u4e3a\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/classes-as-dependencies/#_4","text":"\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 CommonQueryParams \u7c7b\u5b9a\u4e49\u4f9d\u8d56\u9879\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response FastAPI \u8c03\u7528 CommonQueryParams \u7c7b\uff0c\u521b\u5efa \u7c7b\u5b9e\u4f8b \uff0c\u5e76\u7528\u53c2\u6570 commons \u628a\u8fd9\u4e2a\u7c7b\u5b9e\u4f8b\u4f20\u9012\u7ed9\u8def\u5f84\u64cd\u4f5c\u51fd\u6570\u3002","title":"\u4f7f\u7528\u58f0\u660e\u7684\u7c7b"},{"location":"tutorial/dependencies/classes-as-dependencies/#vs-depends","text":"\u6ce8\u610f\uff0c\u4e0a\u8ff0\u4ee3\u7801\u4e2d\u4f7f\u7528\u4e86\u4e24\u6b21 CommonQueryParams : commons : CommonQueryParams = Depends ( CommonQueryParams ) \u5b9e\u9645\u4e0a\uff0c FastAPI \u901a\u8fc7\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e2d\u7684 CommonQueryParams \u5224\u65ad\u54ea\u4e2a\u5bf9\u8c61\u662f\u4f9d\u8d56\u9879\uff1a ... = Depends ( CommonQueryParams ) ... \u662f FastAPI \u5b9e\u9645\u4f7f\u7528\u7684\u4f9d\u8d56\u9879\u3002 FastAPI \u4ece\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u63d0\u53d6\u58f0\u660e\u7684\u53c2\u6570\uff0c\u4e5f\u662f FastAPI \u5b9e\u9645\u8c03\u7528\u7684\u3002 \u672c\u4f8b\u4e2d\uff0c\u4e0b\u9762\u8fd9\u884c\u4ee3\u7801\u4e2d\u7684 CommonQueryParams \u5bf9\u4e8e FastAPI \u6ca1\u6709\u5b9e\u9645\u610f\u4e49\uff1a commons : CommonQueryParams ... FastAPI \u4e0d\u7528\u8fd9\u4e2a\u53c2\u6570\u8f6c\u6362\u4e0e\u9a8c\u8bc1\u6570\u636e\uff0c\u56e0\u4e3a\u8be5\u53c2\u6570\u5df2\u7ecf\u4f7f\u7528\u4e86 = Depends(CommonQueryParams) \u6267\u884c\u8fd9\u4e9b\u64cd\u4f5c\u3002 \u8fd9\u6bb5\u4ee3\u7801\u5176\u5b9e\u53ef\u4ee5\u5199\u6210\u4e0b\u9762\u7684\u5f62\u5f0f\uff1a commons = Depends ( CommonQueryParams ) \u2026\u2026\u5982\u4e0b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons = Depends ( CommonQueryParams )): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u4e0d\u8fc7\uff0c\u6211\u4eec\u8fd8\u662f\u9f13\u52b1\u58f0\u660e\u7c7b\u578b\uff0c\u8fd9\u6837\u505a\u80fd\u8ba9\u7f16\u8f91\u5668\u77e5\u9053\u53c2\u6570 commons \u4f20\u9012\u7684\u662f\u54ea\u4e2a\u5bf9\u8c61\uff0c\u4ece\u800c\u5b9e\u73b0\u4ee3\u7801\u8865\u5168\u3001\u7c7b\u578b\u68c0\u67e5\u7b49\u66f4\u591a\u652f\u6301\uff1a","title":"\u7c7b\u578b\u6ce8\u91ca vs Depends"},{"location":"tutorial/dependencies/classes-as-dependencies/#_5","text":"\u8fd9\u6bb5\u4ee3\u7801\u91cc\u91cd\u590d\u5199\u4e86\u4e24\u6b21 CommonQueryParams : commons : CommonQueryParams = Depends ( CommonQueryParams ) \u5bf9\u4e8e\u8fd9\u79cd\u7528\u7c7b\u5b9a\u4e49\u4f9d\u8d56\u9879\uff0c\u4e14 FastAPI \u8c03\u7528\u7c7b\u5b9e\u4f8b\u81ea\u8eab\u7684\u60c5\u51b5\uff0c FastAPI \u63d0\u4f9b\u4e86\u4f18\u5316\u7684\u5feb\u6377\u65b9\u5f0f\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u7279\u5b9a\u60c5\u51b5\uff0c\u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u7f16\u5199\u4ee3\u7801\uff1a \u65e0\u9700\u5728\u4e24\u4e2a\u4f4d\u7f6e\u90fd\u5199\u4e0a\u8c03\u7528\u7684\u7c7b\uff1a commons : CommonQueryParams = Depends ( CommonQueryParams ) \u2026\u2026\u53ef\u4ee5\u7b80\u5199\u6210\uff1a commons : CommonQueryParams = Depends () \u8fd9\u6bb5\u4ee3\u7801\u7528\u4f9d\u8d56\u9879\u58f0\u660e\u53c2\u6570\u7684\u7c7b\u578b\uff0c\u5e76\u628a Depends() \u4f5c\u4e3a\u8be5\u53c2\u6570\uff08\u5728 = \u4e4b\u540e\uff09\u7684 \u9ed8\u8ba4\u503c \u3002\u56e0\u4e3a Depends() \u4e2d\u6ca1\u6709\u53c2\u6570\uff0c\u6240\u4ee5\u4e0d\u7528\u5728 Depends() \u4e2d \u91cd\u590d \u5199\u51fa\u5b8c\u6574\u7684\u7c7b\uff0c Depends(CommonQueryParams) \u3002 \u4e0b\u9762\u7684\u4ee3\u7801\u4e0e\u524d\u4f8b\u7684\u6548\u679c\u4e00\u6837\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : Union [ str , None ] = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response from fastapi import Depends , FastAPI app = FastAPI () fake_items_db = [{ \"item_name\" : \"Foo\" }, { \"item_name\" : \"Bar\" }, { \"item_name\" : \"Baz\" }] class CommonQueryParams : def __init__ ( self , q : str | None = None , skip : int = 0 , limit : int = 100 ): self . q = q self . skip = skip self . limit = limit @app . get ( \"/items/\" ) async def read_items ( commons : CommonQueryParams = Depends ()): response = {} if commons . q : response . update ({ \"q\" : commons . q }) items = fake_items_db [ commons . skip : commons . skip + commons . limit ] response . update ({ \"items\" : items }) return response \u2026\u2026 FastAPI \u77e5\u9053\u4e0b\u4e00\u6b65\u8be5\u600e\u4e48\u505a\u3002 \u63d0\u793a \u5982\u679c\u60a8\u89c9\u5f97\u8fd9\u79cd\u5feb\u6377\u65b9\u5f0f\u6ca1\u4ec0\u4e48\u7528\u5904\uff0c\u53cd\u800c\u589e\u6dfb\u4e86\u56f0\u6270\uff0c\u5c3d\u53ef\u5f03\u4e4b\u4e0d\u7528\uff0c \u4e0d\u7528 \u5feb\u6377\u65b9\u5f0f\u4e5f\u6ca1\u95ee\u9898\u3002 \u8fd9\u53ea\u662f\u4e00\u79cd\u5feb\u6377\u65b9\u5f0f\uff0c FastAPI \u5e0c\u671b\u80fd\u8ba9\u60a8\u5c3d\u91cf\u5c11\u5199\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801\u3002","title":"\u5feb\u6377\u65b9\u5f0f"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u3002 \u6216\u8005\u8bf4\uff0c\u6709\u4e9b\u4f9d\u8d56\u9879\u4e0d\u8fd4\u56de\u503c\u3002 \u4f46\u4ecd\u8981\u6267\u884c\u6216\u89e3\u6790\u8be5\u4f9d\u8d56\u9879\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u5fc5\u5728\u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u65f6\u4f7f\u7528 Depends \uff0c\u800c\u662f\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7531 dependencies \u7ec4\u6210\u7684 list \u3002 \u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u6dfb\u52a0 dependencies \u53c2\u6570 \u00b6 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u53ef\u9009\u53c2\u6570 ~ dependencies \u3002 \u8be5\u53c2\u6570\u7684\u503c\u662f\u7531 Depends() \u7ec4\u6210\u7684 list \uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879\uff08\u4ee5\u4e0b\u7b80\u79f0\u4e3a \u201c\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u201d \uff09\u7684\u6267\u884c\u6216\u89e3\u6790\u65b9\u5f0f\u548c\u666e\u901a\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u4f46\u5c31\u7b97\u8fd9\u4e9b\u4f9d\u8d56\u9879\u4f1a\u8fd4\u56de\u503c\uff0c\u5b83\u4eec\u7684\u503c\u4e5f\u4e0d\u4f1a\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u63d0\u793a \u6709\u4e9b\u7f16\u8f91\u5668\u4f1a\u68c0\u67e5\u4ee3\u7801\u4e2d\u6ca1\u4f7f\u7528\u8fc7\u7684\u51fd\u6570\u53c2\u6570\uff0c\u5e76\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u4f7f\u7528 dependencies \u53c2\u6570\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u4f9d\u8d56\u9879\u7684\u540c\u65f6\uff0c\u907f\u514d\u7f16\u8f91\u5668\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u4f7f\u7528\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u907f\u514d\u5f00\u53d1\u65b0\u4eba\u8bef\u4f1a\u4ee3\u7801\u4e2d\u5305\u542b\u65e0\u7528\u7684\u672a\u4f7f\u7528\u53c2\u6570\u3002 \u8bf4\u660e \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u7684\u662f\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 X-Key \u548c X-Token \u3002 \u4f46\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u5b9e\u73b0\u5b89\u5168\u63aa\u65bd\u65f6\uff0c\u6700\u597d\u4f7f\u7528 FastAPI \u5185\u7f6e\u7684 \u5b89\u5168\u5de5\u5177 \uff08\u8be6\u89c1\u4e0b\u4e00\u7ae0\uff09\u3002 \u4f9d\u8d56\u9879\u9519\u8bef\u548c\u8fd4\u56de\u503c \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684\u4f9d\u8d56\u9879 \u51fd\u6570 \u3002 \u4f9d\u8d56\u9879\u7684\u9700\u6c42\u9879 \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u8bf7\u6c42\u7684\u9700\u6c42\u9879\uff08\u6bd4\u5982\u54cd\u5e94\u5934\uff09\u6216\u5176\u4ed6\u5b50\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u89e6\u53d1\u5f02\u5e38 \u00b6 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e0e\u6b63\u5e38\u7684\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u53ef\u4ee5 raise \u5f02\u5e38\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u8fd4\u56de\u503c \u00b6 \u65e0\u8bba\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u662f\u5426\u8fd4\u56de\u503c\uff0c\u8def\u5f84\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u503c\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u590d\u7528\u5728\u5176\u4ed6\u4f4d\u7f6e\u4f7f\u7528\u8fc7\u7684\u3001\uff08\u80fd\u8fd4\u56de\u503c\u7684\uff09\u666e\u901a\u4f9d\u8d56\u9879\uff0c\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u4e5f\u4f1a\u6267\u884c\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879 \u00b6 \u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002 \u5168\u5c40\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u4e3a FastAPI \u5e94\u7528\u6dfb\u52a0\u5168\u5c40\u4f9d\u8d56\u9879\uff0c\u521b\u5efa\u5e94\u7528\u4e8e\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u9879\u3002","title":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_1","text":"\u6709\u65f6\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u4f7f\u7528\u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\u3002 \u6216\u8005\u8bf4\uff0c\u6709\u4e9b\u4f9d\u8d56\u9879\u4e0d\u8fd4\u56de\u503c\u3002 \u4f46\u4ecd\u8981\u6267\u884c\u6216\u89e3\u6790\u8be5\u4f9d\u8d56\u9879\u3002 \u5bf9\u4e8e\u8fd9\u79cd\u60c5\u51b5\uff0c\u4e0d\u5fc5\u5728\u58f0\u660e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570\u65f6\u4f7f\u7528 Depends \uff0c\u800c\u662f\u53ef\u4ee5\u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u6dfb\u52a0\u4e00\u4e2a\u7531 dependencies \u7ec4\u6210\u7684 list \u3002","title":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies","text":"\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u652f\u6301\u53ef\u9009\u53c2\u6570 ~ dependencies \u3002 \u8be5\u53c2\u6570\u7684\u503c\u662f\u7531 Depends() \u7ec4\u6210\u7684 list \uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }] \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4f9d\u8d56\u9879\uff08\u4ee5\u4e0b\u7b80\u79f0\u4e3a \u201c\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u201d \uff09\u7684\u6267\u884c\u6216\u89e3\u6790\u65b9\u5f0f\u548c\u666e\u901a\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u4f46\u5c31\u7b97\u8fd9\u4e9b\u4f9d\u8d56\u9879\u4f1a\u8fd4\u56de\u503c\uff0c\u5b83\u4eec\u7684\u503c\u4e5f\u4e0d\u4f1a\u4f20\u9012\u7ed9 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u3002 \u63d0\u793a \u6709\u4e9b\u7f16\u8f91\u5668\u4f1a\u68c0\u67e5\u4ee3\u7801\u4e2d\u6ca1\u4f7f\u7528\u8fc7\u7684\u51fd\u6570\u53c2\u6570\uff0c\u5e76\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u5728 \u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668 \u4e2d\u4f7f\u7528 dependencies \u53c2\u6570\uff0c\u53ef\u4ee5\u786e\u4fdd\u5728\u6267\u884c\u4f9d\u8d56\u9879\u7684\u540c\u65f6\uff0c\u907f\u514d\u7f16\u8f91\u5668\u663e\u793a\u9519\u8bef\u63d0\u793a\u3002 \u4f7f\u7528\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u8fd8\u53ef\u4ee5\u907f\u514d\u5f00\u53d1\u65b0\u4eba\u8bef\u4f1a\u4ee3\u7801\u4e2d\u5305\u542b\u65e0\u7528\u7684\u672a\u4f7f\u7528\u53c2\u6570\u3002 \u8bf4\u660e \u672c\u4f8b\u4e2d\uff0c\u4f7f\u7528\u7684\u662f\u81ea\u5b9a\u4e49\u54cd\u5e94\u5934 X-Key \u548c X-Token \u3002 \u4f46\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5c24\u5176\u662f\u5728\u5b9e\u73b0\u5b89\u5168\u63aa\u65bd\u65f6\uff0c\u6700\u597d\u4f7f\u7528 FastAPI \u5185\u7f6e\u7684 \u5b89\u5168\u5de5\u5177 \uff08\u8be6\u89c1\u4e0b\u4e00\u7ae0\uff09\u3002","title":"\u5728\u8def\u5f84\u64cd\u4f5c\u88c5\u9970\u5668\u4e2d\u6dfb\u52a0 dependencies \u53c2\u6570"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_2","text":"\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e5f\u53ef\u4ee5\u4f7f\u7528\u666e\u901a\u7684\u4f9d\u8d56\u9879 \u51fd\u6570 \u3002","title":"\u4f9d\u8d56\u9879\u9519\u8bef\u548c\u8fd4\u56de\u503c"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_3","text":"\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u53ef\u4ee5\u58f0\u660e\u8bf7\u6c42\u7684\u9700\u6c42\u9879\uff08\u6bd4\u5982\u54cd\u5e94\u5934\uff09\u6216\u5176\u4ed6\u5b50\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"\u4f9d\u8d56\u9879\u7684\u9700\u6c42\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_4","text":"\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u4e0e\u6b63\u5e38\u7684\u4f9d\u8d56\u9879\u4e00\u6837\uff0c\u53ef\u4ee5 raise \u5f02\u5e38\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"\u89e6\u53d1\u5f02\u5e38"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_5","text":"\u65e0\u8bba\u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879\u662f\u5426\u8fd4\u56de\u503c\uff0c\u8def\u5f84\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u4f7f\u7528\u8fd9\u4e9b\u503c\u3002 \u56e0\u6b64\uff0c\u53ef\u4ee5\u590d\u7528\u5728\u5176\u4ed6\u4f4d\u7f6e\u4f7f\u7528\u8fc7\u7684\u3001\uff08\u80fd\u8fd4\u56de\u503c\u7684\uff09\u666e\u901a\u4f9d\u8d56\u9879\uff0c\u5373\u4f7f\u6ca1\u6709\u4f7f\u7528\u8fd9\u4e2a\u503c\uff0c\u4e5f\u4f1a\u6267\u884c\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException app = FastAPI () async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key @app . get ( \"/items/\" , dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) async def read_items (): return [{ \"item\" : \"Foo\" }, { \"item\" : \"Bar\" }]","title":"\u8fd4\u56de\u503c"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_6","text":"\u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\u7a0b\u5e8f\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002","title":"\u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-in-path-operation-decorators/#_7","text":"\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u4e3a FastAPI \u5e94\u7528\u6dfb\u52a0\u5168\u5c40\u4f9d\u8d56\u9879\uff0c\u521b\u5efa\u5e94\u7528\u4e8e\u6bcf\u4e2a \u8def\u5f84\u64cd\u4f5c \u7684\u4f9d\u8d56\u9879\u3002","title":"\u5168\u5c40\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-with-yield/","text":"yield \u751f\u6210\u5668\u4f9d\u8d56\u9879 \u00b6 FastAPI \u53ef\u4ee5\u8ba9\u4f9d\u8d56\u9879\u6267\u884c \u5b8c\u6bd5\u540e \uff0c\u518d\u6267\u884c\u66f4\u591a\u64cd\u4f5c\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u79cd\u64cd\u4f5c\uff0c\u8981\u628a\u4f9d\u8d56\u9879\u4e2d\u7684 return \u66ff\u6362\u4e3a yield \uff0c\u5e76\u5728\u4e4b\u540e\u5199\u4e0a\u9644\u52a0\u64cd\u4f5c\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21 yield \u3002 \u8bf4\u660e \u4e3a\u4e86\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u9700\u8981\u4f7f\u7528 Python 3.7 \u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u5982\u679c\u4f7f\u7528 Python 3.6 \uff0c\u5219\u9700\u8981\u5b89\u88c5 backports \uff1a pip install async-exit-stack async-generator \u4e0a\u9762\u7684\u547d\u4ee4\u4f1a\u5b89\u88c5 async-exit-stack \u548c async-generator \u3002 \u6280\u672f\u7ec6\u8282 \u4efb\u4f55\u517c\u5bb9\u4e0b\u9762\u4e24\u4e2a\u88c5\u9970\u5668\u7684\u51fd\u6570\u90fd\u53ef\u4ee5\u7528\u4f5c FastAPI \u7684\u4f9d\u8d56\u9879\uff1a @contextlib.contextmanager \u6216 @contextlib.asynccontextmanager \u5b9e\u9645\u4e0a\uff0cFastAPI \u5185\u90e8\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e24\u4e2a\u88c5\u9970\u5668\u3002 \u6570\u636e\u5e93\u751f\u6210\u5668\u4f9d\u8d56\u9879 \u00b6 \u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 \u751f\u6210\u5668\u4f9d\u8d56\u9879 \u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u5e76\u5728\u4f1a\u8bdd\u7ed3\u675f\u540e\u5173\u95ed\u4f1a\u8bdd\u3002 \u53d1\u9001\u54cd\u5e94\u524d\uff0c\u53ea\u4f1a\u6267\u884c yield \u8bed\u53e5\u53ca\u8be5\u8bed\u53e5\u4e4b\u524d\u7684\u4ee3\u7801\uff1a async def get_db (): db = DBSession () try : yield db finally : db . close () yield \u751f\u6210\u7684\u503c\u4f1a\u88ab\u6ce8\u5165\u5230 \u8def\u5f84\u64cd\u4f5c \u6216\u5176\u4ed6\u4f9d\u8d56\u9879\uff1a async def get_db (): db = DBSession () try : yield db finally : db . close () \u54cd\u5e94\u8fd4\u56de\u4e4b\u540e\uff0c\u518d\u6267\u884c yield \u8bed\u53e5\u4e4b\u540e\u7684\u4ee3\u7801\uff1a async def get_db (): db = DBSession () try : yield db finally : db . close () \u63d0\u793a \u751f\u6210\u5668\u4f9d\u8d56\u9879\u53ef\u4ee5\u4f7f\u7528 \u5f02\u6b65 \u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\u3002 \u4e0e\u666e\u901a\u4f9d\u8d56\u9879\u4e00\u6837\uff0c FastAPI \u4f1a\u6b63\u786e\u5904\u7406\u6bcf\u4e2a\u751f\u6210\u5668\u4f9d\u8d56\u9879\u3002 \u5728\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528 yield \u548c try \u00b6 \u628a\u4f9d\u8d56\u9879\u7684 yield \u7f6e\u4e8e try \u4ee3\u7801\u5757\u4e2d\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u5230\u6240\u6709\u4f7f\u7528\u8be5\u4f9d\u8d56\u9879\u65f6\u89e6\u53d1\u7684\u5f02\u5e38\u3002 \u5047\u8bbe\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u67d0\u884c\u4ee3\u7801\uff08\u8fd9\u884c\u4ee3\u7801\u53ef\u80fd\u5728 \u8def\u5f84\u64cd\u4f5c\u6216\u5176\u4ed6\u4f9d\u8d56\u9879\u4e2d \uff09\u5bfc\u81f4\u4e86\u6570\u636e\u5e93\u4e8b\u52a1\u7684 \u56de\u6eda \uff0c\u6216\u5bfc\u81f4\u4e86\u4efb\u4f55\u5176\u4ed6\u9519\u8bef\uff0c\u4f7f\u7528 try \u5c31\u53ef\u4ee5\u5728\u5f53\u524d\u4f9d\u8d56\u9879\u4e2d\u89e6\u53d1\u5f02\u5e38\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u4f7f\u7528 except SomeException \u5728\u4f9d\u8d56\u9879\u4e2d\u6355\u83b7\u7684\u5f02\u5e38\u3002 \u540c\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 finally \u4ee5\u786e\u4fdd\u65e0\u8bba\u662f\u5426\u89e6\u53d1\u5f02\u5e38\u90fd\u6267\u884c\u9000\u51fa\u6b65\u9aa4\u3002 async def get_db (): db = DBSession () try : yield db finally : db . close () \u5b50\u751f\u6210\u5668\u4f9d\u8d56\u9879 \u00b6 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u652f\u6301\u5b50\u4f9d\u8d56\u9879\u53ca\u4efb\u610f\u5c42\u7ea7\u7684\u5b50\u4f9d\u8d56\u9879 \u6811 \uff0c\u4e14\u6bcf\u4e2a\u5b50\u4f9d\u8d56\u9879\u90fd\u53ef\u4ee5\u4f7f\u7528 yield \u3002 FastAPI \u5c06\u786e\u4fdd\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\u7684 \u9000\u51fa\u4ee3\u7801 \u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fd0\u884c\u3002 \u4f8b\u5982\uff0c dependency_c \u4f9d\u8d56\u4e8e dependency_b \uff0c\u800c dependency_b \u53c8\u4f9d\u8d56\u4e8e dependency_a \uff1a from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) \u8fd9\u4e09\u4e2a\u4f9d\u8d56\u9879\u90fd\u53ef\u4ee5\u4f7f\u7528 yield \u3002 \u672c\u4f8b\u4e2d\uff0c\u8fd0\u884c dependency_c \u7684\u9000\u51fa\u4ee3\u7801\u65f6\uff0c\u9700\u8981\u4f7f\u7528 dependency_b \uff08\u5373 dep_b \uff09\u7684\u8fd4\u56de\u503c\u3002 \u5e76\u4e14\uff0c\u8fd0\u884c dependency_b \u7684\u9000\u51fa\u4ee3\u7801\u65f6\uff0c\u4e5f\u8981\u4f7f\u7528 dependency_a \uff08\u5373 dep_a \uff09\u7684\u8fd4\u56de\u503c\u3002 from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) FastAPI \u652f\u6301\u6df7\u7528\u751f\u6210\u5668\u4f9d\u8d56\u9879\uff08 yield \uff09 \u548c\u666e\u901a\u4f9d\u8d56\u9879\uff08 return \uff09\u3002 \u8fd8\u652f\u6301\u8ba9\u5355\u4e2a\u4f9d\u8d56\u9879\u8c03\u7528\u591a\u4e2a\u751f\u6210\u5668\u4f9d\u8d56\u9879\u3002 \u6839\u636e\u9700\u8981\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u5f62\u5f0f\u7684\u4f9d\u8d56\u9879\u7ec4\u5408\u3002 FastAPI \u80fd\u591f\u786e\u4fdd\u4e00\u5207\u90fd\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fd0\u884c\u3002 \u6280\u672f\u7ec6\u8282 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u7684\u5b9e\u73b0\u4f9d\u6258\u4e8e Python \u7684 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u3002 FastAPI \u5185\u90e8\u4f7f\u7528\u7684\u5c31\u662f Python \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u548c HTTPException \u00b6 \u4e0a\u6587\u4e2d\u66fe\u63d0\u53ca\uff0c\u4f9d\u8d56\u9879\u53ef\u4ee5\u4f7f\u7528 yield \u53ca try \u4ee3\u7801\u5757\u6765\u5904\u7406\u5f02\u5e38\u3002 \u60a8\u53ef\u80fd\u4f1a\u60f3\u5728\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u4e2d\uff0c\u5373 yield \u4e4b\u540e\uff0c\u89e6\u53d1 HTTPException \u6216\u7c7b\u4f3c\u7684\u5f02\u5e38\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u79cd\u65b9\u5f0f \u884c\u4e0d\u901a \u3002 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u662f\u5728 \u5f02\u5e38\u5904\u7406\u5668 \u4e4b\u540e\u6267\u884c\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4f9d\u8d56\u9879\u9000\u51fa\u4ee3\u7801\uff08 yield \u8bed\u53e5\u4e4b\u540e\uff09\u4e2d\u89e6\u53d1\u7684\u5f02\u5e38\u4e0d\u4f1a\u88ab\u6355\u83b7\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5728 yield \u8bed\u53e5\u540e\u89e6\u53d1 HTTPException\uff0c\u672c\u5e94\u6355\u83b7 HTTPException \u5e76\u8fd4\u56de HTTP 400 \u54cd\u5e94\u7684\u9ed8\u8ba4\uff08\u6216\u81ea\u5b9a\u4e49\uff09\u5f02\u5e38\u5904\u7406\u5668\u5c06\u4e0d\u4f1a\u5de5\u4f5c\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c FastAPI \u5141\u8bb8\u4f9d\u8d56\u9879\u4e2d\u7684\u4efb\u610f\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u4f1a\u8bdd\uff09\u90fd\u53ef\u4ee5\u7528\u4e8e\u540e\u53f0\u4efb\u52a1\u3002 \u540e\u53f0\u4efb\u52a1\u662f\u5728\u54cd\u5e94\u53d1\u9001 \u540e \u6267\u884c\u7684\u4efb\u52a1\u3002\u6240\u4ee5\uff0c\u6b64\u65f6\u629b\u51fa HTTPException \u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u6539\u53d8 \u5df2\u53d1\u9001 \u7684\u54cd\u5e94\u3002 \u4f46\u662f\uff0c\u5982\u679c\u540e\u53f0\u4efb\u52a1\u5bfc\u81f4\u4e86\u6570\u636e\u5e93\u9519\u8bef\uff0c\u81f3\u5c11\u53ef\u4ee5\u5728\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\u6267\u884c\u56de\u6eda\u64cd\u4f5c\uff0c\u6216\u5e72\u51c0\u5730\u5173\u95ed\u4f1a\u8bdd\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u751f\u6210\u9519\u8bef\u65e5\u5fd7\uff0c\u6216\u5411\u8fdc\u7a0b\u8ddf\u8e2a\u7cfb\u7edf\u53d1\u9001\u9519\u8bef\u62a5\u544a\u3002 \u5982\u679c\u9884\u8ba1\u67d0\u4e9b\u4ee3\u7801\u6709\u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\uff0c\u6700 Pythonic \u7684\u505a\u6cd5\u5c31\u662f\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6dfb\u52a0 try \u5f02\u5e38\u5904\u7406\u4ee3\u7801\u5757\u3002 \u5982\u679c\u9700\u8981\u5728 \u8fd4\u56de\u54cd\u5e94 \u524d\u5904\u7406\u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\uff0c\u5e76\u4e14\u9700\u8981\u4fee\u6539\u54cd\u5e94\u5185\u5bb9\uff0c\u6216\u8981\u89e6\u53d1 HTTPException\uff0c\u53ef\u4ee5\u521b\u5efa \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668 \u3002 \u63d0\u793a \u4e0d\u8981\u5728 yield \u8bed\u53e5\u4e4b\u540e\uff0c\u800c\u662f\u8981\u5728\u8be5\u8bed\u53e5\u4e4b\u524d\u89e6\u53d1 HTTPException \u7b49\u5f02\u5e38\u3002 \u4ee3\u7801\u6267\u884c\u7684\u987a\u5e8f\u7c7b\u4f3c\u4e8e\u4e0b\u56fe\u3002\u65f6\u95f4\u6d41\u4e3a\u4ece\u4e0a\u5230\u4e0b\uff0c\u5e76\u4e14\uff0c\u6bcf\u5217\u7684\u5185\u5bb9\u53ca\u4ee3\u7801\u6267\u884c\u65f6\u90fd\u4f1a\u4ea7\u751f\u4ea4\u4e92\u3002 sequenceDiagram participant client as \u5ba2\u6237\u7aef participant handler as \u5f02\u5e38\u5904\u7406\u5668 participant dep as \u751f\u6210\u5668\u4f9d\u8d56\u9879 participant operation as \u8def\u5f84\u64cd\u4f5c participant tasks as \u540e\u53f0\u4efb\u52a1 Note over client,tasks: \u4f1a\u4e3a\u4f9d\u8d56\u9879\u89e6\u53d1\u5f02\u5e38\uff0c\u5728\u54cd\u5e94\u53d1\u9001\u540e\u8fdb\u884c\u5904\u7406 Note over client,operation: \u4f1a\u89e6\u53d1 HTTPException\uff0c\u4e14\u4f1a\u66f4\u6539\u54cd\u5e94 client ->> dep: \u5f00\u59cb\u8bf7\u6c42 Note over dep: \u8fd0\u884c\u4ee3\u7801\uff0c\u76f4\u5230 yield \u8bed\u53e5 opt raise dep -->> handler: \u89e6\u53d1 HTTPException handler -->> client: HTTP \u9519\u8bef\u54cd\u5e94 dep -->> dep: \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 end dep ->> operation: \u8fd0\u884c\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u4f1a\u8bdd opt raise operation -->> handler: \u89e6\u53d1 HTTPException handler -->> client: HTTP \u9519\u8bef\u54cd\u5e94 operation -->> dep: \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 end operation ->> client: \u8fd4\u56de\u54cd\u5e94\u81f3\u5ba2\u6237\u7aef Note over client,operation: \u54cd\u5e94\u5df2\u53d1\u9001\uff0c\u4e0d\u80fd\u518d\u8fdb\u884c\u4fee\u6539 opt Tasks operation -->> tasks: \u53d1\u9001\u540e\u53f0\u4efb\u52a1 end opt \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 tasks -->> dep: \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 end Note over dep: yield \u8bed\u53e5\u4e4b\u540e opt \u5904\u7406\u5f02\u5e38 dep -->> dep: \u5904\u7406\u5f02\u5e38\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u54cd\u5e94\u3002\u4f8b\u5982\uff0c\u5173\u95ed\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 end \u8bf4\u660e FastAPI \u53ea\u4f1a\u5411\u5ba2\u6237\u7aef\u53d1\u9001 \u4e00\u4e2a\u54cd\u5e94 \u3002\u8fd9\u4e2a\u54cd\u5e94\u53ef\u80fd\u662f\u9519\u8bef\u54cd\u5e94\uff0c\u4e5f\u53ef\u80fd\u662f\u6765\u81ea \u8def\u5f84\u64cd\u4f5c \u7684\u54cd\u5e94\u3002 \u53d1\u9001\u5b8c\u8fd9\u4e2a\u54cd\u5e94\u540e\uff0c\u4e0d\u80fd\u518d\u53d1\u9001\u5176\u4ed6\u54cd\u5e94\u3002 \u63d0\u793a \u4e0a\u56fe\u663e\u793a\u7684\u662f HTTPException , \u4f46\u662f\u4e5f\u53ef\u4ee5\u89e6\u53d1\u521b\u5efa\u4e86 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668 \u7684\u4efb\u4f55\u5176\u4ed6\u5f02\u5e38\u3002\u8be5\u5f02\u5e38\u4e0d\u662f\u7531\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u5904\u7406\uff0c\u800c\u662f\u7531\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668\u5904\u7406\u3002 \u4f46\u662f\uff0c\u5982\u679c\u89e6\u53d1\u7684\u4e0d\u662f\u7531\u5f02\u5e38\u5904\u7406\u5668\u5904\u7406\u7684\u5f02\u5e38\uff0c\u5219\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u5c06\u5904\u7406\u8be5\u5f02\u5e38\u3002 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u00b6 \u4ec0\u4e48\u662f \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u00b6 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u662f\u6307\u53ef\u4ee5\u5728 with \u8bed\u53e5\u4e2d\u4f7f\u7528\u7684\u4efb\u610f Python \u5bf9\u8c61\u3002 \u6bd4\u5982\uff0c \u4f7f\u7528 with \u8bfb\u53d6\u6587\u4ef6 \uff1a with open ( \"./somefile.txt\" ) as f : contents = f . read () print ( contents ) \u5728\u5e95\u5c42\uff0c open(\"./somefile.txt\") \u521b\u5efa\u4e86\u4e00\u4e2a \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u5bf9\u8c61\u3002 with \u4ee3\u7801\u5757\u8fd0\u884c\u5b8c\u6bd5\u65f6\uff0c\u5373\u4f7f\u89e6\u53d1\u4e86\u5f02\u5e38\uff0c\u4e5f\u4e00\u5b9a\u4f1a\u5173\u95ed\u6587\u4ef6\u3002 \u521b\u5efa\u751f\u6210\u5668\u4f9d\u8d56\u9879\uff0c FastAPI \u4f1a\u5728\u5185\u90e8\u628a\u8be5\u4f9d\u8d56\u9879\u8f6c\u6362\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5e76\u5c06\u4e4b\u4e0e\u5176\u4ed6\u76f8\u5173\u5de5\u5177\u7ec4\u5408\u5728\u4e00\u8d77\u3002 \u5728\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u00b6 \u8b66\u544a \u4e0b\u8ff0\u5185\u5bb9\u6709\u70b9 \u96be\u5ea6 \u3002 \u5982\u679c\u60a8\u521a\u5f00\u59cb\u4f7f\u7528 FastAPI \uff0c\u53ef\u4ee5\u5148\u8df3\u8fc7\u8fd9\u90e8\u5206\u5185\u5bb9\u3002 \u5728 Python \u4e2d\u53ef\u4ee5\u901a\u8fc7 \u521b\u5efa\u542b\u6709 __enter__() \u548c __exit__() \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u7c7b \u6765\u521b\u5efa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\uff0c\u901a\u8fc7 with \u6216 async with \u8bed\u53e5\u8c03\u7528\u5305\u542b\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u5bf9\u8c61\u6765\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a class MySuperContextManager : def __init__ ( self ): self . db = DBSession () def __enter__ ( self ): return self . db def __exit__ ( self , exc_type , exc_value , traceback ): self . db . close () async def get_db (): with MySuperContextManager () as db : yield db \u63d0\u793a \u521b\u5efa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8fd8\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a @contextlib.contextmanager \u6216 @contextlib.asynccontextmanager \u7528\u8fd9\u4e24\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u88c5\u9970\u542b\u6709\u5355\u4e2a yield \u7684\u51fd\u6570\u3002 \u8fd9\u662f FastAPI \u5185\u90e8\u7684\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4f7f\u7528\u65b9\u5f0f\u3002 \u4f46\u662f\uff0c\u5f00\u53d1\u8005\u4e0d\u5fc5\u4e3a FastAPI \u4f9d\u8d56\u9879\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u6211\u4eec\u4e0d\u63d0\u5021\u8fd9\u79cd\u64cd\u4f5c\u3002 FastAPI \u4f1a\u5728\u5185\u90e8\u8fdb\u884c\u5904\u7406\u3002","title":"`yield` \u751f\u6210\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-with-yield/#yield","text":"FastAPI \u53ef\u4ee5\u8ba9\u4f9d\u8d56\u9879\u6267\u884c \u5b8c\u6bd5\u540e \uff0c\u518d\u6267\u884c\u66f4\u591a\u64cd\u4f5c\u3002 \u4e3a\u4e86\u5b9e\u73b0\u8fd9\u79cd\u64cd\u4f5c\uff0c\u8981\u628a\u4f9d\u8d56\u9879\u4e2d\u7684 return \u66ff\u6362\u4e3a yield \uff0c\u5e76\u5728\u4e4b\u540e\u5199\u4e0a\u9644\u52a0\u64cd\u4f5c\u3002 \u63d0\u793a \u6ce8\u610f\uff0c\u53ea\u80fd\u4f7f\u7528\u4e00\u6b21 yield \u3002 \u8bf4\u660e \u4e3a\u4e86\u80fd\u6b63\u5e38\u8fd0\u884c\uff0c\u9700\u8981\u4f7f\u7528 Python 3.7 \u6216\u4ee5\u4e0a\u7248\u672c\uff0c\u5982\u679c\u4f7f\u7528 Python 3.6 \uff0c\u5219\u9700\u8981\u5b89\u88c5 backports \uff1a pip install async-exit-stack async-generator \u4e0a\u9762\u7684\u547d\u4ee4\u4f1a\u5b89\u88c5 async-exit-stack \u548c async-generator \u3002 \u6280\u672f\u7ec6\u8282 \u4efb\u4f55\u517c\u5bb9\u4e0b\u9762\u4e24\u4e2a\u88c5\u9970\u5668\u7684\u51fd\u6570\u90fd\u53ef\u4ee5\u7528\u4f5c FastAPI \u7684\u4f9d\u8d56\u9879\uff1a @contextlib.contextmanager \u6216 @contextlib.asynccontextmanager \u5b9e\u9645\u4e0a\uff0cFastAPI \u5185\u90e8\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e24\u4e2a\u88c5\u9970\u5668\u3002","title":"yield \u751f\u6210\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-with-yield/#_1","text":"\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528 \u751f\u6210\u5668\u4f9d\u8d56\u9879 \u521b\u5efa\u6570\u636e\u5e93\u4f1a\u8bdd\uff0c\u5e76\u5728\u4f1a\u8bdd\u7ed3\u675f\u540e\u5173\u95ed\u4f1a\u8bdd\u3002 \u53d1\u9001\u54cd\u5e94\u524d\uff0c\u53ea\u4f1a\u6267\u884c yield \u8bed\u53e5\u53ca\u8be5\u8bed\u53e5\u4e4b\u524d\u7684\u4ee3\u7801\uff1a async def get_db (): db = DBSession () try : yield db finally : db . close () yield \u751f\u6210\u7684\u503c\u4f1a\u88ab\u6ce8\u5165\u5230 \u8def\u5f84\u64cd\u4f5c \u6216\u5176\u4ed6\u4f9d\u8d56\u9879\uff1a async def get_db (): db = DBSession () try : yield db finally : db . close () \u54cd\u5e94\u8fd4\u56de\u4e4b\u540e\uff0c\u518d\u6267\u884c yield \u8bed\u53e5\u4e4b\u540e\u7684\u4ee3\u7801\uff1a async def get_db (): db = DBSession () try : yield db finally : db . close () \u63d0\u793a \u751f\u6210\u5668\u4f9d\u8d56\u9879\u53ef\u4ee5\u4f7f\u7528 \u5f02\u6b65 \u51fd\u6570\u6216\u666e\u901a\u51fd\u6570\u3002 \u4e0e\u666e\u901a\u4f9d\u8d56\u9879\u4e00\u6837\uff0c FastAPI \u4f1a\u6b63\u786e\u5904\u7406\u6bcf\u4e2a\u751f\u6210\u5668\u4f9d\u8d56\u9879\u3002","title":"\u6570\u636e\u5e93\u751f\u6210\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-with-yield/#yield-try","text":"\u628a\u4f9d\u8d56\u9879\u7684 yield \u7f6e\u4e8e try \u4ee3\u7801\u5757\u4e2d\uff0c\u5c31\u53ef\u4ee5\u63a5\u6536\u5230\u6240\u6709\u4f7f\u7528\u8be5\u4f9d\u8d56\u9879\u65f6\u89e6\u53d1\u7684\u5f02\u5e38\u3002 \u5047\u8bbe\u6267\u884c\u8fc7\u7a0b\u4e2d\u7684\u67d0\u884c\u4ee3\u7801\uff08\u8fd9\u884c\u4ee3\u7801\u53ef\u80fd\u5728 \u8def\u5f84\u64cd\u4f5c\u6216\u5176\u4ed6\u4f9d\u8d56\u9879\u4e2d \uff09\u5bfc\u81f4\u4e86\u6570\u636e\u5e93\u4e8b\u52a1\u7684 \u56de\u6eda \uff0c\u6216\u5bfc\u81f4\u4e86\u4efb\u4f55\u5176\u4ed6\u9519\u8bef\uff0c\u4f7f\u7528 try \u5c31\u53ef\u4ee5\u5728\u5f53\u524d\u4f9d\u8d56\u9879\u4e2d\u89e6\u53d1\u5f02\u5e38\u3002 \u6240\u4ee5\uff0c\u53ef\u4ee5\u4f7f\u7528 except SomeException \u5728\u4f9d\u8d56\u9879\u4e2d\u6355\u83b7\u7684\u5f02\u5e38\u3002 \u540c\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 finally \u4ee5\u786e\u4fdd\u65e0\u8bba\u662f\u5426\u89e6\u53d1\u5f02\u5e38\u90fd\u6267\u884c\u9000\u51fa\u6b65\u9aa4\u3002 async def get_db (): db = DBSession () try : yield db finally : db . close ()","title":"\u5728\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528 yield \u548c try"},{"location":"tutorial/dependencies/dependencies-with-yield/#_2","text":"\u751f\u6210\u5668\u4f9d\u8d56\u9879\u652f\u6301\u5b50\u4f9d\u8d56\u9879\u53ca\u4efb\u610f\u5c42\u7ea7\u7684\u5b50\u4f9d\u8d56\u9879 \u6811 \uff0c\u4e14\u6bcf\u4e2a\u5b50\u4f9d\u8d56\u9879\u90fd\u53ef\u4ee5\u4f7f\u7528 yield \u3002 FastAPI \u5c06\u786e\u4fdd\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\u7684 \u9000\u51fa\u4ee3\u7801 \u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fd0\u884c\u3002 \u4f8b\u5982\uff0c dependency_c \u4f9d\u8d56\u4e8e dependency_b \uff0c\u800c dependency_b \u53c8\u4f9d\u8d56\u4e8e dependency_a \uff1a from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) \u8fd9\u4e09\u4e2a\u4f9d\u8d56\u9879\u90fd\u53ef\u4ee5\u4f7f\u7528 yield \u3002 \u672c\u4f8b\u4e2d\uff0c\u8fd0\u884c dependency_c \u7684\u9000\u51fa\u4ee3\u7801\u65f6\uff0c\u9700\u8981\u4f7f\u7528 dependency_b \uff08\u5373 dep_b \uff09\u7684\u8fd4\u56de\u503c\u3002 \u5e76\u4e14\uff0c\u8fd0\u884c dependency_b \u7684\u9000\u51fa\u4ee3\u7801\u65f6\uff0c\u4e5f\u8981\u4f7f\u7528 dependency_a \uff08\u5373 dep_a \uff09\u7684\u8fd4\u56de\u503c\u3002 from fastapi import Depends async def dependency_a (): dep_a = generate_dep_a () try : yield dep_a finally : dep_a . close () async def dependency_b ( dep_a = Depends ( dependency_a )): dep_b = generate_dep_b () try : yield dep_b finally : dep_b . close ( dep_a ) async def dependency_c ( dep_b = Depends ( dependency_b )): dep_c = generate_dep_c () try : yield dep_c finally : dep_c . close ( dep_b ) FastAPI \u652f\u6301\u6df7\u7528\u751f\u6210\u5668\u4f9d\u8d56\u9879\uff08 yield \uff09 \u548c\u666e\u901a\u4f9d\u8d56\u9879\uff08 return \uff09\u3002 \u8fd8\u652f\u6301\u8ba9\u5355\u4e2a\u4f9d\u8d56\u9879\u8c03\u7528\u591a\u4e2a\u751f\u6210\u5668\u4f9d\u8d56\u9879\u3002 \u6839\u636e\u9700\u8981\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u5f62\u5f0f\u7684\u4f9d\u8d56\u9879\u7ec4\u5408\u3002 FastAPI \u80fd\u591f\u786e\u4fdd\u4e00\u5207\u90fd\u4ee5\u6b63\u786e\u7684\u987a\u5e8f\u8fd0\u884c\u3002 \u6280\u672f\u7ec6\u8282 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u7684\u5b9e\u73b0\u4f9d\u6258\u4e8e Python \u7684 \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u3002 FastAPI \u5185\u90e8\u4f7f\u7528\u7684\u5c31\u662f Python \u7684\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002","title":"\u5b50\u751f\u6210\u5668\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/dependencies-with-yield/#httpexception","text":"\u4e0a\u6587\u4e2d\u66fe\u63d0\u53ca\uff0c\u4f9d\u8d56\u9879\u53ef\u4ee5\u4f7f\u7528 yield \u53ca try \u4ee3\u7801\u5757\u6765\u5904\u7406\u5f02\u5e38\u3002 \u60a8\u53ef\u80fd\u4f1a\u60f3\u5728\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u4e2d\uff0c\u5373 yield \u4e4b\u540e\uff0c\u89e6\u53d1 HTTPException \u6216\u7c7b\u4f3c\u7684\u5f02\u5e38\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u79cd\u65b9\u5f0f \u884c\u4e0d\u901a \u3002 \u751f\u6210\u5668\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u662f\u5728 \u5f02\u5e38\u5904\u7406\u5668 \u4e4b\u540e\u6267\u884c\u7684\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u4f9d\u8d56\u9879\u9000\u51fa\u4ee3\u7801\uff08 yield \u8bed\u53e5\u4e4b\u540e\uff09\u4e2d\u89e6\u53d1\u7684\u5f02\u5e38\u4e0d\u4f1a\u88ab\u6355\u83b7\u3002 \u56e0\u6b64\uff0c\u5982\u679c\u5728 yield \u8bed\u53e5\u540e\u89e6\u53d1 HTTPException\uff0c\u672c\u5e94\u6355\u83b7 HTTPException \u5e76\u8fd4\u56de HTTP 400 \u54cd\u5e94\u7684\u9ed8\u8ba4\uff08\u6216\u81ea\u5b9a\u4e49\uff09\u5f02\u5e38\u5904\u7406\u5668\u5c06\u4e0d\u4f1a\u5de5\u4f5c\u3002 \u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c FastAPI \u5141\u8bb8\u4f9d\u8d56\u9879\u4e2d\u7684\u4efb\u610f\u5bf9\u8c61\uff08\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u4f1a\u8bdd\uff09\u90fd\u53ef\u4ee5\u7528\u4e8e\u540e\u53f0\u4efb\u52a1\u3002 \u540e\u53f0\u4efb\u52a1\u662f\u5728\u54cd\u5e94\u53d1\u9001 \u540e \u6267\u884c\u7684\u4efb\u52a1\u3002\u6240\u4ee5\uff0c\u6b64\u65f6\u629b\u51fa HTTPException \u6ca1\u6709\u610f\u4e49\uff0c\u56e0\u4e3a\u6ca1\u6709\u529e\u6cd5\u6539\u53d8 \u5df2\u53d1\u9001 \u7684\u54cd\u5e94\u3002 \u4f46\u662f\uff0c\u5982\u679c\u540e\u53f0\u4efb\u52a1\u5bfc\u81f4\u4e86\u6570\u636e\u5e93\u9519\u8bef\uff0c\u81f3\u5c11\u53ef\u4ee5\u5728\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\u6267\u884c\u56de\u6eda\u64cd\u4f5c\uff0c\u6216\u5e72\u51c0\u5730\u5173\u95ed\u4f1a\u8bdd\uff0c\u800c\u4e14\u8fd8\u53ef\u4ee5\u751f\u6210\u9519\u8bef\u65e5\u5fd7\uff0c\u6216\u5411\u8fdc\u7a0b\u8ddf\u8e2a\u7cfb\u7edf\u53d1\u9001\u9519\u8bef\u62a5\u544a\u3002 \u5982\u679c\u9884\u8ba1\u67d0\u4e9b\u4ee3\u7801\u6709\u53ef\u80fd\u89e6\u53d1\u5f02\u5e38\uff0c\u6700 Pythonic \u7684\u505a\u6cd5\u5c31\u662f\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\u6dfb\u52a0 try \u5f02\u5e38\u5904\u7406\u4ee3\u7801\u5757\u3002 \u5982\u679c\u9700\u8981\u5728 \u8fd4\u56de\u54cd\u5e94 \u524d\u5904\u7406\u81ea\u5b9a\u4e49\u7684\u5f02\u5e38\uff0c\u5e76\u4e14\u9700\u8981\u4fee\u6539\u54cd\u5e94\u5185\u5bb9\uff0c\u6216\u8981\u89e6\u53d1 HTTPException\uff0c\u53ef\u4ee5\u521b\u5efa \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668 \u3002 \u63d0\u793a \u4e0d\u8981\u5728 yield \u8bed\u53e5\u4e4b\u540e\uff0c\u800c\u662f\u8981\u5728\u8be5\u8bed\u53e5\u4e4b\u524d\u89e6\u53d1 HTTPException \u7b49\u5f02\u5e38\u3002 \u4ee3\u7801\u6267\u884c\u7684\u987a\u5e8f\u7c7b\u4f3c\u4e8e\u4e0b\u56fe\u3002\u65f6\u95f4\u6d41\u4e3a\u4ece\u4e0a\u5230\u4e0b\uff0c\u5e76\u4e14\uff0c\u6bcf\u5217\u7684\u5185\u5bb9\u53ca\u4ee3\u7801\u6267\u884c\u65f6\u90fd\u4f1a\u4ea7\u751f\u4ea4\u4e92\u3002 sequenceDiagram participant client as \u5ba2\u6237\u7aef participant handler as \u5f02\u5e38\u5904\u7406\u5668 participant dep as \u751f\u6210\u5668\u4f9d\u8d56\u9879 participant operation as \u8def\u5f84\u64cd\u4f5c participant tasks as \u540e\u53f0\u4efb\u52a1 Note over client,tasks: \u4f1a\u4e3a\u4f9d\u8d56\u9879\u89e6\u53d1\u5f02\u5e38\uff0c\u5728\u54cd\u5e94\u53d1\u9001\u540e\u8fdb\u884c\u5904\u7406 Note over client,operation: \u4f1a\u89e6\u53d1 HTTPException\uff0c\u4e14\u4f1a\u66f4\u6539\u54cd\u5e94 client ->> dep: \u5f00\u59cb\u8bf7\u6c42 Note over dep: \u8fd0\u884c\u4ee3\u7801\uff0c\u76f4\u5230 yield \u8bed\u53e5 opt raise dep -->> handler: \u89e6\u53d1 HTTPException handler -->> client: HTTP \u9519\u8bef\u54cd\u5e94 dep -->> dep: \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 end dep ->> operation: \u8fd0\u884c\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\uff0c\u6570\u636e\u5e93\u4f1a\u8bdd opt raise operation -->> handler: \u89e6\u53d1 HTTPException handler -->> client: HTTP \u9519\u8bef\u54cd\u5e94 operation -->> dep: \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 end operation ->> client: \u8fd4\u56de\u54cd\u5e94\u81f3\u5ba2\u6237\u7aef Note over client,operation: \u54cd\u5e94\u5df2\u53d1\u9001\uff0c\u4e0d\u80fd\u518d\u8fdb\u884c\u4fee\u6539 opt Tasks operation -->> tasks: \u53d1\u9001\u540e\u53f0\u4efb\u52a1 end opt \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 tasks -->> dep: \u89e6\u53d1\u5176\u4ed6\u5f02\u5e38 end Note over dep: yield \u8bed\u53e5\u4e4b\u540e opt \u5904\u7406\u5f02\u5e38 dep -->> dep: \u5904\u7406\u5f02\u5e38\uff0c\u4f46\u4e0d\u80fd\u4fee\u6539\u54cd\u5e94\u3002\u4f8b\u5982\uff0c\u5173\u95ed\u6570\u636e\u5e93\u4f1a\u8bdd\u3002 end \u8bf4\u660e FastAPI \u53ea\u4f1a\u5411\u5ba2\u6237\u7aef\u53d1\u9001 \u4e00\u4e2a\u54cd\u5e94 \u3002\u8fd9\u4e2a\u54cd\u5e94\u53ef\u80fd\u662f\u9519\u8bef\u54cd\u5e94\uff0c\u4e5f\u53ef\u80fd\u662f\u6765\u81ea \u8def\u5f84\u64cd\u4f5c \u7684\u54cd\u5e94\u3002 \u53d1\u9001\u5b8c\u8fd9\u4e2a\u54cd\u5e94\u540e\uff0c\u4e0d\u80fd\u518d\u53d1\u9001\u5176\u4ed6\u54cd\u5e94\u3002 \u63d0\u793a \u4e0a\u56fe\u663e\u793a\u7684\u662f HTTPException , \u4f46\u662f\u4e5f\u53ef\u4ee5\u89e6\u53d1\u521b\u5efa\u4e86 \u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668 \u7684\u4efb\u4f55\u5176\u4ed6\u5f02\u5e38\u3002\u8be5\u5f02\u5e38\u4e0d\u662f\u7531\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u5904\u7406\uff0c\u800c\u662f\u7531\u81ea\u5b9a\u4e49\u5f02\u5e38\u5904\u7406\u5668\u5904\u7406\u3002 \u4f46\u662f\uff0c\u5982\u679c\u89e6\u53d1\u7684\u4e0d\u662f\u7531\u5f02\u5e38\u5904\u7406\u5668\u5904\u7406\u7684\u5f02\u5e38\uff0c\u5219\u4f9d\u8d56\u9879\u7684\u9000\u51fa\u4ee3\u7801\u5c06\u5904\u7406\u8be5\u5f02\u5e38\u3002","title":"\u751f\u6210\u5668\u4f9d\u8d56\u9879\u548c HTTPException"},{"location":"tutorial/dependencies/dependencies-with-yield/#_3","text":"","title":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"tutorial/dependencies/dependencies-with-yield/#_4","text":"\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u662f\u6307\u53ef\u4ee5\u5728 with \u8bed\u53e5\u4e2d\u4f7f\u7528\u7684\u4efb\u610f Python \u5bf9\u8c61\u3002 \u6bd4\u5982\uff0c \u4f7f\u7528 with \u8bfb\u53d6\u6587\u4ef6 \uff1a with open ( \"./somefile.txt\" ) as f : contents = f . read () print ( contents ) \u5728\u5e95\u5c42\uff0c open(\"./somefile.txt\") \u521b\u5efa\u4e86\u4e00\u4e2a \u4e0a\u4e0b\u6587\u7ba1\u7406\u5668 \u5bf9\u8c61\u3002 with \u4ee3\u7801\u5757\u8fd0\u884c\u5b8c\u6bd5\u65f6\uff0c\u5373\u4f7f\u89e6\u53d1\u4e86\u5f02\u5e38\uff0c\u4e5f\u4e00\u5b9a\u4f1a\u5173\u95ed\u6587\u4ef6\u3002 \u521b\u5efa\u751f\u6210\u5668\u4f9d\u8d56\u9879\uff0c FastAPI \u4f1a\u5728\u5185\u90e8\u628a\u8be5\u4f9d\u8d56\u9879\u8f6c\u6362\u4e3a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff0c\u5e76\u5c06\u4e4b\u4e0e\u5176\u4ed6\u76f8\u5173\u5de5\u5177\u7ec4\u5408\u5728\u4e00\u8d77\u3002","title":"\u4ec0\u4e48\u662f\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"tutorial/dependencies/dependencies-with-yield/#_5","text":"\u8b66\u544a \u4e0b\u8ff0\u5185\u5bb9\u6709\u70b9 \u96be\u5ea6 \u3002 \u5982\u679c\u60a8\u521a\u5f00\u59cb\u4f7f\u7528 FastAPI \uff0c\u53ef\u4ee5\u5148\u8df3\u8fc7\u8fd9\u90e8\u5206\u5185\u5bb9\u3002 \u5728 Python \u4e2d\u53ef\u4ee5\u901a\u8fc7 \u521b\u5efa\u542b\u6709 __enter__() \u548c __exit__() \u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u7c7b \u6765\u521b\u5efa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u3002 \u5f53\u7136\uff0c\u4e5f\u53ef\u4ee5\u5728\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\uff0c\u901a\u8fc7 with \u6216 async with \u8bed\u53e5\u8c03\u7528\u5305\u542b\u8fd9\u4e24\u4e2a\u65b9\u6cd5\u7684\u5bf9\u8c61\u6765\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\uff1a class MySuperContextManager : def __init__ ( self ): self . db = DBSession () def __enter__ ( self ): return self . db def __exit__ ( self , exc_type , exc_value , traceback ): self . db . close () async def get_db (): with MySuperContextManager () as db : yield db \u63d0\u793a \u521b\u5efa\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u8fd8\u53ef\u4ee5\u4f7f\u7528\u53e6\u4e00\u79cd\u65b9\u6cd5\uff1a @contextlib.contextmanager \u6216 @contextlib.asynccontextmanager \u7528\u8fd9\u4e24\u4e2a\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668\u88c5\u9970\u542b\u6709\u5355\u4e2a yield \u7684\u51fd\u6570\u3002 \u8fd9\u662f FastAPI \u5185\u90e8\u7684\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4f7f\u7528\u65b9\u5f0f\u3002 \u4f46\u662f\uff0c\u5f00\u53d1\u8005\u4e0d\u5fc5\u4e3a FastAPI \u4f9d\u8d56\u9879\u4f7f\u7528\u88c5\u9970\u5668\uff0c\u6211\u4eec\u4e0d\u63d0\u5021\u8fd9\u79cd\u64cd\u4f5c\u3002 FastAPI \u4f1a\u5728\u5185\u90e8\u8fdb\u884c\u5904\u7406\u3002","title":"\u5728\u751f\u6210\u5668\u4f9d\u8d56\u9879\u4e2d\u4f7f\u7528\u4e0a\u4e0b\u6587\u7ba1\u7406\u5668"},{"location":"tutorial/dependencies/global-dependencies/","text":"\u5168\u5c40\u4f9d\u8d56\u9879 \u00b6 \u6709\u65f6\uff0c\u6211\u4eec\u8981\u4e3a\u6574\u4e2a\u5e94\u7528\u6dfb\u52a0\u4f9d\u8d56\u9879\u3002 \u901a\u8fc7\u4e0e\u5b9a\u4e49 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u628a\u4f9d\u8d56\u9879\u6dfb\u52a0\u81f3\u6574\u4e2a FastAPI \u5e94\u7528\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u5e94\u7528\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key app = FastAPI ( dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item\" : \"Portal Gun\" }, { \"item\" : \"Plumbus\" }] @app . get ( \"/users/\" ) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u4e00\u7ae0\u7684\u601d\u8def\u5747\u9002\u7528\u4e8e\u5168\u5c40\u4f9d\u8d56\u9879\uff0c \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u53ef\u4ee5\u7528\u4e8e\u5e94\u7528\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u3002 \u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879 \u00b6 \u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002","title":"\u5168\u5c40\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/global-dependencies/#_1","text":"\u6709\u65f6\uff0c\u6211\u4eec\u8981\u4e3a\u6574\u4e2a\u5e94\u7528\u6dfb\u52a0\u4f9d\u8d56\u9879\u3002 \u901a\u8fc7\u4e0e\u5b9a\u4e49 \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u7c7b\u4f3c\u7684\u65b9\u5f0f\uff0c\u53ef\u4ee5\u628a\u4f9d\u8d56\u9879\u6dfb\u52a0\u81f3\u6574\u4e2a FastAPI \u5e94\u7528\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u53ef\u4ee5\u4e3a\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u5e94\u7528\u8be5\u4f9d\u8d56\u9879\uff1a from fastapi import Depends , FastAPI , Header , HTTPException async def verify_token ( x_token : str = Header ()): if x_token != \"fake-super-secret-token\" : raise HTTPException ( status_code = 400 , detail = \"X-Token header invalid\" ) async def verify_key ( x_key : str = Header ()): if x_key != \"fake-super-secret-key\" : raise HTTPException ( status_code = 400 , detail = \"X-Key header invalid\" ) return x_key app = FastAPI ( dependencies = [ Depends ( verify_token ), Depends ( verify_key )]) @app . get ( \"/items/\" ) async def read_items (): return [{ \"item\" : \"Portal Gun\" }, { \"item\" : \"Plumbus\" }] @app . get ( \"/users/\" ) async def read_users (): return [{ \"username\" : \"Rick\" }, { \"username\" : \"Morty\" }] \u8def\u5f84\u88c5\u9970\u5668\u4f9d\u8d56\u9879 \u4e00\u7ae0\u7684\u601d\u8def\u5747\u9002\u7528\u4e8e\u5168\u5c40\u4f9d\u8d56\u9879\uff0c \u5728\u672c\u4f8b\u4e2d\uff0c\u8fd9\u4e9b\u4f9d\u8d56\u9879\u53ef\u4ee5\u7528\u4e8e\u5e94\u7528\u4e2d\u7684\u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u3002","title":"\u5168\u5c40\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/global-dependencies/#_2","text":"\u7a0d\u540e\uff0c \u5927\u578b\u5e94\u7528 - \u591a\u6587\u4ef6 \u4e00\u7ae0\u4e2d\u4f1a\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528\u591a\u4e2a\u6587\u4ef6\u521b\u5efa\u5927\u578b\u5e94\u7528\uff0c\u5728\u8fd9\u4e00\u7ae0\u4e2d\uff0c\u60a8\u5c06\u4e86\u89e3\u5230\u5982\u4f55\u4e3a\u4e00\u7ec4 \u8def\u5f84\u64cd\u4f5c \u58f0\u660e\u5355\u4e2a dependencies \u53c2\u6570\u3002","title":"\u4e3a\u4e00\u7ec4\u8def\u5f84\u64cd\u4f5c\u5b9a\u4e49\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/","text":"\u5b50\u4f9d\u8d56\u9879 \u00b6 FastAPI \u652f\u6301\u521b\u5efa\u542b \u5b50\u4f9d\u8d56\u9879 \u7684\u4f9d\u8d56\u9879\u3002 \u5e76\u4e14\uff0c\u53ef\u4ee5\u6309\u9700\u58f0\u660e\u4efb\u610f \u6df1\u5ea6 \u7684\u5b50\u4f9d\u8d56\u9879\u5d4c\u5957\u5c42\u7ea7\u3002 FastAPI \u8d1f\u8d23\u5904\u7406\u89e3\u6790\u4e0d\u540c\u6df1\u5ea6\u7684\u5b50\u4f9d\u8d56\u9879\u3002 \u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879 \u00b6 \u4e0b\u5217\u4ee3\u7801\u521b\u5efa\u4e86\u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u6bb5\u4ee3\u7801\u58f0\u660e\u4e86\u7c7b\u578b\u4e3a str \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5f88\u7b80\u5355\uff08\u4e0d\u8fc7\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff09\uff0c\u4f46\u5374\u6709\u52a9\u4e8e\u8ba9\u6211\u4eec\u4e13\u6ce8\u4e8e\u4e86\u89e3\u5b50\u4f9d\u8d56\u9879\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002 \u7b2c\u4e8c\u5c42\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u5e76\u540c\u65f6\u7528\u8be5\u4f9d\u8d56\u9879\u81ea\u8eab\u58f0\u660e\u518d\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u4e2a \u4f9d\u8d56\u9879 \uff09\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u91cc\u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b\u58f0\u660e\u7684\u53c2\u6570\uff1a \u5c3d\u7ba1\u8be5\u51fd\u6570\u81ea\u8eab\u662f\u4f9d\u8d56\u9879\uff0c\u4f46\u8fd8\u58f0\u660e\u4e86\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u5b83 \u4f9d\u8d56 \u4e8e\u5176\u4ed6\u5bf9\u8c61\uff09 \u8be5\u51fd\u6570\u4f9d\u8d56 query_extractor , \u5e76\u628a query_extractor \u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u53c2\u6570 q \u540c\u65f6\uff0c\u8be5\u51fd\u6570\u8fd8\u58f0\u660e\u4e86\u7c7b\u578b\u662f str \u7684\u53ef\u9009 cookie\uff08 last_query \uff09 \u7528\u6237\u672a\u63d0\u4f9b\u67e5\u8be2\u53c2\u6570 q \u65f6\uff0c\u5219\u4f7f\u7528\u4e0a\u6b21\u4f7f\u7528\u540e\u4fdd\u5b58\u5728 cookie \u4e2d\u7684\u67e5\u8be2 \u4f7f\u7528\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u4fe1\u606f \u6ce8\u610f\uff0c\u8fd9\u91cc\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ea\u58f0\u660e\u4e86\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u5373 query_or_cookie_extractor \u3002 \u4f46 FastAPI \u5fc5\u987b\u5148\u5904\u7406 query_extractor \uff0c\u4ee5\u4fbf\u5728\u8c03\u7528 query_or_cookie_extractor \u65f6\u4f7f\u7528 query_extractor \u8fd4\u56de\u7684\u7ed3\u679c\u3002 graph TB query_extractor([\"query_extractor\"]) query_or_cookie_extractor([\"query_or_cookie_extractor\"]) read_query[\"/items/\"] query_extractor --> query_or_cookie_extractor --> read_query \u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879 \u00b6 \u5982\u679c\u5728\u540c\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u591a\u6b21\u58f0\u660e\u4e86\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\uff0c\u591a\u4e2a\u4f9d\u8d56\u9879\u5171\u7528\u4e00\u4e2a\u5b50\u4f9d\u8d56\u9879\uff0c FastAPI \u5728\u5904\u7406\u540c\u4e00\u8bf7\u6c42\u65f6\uff0c\u53ea\u8c03\u7528\u4e00\u6b21\u8be5\u5b50\u4f9d\u8d56\u9879\u3002 FastAPI \u4e0d\u4f1a\u4e3a\u540c\u4e00\u4e2a\u8bf7\u6c42\u591a\u6b21\u8c03\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u800c\u662f \u7f13\u5b58 \u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9\u540c\u4e00\u8bf7\u6c42\u4e2d\u6240\u6709\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\u7684 \u4f9d\u8d56\u9879 \u3002 \u5728\u9ad8\u7ea7\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u5982\u679c\u4e0d\u60f3\u4f7f\u7528 \u7f13\u5b58 \u503c\uff0c\u800c\u662f\u8981\u4e3a\u5728\u540c\u4e00\u8bf7\u6c42\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\uff08\u591a\u6b21\uff09\u4e2d\u90fd\u5b9e\u9645\u8c03\u7528\u4f9d\u8d56\u9879\uff0c\u53ef\u4ee5\u628a Depends \u7684\u53c2\u6570 use_cache \u7684\u503c\u8bbe\u7f6e\u4e3a False : async def needy_dependency ( fresh_value : str = Depends ( get_value , use_cache = False )): return { \"fresh_value\" : fresh_value } \u5c0f\u7ed3 \u00b6 \u5343\u4e07\u522b\u88ab\u672c\u7ae0\u91cc\u8fd9\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u8bcd\u85fb\u5413\u5012\u4e86\uff0c \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u5176\u5b9e\u975e\u5e38\u7b80\u5355\u3002 \u4f9d\u8d56\u6ce8\u5165\u5c31\u662f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u7684\u51fd\u6570\u3002 \u4f46\u5b83\u4f9d\u7136\u975e\u5e38\u5f3a\u5927\uff0c\u80fd\u591f\u58f0\u660e\u4efb\u610f\u5d4c\u5957\u6df1\u5ea6\u7684 \u56fe \u6216\u6811\u72b6\u7684\u4f9d\u8d56\u7ed3\u6784\u3002 \u63d0\u793a \u8fd9\u4e9b\u7b80\u5355\u7684\u4f8b\u5b50\u73b0\u5728\u770b\u4e0a\u53bb\u867d\u7136\u6ca1\u6709\u4ec0\u4e48\u5b9e\u7528\u4ef7\u503c\uff0c \u4f46\u5728 \u5b89\u5168 \u4e00\u7ae0\u4e2d\uff0c\u60a8\u4f1a\u4e86\u89e3\u5230\u8fd9\u4e9b\u4f8b\u5b50\u7684\u7528\u9014\uff0c \u4ee5\u53ca\u8fd9\u4e9b\u4f8b\u5b50\u8282\u7701\u7684\u4ee3\u7801\u91cf\u3002","title":"\u5b50\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_1","text":"FastAPI \u652f\u6301\u521b\u5efa\u542b \u5b50\u4f9d\u8d56\u9879 \u7684\u4f9d\u8d56\u9879\u3002 \u5e76\u4e14\uff0c\u53ef\u4ee5\u6309\u9700\u58f0\u660e\u4efb\u610f \u6df1\u5ea6 \u7684\u5b50\u4f9d\u8d56\u9879\u5d4c\u5957\u5c42\u7ea7\u3002 FastAPI \u8d1f\u8d23\u5904\u7406\u89e3\u6790\u4e0d\u540c\u6df1\u5ea6\u7684\u5b50\u4f9d\u8d56\u9879\u3002","title":"\u5b50\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_2","text":"\u4e0b\u5217\u4ee3\u7801\u521b\u5efa\u4e86\u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u6bb5\u4ee3\u7801\u58f0\u660e\u4e86\u7c7b\u578b\u4e3a str \u7684\u53ef\u9009\u67e5\u8be2\u53c2\u6570 q \uff0c\u7136\u540e\u8fd4\u56de\u8fd9\u4e2a\u67e5\u8be2\u53c2\u6570\u3002 \u8fd9\u4e2a\u51fd\u6570\u5f88\u7b80\u5355\uff08\u4e0d\u8fc7\u4e5f\u6ca1\u4ec0\u4e48\u7528\uff09\uff0c\u4f46\u5374\u6709\u52a9\u4e8e\u8ba9\u6211\u4eec\u4e13\u6ce8\u4e8e\u4e86\u89e3\u5b50\u4f9d\u8d56\u9879\u7684\u5de5\u4f5c\u65b9\u5f0f\u3002","title":"\u7b2c\u4e00\u5c42\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_3","text":"\u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\u51fd\u6570\uff0c\u5e76\u540c\u65f6\u7528\u8be5\u4f9d\u8d56\u9879\u81ea\u8eab\u58f0\u660e\u518d\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u6240\u4ee5\u8fd9\u4e5f\u662f\u4e00\u4e2a \u4f9d\u8d56\u9879 \uff09\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u8fd9\u91cc\u91cd\u70b9\u8bf4\u660e\u4e00\u4e0b\u58f0\u660e\u7684\u53c2\u6570\uff1a \u5c3d\u7ba1\u8be5\u51fd\u6570\u81ea\u8eab\u662f\u4f9d\u8d56\u9879\uff0c\u4f46\u8fd8\u58f0\u660e\u4e86\u53e6\u4e00\u4e2a\u4f9d\u8d56\u9879\uff08\u5b83 \u4f9d\u8d56 \u4e8e\u5176\u4ed6\u5bf9\u8c61\uff09 \u8be5\u51fd\u6570\u4f9d\u8d56 query_extractor , \u5e76\u628a query_extractor \u7684\u8fd4\u56de\u503c\u8d4b\u7ed9\u53c2\u6570 q \u540c\u65f6\uff0c\u8be5\u51fd\u6570\u8fd8\u58f0\u660e\u4e86\u7c7b\u578b\u662f str \u7684\u53ef\u9009 cookie\uff08 last_query \uff09 \u7528\u6237\u672a\u63d0\u4f9b\u67e5\u8be2\u53c2\u6570 q \u65f6\uff0c\u5219\u4f7f\u7528\u4e0a\u6b21\u4f7f\u7528\u540e\u4fdd\u5b58\u5728 cookie \u4e2d\u7684\u67e5\u8be2","title":"\u7b2c\u4e8c\u5c42\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_4","text":"\u63a5\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u4f7f\u7528\u4f9d\u8d56\u9879\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : Union [ str , None ] = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : Union [ str , None ] = Cookie ( default = None ), ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } from fastapi import Cookie , Depends , FastAPI app = FastAPI () def query_extractor ( q : str | None = None ): return q def query_or_cookie_extractor ( q : str = Depends ( query_extractor ), last_query : str | None = Cookie ( default = None ) ): if not q : return last_query return q @app . get ( \"/items/\" ) async def read_query ( query_or_default : str = Depends ( query_or_cookie_extractor )): return { \"q_or_cookie\" : query_or_default } \u4fe1\u606f \u6ce8\u610f\uff0c\u8fd9\u91cc\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u53ea\u58f0\u660e\u4e86\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u5373 query_or_cookie_extractor \u3002 \u4f46 FastAPI \u5fc5\u987b\u5148\u5904\u7406 query_extractor \uff0c\u4ee5\u4fbf\u5728\u8c03\u7528 query_or_cookie_extractor \u65f6\u4f7f\u7528 query_extractor \u8fd4\u56de\u7684\u7ed3\u679c\u3002 graph TB query_extractor([\"query_extractor\"]) query_or_cookie_extractor([\"query_or_cookie_extractor\"]) read_query[\"/items/\"] query_extractor --> query_or_cookie_extractor --> read_query","title":"\u4f7f\u7528\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_5","text":"\u5982\u679c\u5728\u540c\u4e00\u4e2a \u8def\u5f84\u64cd\u4f5c \u591a\u6b21\u58f0\u660e\u4e86\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u4f8b\u5982\uff0c\u591a\u4e2a\u4f9d\u8d56\u9879\u5171\u7528\u4e00\u4e2a\u5b50\u4f9d\u8d56\u9879\uff0c FastAPI \u5728\u5904\u7406\u540c\u4e00\u8bf7\u6c42\u65f6\uff0c\u53ea\u8c03\u7528\u4e00\u6b21\u8be5\u5b50\u4f9d\u8d56\u9879\u3002 FastAPI \u4e0d\u4f1a\u4e3a\u540c\u4e00\u4e2a\u8bf7\u6c42\u591a\u6b21\u8c03\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879\uff0c\u800c\u662f \u7f13\u5b58 \u4f9d\u8d56\u9879\u7684\u8fd4\u56de\u503c\uff0c\u5e76\u628a\u5b83\u4f20\u9012\u7ed9\u540c\u4e00\u8bf7\u6c42\u4e2d\u6240\u6709\u4f7f\u7528\u8be5\u8fd4\u56de\u503c\u7684 \u4f9d\u8d56\u9879 \u3002 \u5728\u9ad8\u7ea7\u4f7f\u7528\u573a\u666f\u4e2d\uff0c\u5982\u679c\u4e0d\u60f3\u4f7f\u7528 \u7f13\u5b58 \u503c\uff0c\u800c\u662f\u8981\u4e3a\u5728\u540c\u4e00\u8bf7\u6c42\u7684\u6bcf\u4e00\u6b65\u64cd\u4f5c\uff08\u591a\u6b21\uff09\u4e2d\u90fd\u5b9e\u9645\u8c03\u7528\u4f9d\u8d56\u9879\uff0c\u53ef\u4ee5\u628a Depends \u7684\u53c2\u6570 use_cache \u7684\u503c\u8bbe\u7f6e\u4e3a False : async def needy_dependency ( fresh_value : str = Depends ( get_value , use_cache = False )): return { \"fresh_value\" : fresh_value }","title":"\u591a\u6b21\u4f7f\u7528\u540c\u4e00\u4e2a\u4f9d\u8d56\u9879"},{"location":"tutorial/dependencies/sub-dependencies/#_6","text":"\u5343\u4e07\u522b\u88ab\u672c\u7ae0\u91cc\u8fd9\u4e9b\u82b1\u91cc\u80e1\u54e8\u7684\u8bcd\u85fb\u5413\u5012\u4e86\uff0c \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u5176\u5b9e\u975e\u5e38\u7b80\u5355\u3002 \u4f9d\u8d56\u6ce8\u5165\u5c31\u662f\u4e0e \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e00\u6837\u7684\u51fd\u6570\u3002 \u4f46\u5b83\u4f9d\u7136\u975e\u5e38\u5f3a\u5927\uff0c\u80fd\u591f\u58f0\u660e\u4efb\u610f\u5d4c\u5957\u6df1\u5ea6\u7684 \u56fe \u6216\u6811\u72b6\u7684\u4f9d\u8d56\u7ed3\u6784\u3002 \u63d0\u793a \u8fd9\u4e9b\u7b80\u5355\u7684\u4f8b\u5b50\u73b0\u5728\u770b\u4e0a\u53bb\u867d\u7136\u6ca1\u6709\u4ec0\u4e48\u5b9e\u7528\u4ef7\u503c\uff0c \u4f46\u5728 \u5b89\u5168 \u4e00\u7ae0\u4e2d\uff0c\u60a8\u4f1a\u4e86\u89e3\u5230\u8fd9\u4e9b\u4f8b\u5b50\u7684\u7528\u9014\uff0c \u4ee5\u53ca\u8fd9\u4e9b\u4f8b\u5b50\u8282\u7701\u7684\u4ee3\u7801\u91cf\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/security/","text":"\u5b89\u5168 - \u7b80\u4ecb \u00b6 \u5904\u7406\u5b89\u5168\u3001\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u7684\u65b9\u5f0f\u5f88\u591a\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5904\u7406\u5b89\u5168\u662f\u6bd4\u8f83\u7e41\u96be\u7684\u5de5\u4f5c\u3002 \u8bb8\u591a\u6846\u67b6\u6216\u7cfb\u7edf\u5904\u7406\u5b89\u5168\u548c\u8eab\u4efd\u9a8c\u8bc1\u90fd\u9700\u8981\u8d39\u65f6\u8d39\u529b\u7f16\u5199\u5927\u91cf\u4ee3\u7801\uff0c\u6709\u65f6\u5b89\u5168\u4ee3\u7801\u751a\u81f3\u4f1a\u8d85\u8fc7\u4ee3\u7801\u603b\u91cf\u7684\u4e00\u534a\u3002 FastAPI \u5219\u63d0\u4f9b\u4e86\u4f17\u591a\u5de5\u5177\uff0c\u5f00\u53d1\u8005\u65e0\u9700\u7814\u4e60\u5404\u79cd\u5b89\u5168\u89c4\u8303\uff0c\u5c31\u80fd\u8f7b\u677e\u3001\u5feb\u901f\u5730\u4ee5\u6807\u51c6\u7684\u65b9\u5f0f\u5b9e\u73b0 \u5b89\u5168 \u673a\u5236\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e9b\u5b89\u5168\u65b9\u9762\u7684\u57fa\u672c\u6982\u5ff5\u3002 \u4e0d\u60f3\u6d6a\u8d39\u65f6\u95f4\uff1f \u00b6 \u5982\u679c\u5bf9\u4ee5\u4e0b\u672f\u8bed\u4e0d\u611f\u5174\u8da3\uff0c \u73b0\u5728 \u53ea\u60f3\u4ee5\u7528\u6237\u540d\u548c\u5bc6\u7801\u4f5c\u4e3a\u5b89\u5168\u673a\u5236\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u9762\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u9605\u8bfb\u4e0b\u4e00\u7ae0\u3002 OAuth2 \u00b6 OAuth2 \u662f\u5b9a\u4e49\u4e86\u591a\u79cd\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u65b9\u5f0f\u7684\u89c4\u8303\u3002 \u5b83\u5b9a\u4e49\u4e86\u8bf8\u591a\u89c4\u8303\uff0c\u4e14\u6db5\u76d6\u4e86\u8bb8\u591a\u590d\u6742\u7528\u4f8b\u3002 \u8fd8\u5305\u62ec\u5404\u79cd \u7b2c\u4e09\u65b9 \u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u6cd5\u3002 \u8fd9\u5c31\u662f\u8138\u4e66\u3001\u8c37\u6b4c\u3001\u63a8\u7279\u3001GitHub \u7b49\u7b2c\u4e09\u65b9\u5e73\u53f0\u767b\u5f55\u540e\u53f0\u4f7f\u7528\u7684\u673a\u5236\u3002 OAuth 1 \u00b6 OAuth 1 \u4e0e OAuth2 \u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u66f4\u590d\u6742\uff0c\u800c\u4e14\u76f4\u63a5\u5305\u542b\u4e86\u52a0\u5bc6\u901a\u4fe1\u7684\u89c4\u8303\u3002 OAuth 1 \u73b0\u5728\u5df2\u7ecf\u6ca1\u4ec0\u4e48\u4eba\u7528\u4e86\u3002 OAuth2 \u6ca1\u6709\u6307\u5b9a\u5982\u4f55\u52a0\u5bc6\u901a\u4fe1\uff0c\u800c\u662f\u8981\u6c42\u5e94\u7528\u4f7f\u7528 HTTPS \u8fdb\u884c\u901a\u4fe1\u3002 \u63d0\u793a \u90e8\u7f72 \u4e00\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Traefik \u548c Let's Encrypt \u514d\u8d39\u8bbe\u7f6e HTTPS\u3002 OpenID Connect \u00b6 OpenID Connect \u662f\u57fa\u4e8e OAuth2 \u7684\u53e6\u4e00\u4e2a\u89c4\u8303\u3002 \u5b83\u53ea\u662f\u6269\u5c55\u4e86 OAuth2\uff0c\u660e\u786e\u4e86\u4e00\u4e9b\u5728 OAuth2 \u4e2d\u76f8\u5bf9\u6a21\u7cca\u7684\u5185\u5bb9\uff0c\u4f7f\u5176\u66f4\u5177\u4e92\u64cd\u4f5c\u6027\u3002 \u4f8b\u5982\uff0c\u8c37\u6b4c\u767b\u5f55\u4f7f\u7528\u7684\u5c31\u662f OpenID Connect\uff08\u5e95\u5c42\u4f7f\u7528 OAuth2\uff09\u3002 \u8138\u4e66\u6ca1\u6709\u4f7f\u7528 OpenID Connect \u767b\u5f55\uff0c\u800c\u662f\u57fa\u4e8e OAuth2 \u8fdb\u884c\u4e86\u5b9a\u5236\u3002 OpenID\uff08\u975e OpenID Connect \uff09 \u00b6 OpenID \u4e5f\u662f\u4e00\u79cd\u89c4\u8303\u3002\u5b83\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e0e OpenID Connect \u76f8\u540c\uff0c\u4f46\u4e0d\u662f\u57fa\u4e8e OAuth2\u3002 OpenID \u66fe\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u9644\u5c5e\u7cfb\u7edf\u3002 \u4f46\u73b0\u5728\u4e5f\u5df2\u7ecf\u6ca1\u4ec0\u4e48\u4eba\u7528\u4e86\u3002 OpenAPI \u00b6 OpenAPI\uff08\u66fe\u7528\u540d\u4e3a Swagger\uff09\u662f\u6784\u5efa API \u7684\u5f00\u653e\u89c4\u8303\uff08\u73b0\u4e3a Linux Foundation \u7684\u7ec4\u4ef6\uff09\u3002 FastAPI \u57fa\u4e8e OpenAPI \u3002 \u6b63\u56e0\u5982\u6b64\uff0cFastAPI \u624d\u5177\u5907\u4e86 API \u6587\u6863\u548c\u4ee3\u7801\u751f\u6210\u7b49\u529f\u80fd\u3002 OpenAPI \u5b9a\u4e49\u4e86\u591a\u79cd\u5b89\u5168 \u65b9\u6848 \u3002 \u4f7f\u7528\u8fd9\u4e9b\u5b89\u5168\u65b9\u6848\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u4eab\u53d7\u5305\u62ec API \u6587\u6863\u5728\u5185\u7684\u6807\u51c6\u5de5\u5177\u5e26\u6765\u7684\u6240\u6709\u4f18\u52bf\u3002 OpenAPI \u5b9a\u4e49\u4e86\u4ee5\u4e0b\u5b89\u5168\u65b9\u6848\uff1a apiKey \uff1a\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u6765\u6e90\u83b7\u53d6\u5e94\u7528\u7684\u6307\u5b9a\u5bc6\u94a5\uff1a \u67e5\u8be2\u53c2\u6570 \u8bf7\u6c42\u5934 cookie http \uff1a\u6807\u51c6\u7684 HTTP \u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\uff0c\u5305\u62ec\uff1a bearer \uff1a\u7ee7\u627f\u81ea OAuth2\uff0c\u503c\u4e3a Bearer \u52a0 Token \u5b57\u7b26\u4e32\u7684 Authorization \u8bf7\u6c42\u5934 HTTP Basic \u9a8c\u8bc1\u65b9\u5f0f HTTP Digest \u7b49 oauth2 \uff1aOAuth2 \u5904\u7406\u5b89\u5168\u7684\u6240\u6709\u65b9\u6cd5\uff08\u79f0\u4e3a \u6d41 \uff09 \u4ee5\u4e0b\u662f\u51e0\u79cd\u6784\u5efa\u8c37\u6b4c\u3001\u8138\u4e66\u3001\u63a8\u7279\u3001GitHub \u7b49 OAuth 2.0 \u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u7684\u6d41\uff1a implicit clientCredentials authorizationCode \u4f46\u662f\uff0c\u6709\u4e00\u4e2a\u7279\u5b9a \u6d41 \u53ef\u4ee5\u5b8c\u7f8e\u5730\u7528\u4e8e\u76f4\u63a5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\uff1a password \uff1a\u540e\u7eed\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u5bc6\u7801\u6d41\u793a\u4f8b openIdConnect \uff1a\u5b9a\u4e49\u4e86\u81ea\u52a8\u53d1\u73b0 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u6570\u636e\u7684\u65b9\u6cd5 \u81ea\u52a8\u53d1\u73b0\u673a\u5236\u662f\u5728 OpenID Connect \u89c4\u8303\u4e2d\u5b9a\u4e49\u7684 \u63d0\u793a \u96c6\u6210\u5176\u4ed6\u7c7b\u4f3c\u8c37\u6b4c\u3001\u8138\u4e66\u3001\u63a8\u7279\u3001GitHub \u7b49\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u800c\u4e14\u4e0d\u96be\u3002 \u521b\u5efa\u7c7b\u4f3c\u4e8e\u4e0a\u8ff0\u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\u7684\u5e94\u7528\u662f\u6700\u590d\u6742\u7684\u95ee\u9898\uff0c FastAPI \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u5de5\u5177\uff0c\u5b8c\u6210\u4e86\u6700\u7e41\u91cd\u7684\u5de5\u4f5c\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u65b0\u7684\u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\u5e94\u7528\u3002 FastAPI \u5b9e\u7528\u5de5\u5177 \u00b6 FastAPI \u5728 fastapi.security \u6a21\u5757\u4e2d\u4e3a\u6bcf\u79cd\u5b89\u5168\u65b9\u6848\u90fd\u63d0\u4f9b\u4e86\u591a\u79cd\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u8ba9\u5b89\u5168\u673a\u5236\u7528\u8d77\u6765\u66f4\u52a0\u7b80\u5355\u3002 \u4e0b\u4e00\u7ae0\uff0c\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 FastAPI \u7684\u5de5\u5177\u4e3a API \u589e\u52a0\u5b89\u5168\u673a\u5236\u3002 \u6b64\u5916\uff0c\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u628a\u5b89\u5168\u673a\u5236\u81ea\u52a8\u96c6\u6210\u81f3 API \u6587\u6863\u3002","title":"\u5b89\u5168 - \u7b80\u4ecb"},{"location":"tutorial/security/#-","text":"\u5904\u7406\u5b89\u5168\u3001\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u7684\u65b9\u5f0f\u5f88\u591a\u3002 \u4e00\u822c\u6765\u8bf4\uff0c\u5904\u7406\u5b89\u5168\u662f\u6bd4\u8f83\u7e41\u96be\u7684\u5de5\u4f5c\u3002 \u8bb8\u591a\u6846\u67b6\u6216\u7cfb\u7edf\u5904\u7406\u5b89\u5168\u548c\u8eab\u4efd\u9a8c\u8bc1\u90fd\u9700\u8981\u8d39\u65f6\u8d39\u529b\u7f16\u5199\u5927\u91cf\u4ee3\u7801\uff0c\u6709\u65f6\u5b89\u5168\u4ee3\u7801\u751a\u81f3\u4f1a\u8d85\u8fc7\u4ee3\u7801\u603b\u91cf\u7684\u4e00\u534a\u3002 FastAPI \u5219\u63d0\u4f9b\u4e86\u4f17\u591a\u5de5\u5177\uff0c\u5f00\u53d1\u8005\u65e0\u9700\u7814\u4e60\u5404\u79cd\u5b89\u5168\u89c4\u8303\uff0c\u5c31\u80fd\u8f7b\u677e\u3001\u5feb\u901f\u5730\u4ee5\u6807\u51c6\u7684\u65b9\u5f0f\u5b9e\u73b0 \u5b89\u5168 \u673a\u5236\u3002 \u9996\u5148\uff0c\u6211\u4eec\u6765\u4e86\u89e3\u4e00\u4e9b\u5b89\u5168\u65b9\u9762\u7684\u57fa\u672c\u6982\u5ff5\u3002","title":"\u5b89\u5168 - \u7b80\u4ecb"},{"location":"tutorial/security/#_1","text":"\u5982\u679c\u5bf9\u4ee5\u4e0b\u672f\u8bed\u4e0d\u611f\u5174\u8da3\uff0c \u73b0\u5728 \u53ea\u60f3\u4ee5\u7528\u6237\u540d\u548c\u5bc6\u7801\u4f5c\u4e3a\u5b89\u5168\u673a\u5236\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff0c\u60a8\u53ef\u4ee5\u8df3\u8fc7\u4e0b\u9762\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u9605\u8bfb\u4e0b\u4e00\u7ae0\u3002","title":"\u4e0d\u60f3\u6d6a\u8d39\u65f6\u95f4\uff1f"},{"location":"tutorial/security/#oauth2","text":"OAuth2 \u662f\u5b9a\u4e49\u4e86\u591a\u79cd\u8eab\u4efd\u9a8c\u8bc1\u548c\u6388\u6743\u65b9\u5f0f\u7684\u89c4\u8303\u3002 \u5b83\u5b9a\u4e49\u4e86\u8bf8\u591a\u89c4\u8303\uff0c\u4e14\u6db5\u76d6\u4e86\u8bb8\u591a\u590d\u6742\u7528\u4f8b\u3002 \u8fd8\u5305\u62ec\u5404\u79cd \u7b2c\u4e09\u65b9 \u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u6cd5\u3002 \u8fd9\u5c31\u662f\u8138\u4e66\u3001\u8c37\u6b4c\u3001\u63a8\u7279\u3001GitHub \u7b49\u7b2c\u4e09\u65b9\u5e73\u53f0\u767b\u5f55\u540e\u53f0\u4f7f\u7528\u7684\u673a\u5236\u3002","title":"OAuth2"},{"location":"tutorial/security/#oauth-1","text":"OAuth 1 \u4e0e OAuth2 \u5b8c\u5168\u4e0d\u540c\uff0c\u5b83\u66f4\u590d\u6742\uff0c\u800c\u4e14\u76f4\u63a5\u5305\u542b\u4e86\u52a0\u5bc6\u901a\u4fe1\u7684\u89c4\u8303\u3002 OAuth 1 \u73b0\u5728\u5df2\u7ecf\u6ca1\u4ec0\u4e48\u4eba\u7528\u4e86\u3002 OAuth2 \u6ca1\u6709\u6307\u5b9a\u5982\u4f55\u52a0\u5bc6\u901a\u4fe1\uff0c\u800c\u662f\u8981\u6c42\u5e94\u7528\u4f7f\u7528 HTTPS \u8fdb\u884c\u901a\u4fe1\u3002 \u63d0\u793a \u90e8\u7f72 \u4e00\u7ae0\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 Traefik \u548c Let's Encrypt \u514d\u8d39\u8bbe\u7f6e HTTPS\u3002","title":"OAuth 1"},{"location":"tutorial/security/#openid-connect","text":"OpenID Connect \u662f\u57fa\u4e8e OAuth2 \u7684\u53e6\u4e00\u4e2a\u89c4\u8303\u3002 \u5b83\u53ea\u662f\u6269\u5c55\u4e86 OAuth2\uff0c\u660e\u786e\u4e86\u4e00\u4e9b\u5728 OAuth2 \u4e2d\u76f8\u5bf9\u6a21\u7cca\u7684\u5185\u5bb9\uff0c\u4f7f\u5176\u66f4\u5177\u4e92\u64cd\u4f5c\u6027\u3002 \u4f8b\u5982\uff0c\u8c37\u6b4c\u767b\u5f55\u4f7f\u7528\u7684\u5c31\u662f OpenID Connect\uff08\u5e95\u5c42\u4f7f\u7528 OAuth2\uff09\u3002 \u8138\u4e66\u6ca1\u6709\u4f7f\u7528 OpenID Connect \u767b\u5f55\uff0c\u800c\u662f\u57fa\u4e8e OAuth2 \u8fdb\u884c\u4e86\u5b9a\u5236\u3002","title":"OpenID Connect"},{"location":"tutorial/security/#openidopenid-connect","text":"OpenID \u4e5f\u662f\u4e00\u79cd\u89c4\u8303\u3002\u5b83\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e0e OpenID Connect \u76f8\u540c\uff0c\u4f46\u4e0d\u662f\u57fa\u4e8e OAuth2\u3002 OpenID \u66fe\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u9644\u5c5e\u7cfb\u7edf\u3002 \u4f46\u73b0\u5728\u4e5f\u5df2\u7ecf\u6ca1\u4ec0\u4e48\u4eba\u7528\u4e86\u3002","title":"OpenID\uff08\u975eOpenID Connect\uff09"},{"location":"tutorial/security/#openapi","text":"OpenAPI\uff08\u66fe\u7528\u540d\u4e3a Swagger\uff09\u662f\u6784\u5efa API \u7684\u5f00\u653e\u89c4\u8303\uff08\u73b0\u4e3a Linux Foundation \u7684\u7ec4\u4ef6\uff09\u3002 FastAPI \u57fa\u4e8e OpenAPI \u3002 \u6b63\u56e0\u5982\u6b64\uff0cFastAPI \u624d\u5177\u5907\u4e86 API \u6587\u6863\u548c\u4ee3\u7801\u751f\u6210\u7b49\u529f\u80fd\u3002 OpenAPI \u5b9a\u4e49\u4e86\u591a\u79cd\u5b89\u5168 \u65b9\u6848 \u3002 \u4f7f\u7528\u8fd9\u4e9b\u5b89\u5168\u65b9\u6848\uff0c\u5f00\u53d1\u8005\u53ef\u4ee5\u4eab\u53d7\u5305\u62ec API \u6587\u6863\u5728\u5185\u7684\u6807\u51c6\u5de5\u5177\u5e26\u6765\u7684\u6240\u6709\u4f18\u52bf\u3002 OpenAPI \u5b9a\u4e49\u4e86\u4ee5\u4e0b\u5b89\u5168\u65b9\u6848\uff1a apiKey \uff1a\u4ece\u4ee5\u4e0b\u51e0\u4e2a\u6765\u6e90\u83b7\u53d6\u5e94\u7528\u7684\u6307\u5b9a\u5bc6\u94a5\uff1a \u67e5\u8be2\u53c2\u6570 \u8bf7\u6c42\u5934 cookie http \uff1a\u6807\u51c6\u7684 HTTP \u8eab\u4efd\u9a8c\u8bc1\u7cfb\u7edf\uff0c\u5305\u62ec\uff1a bearer \uff1a\u7ee7\u627f\u81ea OAuth2\uff0c\u503c\u4e3a Bearer \u52a0 Token \u5b57\u7b26\u4e32\u7684 Authorization \u8bf7\u6c42\u5934 HTTP Basic \u9a8c\u8bc1\u65b9\u5f0f HTTP Digest \u7b49 oauth2 \uff1aOAuth2 \u5904\u7406\u5b89\u5168\u7684\u6240\u6709\u65b9\u6cd5\uff08\u79f0\u4e3a \u6d41 \uff09 \u4ee5\u4e0b\u662f\u51e0\u79cd\u6784\u5efa\u8c37\u6b4c\u3001\u8138\u4e66\u3001\u63a8\u7279\u3001GitHub \u7b49 OAuth 2.0 \u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u7684\u6d41\uff1a implicit clientCredentials authorizationCode \u4f46\u662f\uff0c\u6709\u4e00\u4e2a\u7279\u5b9a \u6d41 \u53ef\u4ee5\u5b8c\u7f8e\u5730\u7528\u4e8e\u76f4\u63a5\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u5904\u7406\u8eab\u4efd\u9a8c\u8bc1\uff1a password \uff1a\u540e\u7eed\u7ae0\u4e3b\u8981\u4ecb\u7ecd\u5bc6\u7801\u6d41\u793a\u4f8b openIdConnect \uff1a\u5b9a\u4e49\u4e86\u81ea\u52a8\u53d1\u73b0 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u6570\u636e\u7684\u65b9\u6cd5 \u81ea\u52a8\u53d1\u73b0\u673a\u5236\u662f\u5728 OpenID Connect \u89c4\u8303\u4e2d\u5b9a\u4e49\u7684 \u63d0\u793a \u96c6\u6210\u5176\u4ed6\u7c7b\u4f3c\u8c37\u6b4c\u3001\u8138\u4e66\u3001\u63a8\u7279\u3001GitHub \u7b49\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u4e5f\u662f\u53ef\u80fd\u7684\uff0c\u800c\u4e14\u4e0d\u96be\u3002 \u521b\u5efa\u7c7b\u4f3c\u4e8e\u4e0a\u8ff0\u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\u7684\u5e94\u7528\u662f\u6700\u590d\u6742\u7684\u95ee\u9898\uff0c FastAPI \u63d0\u4f9b\u4e86\u76f8\u5e94\u7684\u5de5\u5177\uff0c\u5b8c\u6210\u4e86\u6700\u7e41\u91cd\u7684\u5de5\u4f5c\uff0c\u8ba9\u5f00\u53d1\u8005\u53ef\u4ee5\u8f7b\u677e\u5730\u521b\u5efa\u65b0\u7684\u8eab\u4efd\u9a8c\u8bc1/\u6388\u6743\u5e94\u7528\u3002","title":"OpenAPI"},{"location":"tutorial/security/#fastapi","text":"FastAPI \u5728 fastapi.security \u6a21\u5757\u4e2d\u4e3a\u6bcf\u79cd\u5b89\u5168\u65b9\u6848\u90fd\u63d0\u4f9b\u4e86\u591a\u79cd\u5de5\u5177\uff0c\u8fd9\u4e9b\u5de5\u5177\u8ba9\u5b89\u5168\u673a\u5236\u7528\u8d77\u6765\u66f4\u52a0\u7b80\u5355\u3002 \u4e0b\u4e00\u7ae0\uff0c\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 FastAPI \u7684\u5de5\u5177\u4e3a API \u589e\u52a0\u5b89\u5168\u673a\u5236\u3002 \u6b64\u5916\uff0c\u8fd8\u4f1a\u4ecb\u7ecd\u5982\u4f55\u628a\u5b89\u5168\u673a\u5236\u81ea\u52a8\u96c6\u6210\u81f3 API \u6587\u6863\u3002","title":"FastAPI \u5b9e\u7528\u5de5\u5177"},{"location":"tutorial/security/first-steps/","text":"\u5b89\u5168 - \u7b2c\u4e00\u6b65 \u00b6 \u5047\u8bbe \u540e\u7aef API \u5728\u67d0\u4e2a\u57df\u3002 \u524d\u7aef \u5728\u53e6\u4e00\u4e2a\u57df\uff0c\u6216\uff08\u79fb\u52a8\u5e94\u7528\u4e2d\uff09\u5728\u540c\u4e00\u4e2a\u57df\u7684\u4e0d\u540c\u8def\u5f84\u4e0b\u3002 \u5e76\u4e14\uff0c\u524d\u7aef\u8981\u4f7f\u7528\u540e\u7aef\u7684 username \u4e0e password \u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u3002 \u56fa\u7136\uff0c FastAPI \u652f\u6301 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u3002 \u4f46\u4e3a\u4e86\u8282\u7701\u5f00\u53d1\u8005\u7684\u65f6\u95f4\uff0c\u4e0d\u8981\u53ea\u4e3a\u4e86\u67e5\u627e\u5f88\u5c11\u7684\u5185\u5bb9\uff0c\u4e0d\u5f97\u4e0d\u9605\u8bfb\u5197\u957f\u7684\u89c4\u8303\u6587\u6863\u3002 \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 FastAPI \u7684\u5b89\u5168\u5de5\u5177\u3002 \u6982\u89c8 \u00b6 \u9996\u5148\uff0c\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u600e\u4e48\u8fd0\u884c\u7684\uff0c\u7136\u540e\u518d\u56de\u8fc7\u5934\u6765\u4e86\u89e3\u5176\u80cc\u540e\u7684\u539f\u7406\u3002 \u521b\u5efa main.py \u00b6 \u628a\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u590d\u5236\u5230 main.py \uff1a from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u8fd0\u884c \u00b6 \u8bf4\u660e \u9996\u5148\uff0c\u5b89\u88c5 python-multipart \u3002 \u5b89\u88c5\u547d\u4ee4\uff1a pip install python-multipart \u3002 \u8fd9\u662f\u56e0\u4e3a OAuth2 \u4f7f\u7528 \u8868\u5355\u6570\u636e \u53d1\u9001 username \u4e0e password \u3002 \u7528\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u8be5\u793a\u4f8b\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit) \u67e5\u770b\u6587\u6863 \u00b6 \u6253\u5f00 API \u6587\u6863\uff1a http://127.0.0.1:8000/docs\u3002 \u754c\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a Authorize \u6309\u94ae\uff01 \u9875\u9762\u53f3\u4e0a\u89d2\u51fa\u73b0\u4e86\u4e00\u4e2a\u300c Authorize \u300d\u6309\u94ae\u3002 \u8def\u5f84\u64cd\u4f5c \u7684\u53f3\u4e0a\u89d2\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e2a\u53ef\u4ee5\u70b9\u51fb\u7684\u5c0f\u9501\u56fe\u6807\u3002 \u70b9\u51fb Authorize \u6309\u94ae\uff0c\u5f39\u51fa\u6388\u6743\u8868\u5355\uff0c\u8f93\u5165 username \u4e0e password \u53ca\u5176\u4ed6\u53ef\u9009\u5b57\u6bb5\uff1a \u7b14\u8bb0 \u76ee\u524d\uff0c\u5728\u8868\u5355\u4e2d\u8f93\u5165\u5185\u5bb9\u4e0d\u4f1a\u6709\u4efb\u4f55\u53cd\u5e94\uff0c\u540e\u6587\u4f1a\u4ecb\u7ecd\u76f8\u5173\u5185\u5bb9\u3002 \u867d\u7136\u6b64\u6587\u6863\u4e0d\u662f\u7ed9\u524d\u7aef\u6700\u7ec8\u7528\u6237\u4f7f\u7528\u7684\uff0c\u4f46\u8fd9\u4e2a\u81ea\u52a8\u5de5\u5177\u975e\u5e38\u5b9e\u7528\uff0c\u53ef\u5728\u6587\u6863\u4e2d\u4e0e\u6240\u6709 API \u4ea4\u4e92\u3002 \u524d\u7aef\u56e2\u961f\uff08\u53ef\u80fd\u5c31\u662f\u5f00\u53d1\u8005\u672c\u4eba\uff09\u53ef\u4ee5\u4f7f\u7528\u672c\u5de5\u5177\u3002 \u7b2c\u4e09\u65b9\u5e94\u7528\u4e0e\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u8c03\u7528\u672c\u5de5\u5177\u3002 \u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u7528\u5b83\u6765\u8c03\u8bd5\u3001\u68c0\u67e5\u3001\u6d4b\u8bd5\u5e94\u7528\u3002 \u5bc6\u7801\u6d41 \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u56de\u8fc7\u5934\u6765\u4ecb\u7ecd\u8fd9\u6bb5\u4ee3\u7801\u7684\u539f\u7406\u3002 Password \u6d41 \u662f OAuth2 \u5b9a\u4e49\u7684\uff0c\u7528\u4e8e\u5904\u7406\u5b89\u5168\u4e0e\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u5f0f\uff08 \u6d41 \uff09\u3002 OAuth2 \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u4e3a\u4e86\u8ba9\u540e\u7aef\u6216 API \u72ec\u7acb\u4e8e\u670d\u52a1\u5668\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u3002 \u4f46\u5728\u672c\u4f8b\u4e2d\uff0c FastAPI \u5e94\u7528\u4f1a\u5904\u7406 API \u4e0e\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u7b80\u5316\u7684\u8fd0\u884c\u6d41\u7a0b\uff1a \u7528\u6237\u5728\u524d\u7aef\u8f93\u5165 username \u4e0e password \uff0c\u5e76\u70b9\u51fb \u56de\u8f66 \uff08\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\uff09\u524d\u7aef\u628a username \u4e0e password \u53d1\u9001\u81f3 API \u4e2d\u6307\u5b9a\u7684 URL\uff08\u4f7f\u7528 tokenUrl=\"token\" \u58f0\u660e\uff09 API \u68c0\u67e5 username \u4e0e password \uff0c\u5e76\u7528 Token \u54cd\u5e94\uff08\u6682\u672a\u5b9e\u73b0\u6b64\u529f\u80fd\uff09\uff1a Token \u53ea\u662f\u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u7684\u5b57\u7b26\u4e32 \u4e00\u822c\u6765\u8bf4\uff0cToken \u4f1a\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u8fc7\u671f \u8fc7\u65f6\u540e\uff0c\u7528\u6237\u8981\u518d\u6b21\u767b\u5f55 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u7b97 Token \u88ab\u4eba\u7a83\u53d6\uff0c\u98ce\u9669\u4e5f\u8f83\u4f4e\u3002\u56e0\u4e3a\u5b83\u4e0e\u6c38\u4e45\u5bc6\u94a5\u4e0d\u540c\uff0c \u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b \u4e0d\u4f1a\u957f\u671f\u6709\u6548 \u524d\u7aef\u4e34\u65f6\u5c06 Token \u5b58\u50a8\u5728\u67d0\u4e2a\u4f4d\u7f6e \u7528\u6237\u70b9\u51fb\u524d\u7aef\uff0c\u524d\u5f80\u524d\u7aef\u5e94\u7528\u7684\u5176\u4ed6\u90e8\u4ef6 \u524d\u7aef\u9700\u8981\u4ece API \u4e2d\u63d0\u53d6\u66f4\u591a\u6570\u636e\uff1a \u4e3a\u6307\u5b9a\u7684\u7aef\u70b9\uff08Endpoint\uff09\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 \u56e0\u6b64\uff0c\u7528 API \u9a8c\u8bc1\u8eab\u4efd\u65f6\uff0c\u8981\u53d1\u9001\u503c\u4e3a Bearer + Token \u7684\u8bf7\u6c42\u5934 Authorization \u5047\u5982 Token \u4e3a foobar \uff0c Authorization \u8bf7\u6c42\u5934\u5c31\u662f\uff1a Bearer foobar FastAPI \u7684 OAuth2PasswordBearer \u00b6 FastAPI \u63d0\u4f9b\u4e86\u4e0d\u540c\u62bd\u8c61\u7ea7\u522b\u7684\u5b89\u5168\u5de5\u5177\u3002 \u672c\u4f8b\u4f7f\u7528 OAuth2 \u7684 Password \u6d41\u4ee5\u53ca Bearer + Token \u3002\u4e3a\u6b64\u8981\u4f7f\u7528 OAuth2PasswordBearer \u7c7b\u3002 \u8bf4\u660e Bearer + Token \u4e0d\u662f\u552f\u4e00\u7684\u9009\u62e9\u3002 \u4f46\u5b83\u662f\u6700\u9002\u5408\u8fd9\u4e2a\u7528\u4f8b\u7684\u65b9\u6848\u3002 \u751a\u81f3\u53ef\u4ee5\u8bf4\uff0c\u5b83\u662f\u9002\u7528\u4e8e\u7edd\u5927\u591a\u6570\u7528\u4f8b\u7684\u6700\u4f73\u65b9\u6848\uff0c\u9664\u975e\u60a8\u662f OAuth2 \u7684\u4e13\u5bb6\uff0c\u77e5\u9053\u4e3a\u4ec0\u4e48\u5176\u4ed6\u65b9\u6848\u66f4\u5408\u9002\u3002 \u672c\u4f8b\u4e2d\uff0c FastAPI \u8fd8\u63d0\u4f9b\u4e86\u6784\u5efa\u5de5\u5177\u3002 \u521b\u5efa OAuth2PasswordBearer \u7684\u7c7b\u5b9e\u4f8b\u65f6\uff0c\u8981\u4f20\u9012 tokenUrl \u53c2\u6570\u3002\u8be5\u53c2\u6570\u5305\u542b\u5ba2\u6237\u7aef\uff08\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u524d\u7aef\uff09 \u7684 URL\uff0c\u7528\u4e8e\u53d1\u9001 username \u4e0e password \uff0c\u5e76\u83b7\u53d6 Token \u3002 from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u63d0\u793a \u5728\u6b64\uff0c tokenUrl=\"token\" \u6307\u5411\u7684\u662f\u6682\u672a\u521b\u5efa\u7684\u76f8\u5bf9 URL token \u3002\u8fd9\u4e2a\u76f8\u5bf9 URL \u76f8\u5f53\u4e8e ./token \u3002 \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u76f8\u5bf9 URL\uff0c\u5982\u679c API \u4f4d\u4e8e https://example.com/ \uff0c\u5219\u6307\u5411 https://example.com/token \u3002\u4f46\u5982\u679c API \u4f4d\u4e8e https://example.com/api/v1/ \uff0c\u5b83\u6307\u5411\u7684\u5c31\u662f https://example.com/api/v1/token \u3002 \u4f7f\u7528\u76f8\u5bf9 URL \u975e\u5e38\u91cd\u8981\uff0c\u53ef\u4ee5\u786e\u4fdd\u5e94\u7528\u5728\u9047\u5230 \u4f7f\u7528\u4ee3\u7406 \u8fd9\u6837\u7684\u9ad8\u7ea7\u7528\u4f8b\u65f6\uff0c\u4e5f\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u8be5\u53c2\u6570\u4e0d\u4f1a\u521b\u5efa\u7aef\u70b9\u6216 \u8def\u5f84\u64cd\u4f5c \uff0c\u4f46\u4f1a\u58f0\u660e\u5ba2\u6237\u7aef\u7528\u6765\u83b7\u53d6 Token \u7684 URL /token \u3002\u6b64\u4fe1\u606f\u7528\u4e8e OpenAPI \u53ca API \u6587\u6863\u3002 \u63a5\u4e0b\u6765\uff0c\u5b66\u4e60\u5982\u4f55\u521b\u5efa\u5b9e\u9645\u7684\u8def\u5f84\u64cd\u4f5c\u3002 \u8bf4\u660e \u4e25\u82db\u7684 Pythonista \u53ef\u80fd\u4e0d\u559c\u6b22\u7528 tokenUrl \u8fd9\u79cd\u547d\u540d\u98ce\u683c\u4ee3\u66ff token_url \u3002 \u8fd9\u79cd\u547d\u540d\u65b9\u5f0f\u662f\u56e0\u4e3a\u8981\u4f7f\u7528\u4e0e OpenAPI \u89c4\u8303\u4e2d\u76f8\u540c\u7684\u540d\u5b57\u3002\u4ee5\u4fbf\u5728\u6df1\u5165\u6821\u9a8c\u5b89\u5168\u65b9\u6848\u65f6\uff0c\u80fd\u901a\u8fc7\u590d\u5236\u7c98\u8d34\u67e5\u627e\u66f4\u591a\u76f8\u5173\u4fe1\u606f\u3002 oauth2_scheme \u53d8\u91cf\u662f OAuth2PasswordBearer \u7684\u5b9e\u4f8b\uff0c\u4e5f\u662f \u53ef\u8c03\u7528\u9879 \u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1a oauth2_scheme ( some , parameters ) \u56e0\u6b64\uff0c Depends \u53ef\u4ee5\u8c03\u7528 oauth2_scheme \u53d8\u91cf\u3002 \u4f7f\u7528 \u00b6 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Depends \u628a oauth2_scheme \u4f20\u5165\u4f9d\u8d56\u9879\u3002 from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u8be5\u4f9d\u8d56\u9879\u4f7f\u7528\u5b57\u7b26\u4e32\uff08 str \uff09\u63a5\u6536 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 token \u3002 FastAPI \u4f7f\u7528\u4f9d\u8d56\u9879\u5728 OpenAPI \u6982\u56fe\uff08\u53ca API \u6587\u6863\uff09\u4e2d\u5b9a\u4e49 \u5b89\u5168\u65b9\u6848 \u3002 \u6280\u672f\u7ec6\u8282 FastAPI \u4f7f\u7528\uff08\u5728\u4f9d\u8d56\u9879\u4e2d\u58f0\u660e\u7684\uff09\u7c7b OAuth2PasswordBearer \u5728 OpenAPI \u4e2d\u5b9a\u4e49\u5b89\u5168\u65b9\u6848\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u7ee7\u627f\u81ea fastapi.security.oauth2.OAuth2 \uff0c\u800c\u8be5\u7c7b\u53c8\u662f\u7ee7\u627f\u81ea fastapi.security.base.SecurityBase \u3002 \u6240\u6709\u4e0e OpenAPI\uff08\u53ca API \u6587\u6863\uff09\u96c6\u6210\u7684\u5b89\u5168\u5de5\u5177\u90fd\u7ee7\u627f\u81ea SecurityBase \uff0c \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 FastAPI \u80fd\u628a\u5b83\u4eec\u96c6\u6210\u81f3 OpenAPI \u7684\u539f\u56e0\u3002 \u5b9e\u73b0\u7684\u64cd\u4f5c \u00b6 FastAPI \u8981\u6821\u9a8c\u8bf7\u6c42\u4e2d\u7684 Authorization \u8bf7\u6c42\u5934\uff0c\u6838\u5bf9\u8bf7\u6c42\u5934\u7684\u503c\u662f\u4e0d\u662f\u7531 Bearer\uff0bToken \u7ec4\u6210\uff0c \u5e76\u8fd4\u56de Token \u5b57\u7b26\u4e32\uff08 str \uff09\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230 Authorization \u8bf7\u6c42\u5934\uff0c\u6216\u8bf7\u6c42\u5934\u7684\u503c\u4e0d\u662f Bearer\uff0bToken \uff0cFastAPI \u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de 401 \u9519\u8bef\u72b6\u6001\u7801\uff08 UNAUTHORIZED \uff09\u3002 \u5f00\u53d1\u8005\u4e0d\u9700\u8981\u68c0\u67e5\u9519\u8bef\u4fe1\u606f\uff0c\u67e5\u770b Token \u662f\u5426\u5b58\u5728\uff0c\u53ea\u8981\u8be5\u51fd\u6570\u80fd\u591f\u6267\u884c\uff0c\u51fd\u6570\u4e2d\u5c31\u4f1a\u5305\u542b Token \u5b57\u7b26\u4e32\u3002 \u6b63\u5982\u4e0b\u56fe\u6240\u793a\uff0cAPI \u6587\u6863\u5df2\u7ecf\u5305\u542b\u4e86\u8fd9\u9879\u529f\u80fd\uff1a \u76ee\u524d\uff0c\u6682\u65f6\u8fd8\u6ca1\u6709\u5b9e\u73b0\u9a8c\u8bc1 Token \u662f\u5426\u6709\u6548\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u540e\u6587\u5f88\u5feb\u5c31\u4f1a\u4ecb\u7ecd\u7684\u3002 \u5c0f\u7ed3 \u00b6 \u770b\u5230\u4e86\u5427\uff0c\u53ea\u8981\u591a\u5199\u4e09\u56db\u884c\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u6dfb\u52a0\u57fa\u7840\u7684\u5b89\u5168\u8868\u5355\u3002","title":"\u5b89\u5168 - \u7b2c\u4e00\u6b65"},{"location":"tutorial/security/first-steps/#-","text":"\u5047\u8bbe \u540e\u7aef API \u5728\u67d0\u4e2a\u57df\u3002 \u524d\u7aef \u5728\u53e6\u4e00\u4e2a\u57df\uff0c\u6216\uff08\u79fb\u52a8\u5e94\u7528\u4e2d\uff09\u5728\u540c\u4e00\u4e2a\u57df\u7684\u4e0d\u540c\u8def\u5f84\u4e0b\u3002 \u5e76\u4e14\uff0c\u524d\u7aef\u8981\u4f7f\u7528\u540e\u7aef\u7684 username \u4e0e password \u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u3002 \u56fa\u7136\uff0c FastAPI \u652f\u6301 OAuth2 \u8eab\u4efd\u9a8c\u8bc1\u3002 \u4f46\u4e3a\u4e86\u8282\u7701\u5f00\u53d1\u8005\u7684\u65f6\u95f4\uff0c\u4e0d\u8981\u53ea\u4e3a\u4e86\u67e5\u627e\u5f88\u5c11\u7684\u5185\u5bb9\uff0c\u4e0d\u5f97\u4e0d\u9605\u8bfb\u5197\u957f\u7684\u89c4\u8303\u6587\u6863\u3002 \u6211\u4eec\u5efa\u8bae\u4f7f\u7528 FastAPI \u7684\u5b89\u5168\u5de5\u5177\u3002","title":"\u5b89\u5168 - \u7b2c\u4e00\u6b65"},{"location":"tutorial/security/first-steps/#_1","text":"\u9996\u5148\uff0c\u770b\u770b\u4e0b\u9762\u7684\u4ee3\u7801\u662f\u600e\u4e48\u8fd0\u884c\u7684\uff0c\u7136\u540e\u518d\u56de\u8fc7\u5934\u6765\u4e86\u89e3\u5176\u80cc\u540e\u7684\u539f\u7406\u3002","title":"\u6982\u89c8"},{"location":"tutorial/security/first-steps/#mainpy","text":"\u628a\u4e0b\u9762\u7684\u793a\u4f8b\u4ee3\u7801\u590d\u5236\u5230 main.py \uff1a from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token }","title":"\u521b\u5efa main.py"},{"location":"tutorial/security/first-steps/#_2","text":"\u8bf4\u660e \u9996\u5148\uff0c\u5b89\u88c5 python-multipart \u3002 \u5b89\u88c5\u547d\u4ee4\uff1a pip install python-multipart \u3002 \u8fd9\u662f\u56e0\u4e3a OAuth2 \u4f7f\u7528 \u8868\u5355\u6570\u636e \u53d1\u9001 username \u4e0e password \u3002 \u7528\u4e0b\u9762\u7684\u547d\u4ee4\u8fd0\u884c\u8be5\u793a\u4f8b\uff1a $ uvicorn main:app --reload <span style=\"color: green;\">INFO</span>: Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)","title":"\u8fd0\u884c"},{"location":"tutorial/security/first-steps/#_3","text":"\u6253\u5f00 API \u6587\u6863\uff1a http://127.0.0.1:8000/docs\u3002 \u754c\u9762\u5982\u4e0b\u56fe\u6240\u793a\uff1a Authorize \u6309\u94ae\uff01 \u9875\u9762\u53f3\u4e0a\u89d2\u51fa\u73b0\u4e86\u4e00\u4e2a\u300c Authorize \u300d\u6309\u94ae\u3002 \u8def\u5f84\u64cd\u4f5c \u7684\u53f3\u4e0a\u89d2\u4e5f\u51fa\u73b0\u4e86\u4e00\u4e2a\u53ef\u4ee5\u70b9\u51fb\u7684\u5c0f\u9501\u56fe\u6807\u3002 \u70b9\u51fb Authorize \u6309\u94ae\uff0c\u5f39\u51fa\u6388\u6743\u8868\u5355\uff0c\u8f93\u5165 username \u4e0e password \u53ca\u5176\u4ed6\u53ef\u9009\u5b57\u6bb5\uff1a \u7b14\u8bb0 \u76ee\u524d\uff0c\u5728\u8868\u5355\u4e2d\u8f93\u5165\u5185\u5bb9\u4e0d\u4f1a\u6709\u4efb\u4f55\u53cd\u5e94\uff0c\u540e\u6587\u4f1a\u4ecb\u7ecd\u76f8\u5173\u5185\u5bb9\u3002 \u867d\u7136\u6b64\u6587\u6863\u4e0d\u662f\u7ed9\u524d\u7aef\u6700\u7ec8\u7528\u6237\u4f7f\u7528\u7684\uff0c\u4f46\u8fd9\u4e2a\u81ea\u52a8\u5de5\u5177\u975e\u5e38\u5b9e\u7528\uff0c\u53ef\u5728\u6587\u6863\u4e2d\u4e0e\u6240\u6709 API \u4ea4\u4e92\u3002 \u524d\u7aef\u56e2\u961f\uff08\u53ef\u80fd\u5c31\u662f\u5f00\u53d1\u8005\u672c\u4eba\uff09\u53ef\u4ee5\u4f7f\u7528\u672c\u5de5\u5177\u3002 \u7b2c\u4e09\u65b9\u5e94\u7528\u4e0e\u7cfb\u7edf\u4e5f\u53ef\u4ee5\u8c03\u7528\u672c\u5de5\u5177\u3002 \u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u7528\u5b83\u6765\u8c03\u8bd5\u3001\u68c0\u67e5\u3001\u6d4b\u8bd5\u5e94\u7528\u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/security/first-steps/#_4","text":"\u73b0\u5728\uff0c\u6211\u4eec\u56de\u8fc7\u5934\u6765\u4ecb\u7ecd\u8fd9\u6bb5\u4ee3\u7801\u7684\u539f\u7406\u3002 Password \u6d41 \u662f OAuth2 \u5b9a\u4e49\u7684\uff0c\u7528\u4e8e\u5904\u7406\u5b89\u5168\u4e0e\u8eab\u4efd\u9a8c\u8bc1\u7684\u65b9\u5f0f\uff08 \u6d41 \uff09\u3002 OAuth2 \u7684\u8bbe\u8ba1\u76ee\u6807\u662f\u4e3a\u4e86\u8ba9\u540e\u7aef\u6216 API \u72ec\u7acb\u4e8e\u670d\u52a1\u5668\u9a8c\u8bc1\u7528\u6237\u8eab\u4efd\u3002 \u4f46\u5728\u672c\u4f8b\u4e2d\uff0c FastAPI \u5e94\u7528\u4f1a\u5904\u7406 API \u4e0e\u8eab\u4efd\u9a8c\u8bc1\u3002 \u4e0b\u9762\uff0c\u6211\u4eec\u6765\u770b\u4e00\u4e0b\u7b80\u5316\u7684\u8fd0\u884c\u6d41\u7a0b\uff1a \u7528\u6237\u5728\u524d\u7aef\u8f93\u5165 username \u4e0e password \uff0c\u5e76\u70b9\u51fb \u56de\u8f66 \uff08\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\uff09\u524d\u7aef\u628a username \u4e0e password \u53d1\u9001\u81f3 API \u4e2d\u6307\u5b9a\u7684 URL\uff08\u4f7f\u7528 tokenUrl=\"token\" \u58f0\u660e\uff09 API \u68c0\u67e5 username \u4e0e password \uff0c\u5e76\u7528 Token \u54cd\u5e94\uff08\u6682\u672a\u5b9e\u73b0\u6b64\u529f\u80fd\uff09\uff1a Token \u53ea\u662f\u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u7684\u5b57\u7b26\u4e32 \u4e00\u822c\u6765\u8bf4\uff0cToken \u4f1a\u5728\u4e00\u6bb5\u65f6\u95f4\u540e\u8fc7\u671f \u8fc7\u65f6\u540e\uff0c\u7528\u6237\u8981\u518d\u6b21\u767b\u5f55 \u8fd9\u6837\u4e00\u6765\uff0c\u5c31\u7b97 Token \u88ab\u4eba\u7a83\u53d6\uff0c\u98ce\u9669\u4e5f\u8f83\u4f4e\u3002\u56e0\u4e3a\u5b83\u4e0e\u6c38\u4e45\u5bc6\u94a5\u4e0d\u540c\uff0c \u5728\u7edd\u5927\u591a\u6570\u60c5\u51b5\u4e0b \u4e0d\u4f1a\u957f\u671f\u6709\u6548 \u524d\u7aef\u4e34\u65f6\u5c06 Token \u5b58\u50a8\u5728\u67d0\u4e2a\u4f4d\u7f6e \u7528\u6237\u70b9\u51fb\u524d\u7aef\uff0c\u524d\u5f80\u524d\u7aef\u5e94\u7528\u7684\u5176\u4ed6\u90e8\u4ef6 \u524d\u7aef\u9700\u8981\u4ece API \u4e2d\u63d0\u53d6\u66f4\u591a\u6570\u636e\uff1a \u4e3a\u6307\u5b9a\u7684\u7aef\u70b9\uff08Endpoint\uff09\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1 \u56e0\u6b64\uff0c\u7528 API \u9a8c\u8bc1\u8eab\u4efd\u65f6\uff0c\u8981\u53d1\u9001\u503c\u4e3a Bearer + Token \u7684\u8bf7\u6c42\u5934 Authorization \u5047\u5982 Token \u4e3a foobar \uff0c Authorization \u8bf7\u6c42\u5934\u5c31\u662f\uff1a Bearer foobar","title":"\u5bc6\u7801\u6d41"},{"location":"tutorial/security/first-steps/#fastapi-oauth2passwordbearer","text":"FastAPI \u63d0\u4f9b\u4e86\u4e0d\u540c\u62bd\u8c61\u7ea7\u522b\u7684\u5b89\u5168\u5de5\u5177\u3002 \u672c\u4f8b\u4f7f\u7528 OAuth2 \u7684 Password \u6d41\u4ee5\u53ca Bearer + Token \u3002\u4e3a\u6b64\u8981\u4f7f\u7528 OAuth2PasswordBearer \u7c7b\u3002 \u8bf4\u660e Bearer + Token \u4e0d\u662f\u552f\u4e00\u7684\u9009\u62e9\u3002 \u4f46\u5b83\u662f\u6700\u9002\u5408\u8fd9\u4e2a\u7528\u4f8b\u7684\u65b9\u6848\u3002 \u751a\u81f3\u53ef\u4ee5\u8bf4\uff0c\u5b83\u662f\u9002\u7528\u4e8e\u7edd\u5927\u591a\u6570\u7528\u4f8b\u7684\u6700\u4f73\u65b9\u6848\uff0c\u9664\u975e\u60a8\u662f OAuth2 \u7684\u4e13\u5bb6\uff0c\u77e5\u9053\u4e3a\u4ec0\u4e48\u5176\u4ed6\u65b9\u6848\u66f4\u5408\u9002\u3002 \u672c\u4f8b\u4e2d\uff0c FastAPI \u8fd8\u63d0\u4f9b\u4e86\u6784\u5efa\u5de5\u5177\u3002 \u521b\u5efa OAuth2PasswordBearer \u7684\u7c7b\u5b9e\u4f8b\u65f6\uff0c\u8981\u4f20\u9012 tokenUrl \u53c2\u6570\u3002\u8be5\u53c2\u6570\u5305\u542b\u5ba2\u6237\u7aef\uff08\u7528\u6237\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u524d\u7aef\uff09 \u7684 URL\uff0c\u7528\u4e8e\u53d1\u9001 username \u4e0e password \uff0c\u5e76\u83b7\u53d6 Token \u3002 from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u63d0\u793a \u5728\u6b64\uff0c tokenUrl=\"token\" \u6307\u5411\u7684\u662f\u6682\u672a\u521b\u5efa\u7684\u76f8\u5bf9 URL token \u3002\u8fd9\u4e2a\u76f8\u5bf9 URL \u76f8\u5f53\u4e8e ./token \u3002 \u56e0\u4e3a\u4f7f\u7528\u7684\u662f\u76f8\u5bf9 URL\uff0c\u5982\u679c API \u4f4d\u4e8e https://example.com/ \uff0c\u5219\u6307\u5411 https://example.com/token \u3002\u4f46\u5982\u679c API \u4f4d\u4e8e https://example.com/api/v1/ \uff0c\u5b83\u6307\u5411\u7684\u5c31\u662f https://example.com/api/v1/token \u3002 \u4f7f\u7528\u76f8\u5bf9 URL \u975e\u5e38\u91cd\u8981\uff0c\u53ef\u4ee5\u786e\u4fdd\u5e94\u7528\u5728\u9047\u5230 \u4f7f\u7528\u4ee3\u7406 \u8fd9\u6837\u7684\u9ad8\u7ea7\u7528\u4f8b\u65f6\uff0c\u4e5f\u80fd\u6b63\u5e38\u8fd0\u884c\u3002 \u8be5\u53c2\u6570\u4e0d\u4f1a\u521b\u5efa\u7aef\u70b9\u6216 \u8def\u5f84\u64cd\u4f5c \uff0c\u4f46\u4f1a\u58f0\u660e\u5ba2\u6237\u7aef\u7528\u6765\u83b7\u53d6 Token \u7684 URL /token \u3002\u6b64\u4fe1\u606f\u7528\u4e8e OpenAPI \u53ca API \u6587\u6863\u3002 \u63a5\u4e0b\u6765\uff0c\u5b66\u4e60\u5982\u4f55\u521b\u5efa\u5b9e\u9645\u7684\u8def\u5f84\u64cd\u4f5c\u3002 \u8bf4\u660e \u4e25\u82db\u7684 Pythonista \u53ef\u80fd\u4e0d\u559c\u6b22\u7528 tokenUrl \u8fd9\u79cd\u547d\u540d\u98ce\u683c\u4ee3\u66ff token_url \u3002 \u8fd9\u79cd\u547d\u540d\u65b9\u5f0f\u662f\u56e0\u4e3a\u8981\u4f7f\u7528\u4e0e OpenAPI \u89c4\u8303\u4e2d\u76f8\u540c\u7684\u540d\u5b57\u3002\u4ee5\u4fbf\u5728\u6df1\u5165\u6821\u9a8c\u5b89\u5168\u65b9\u6848\u65f6\uff0c\u80fd\u901a\u8fc7\u590d\u5236\u7c98\u8d34\u67e5\u627e\u66f4\u591a\u76f8\u5173\u4fe1\u606f\u3002 oauth2_scheme \u53d8\u91cf\u662f OAuth2PasswordBearer \u7684\u5b9e\u4f8b\uff0c\u4e5f\u662f \u53ef\u8c03\u7528\u9879 \u3002 \u4ee5\u5982\u4e0b\u65b9\u5f0f\u8c03\u7528\uff1a oauth2_scheme ( some , parameters ) \u56e0\u6b64\uff0c Depends \u53ef\u4ee5\u8c03\u7528 oauth2_scheme \u53d8\u91cf\u3002","title":"FastAPI \u7684 OAuth2PasswordBearer"},{"location":"tutorial/security/first-steps/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 Depends \u628a oauth2_scheme \u4f20\u5165\u4f9d\u8d56\u9879\u3002 from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u8be5\u4f9d\u8d56\u9879\u4f7f\u7528\u5b57\u7b26\u4e32\uff08 str \uff09\u63a5\u6536 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u7684\u53c2\u6570 token \u3002 FastAPI \u4f7f\u7528\u4f9d\u8d56\u9879\u5728 OpenAPI \u6982\u56fe\uff08\u53ca API \u6587\u6863\uff09\u4e2d\u5b9a\u4e49 \u5b89\u5168\u65b9\u6848 \u3002 \u6280\u672f\u7ec6\u8282 FastAPI \u4f7f\u7528\uff08\u5728\u4f9d\u8d56\u9879\u4e2d\u58f0\u660e\u7684\uff09\u7c7b OAuth2PasswordBearer \u5728 OpenAPI \u4e2d\u5b9a\u4e49\u5b89\u5168\u65b9\u6848\uff0c\u8fd9\u662f\u56e0\u4e3a\u5b83\u7ee7\u627f\u81ea fastapi.security.oauth2.OAuth2 \uff0c\u800c\u8be5\u7c7b\u53c8\u662f\u7ee7\u627f\u81ea fastapi.security.base.SecurityBase \u3002 \u6240\u6709\u4e0e OpenAPI\uff08\u53ca API \u6587\u6863\uff09\u96c6\u6210\u7684\u5b89\u5168\u5de5\u5177\u90fd\u7ee7\u627f\u81ea SecurityBase \uff0c \u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 FastAPI \u80fd\u628a\u5b83\u4eec\u96c6\u6210\u81f3 OpenAPI \u7684\u539f\u56e0\u3002","title":"\u4f7f\u7528"},{"location":"tutorial/security/first-steps/#_6","text":"FastAPI \u8981\u6821\u9a8c\u8bf7\u6c42\u4e2d\u7684 Authorization \u8bf7\u6c42\u5934\uff0c\u6838\u5bf9\u8bf7\u6c42\u5934\u7684\u503c\u662f\u4e0d\u662f\u7531 Bearer\uff0bToken \u7ec4\u6210\uff0c \u5e76\u8fd4\u56de Token \u5b57\u7b26\u4e32\uff08 str \uff09\u3002 \u5982\u679c\u6ca1\u6709\u627e\u5230 Authorization \u8bf7\u6c42\u5934\uff0c\u6216\u8bf7\u6c42\u5934\u7684\u503c\u4e0d\u662f Bearer\uff0bToken \uff0cFastAPI \u5c31\u4f1a\u76f4\u63a5\u8fd4\u56de 401 \u9519\u8bef\u72b6\u6001\u7801\uff08 UNAUTHORIZED \uff09\u3002 \u5f00\u53d1\u8005\u4e0d\u9700\u8981\u68c0\u67e5\u9519\u8bef\u4fe1\u606f\uff0c\u67e5\u770b Token \u662f\u5426\u5b58\u5728\uff0c\u53ea\u8981\u8be5\u51fd\u6570\u80fd\u591f\u6267\u884c\uff0c\u51fd\u6570\u4e2d\u5c31\u4f1a\u5305\u542b Token \u5b57\u7b26\u4e32\u3002 \u6b63\u5982\u4e0b\u56fe\u6240\u793a\uff0cAPI \u6587\u6863\u5df2\u7ecf\u5305\u542b\u4e86\u8fd9\u9879\u529f\u80fd\uff1a \u76ee\u524d\uff0c\u6682\u65f6\u8fd8\u6ca1\u6709\u5b9e\u73b0\u9a8c\u8bc1 Token \u662f\u5426\u6709\u6548\u7684\u529f\u80fd\uff0c\u4e0d\u8fc7\u540e\u6587\u5f88\u5feb\u5c31\u4f1a\u4ecb\u7ecd\u7684\u3002","title":"\u5b9e\u73b0\u7684\u64cd\u4f5c"},{"location":"tutorial/security/first-steps/#_7","text":"\u770b\u5230\u4e86\u5427\uff0c\u53ea\u8981\u591a\u5199\u4e09\u56db\u884c\u4ee3\u7801\uff0c\u5c31\u53ef\u4ee5\u6dfb\u52a0\u57fa\u7840\u7684\u5b89\u5168\u8868\u5355\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/security/get-current-user/","text":"\u83b7\u53d6\u5f53\u524d\u7528\u6237 \u00b6 \u4e0a\u4e00\u7ae0\u4e2d\uff0c\uff08\u57fa\u4e8e\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u7684\uff09\u5b89\u5168\u7cfb\u7edf\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f20\u9012\u4e86 str \u7c7b\u578b\u7684 token \uff1a from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u4f46\u8fd9\u5e76\u4e0d\u5b9e\u7528\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fd4\u56de\u5f53\u524d\u7528\u6237\u3002 \u521b\u5efa\u7528\u6237\u6a21\u578b \u00b6 \u9996\u5148\uff0c\u521b\u5efa Pydantic \u7528\u6237\u6a21\u578b\u3002 \u4e0e\u4f7f\u7528 Pydantic \u58f0\u660e\u8bf7\u6c42\u4f53\u76f8\u540c\uff0c\u5e76\u4e14\u53ef\u5728\u4efb\u4f55\u4f4d\u7f6e\u4f7f\u7528\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u521b\u5efa get_current_user \u4f9d\u8d56\u9879 \u00b6 \u521b\u5efa get_current_user \u4f9d\u8d56\u9879\u3002 \u8fd8\u8bb0\u5f97\u4f9d\u8d56\u9879\u652f\u6301\u5b50\u4f9d\u8d56\u9879\u5417\uff1f get_current_user \u4f7f\u7528 oauth2_scheme \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 \u4e0e\u4e4b\u524d\u76f4\u63a5\u5728\u8def\u5f84\u64cd\u4f5c\u4e2d\u7684\u505a\u6cd5\u76f8\u540c\uff0c\u65b0\u7684 get_current_user \u4f9d\u8d56\u9879\u4ece\u5b50\u4f9d\u8d56\u9879 oauth2_scheme \u4e2d\u63a5\u6536 str \u7c7b\u578b\u7684 token \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u83b7\u53d6\u7528\u6237 \u00b6 get_current_user \u4f7f\u7528\u521b\u5efa\u7684\uff08\u4f2a\uff09\u5de5\u5177\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536 str \u7c7b\u578b\u7684 Token\uff0c\u5e76\u8fd4\u56de Pydantic \u7684 User \u6a21\u578b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u6ce8\u5165\u5f53\u524d\u7528\u6237 \u00b6 \u5728 \u8def\u5f84\u64cd\u4f5c \u7684 Depends \u4e2d\u4f7f\u7528 get_current_user \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u6ce8\u610f\uff0c\u6b64\u5904\u628a current_user \u7684\u7c7b\u578b\u58f0\u660e\u4e3a Pydantic \u7684 User \u6a21\u578b\u3002 \u8fd9\u6709\u52a9\u4e8e\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u4ee3\u7801\u8865\u5168\u548c\u7c7b\u578b\u68c0\u67e5\u3002 \u63d0\u793a \u8fd8\u8bb0\u5f97\u8bf7\u6c42\u4f53\u4e5f\u662f\u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e\u7684\u5427\u3002 \u653e\u5fc3\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86 Depends \uff0c FastAPI \u4e0d\u4f1a\u641e\u6df7\u3002 \u68c0\u67e5 \u4f9d\u8d56\u7cfb\u7edf\u7684\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u5f0f\u53ef\u4ee5\u652f\u6301\u4e0d\u540c\u7684\u4f9d\u8d56\u9879\u8fd4\u56de\u540c\u4e00\u4e2a User \u6a21\u578b\u3002 \u800c\u4e0d\u662f\u5c40\u9650\u4e8e\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u8be5\u7c7b\u578b\u6570\u636e\u7684\u4f9d\u8d56\u9879\u3002 \u5176\u4ed6\u6a21\u578b \u00b6 \u63a5\u4e0b\u6765\uff0c\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\uff0c\u5e76\u7528 Depends \u5728 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u4e2d\u5904\u7406\u5b89\u5168\u673a\u5236\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6a21\u578b\u6216\u6570\u636e\u6ee1\u8db3\u5b89\u5168\u9700\u6c42\uff08\u672c\u4f8b\u4e2d\u662f Pydantic \u7684 User \u6a21\u578b\uff09\u3002 \u800c\u4e14\uff0c\u4e0d\u5c40\u9650\u4e8e\u53ea\u80fd\u4f7f\u7528\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\u3001\u7c7b\u6216\u7c7b\u578b\u3002 \u4e0d\u60f3\u5728\u6a21\u578b\u4e2d\u4f7f\u7528 username \uff0c\u800c\u662f\u4f7f\u7528 id \u548c email \uff1f\u5f53\u7136\u53ef\u4ee5\u3002\u8fd9\u4e9b\u5de5\u5177\u4e5f\u652f\u6301\u3002 \u53ea\u60f3\u4f7f\u7528\u5b57\u7b26\u4e32\uff1f\u6216\u5b57\u5178\uff1f\u751a\u81f3\u662f\u6570\u636e\u5e93\u7c7b\u6a21\u578b\u7684\u5b9e\u4f8b\uff1f\u5de5\u4f5c\u65b9\u5f0f\u90fd\u4e00\u6837\u3002 \u5b9e\u9645\u4e0a\uff0c\u5c31\u7b97\u767b\u5f55\u5e94\u7528\u7684\u4e0d\u662f\u7528\u6237\uff0c\u800c\u662f\u53ea\u62e5\u6709\u8bbf\u95ee Token \u7684\u673a\u5668\u4eba\u3001\u7a0b\u5e8f\u6216\u5176\u4ed6\u7cfb\u7edf\uff1f\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u4e00\u6837\u3002 \u5c3d\u7ba1\u4f7f\u7528\u5e94\u7528\u6240\u9700\u7684\u4efb\u4f55\u6a21\u578b\u3001\u7c7b\u3001\u6570\u636e\u5e93\u3002 FastAPI \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u90fd\u80fd\u5e2e\u60a8\u641e\u5b9a\u3002 \u4ee3\u7801\u5927\u5c0f \u00b6 \u8fd9\u4e2a\u793a\u4f8b\u770b\u8d77\u6765\u6709\u4e9b\u5197\u957f\u3002\u6bd5\u7adf\u8fd9\u4e2a\u6587\u4ef6\u540c\u65f6\u5305\u542b\u4e86\u5b89\u5168\u3001\u6570\u636e\u6a21\u578b\u7684\u5de5\u5177\u51fd\u6570\uff0c\u4ee5\u53ca\u8def\u5f84\u64cd\u4f5c\u7b49\u4ee3\u7801\u3002 \u4f46\uff0c\u5173\u952e\u662f\uff1a \u5b89\u5168\u548c\u4f9d\u8d56\u6ce8\u5165\u7684\u4ee3\u7801\u53ea\u9700\u8981\u5199\u4e00\u6b21\u3002 \u5c31\u7b97\u5199\u5f97\u518d\u590d\u6742\uff0c\u4e5f\u53ea\u662f\u5728\u4e00\u4e2a\u4f4d\u7f6e\u5199\u4e00\u6b21\u5c31\u591f\u4e86\u3002\u6240\u4ee5\uff0c\u8981\u591a\u590d\u6742\u5c31\u53ef\u4ee5\u5199\u591a\u590d\u6742\u3002 \u4f46\u662f\uff0c\u5c31\u7b97\u6709\u6570\u5343\u4e2a\u7aef\u70b9\uff08 \u8def\u5f84\u64cd\u4f5c \uff09\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u5b89\u5168\u7cfb\u7edf\u3002 \u800c\u4e14\uff0c\u6240\u6709\u7aef\u70b9\uff08\u6216\u5b83\u4eec\u7684\u4efb\u4f55\u90e8\u4ef6\uff09\u90fd\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u4f9d\u8d56\u9879\u6216\u4efb\u4f55\u5176\u4ed6\u4f9d\u8d56\u9879\u3002 \u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u53ea\u9700 3 \u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u5c0f\u7ed3 \u00b6 \u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\u3002 \u81f3\u6b64\uff0c\u5b89\u5168\u7684\u5185\u5bb9\u5df2\u7ecf\u8bb2\u4e86\u4e00\u534a\u3002 \u53ea\u8981\u518d\u4e3a\u7528\u6237\u6216\u5ba2\u6237\u7aef\u7684 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u771f\u6b63\u53d1\u9001 username \u548c password \u7684\u529f\u80fd\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e0b\u4e00\u7ae0\u89c1\u3002","title":"\u83b7\u53d6\u5f53\u524d\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_1","text":"\u4e0a\u4e00\u7ae0\u4e2d\uff0c\uff08\u57fa\u4e8e\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u7684\uff09\u5b89\u5168\u7cfb\u7edf\u5411 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4f20\u9012\u4e86 str \u7c7b\u578b\u7684 token \uff1a from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) @app . get ( \"/items/\" ) async def read_items ( token : str = Depends ( oauth2_scheme )): return { \"token\" : token } \u4f46\u8fd9\u5e76\u4e0d\u5b9e\u7528\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b66\u4e60\u5982\u4f55\u8fd4\u56de\u5f53\u524d\u7528\u6237\u3002","title":"\u83b7\u53d6\u5f53\u524d\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_2","text":"\u9996\u5148\uff0c\u521b\u5efa Pydantic \u7528\u6237\u6a21\u578b\u3002 \u4e0e\u4f7f\u7528 Pydantic \u58f0\u660e\u8bf7\u6c42\u4f53\u76f8\u540c\uff0c\u5e76\u4e14\u53ef\u5728\u4efb\u4f55\u4f4d\u7f6e\u4f7f\u7528\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u521b\u5efa\u7528\u6237\u6a21\u578b"},{"location":"tutorial/security/get-current-user/#get_current_user","text":"\u521b\u5efa get_current_user \u4f9d\u8d56\u9879\u3002 \u8fd8\u8bb0\u5f97\u4f9d\u8d56\u9879\u652f\u6301\u5b50\u4f9d\u8d56\u9879\u5417\uff1f get_current_user \u4f7f\u7528 oauth2_scheme \u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 \u4e0e\u4e4b\u524d\u76f4\u63a5\u5728\u8def\u5f84\u64cd\u4f5c\u4e2d\u7684\u505a\u6cd5\u76f8\u540c\uff0c\u65b0\u7684 get_current_user \u4f9d\u8d56\u9879\u4ece\u5b50\u4f9d\u8d56\u9879 oauth2_scheme \u4e2d\u63a5\u6536 str \u7c7b\u578b\u7684 token \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u521b\u5efa get_current_user \u4f9d\u8d56\u9879"},{"location":"tutorial/security/get-current-user/#_3","text":"get_current_user \u4f7f\u7528\u521b\u5efa\u7684\uff08\u4f2a\uff09\u5de5\u5177\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u63a5\u6536 str \u7c7b\u578b\u7684 Token\uff0c\u5e76\u8fd4\u56de Pydantic \u7684 User \u6a21\u578b\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u83b7\u53d6\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_4","text":"\u5728 \u8def\u5f84\u64cd\u4f5c \u7684 Depends \u4e2d\u4f7f\u7528 get_current_user \uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user \u6ce8\u610f\uff0c\u6b64\u5904\u628a current_user \u7684\u7c7b\u578b\u58f0\u660e\u4e3a Pydantic \u7684 User \u6a21\u578b\u3002 \u8fd9\u6709\u52a9\u4e8e\u5728\u51fd\u6570\u5185\u90e8\u4f7f\u7528\u4ee3\u7801\u8865\u5168\u548c\u7c7b\u578b\u68c0\u67e5\u3002 \u63d0\u793a \u8fd8\u8bb0\u5f97\u8bf7\u6c42\u4f53\u4e5f\u662f\u4f7f\u7528 Pydantic \u6a21\u578b\u58f0\u660e\u7684\u5427\u3002 \u653e\u5fc3\uff0c\u56e0\u4e3a\u4f7f\u7528\u4e86 Depends \uff0c FastAPI \u4e0d\u4f1a\u641e\u6df7\u3002 \u68c0\u67e5 \u4f9d\u8d56\u7cfb\u7edf\u7684\u8fd9\u79cd\u8bbe\u8ba1\u65b9\u5f0f\u53ef\u4ee5\u652f\u6301\u4e0d\u540c\u7684\u4f9d\u8d56\u9879\u8fd4\u56de\u540c\u4e00\u4e2a User \u6a21\u578b\u3002 \u800c\u4e0d\u662f\u5c40\u9650\u4e8e\u53ea\u80fd\u6709\u4e00\u4e2a\u8fd4\u56de\u8be5\u7c7b\u578b\u6570\u636e\u7684\u4f9d\u8d56\u9879\u3002","title":"\u6ce8\u5165\u5f53\u524d\u7528\u6237"},{"location":"tutorial/security/get-current-user/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\uff0c\u5e76\u7528 Depends \u5728 \u4f9d\u8d56\u6ce8\u5165 \u7cfb\u7edf\u4e2d\u5904\u7406\u5b89\u5168\u673a\u5236\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u6a21\u578b\u6216\u6570\u636e\u6ee1\u8db3\u5b89\u5168\u9700\u6c42\uff08\u672c\u4f8b\u4e2d\u662f Pydantic \u7684 User \u6a21\u578b\uff09\u3002 \u800c\u4e14\uff0c\u4e0d\u5c40\u9650\u4e8e\u53ea\u80fd\u4f7f\u7528\u7279\u5b9a\u7684\u6570\u636e\u6a21\u578b\u3001\u7c7b\u6216\u7c7b\u578b\u3002 \u4e0d\u60f3\u5728\u6a21\u578b\u4e2d\u4f7f\u7528 username \uff0c\u800c\u662f\u4f7f\u7528 id \u548c email \uff1f\u5f53\u7136\u53ef\u4ee5\u3002\u8fd9\u4e9b\u5de5\u5177\u4e5f\u652f\u6301\u3002 \u53ea\u60f3\u4f7f\u7528\u5b57\u7b26\u4e32\uff1f\u6216\u5b57\u5178\uff1f\u751a\u81f3\u662f\u6570\u636e\u5e93\u7c7b\u6a21\u578b\u7684\u5b9e\u4f8b\uff1f\u5de5\u4f5c\u65b9\u5f0f\u90fd\u4e00\u6837\u3002 \u5b9e\u9645\u4e0a\uff0c\u5c31\u7b97\u767b\u5f55\u5e94\u7528\u7684\u4e0d\u662f\u7528\u6237\uff0c\u800c\u662f\u53ea\u62e5\u6709\u8bbf\u95ee Token \u7684\u673a\u5668\u4eba\u3001\u7a0b\u5e8f\u6216\u5176\u4ed6\u7cfb\u7edf\uff1f\u5de5\u4f5c\u65b9\u5f0f\u4e5f\u4e00\u6837\u3002 \u5c3d\u7ba1\u4f7f\u7528\u5e94\u7528\u6240\u9700\u7684\u4efb\u4f55\u6a21\u578b\u3001\u7c7b\u3001\u6570\u636e\u5e93\u3002 FastAPI \u901a\u8fc7\u4f9d\u8d56\u6ce8\u5165\u7cfb\u7edf\u90fd\u80fd\u5e2e\u60a8\u641e\u5b9a\u3002","title":"\u5176\u4ed6\u6a21\u578b"},{"location":"tutorial/security/get-current-user/#_6","text":"\u8fd9\u4e2a\u793a\u4f8b\u770b\u8d77\u6765\u6709\u4e9b\u5197\u957f\u3002\u6bd5\u7adf\u8fd9\u4e2a\u6587\u4ef6\u540c\u65f6\u5305\u542b\u4e86\u5b89\u5168\u3001\u6570\u636e\u6a21\u578b\u7684\u5de5\u5177\u51fd\u6570\uff0c\u4ee5\u53ca\u8def\u5f84\u64cd\u4f5c\u7b49\u4ee3\u7801\u3002 \u4f46\uff0c\u5173\u952e\u662f\uff1a \u5b89\u5168\u548c\u4f9d\u8d56\u6ce8\u5165\u7684\u4ee3\u7801\u53ea\u9700\u8981\u5199\u4e00\u6b21\u3002 \u5c31\u7b97\u5199\u5f97\u518d\u590d\u6742\uff0c\u4e5f\u53ea\u662f\u5728\u4e00\u4e2a\u4f4d\u7f6e\u5199\u4e00\u6b21\u5c31\u591f\u4e86\u3002\u6240\u4ee5\uff0c\u8981\u591a\u590d\u6742\u5c31\u53ef\u4ee5\u5199\u591a\u590d\u6742\u3002 \u4f46\u662f\uff0c\u5c31\u7b97\u6709\u6570\u5343\u4e2a\u7aef\u70b9\uff08 \u8def\u5f84\u64cd\u4f5c \uff09\uff0c\u5b83\u4eec\u90fd\u53ef\u4ee5\u4f7f\u7528\u540c\u4e00\u4e2a\u5b89\u5168\u7cfb\u7edf\u3002 \u800c\u4e14\uff0c\u6240\u6709\u7aef\u70b9\uff08\u6216\u5b83\u4eec\u7684\u4efb\u4f55\u90e8\u4ef6\uff09\u90fd\u53ef\u4ee5\u5229\u7528\u8fd9\u4e9b\u4f9d\u8d56\u9879\u6216\u4efb\u4f55\u5176\u4ed6\u4f9d\u8d56\u9879\u3002 \u6240\u6709 \u8def\u5f84\u64cd\u4f5c \u53ea\u9700 3 \u884c\u4ee3\u7801\u5c31\u53ef\u4ee5\u4e86\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user from fastapi import Depends , FastAPI from fastapi.security import OAuth2PasswordBearer from pydantic import BaseModel app = FastAPI () oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None def fake_decode_token ( token ): return User ( username = token + \"fakedecoded\" , email = \"john@example.com\" , full_name = \"John Doe\" ) async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) return user @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_user )): return current_user","title":"\u4ee3\u7801\u5927\u5c0f"},{"location":"tutorial/security/get-current-user/#_7","text":"\u73b0\u5728\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5728 \u8def\u5f84\u64cd\u4f5c\u51fd\u6570 \u4e2d\u83b7\u53d6\u5f53\u524d\u7528\u6237\u3002 \u81f3\u6b64\uff0c\u5b89\u5168\u7684\u5185\u5bb9\u5df2\u7ecf\u8bb2\u4e86\u4e00\u534a\u3002 \u53ea\u8981\u518d\u4e3a\u7528\u6237\u6216\u5ba2\u6237\u7aef\u7684 \u8def\u5f84\u64cd\u4f5c \u6dfb\u52a0\u771f\u6b63\u53d1\u9001 username \u548c password \u7684\u529f\u80fd\u5c31\u53ef\u4ee5\u4e86\u3002 \u4e0b\u4e00\u7ae0\u89c1\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/security/oauth2-jwt/","text":"OAuth2 \u5b9e\u73b0\u5bc6\u7801\u54c8\u5e0c\u4e0e Bearer + JWT Token \u9a8c\u8bc1 \u00b6 \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u6240\u6709\u5b89\u5168\u6d41\uff0c\u672c\u7ae0\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 JWT Token \u548c\u5b89\u5168\u5bc6\u7801\u54c8\u5e0c\uff08Hash\uff09\u5b9e\u73b0\u771f\u6b63\u7684\u5b89\u5168\u673a\u5236\u3002 \u672c\u7ae0\u7684\u793a\u4f8b\u4ee3\u7801\u771f\u6b63\u5b9e\u73b0\u4e86\u5728\u5e94\u7528\u7684\u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u54c8\u5e0c\u5bc6\u7801\u7b49\u529f\u80fd\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7d27\u63a5\u4e0a\u4e00\u7ae0\uff0c\u7ee7\u7eed\u5b8c\u5584\u5b89\u5168\u673a\u5236\u3002 JWT \u7b80\u4ecb \u00b6 JWT \u5373 JSON \u7f51\u7edc Token \uff08JSON Web Tokens\uff09\u3002 JWT \u662f\u4e00\u79cd\u6807\u51c6\uff0c\u7528\u4e8e\u628a JSON \u5bf9\u8c61\u7f16\u7801\u4e3a\u6ca1\u6709\u7a7a\u683c\uff0c\u4e14\u96be\u4ee5\u7406\u89e3\u7684\u957f\u5b57\u7b26\u4e32\u3002JWT \u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c JWT \u5b57\u7b26\u4e32\u6ca1\u6709\u52a0\u5bc6\uff0c\u4efb\u4f55\u4eba\u90fd\u80fd\u7528\u5b83\u6062\u590d\u539f\u59cb\u4fe1\u606f\u3002 \u4f46 JWT \u4f7f\u7528\u4e86\u7b7e\u540d\u673a\u5236\u3002\u63a5\u6536 Token \u65f6\uff0c\u53ef\u4ee5\u7528\u7b7e\u540d\u6821\u9a8c Token\u3002 \u4f7f\u7528 JWT \u521b\u5efa\u6709\u6548\u671f\u4e3a\u4e00\u5468\u7684 Token\u3002\u7b2c\u4e8c\u5929\uff0c\u7528\u6237\u6301 Token \u518d\u6b21\u8bbf\u95ee\u65f6\uff0c\u4ecd\u4e3a\u767b\u5f55\u72b6\u6001\u3002 Token \u4e8e\u4e00\u5468\u540e\u8fc7\u671f\uff0c\u5c4a\u65f6\uff0c\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u5c31\u4f1a\u5931\u8d25\u3002\u53ea\u6709\u518d\u6b21\u767b\u5f55\uff0c\u624d\u80fd\u83b7\u5f97\u65b0\u7684 Token\u3002\u5982\u679c\u7528\u6237\uff08\u6216\u7b2c\u4e09\u65b9\uff09\u7be1\u6539 Token \u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u56e0\u4e3a\u7b7e\u540d\u4e0d\u5339\u914d\u4f1a\u5bfc\u81f4\u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25\u3002 \u5982\u9700\u6df1\u5165\u4e86\u89e3 JWT Token\uff0c\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u8bf7\u53c2\u9605 https://jwt.io \u3002 \u5b89\u88c5 python-jose \u00b6 \u5b89\u88c5 python-jose \uff0c\u5728 Python \u4e2d\u751f\u6210\u548c\u6821\u9a8c JWT Token\uff1a $ pip install python-jose [ cryptography ] ---> 100% Python-jose \u9700\u8981\u5b89\u88c5\u914d\u5957\u7684\u52a0\u5bc6\u540e\u7aef\u3002 \u672c\u6559\u7a0b\u63a8\u8350\u7684\u540e\u7aef\u662f\uff1a pyca/cryptography \u3002 \u63d0\u793a \u672c\u6559\u7a0b\u4ee5\u524d\u4f7f\u7528 PyJWT \u3002 \u4f46\u540e\u6765\u6362\u6210\u4e86 Python-jose\uff0c\u56e0\u4e3a Python-jose \u652f\u6301 PyJWT \u7684\u6240\u6709\u529f\u80fd\uff0c\u8fd8\u652f\u6301\u4e0e\u5176\u4ed6\u5de5\u5177\u96c6\u6210\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u5176\u4ed6\u529f\u80fd\u3002 \u5bc6\u7801\u54c8\u5e0c \u00b6 \u54c8\u5e0c \u662f\u6307\u628a\u7279\u5b9a\u5185\u5bb9\uff08\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u4e71\u7801\u5f62\u5f0f\u7684\u5b57\u8282\u5e8f\u5217\uff08\u5176\u5b9e\u5c31\u662f\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\u65f6\uff08\u6bd4\u5982\uff0c\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\uff0c\u8fd4\u56de\u7684\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u8fd9\u4e2a\u4e71\u7801\u65e0\u6cd5\u8f6c\u6362\u56de\u4f20\u5165\u7684\u5bc6\u7801\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c \u00b6 \u539f\u56e0\u5f88\u7b80\u5355\uff0c\u5047\u5982\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u7a83\u8d3c\u65e0\u6cd5\u83b7\u53d6\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u5f97\u5230\u7684\u53ea\u662f\u54c8\u5e0c\u503c\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u7a83\u8d3c\u5c31\u65e0\u6cd5\u5728\u5176\u4ed6\u5e94\u7528\u4e2d\u4f7f\u7528\u7a83\u53d6\u7684\u5bc6\u7801\uff0c\u8981\u77e5\u9053\uff0c\u5f88\u591a\u7528\u6237\u5728\u6240\u6709\u7cfb\u7edf\u4e2d\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u98ce\u9669\u8d85\u5927\uff09\u3002 \u5b89\u88c5 passlib \u00b6 Passlib \u662f\u5904\u7406\u5bc6\u7801\u54c8\u5e0c\u7684 Python \u5305\u3002 \u5b83\u652f\u6301\u5f88\u591a\u5b89\u5168\u54c8\u5e0c\u7b97\u6cd5\u53ca\u914d\u5957\u5de5\u5177\u3002 \u672c\u6559\u7a0b\u63a8\u8350\u7684\u7b97\u6cd5\u662f Bcrypt \u3002 \u56e0\u6b64\uff0c\u8bf7\u5148\u5b89\u88c5\u9644\u5e26 Bcrypt \u7684 PassLib\uff1a $ pip install passlib [ bcrypt ] ---> 100% \u63d0\u793a passlib \u751a\u81f3\u53ef\u4ee5\u8bfb\u53d6 Django\u3001Flask \u7684\u5b89\u5168\u63d2\u4ef6\u7b49\u5de5\u5177\u521b\u5efa\u7684\u5bc6\u7801\u3002 \u4f8b\u5982\uff0c\u628a Django \u5e94\u7528\u7684\u6570\u636e\u5171\u4eab\u7ed9 FastAPI \u5e94\u7528\u7684\u6570\u636e\u5e93\u3002\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u540c\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u9010\u6b65\u628a\u5e94\u7528\u4ece Django \u8fc1\u79fb\u5230 FastAPI\u3002 \u5e76\u4e14\uff0c\u7528\u6237\u53ef\u4ee5\u540c\u65f6\u4ece Django \u5e94\u7528\u6216 FastAPI \u5e94\u7528\u767b\u5f55\u3002 \u5bc6\u7801\u54c8\u5e0c\u4e0e\u6821\u9a8c \u00b6 \u4ece passlib \u5bfc\u5165\u6240\u9700\u5de5\u5177\u3002 \u521b\u5efa\u7528\u4e8e\u5bc6\u7801\u54c8\u5e0c\u548c\u8eab\u4efd\u6821\u9a8c\u7684 PassLib \u4e0a\u4e0b\u6587 \u3002 \u63d0\u793a PassLib \u4e0a\u4e0b\u6587\u8fd8\u652f\u6301\u4f7f\u7528\u4e0d\u540c\u54c8\u5e0c\u7b97\u6cd5\u7684\u529f\u80fd\uff0c\u5305\u62ec\u53ea\u80fd\u6821\u9a8c\u7684\u5df2\u5f03\u7528\u65e7\u7b97\u6cd5\u7b49\u3002 \u4f8b\u5982\uff0c\u7528\u5b83\u8bfb\u53d6\u548c\u6821\u9a8c\u5176\u4ed6\u7cfb\u7edf\uff08\u5982 Django\uff09\u751f\u6210\u7684\u5bc6\u7801\uff0c\u4f46\u8981\u4f7f\u7528\u5176\u4ed6\u7b97\u6cd5\uff0c\u5982 Bcrypt\uff0c\u751f\u6210\u65b0\u7684\u54c8\u5e0c\u5bc6\u7801\u3002 \u540c\u65f6\uff0c\u8fd9\u4e9b\u529f\u80fd\u90fd\u662f\u517c\u5bb9\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4e09\u4e2a\u5de5\u5177\u51fd\u6570\uff0c\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u54c8\u5e0c\u7528\u6237\u7684\u5bc6\u7801\u3002 \u7b2c\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u6821\u9a8c\u63a5\u6536\u7684\u5bc6\u7801\u662f\u5426\u5339\u914d\u5b58\u50a8\u7684\u54c8\u5e0c\u503c\u3002 \u7b2c\u4e09\u4e2a\u51fd\u6570\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u8fd4\u56de\u7528\u6237\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u7b14\u8bb0 \u67e5\u770b\u65b0\u7684\uff08\u4f2a\uff09\u6570\u636e\u5e93 fake_users_db \uff0c\u5c31\u80fd\u770b\u5230\u54c8\u5e0c\u540e\u7684\u5bc6\u7801\uff1a \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" \u3002 \u5904\u7406 JWT Token \u00b6 \u5bfc\u5165\u5df2\u5b89\u88c5\u7684\u6a21\u5757\u3002 \u521b\u5efa\u7528\u4e8e JWT Token \u7b7e\u540d\u7684\u968f\u673a\u5bc6\u94a5\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u751f\u6210\u5b89\u5168\u7684\u968f\u673a\u5bc6\u94a5\uff1a $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 \u7136\u540e\uff0c\u628a\u751f\u6210\u7684\u5bc6\u94a5\u590d\u5236\u5230\u53d8\u91cf SECRET_KEY \uff0c\u6ce8\u610f\uff0c\u4e0d\u8981\u4f7f\u7528\u672c\u4f8b\u6240\u793a\u7684\u5bc6\u94a5\u3002 \u521b\u5efa\u6307\u5b9a JWT Token \u7b7e\u540d\u7b97\u6cd5\u7684\u53d8\u91cf ALGORITHM \uff0c\u672c\u4f8b\u4e2d\u7684\u503c\u4e3a \"HS256\" \u3002 \u521b\u5efa\u8bbe\u7f6e Token \u8fc7\u671f\u65f6\u95f4\u7684\u53d8\u91cf\u3002 \u5b9a\u4e49 Token \u7aef\u70b9\u54cd\u5e94\u65f6\u4f7f\u7528\u7684 Pydantic \u6a21\u578b\u3002 \u521b\u5efa\u751f\u6210\u65b0\u7684\u8bbf\u95ee Token \u7684\u5de5\u5177\u51fd\u6570\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u66f4\u65b0\u4f9d\u8d56\u9879 \u00b6 \u66f4\u65b0 get_current_user \u4ee5\u63a5\u6536\u4e0e\u4e4b\u524d\u76f8\u540c\u7684 Token\uff0c\u4f46\u8fd9\u91cc\u7528\u7684\u662f JWT Token\u3002 \u89e3\u7801\u5e76\u6821\u9a8c\u63a5\u6536\u5230\u7684 Token\uff0c\u7136\u540e\uff0c\u8fd4\u56de\u5f53\u524d\u7528\u6237\u3002 \u5982\u679c Token \u65e0\u6548\uff0c\u5219\u76f4\u63a5\u8fd4\u56de HTTP \u9519\u8bef\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u66f4\u65b0 /token \u8def\u5f84\u64cd\u4f5c \u00b6 \u7528 Token \u8fc7\u671f\u65f6\u95f4\u521b\u5efa timedelta \u5bf9\u8c61\u3002 \u521b\u5efa\u5e76\u8fd4\u56de\u771f\u6b63\u7684 JWT \u8bbf\u95ee Token\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] JWT sub \u7684\u6280\u672f\u7ec6\u8282 \u00b6 JWT \u89c4\u8303\u8fd8\u5305\u62ec sub \u952e\uff0c\u503c\u662f Token \u7684\u4e3b\u9898\u3002 \u8be5\u952e\u662f\u53ef\u9009\u7684\uff0c\u4f46\u8981\u628a\u7528\u6237\u6807\u8bc6\u653e\u5728\u8fd9\u4e2a\u952e\u91cc\uff0c\u6240\u4ee5\u672c\u4f8b\u4f7f\u7528\u4e86\u8be5\u952e\u3002 \u9664\u4e86\u8bc6\u522b\u7528\u6237\u4e0e\u8bb8\u53ef\u7528\u6237\u5728 API \u4e0a\u76f4\u63a5\u6267\u884c\u64cd\u4f5c\u4e4b\u5916\uff0cJWT \u8fd8\u53ef\u80fd\u7528\u4e8e\u5176\u4ed6\u4e8b\u60c5\u3002 \u4f8b\u5982\uff0c\u8bc6\u522b \u6c7d\u8f66 \u6216 \u535a\u5ba2 \u3002 \u63a5\u7740\uff0c\u4e3a\u5b9e\u4f53\u6dfb\u52a0\u6743\u9650\uff0c\u5982 \u9a7e\u9a76 \uff08\u6c7d\u8f66\uff09\u6216 \u7f16\u8f91 \uff08\u535a\u5ba2\uff09\u3002 \u7136\u540e\uff0c\u628a JWT Token \u4ea4\u7ed9\u7528\u6237\uff08\u6216\u673a\u5668\u4eba\uff09\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\u9a7e\u9a76\u6c7d\u8f66\uff0c\u6216\u7f16\u8f91\u535a\u5ba2\u7b49\u64cd\u4f5c\u3002\u65e0\u9700\u6ce8\u518c\u8d26\u6237\uff0c\u53ea\u8981\u6709 API \u751f\u6210\u7684 JWT Token \u5c31\u53ef\u4ee5\u3002 \u540c\u7406\uff0cJWT \u53ef\u4ee5\u7528\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u5b9e\u4f53\u7684 ID \u53ef\u80fd\u662f\u76f8\u540c\u7684\uff0c\u4ee5 ID foo \u4e3a\u4f8b\uff0c\u7528\u6237\u7684 ID \u662f foo \uff0c\u8f66\u7684 ID \u662f foo \uff0c\u535a\u5ba2\u7684 ID \u4e5f\u662f foo \u3002 \u4e3a\u4e86\u907f\u514d ID \u51b2\u7a81\uff0c\u5728\u7ed9\u7528\u6237\u521b\u5efa JWT Token \u65f6\uff0c\u53ef\u4ee5\u4e3a sub \u952e\u7684\u503c\u52a0\u4e0a\u524d\u7f00\uff0c\u4f8b\u5982 username: \u3002\u56e0\u6b64\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c sub \u7684\u503c\u53ef\u4ee5\u662f\uff1a username:johndoe \u3002 \u6ce8\u610f\uff0c\u5212\u91cd\u70b9\uff0c sub \u952e\u5728\u6574\u4e2a\u5e94\u7528\u4e2d\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u800c\u4e14\u5e94\u8be5\u662f\u5b57\u7b26\u4e32\u3002 \u67e5\u770b\u6587\u6863 \u00b6 \u8fd0\u884c\u670d\u52a1\u5668\u5e76\u8bbf\u95ee\u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u7528\u6237\u754c\u9762\uff1a \u7528\u4e0e\u4e0a\u4e00\u7ae0\u540c\u6837\u7684\u65b9\u5f0f\u5b9e\u73b0\u5e94\u7528\u6388\u6743\u3002 \u4f7f\u7528\u5982\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d: johndoe \u5bc6\u7801: secret \u68c0\u67e5 \u6ce8\u610f\uff0c\u4ee3\u7801\u4e2d\u6ca1\u6709\u660e\u6587\u5bc6\u7801 secret \uff0c\u53ea\u4fdd\u5b58\u4e86\u5b83\u7684\u54c8\u5e0c\u503c\u3002 \u8c03\u7528 /users/me/ \u7aef\u70b9\uff0c\u6536\u5230\u4e0b\u9762\u7684\u54cd\u5e94\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false } \u6253\u5f00\u6d4f\u89c8\u5668\u7684\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5c31\u80fd\u770b\u5230\u6570\u636e\u662f\u600e\u4e48\u53d1\u9001\u7684\u3002\u6b64\u65f6\uff0c\u6570\u636e\u4e2d\u4ec5\u5305\u542b Token\uff0c\u5bc6\u7801\u53ea\u5728\u7b2c\u4e00\u6b21\u8bf7\u6c42\u65f6\uff0c\u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u53ca\u83b7\u53d6 Token \u65f6\u624d\u53d1\u9001\uff0c\u4e4b\u540e\u4e0d\u518d\u53d1\u9001\u5bc6\u7801\uff1a \u7b14\u8bb0 \u6ce8\u610f\uff0c\u8bf7\u6c42\u4e2d Authorization \u54cd\u5e94\u5934\u7684\u503c\u4ee5 Bearer \u5f00\u5934\u3002 scopes \u9ad8\u7ea7\u7528\u6cd5 \u00b6 OAuth2 \u652f\u6301 scopes \uff08\u4f5c\u7528\u57df\uff09\u3002 scopes \u4e3a JWT Token \u6dfb\u52a0\u6307\u5b9a\u6743\u9650\u3002 \u8ba9\u6301\u6709 Token \u7684\u7528\u6237\u6216\u7b2c\u4e09\u65b9\u5728\u6307\u5b9a\u9650\u5236\u6761\u4ef6\u4e0b\u4e0e API \u4ea4\u4e92\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 scopes \uff0c\u4ee5\u53ca\u5982\u4f55\u628a scopes \u96c6\u6210\u81f3 FastAPI \u3002 \u5c0f\u7ed3 \u00b6 \u81f3\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 OAuth2 \u548c JWT \u7b49\u6807\u51c6\u914d\u7f6e\u5b89\u5168\u7684 FastAPI \u5e94\u7528\u3002 \u51e0\u4e4e\u5728\u6240\u6709\u6846\u67b6\u4e2d\uff0c\u5904\u7406\u5b89\u5168\u95ee\u9898\u5f88\u5feb\u90fd\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002 \u6709\u4e9b\u5305\u4e3a\u4e86\u7b80\u5316\u5b89\u5168\u6d41\uff0c\u4e0d\u5f97\u4e0d\u5728\u6570\u636e\u6a21\u578b\u3001\u6570\u636e\u5e93\u548c\u529f\u80fd\u4e0a\u505a\u51fa\u59a5\u534f\u3002\u800c\u6709\u4e9b\u8fc7\u4e8e\u7b80\u5316\u7684\u8f6f\u4ef6\u5305\u5176\u5b9e\u5b58\u5728\u4e86\u5b89\u5168\u9690\u60a3\u3002 FastAPI \u4e0d\u5411\u4efb\u4f55\u6570\u636e\u5e93\u3001\u6570\u636e\u6a21\u578b\u6216\u5de5\u5177\u59a5\u534f\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u7075\u6d3b\u9009\u62e9\u6700\u9002\u5408\u9879\u76ee\u7684\u5b89\u5168\u673a\u5236\u3002 \u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 passlib \u548c python-jose \u7b49\u7ef4\u62a4\u826f\u597d\u3001\u4f7f\u7528\u5e7f\u6cdb\u7684\u5305\uff0c\u8fd9\u662f\u56e0\u4e3a FastAPI \u4e0d\u9700\u8981\u4efb\u4f55\u590d\u6742\u673a\u5236\uff0c\u5c31\u80fd\u96c6\u6210\u5916\u90e8\u7684\u5305\u3002 \u800c\u4e14\uff0c FastAPI \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\uff0c\u5728\u4e0d\u5f71\u54cd\u7075\u6d3b\u3001\u7a33\u5b9a\u548c\u5b89\u5168\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u5730\u7b80\u5316\u5b89\u5168\u673a\u5236\u3002 FastAPI \u8fd8\u652f\u6301\u4ee5\u76f8\u5bf9\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 OAuth2 \u7b49\u5b89\u5168\u3001\u6807\u51c6\u7684\u534f\u8bae\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86 OAuth2 scopes \u7684\u5185\u5bb9\uff0c\u9075\u5faa\u540c\u6837\u7684\u6807\u51c6\uff0c\u5b9e\u73b0\u66f4\u7cbe\u5bc6\u7684\u6743\u9650\u7cfb\u7edf\u3002OAuth2 \u7684\u4f5c\u7528\u57df\u662f\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub\u3001\u5fae\u8f6f\u3001\u63a8\u7279\u7b49\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u4f7f\u7528\u7684\u673a\u5236\uff0c\u8ba9\u7528\u6237\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u4e0e API \u4ea4\u4e92\u3002","title":"OAuth2 \u5b9e\u73b0\u5bc6\u7801\u54c8\u5e0c\u4e0e Bearer + JWT Token \u9a8c\u8bc1"},{"location":"tutorial/security/oauth2-jwt/#oauth2-bearer-jwt-token","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u7f16\u5199\u4e86\u6240\u6709\u5b89\u5168\u6d41\uff0c\u672c\u7ae0\u5b66\u4e60\u5982\u4f55\u4f7f\u7528 JWT Token \u548c\u5b89\u5168\u5bc6\u7801\u54c8\u5e0c\uff08Hash\uff09\u5b9e\u73b0\u771f\u6b63\u7684\u5b89\u5168\u673a\u5236\u3002 \u672c\u7ae0\u7684\u793a\u4f8b\u4ee3\u7801\u771f\u6b63\u5b9e\u73b0\u4e86\u5728\u5e94\u7528\u7684\u6570\u636e\u5e93\u4e2d\u4fdd\u5b58\u54c8\u5e0c\u5bc6\u7801\u7b49\u529f\u80fd\u3002 \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u7d27\u63a5\u4e0a\u4e00\u7ae0\uff0c\u7ee7\u7eed\u5b8c\u5584\u5b89\u5168\u673a\u5236\u3002","title":"OAuth2 \u5b9e\u73b0\u5bc6\u7801\u54c8\u5e0c\u4e0e Bearer + JWT Token \u9a8c\u8bc1"},{"location":"tutorial/security/oauth2-jwt/#jwt","text":"JWT \u5373 JSON \u7f51\u7edc Token \uff08JSON Web Tokens\uff09\u3002 JWT \u662f\u4e00\u79cd\u6807\u51c6\uff0c\u7528\u4e8e\u628a JSON \u5bf9\u8c61\u7f16\u7801\u4e3a\u6ca1\u6709\u7a7a\u683c\uff0c\u4e14\u96be\u4ee5\u7406\u89e3\u7684\u957f\u5b57\u7b26\u4e32\u3002JWT \u7684\u5185\u5bb9\u5982\u4e0b\u6240\u793a\uff1a eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c JWT \u5b57\u7b26\u4e32\u6ca1\u6709\u52a0\u5bc6\uff0c\u4efb\u4f55\u4eba\u90fd\u80fd\u7528\u5b83\u6062\u590d\u539f\u59cb\u4fe1\u606f\u3002 \u4f46 JWT \u4f7f\u7528\u4e86\u7b7e\u540d\u673a\u5236\u3002\u63a5\u6536 Token \u65f6\uff0c\u53ef\u4ee5\u7528\u7b7e\u540d\u6821\u9a8c Token\u3002 \u4f7f\u7528 JWT \u521b\u5efa\u6709\u6548\u671f\u4e3a\u4e00\u5468\u7684 Token\u3002\u7b2c\u4e8c\u5929\uff0c\u7528\u6237\u6301 Token \u518d\u6b21\u8bbf\u95ee\u65f6\uff0c\u4ecd\u4e3a\u767b\u5f55\u72b6\u6001\u3002 Token \u4e8e\u4e00\u5468\u540e\u8fc7\u671f\uff0c\u5c4a\u65f6\uff0c\u7528\u6237\u8eab\u4efd\u9a8c\u8bc1\u5c31\u4f1a\u5931\u8d25\u3002\u53ea\u6709\u518d\u6b21\u767b\u5f55\uff0c\u624d\u80fd\u83b7\u5f97\u65b0\u7684 Token\u3002\u5982\u679c\u7528\u6237\uff08\u6216\u7b2c\u4e09\u65b9\uff09\u7be1\u6539 Token \u7684\u8fc7\u671f\u65f6\u95f4\uff0c\u56e0\u4e3a\u7b7e\u540d\u4e0d\u5339\u914d\u4f1a\u5bfc\u81f4\u8eab\u4efd\u9a8c\u8bc1\u5931\u8d25\u3002 \u5982\u9700\u6df1\u5165\u4e86\u89e3 JWT Token\uff0c\u4e86\u89e3\u5b83\u7684\u5de5\u4f5c\u65b9\u5f0f\uff0c\u8bf7\u53c2\u9605 https://jwt.io \u3002","title":"JWT \u7b80\u4ecb"},{"location":"tutorial/security/oauth2-jwt/#python-jose","text":"\u5b89\u88c5 python-jose \uff0c\u5728 Python \u4e2d\u751f\u6210\u548c\u6821\u9a8c JWT Token\uff1a $ pip install python-jose [ cryptography ] ---> 100% Python-jose \u9700\u8981\u5b89\u88c5\u914d\u5957\u7684\u52a0\u5bc6\u540e\u7aef\u3002 \u672c\u6559\u7a0b\u63a8\u8350\u7684\u540e\u7aef\u662f\uff1a pyca/cryptography \u3002 \u63d0\u793a \u672c\u6559\u7a0b\u4ee5\u524d\u4f7f\u7528 PyJWT \u3002 \u4f46\u540e\u6765\u6362\u6210\u4e86 Python-jose\uff0c\u56e0\u4e3a Python-jose \u652f\u6301 PyJWT \u7684\u6240\u6709\u529f\u80fd\uff0c\u8fd8\u652f\u6301\u4e0e\u5176\u4ed6\u5de5\u5177\u96c6\u6210\u65f6\u53ef\u80fd\u4f1a\u7528\u5230\u7684\u4e00\u4e9b\u5176\u4ed6\u529f\u80fd\u3002","title":"\u5b89\u88c5 python-jose"},{"location":"tutorial/security/oauth2-jwt/#_1","text":"\u54c8\u5e0c \u662f\u6307\u628a\u7279\u5b9a\u5185\u5bb9\uff08\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u4e71\u7801\u5f62\u5f0f\u7684\u5b57\u8282\u5e8f\u5217\uff08\u5176\u5b9e\u5c31\u662f\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\u65f6\uff08\u6bd4\u5982\uff0c\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\uff0c\u8fd4\u56de\u7684\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u8fd9\u4e2a\u4e71\u7801\u65e0\u6cd5\u8f6c\u6362\u56de\u4f20\u5165\u7684\u5bc6\u7801\u3002","title":"\u5bc6\u7801\u54c8\u5e0c"},{"location":"tutorial/security/oauth2-jwt/#_2","text":"\u539f\u56e0\u5f88\u7b80\u5355\uff0c\u5047\u5982\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u7a83\u8d3c\u65e0\u6cd5\u83b7\u53d6\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u5f97\u5230\u7684\u53ea\u662f\u54c8\u5e0c\u503c\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u7a83\u8d3c\u5c31\u65e0\u6cd5\u5728\u5176\u4ed6\u5e94\u7528\u4e2d\u4f7f\u7528\u7a83\u53d6\u7684\u5bc6\u7801\uff0c\u8981\u77e5\u9053\uff0c\u5f88\u591a\u7528\u6237\u5728\u6240\u6709\u7cfb\u7edf\u4e2d\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u98ce\u9669\u8d85\u5927\uff09\u3002","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c"},{"location":"tutorial/security/oauth2-jwt/#passlib","text":"Passlib \u662f\u5904\u7406\u5bc6\u7801\u54c8\u5e0c\u7684 Python \u5305\u3002 \u5b83\u652f\u6301\u5f88\u591a\u5b89\u5168\u54c8\u5e0c\u7b97\u6cd5\u53ca\u914d\u5957\u5de5\u5177\u3002 \u672c\u6559\u7a0b\u63a8\u8350\u7684\u7b97\u6cd5\u662f Bcrypt \u3002 \u56e0\u6b64\uff0c\u8bf7\u5148\u5b89\u88c5\u9644\u5e26 Bcrypt \u7684 PassLib\uff1a $ pip install passlib [ bcrypt ] ---> 100% \u63d0\u793a passlib \u751a\u81f3\u53ef\u4ee5\u8bfb\u53d6 Django\u3001Flask \u7684\u5b89\u5168\u63d2\u4ef6\u7b49\u5de5\u5177\u521b\u5efa\u7684\u5bc6\u7801\u3002 \u4f8b\u5982\uff0c\u628a Django \u5e94\u7528\u7684\u6570\u636e\u5171\u4eab\u7ed9 FastAPI \u5e94\u7528\u7684\u6570\u636e\u5e93\u3002\u751a\u81f3\u53ef\u4ee5\u5229\u7528\u540c\u4e00\u4e2a\u6570\u636e\u5e93\uff0c\u9010\u6b65\u628a\u5e94\u7528\u4ece Django \u8fc1\u79fb\u5230 FastAPI\u3002 \u5e76\u4e14\uff0c\u7528\u6237\u53ef\u4ee5\u540c\u65f6\u4ece Django \u5e94\u7528\u6216 FastAPI \u5e94\u7528\u767b\u5f55\u3002","title":"\u5b89\u88c5 passlib"},{"location":"tutorial/security/oauth2-jwt/#_3","text":"\u4ece passlib \u5bfc\u5165\u6240\u9700\u5de5\u5177\u3002 \u521b\u5efa\u7528\u4e8e\u5bc6\u7801\u54c8\u5e0c\u548c\u8eab\u4efd\u6821\u9a8c\u7684 PassLib \u4e0a\u4e0b\u6587 \u3002 \u63d0\u793a PassLib \u4e0a\u4e0b\u6587\u8fd8\u652f\u6301\u4f7f\u7528\u4e0d\u540c\u54c8\u5e0c\u7b97\u6cd5\u7684\u529f\u80fd\uff0c\u5305\u62ec\u53ea\u80fd\u6821\u9a8c\u7684\u5df2\u5f03\u7528\u65e7\u7b97\u6cd5\u7b49\u3002 \u4f8b\u5982\uff0c\u7528\u5b83\u8bfb\u53d6\u548c\u6821\u9a8c\u5176\u4ed6\u7cfb\u7edf\uff08\u5982 Django\uff09\u751f\u6210\u7684\u5bc6\u7801\uff0c\u4f46\u8981\u4f7f\u7528\u5176\u4ed6\u7b97\u6cd5\uff0c\u5982 Bcrypt\uff0c\u751f\u6210\u65b0\u7684\u54c8\u5e0c\u5bc6\u7801\u3002 \u540c\u65f6\uff0c\u8fd9\u4e9b\u529f\u80fd\u90fd\u662f\u517c\u5bb9\u7684\u3002 \u63a5\u4e0b\u6765\uff0c\u521b\u5efa\u4e09\u4e2a\u5de5\u5177\u51fd\u6570\uff0c\u5176\u4e2d\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u54c8\u5e0c\u7528\u6237\u7684\u5bc6\u7801\u3002 \u7b2c\u4e00\u4e2a\u51fd\u6570\u7528\u4e8e\u6821\u9a8c\u63a5\u6536\u7684\u5bc6\u7801\u662f\u5426\u5339\u914d\u5b58\u50a8\u7684\u54c8\u5e0c\u503c\u3002 \u7b2c\u4e09\u4e2a\u51fd\u6570\u7528\u4e8e\u8eab\u4efd\u9a8c\u8bc1\uff0c\u5e76\u8fd4\u56de\u7528\u6237\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] \u7b14\u8bb0 \u67e5\u770b\u65b0\u7684\uff08\u4f2a\uff09\u6570\u636e\u5e93 fake_users_db \uff0c\u5c31\u80fd\u770b\u5230\u54c8\u5e0c\u540e\u7684\u5bc6\u7801\uff1a \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" \u3002","title":"\u5bc6\u7801\u54c8\u5e0c\u4e0e\u6821\u9a8c"},{"location":"tutorial/security/oauth2-jwt/#jwt-token","text":"\u5bfc\u5165\u5df2\u5b89\u88c5\u7684\u6a21\u5757\u3002 \u521b\u5efa\u7528\u4e8e JWT Token \u7b7e\u540d\u7684\u968f\u673a\u5bc6\u94a5\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u751f\u6210\u5b89\u5168\u7684\u968f\u673a\u5bc6\u94a5\uff1a $ openssl rand -hex 32 09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7 \u7136\u540e\uff0c\u628a\u751f\u6210\u7684\u5bc6\u94a5\u590d\u5236\u5230\u53d8\u91cf SECRET_KEY \uff0c\u6ce8\u610f\uff0c\u4e0d\u8981\u4f7f\u7528\u672c\u4f8b\u6240\u793a\u7684\u5bc6\u94a5\u3002 \u521b\u5efa\u6307\u5b9a JWT Token \u7b7e\u540d\u7b97\u6cd5\u7684\u53d8\u91cf ALGORITHM \uff0c\u672c\u4f8b\u4e2d\u7684\u503c\u4e3a \"HS256\" \u3002 \u521b\u5efa\u8bbe\u7f6e Token \u8fc7\u671f\u65f6\u95f4\u7684\u53d8\u91cf\u3002 \u5b9a\u4e49 Token \u7aef\u70b9\u54cd\u5e94\u65f6\u4f7f\u7528\u7684 Pydantic \u6a21\u578b\u3002 \u521b\u5efa\u751f\u6210\u65b0\u7684\u8bbf\u95ee Token \u7684\u5de5\u5177\u51fd\u6570\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"\u5904\u7406 JWT Token"},{"location":"tutorial/security/oauth2-jwt/#_4","text":"\u66f4\u65b0 get_current_user \u4ee5\u63a5\u6536\u4e0e\u4e4b\u524d\u76f8\u540c\u7684 Token\uff0c\u4f46\u8fd9\u91cc\u7528\u7684\u662f JWT Token\u3002 \u89e3\u7801\u5e76\u6821\u9a8c\u63a5\u6536\u5230\u7684 Token\uff0c\u7136\u540e\uff0c\u8fd4\u56de\u5f53\u524d\u7528\u6237\u3002 \u5982\u679c Token \u65e0\u6548\uff0c\u5219\u76f4\u63a5\u8fd4\u56de HTTP \u9519\u8bef\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"\u66f4\u65b0\u4f9d\u8d56\u9879"},{"location":"tutorial/security/oauth2-jwt/#token","text":"\u7528 Token \u8fc7\u671f\u65f6\u95f4\u521b\u5efa timedelta \u5bf9\u8c61\u3002 \u521b\u5efa\u5e76\u8fd4\u56de\u771f\u6b63\u7684 JWT \u8bbf\u95ee Token\u3002 Python 3.6 and above Python 3.10 and above from datetime import datetime , timedelta from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : Union [ str , None ] = None class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : Union [ timedelta , None ] = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }] from datetime import datetime , timedelta from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from jose import JWTError , jwt from passlib.context import CryptContext from pydantic import BaseModel # to get a string like this run: # openssl rand -hex 32 SECRET_KEY = \"09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7\" ALGORITHM = \"HS256\" ACCESS_TOKEN_EXPIRE_MINUTES = 30 fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW\" , \"disabled\" : False , } } class Token ( BaseModel ): access_token : str token_type : str class TokenData ( BaseModel ): username : str | None = None class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str pwd_context = CryptContext ( schemes = [ \"bcrypt\" ], deprecated = \"auto\" ) oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) app = FastAPI () def verify_password ( plain_password , hashed_password ): return pwd_context . verify ( plain_password , hashed_password ) def get_password_hash ( password ): return pwd_context . hash ( password ) def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def authenticate_user ( fake_db , username : str , password : str ): user = get_user ( fake_db , username ) if not user : return False if not verify_password ( password , user . hashed_password ): return False return user def create_access_token ( data : dict , expires_delta : timedelta | None = None ): to_encode = data . copy () if expires_delta : expire = datetime . utcnow () + expires_delta else : expire = datetime . utcnow () + timedelta ( minutes = 15 ) to_encode . update ({ \"exp\" : expire }) encoded_jwt = jwt . encode ( to_encode , SECRET_KEY , algorithm = ALGORITHM ) return encoded_jwt async def get_current_user ( token : str = Depends ( oauth2_scheme )): credentials_exception = HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Could not validate credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) try : payload = jwt . decode ( token , SECRET_KEY , algorithms = [ ALGORITHM ]) username : str = payload . get ( \"sub\" ) if username is None : raise credentials_exception token_data = TokenData ( username = username ) except JWTError : raise credentials_exception user = get_user ( fake_users_db , username = token_data . username ) if user is None : raise credentials_exception return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" , response_model = Token ) async def login_for_access_token ( form_data : OAuth2PasswordRequestForm = Depends ()): user = authenticate_user ( fake_users_db , form_data . username , form_data . password ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Incorrect username or password\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) access_token_expires = timedelta ( minutes = ACCESS_TOKEN_EXPIRE_MINUTES ) access_token = create_access_token ( data = { \"sub\" : user . username }, expires_delta = access_token_expires ) return { \"access_token\" : access_token , \"token_type\" : \"bearer\" } @app . get ( \"/users/me/\" , response_model = User ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user @app . get ( \"/users/me/items/\" ) async def read_own_items ( current_user : User = Depends ( get_current_active_user )): return [{ \"item_id\" : \"Foo\" , \"owner\" : current_user . username }]","title":"\u66f4\u65b0 /token \u8def\u5f84\u64cd\u4f5c"},{"location":"tutorial/security/oauth2-jwt/#jwt-sub","text":"JWT \u89c4\u8303\u8fd8\u5305\u62ec sub \u952e\uff0c\u503c\u662f Token \u7684\u4e3b\u9898\u3002 \u8be5\u952e\u662f\u53ef\u9009\u7684\uff0c\u4f46\u8981\u628a\u7528\u6237\u6807\u8bc6\u653e\u5728\u8fd9\u4e2a\u952e\u91cc\uff0c\u6240\u4ee5\u672c\u4f8b\u4f7f\u7528\u4e86\u8be5\u952e\u3002 \u9664\u4e86\u8bc6\u522b\u7528\u6237\u4e0e\u8bb8\u53ef\u7528\u6237\u5728 API \u4e0a\u76f4\u63a5\u6267\u884c\u64cd\u4f5c\u4e4b\u5916\uff0cJWT \u8fd8\u53ef\u80fd\u7528\u4e8e\u5176\u4ed6\u4e8b\u60c5\u3002 \u4f8b\u5982\uff0c\u8bc6\u522b \u6c7d\u8f66 \u6216 \u535a\u5ba2 \u3002 \u63a5\u7740\uff0c\u4e3a\u5b9e\u4f53\u6dfb\u52a0\u6743\u9650\uff0c\u5982 \u9a7e\u9a76 \uff08\u6c7d\u8f66\uff09\u6216 \u7f16\u8f91 \uff08\u535a\u5ba2\uff09\u3002 \u7136\u540e\uff0c\u628a JWT Token \u4ea4\u7ed9\u7528\u6237\uff08\u6216\u673a\u5668\u4eba\uff09\uff0c\u4ed6\u4eec\u5c31\u53ef\u4ee5\u6267\u884c\u9a7e\u9a76\u6c7d\u8f66\uff0c\u6216\u7f16\u8f91\u535a\u5ba2\u7b49\u64cd\u4f5c\u3002\u65e0\u9700\u6ce8\u518c\u8d26\u6237\uff0c\u53ea\u8981\u6709 API \u751f\u6210\u7684 JWT Token \u5c31\u53ef\u4ee5\u3002 \u540c\u7406\uff0cJWT \u53ef\u4ee5\u7528\u4e8e\u66f4\u590d\u6742\u7684\u573a\u666f\u3002 \u5728\u8fd9\u4e9b\u60c5\u51b5\u4e0b\uff0c\u591a\u4e2a\u5b9e\u4f53\u7684 ID \u53ef\u80fd\u662f\u76f8\u540c\u7684\uff0c\u4ee5 ID foo \u4e3a\u4f8b\uff0c\u7528\u6237\u7684 ID \u662f foo \uff0c\u8f66\u7684 ID \u662f foo \uff0c\u535a\u5ba2\u7684 ID \u4e5f\u662f foo \u3002 \u4e3a\u4e86\u907f\u514d ID \u51b2\u7a81\uff0c\u5728\u7ed9\u7528\u6237\u521b\u5efa JWT Token \u65f6\uff0c\u53ef\u4ee5\u4e3a sub \u952e\u7684\u503c\u52a0\u4e0a\u524d\u7f00\uff0c\u4f8b\u5982 username: \u3002\u56e0\u6b64\uff0c\u5728\u672c\u4f8b\u4e2d\uff0c sub \u7684\u503c\u53ef\u4ee5\u662f\uff1a username:johndoe \u3002 \u6ce8\u610f\uff0c\u5212\u91cd\u70b9\uff0c sub \u952e\u5728\u6574\u4e2a\u5e94\u7528\u4e2d\u5e94\u8be5\u53ea\u6709\u4e00\u4e2a\u552f\u4e00\u7684\u6807\u8bc6\u7b26\uff0c\u800c\u4e14\u5e94\u8be5\u662f\u5b57\u7b26\u4e32\u3002","title":"JWT sub \u7684\u6280\u672f\u7ec6\u8282"},{"location":"tutorial/security/oauth2-jwt/#_5","text":"\u8fd0\u884c\u670d\u52a1\u5668\u5e76\u8bbf\u95ee\u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u53ef\u4ee5\u770b\u5230\u5982\u4e0b\u7528\u6237\u754c\u9762\uff1a \u7528\u4e0e\u4e0a\u4e00\u7ae0\u540c\u6837\u7684\u65b9\u5f0f\u5b9e\u73b0\u5e94\u7528\u6388\u6743\u3002 \u4f7f\u7528\u5982\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d: johndoe \u5bc6\u7801: secret \u68c0\u67e5 \u6ce8\u610f\uff0c\u4ee3\u7801\u4e2d\u6ca1\u6709\u660e\u6587\u5bc6\u7801 secret \uff0c\u53ea\u4fdd\u5b58\u4e86\u5b83\u7684\u54c8\u5e0c\u503c\u3002 \u8c03\u7528 /users/me/ \u7aef\u70b9\uff0c\u6536\u5230\u4e0b\u9762\u7684\u54cd\u5e94\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false } \u6253\u5f00\u6d4f\u89c8\u5668\u7684\u5f00\u53d1\u8005\u5de5\u5177\uff0c\u5c31\u80fd\u770b\u5230\u6570\u636e\u662f\u600e\u4e48\u53d1\u9001\u7684\u3002\u6b64\u65f6\uff0c\u6570\u636e\u4e2d\u4ec5\u5305\u542b Token\uff0c\u5bc6\u7801\u53ea\u5728\u7b2c\u4e00\u6b21\u8bf7\u6c42\u65f6\uff0c\u7528\u4e8e\u9a8c\u8bc1\u7528\u6237\u53ca\u83b7\u53d6 Token \u65f6\u624d\u53d1\u9001\uff0c\u4e4b\u540e\u4e0d\u518d\u53d1\u9001\u5bc6\u7801\uff1a \u7b14\u8bb0 \u6ce8\u610f\uff0c\u8bf7\u6c42\u4e2d Authorization \u54cd\u5e94\u5934\u7684\u503c\u4ee5 Bearer \u5f00\u5934\u3002","title":"\u67e5\u770b\u6587\u6863"},{"location":"tutorial/security/oauth2-jwt/#scopes","text":"OAuth2 \u652f\u6301 scopes \uff08\u4f5c\u7528\u57df\uff09\u3002 scopes \u4e3a JWT Token \u6dfb\u52a0\u6307\u5b9a\u6743\u9650\u3002 \u8ba9\u6301\u6709 Token \u7684\u7528\u6237\u6216\u7b2c\u4e09\u65b9\u5728\u6307\u5b9a\u9650\u5236\u6761\u4ef6\u4e0b\u4e0e API \u4ea4\u4e92\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u5c06\u4ecb\u7ecd\u5982\u4f55\u4f7f\u7528 scopes \uff0c\u4ee5\u53ca\u5982\u4f55\u628a scopes \u96c6\u6210\u81f3 FastAPI \u3002","title":"scopes \u9ad8\u7ea7\u7528\u6cd5"},{"location":"tutorial/security/oauth2-jwt/#_6","text":"\u81f3\u6b64\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528 OAuth2 \u548c JWT \u7b49\u6807\u51c6\u914d\u7f6e\u5b89\u5168\u7684 FastAPI \u5e94\u7528\u3002 \u51e0\u4e4e\u5728\u6240\u6709\u6846\u67b6\u4e2d\uff0c\u5904\u7406\u5b89\u5168\u95ee\u9898\u5f88\u5feb\u90fd\u4f1a\u53d8\u5f97\u975e\u5e38\u590d\u6742\u3002 \u6709\u4e9b\u5305\u4e3a\u4e86\u7b80\u5316\u5b89\u5168\u6d41\uff0c\u4e0d\u5f97\u4e0d\u5728\u6570\u636e\u6a21\u578b\u3001\u6570\u636e\u5e93\u548c\u529f\u80fd\u4e0a\u505a\u51fa\u59a5\u534f\u3002\u800c\u6709\u4e9b\u8fc7\u4e8e\u7b80\u5316\u7684\u8f6f\u4ef6\u5305\u5176\u5b9e\u5b58\u5728\u4e86\u5b89\u5168\u9690\u60a3\u3002 FastAPI \u4e0d\u5411\u4efb\u4f55\u6570\u636e\u5e93\u3001\u6570\u636e\u6a21\u578b\u6216\u5de5\u5177\u59a5\u534f\u3002 \u5f00\u53d1\u8005\u53ef\u4ee5\u7075\u6d3b\u9009\u62e9\u6700\u9002\u5408\u9879\u76ee\u7684\u5b89\u5168\u673a\u5236\u3002 \u8fd8\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528 passlib \u548c python-jose \u7b49\u7ef4\u62a4\u826f\u597d\u3001\u4f7f\u7528\u5e7f\u6cdb\u7684\u5305\uff0c\u8fd9\u662f\u56e0\u4e3a FastAPI \u4e0d\u9700\u8981\u4efb\u4f55\u590d\u6742\u673a\u5236\uff0c\u5c31\u80fd\u96c6\u6210\u5916\u90e8\u7684\u5305\u3002 \u800c\u4e14\uff0c FastAPI \u8fd8\u63d0\u4f9b\u4e86\u4e00\u4e9b\u5de5\u5177\uff0c\u5728\u4e0d\u5f71\u54cd\u7075\u6d3b\u3001\u7a33\u5b9a\u548c\u5b89\u5168\u7684\u524d\u63d0\u4e0b\uff0c\u5c3d\u53ef\u80fd\u5730\u7b80\u5316\u5b89\u5168\u673a\u5236\u3002 FastAPI \u8fd8\u652f\u6301\u4ee5\u76f8\u5bf9\u7b80\u5355\u7684\u65b9\u5f0f\uff0c\u4f7f\u7528 OAuth2 \u7b49\u5b89\u5168\u3001\u6807\u51c6\u7684\u534f\u8bae\u3002 \u9ad8\u7ea7\u7528\u6237\u6307\u5357 \u4e2d\u8be6\u7ec6\u4ecb\u7ecd\u4e86 OAuth2 scopes \u7684\u5185\u5bb9\uff0c\u9075\u5faa\u540c\u6837\u7684\u6807\u51c6\uff0c\u5b9e\u73b0\u66f4\u7cbe\u5bc6\u7684\u6743\u9650\u7cfb\u7edf\u3002OAuth2 \u7684\u4f5c\u7528\u57df\u662f\u8138\u4e66\u3001\u8c37\u6b4c\u3001GitHub\u3001\u5fae\u8f6f\u3001\u63a8\u7279\u7b49\u7b2c\u4e09\u65b9\u8eab\u4efd\u9a8c\u8bc1\u5e94\u7528\u4f7f\u7528\u7684\u673a\u5236\uff0c\u8ba9\u7528\u6237\u6388\u6743\u7b2c\u4e09\u65b9\u5e94\u7528\u4e0e API \u4ea4\u4e92\u3002","title":"\u5c0f\u7ed3"},{"location":"tutorial/security/simple-oauth2/","text":"OAuth2 \u5b9e\u73b0\u7b80\u5355\u7684 Password \u548c Bearer \u9a8c\u8bc1 \u00b6 \u672c\u7ae0\u6dfb\u52a0\u4e0a\u4e00\u7ae0\u793a\u4f8b\u4e2d\u6b20\u7f3a\u7684\u90e8\u5206\uff0c\u5b9e\u73b0\u5b8c\u6574\u7684\u5b89\u5168\u6d41\u3002 \u83b7\u53d6 username \u548c password \u00b6 \u9996\u5148\uff0c\u4f7f\u7528 FastAPI \u5b89\u5168\u5de5\u5177\u83b7\u53d6 username \u548c password \u3002 OAuth2 \u89c4\u8303\u8981\u6c42\u4f7f\u7528 \u5bc6\u7801\u6d41 \u65f6\uff0c\u5ba2\u6237\u7aef\u6216\u7528\u6237\u5fc5\u987b\u4ee5\u8868\u5355\u6570\u636e\u5f62\u5f0f\u53d1\u9001 username \u548c password \u5b57\u6bb5\u3002 \u5e76\u4e14\uff0c\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u4e0d\u80fd\u4f7f\u7528 user-name \u6216 email \u7b49\u5176\u4ed6\u540d\u79f0\u3002 \u4e0d\u8fc7\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u524d\u7aef\u4ecd\u53ef\u4ee5\u663e\u793a\u7ec8\u7aef\u7528\u6237\u6240\u9700\u7684\u540d\u79f0\u3002 \u6570\u636e\u5e93\u6a21\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6240\u9700\u7684\u540d\u79f0\u3002 \u4f46\u5bf9\u4e8e\u767b\u5f55 \u8def\u5f84\u64cd\u4f5c \uff0c\u5219\u8981\u4f7f\u7528\u517c\u5bb9\u89c4\u8303\u7684 username \u548c password \uff0c\uff08\u4f8b\u5982\uff0c\u5b9e\u73b0\u4e0e API \u6587\u6863\u96c6\u6210\uff09\u3002 \u8be5\u89c4\u8303\u8981\u6c42\u5fc5\u987b\u4ee5\u8868\u5355\u6570\u636e\u5f62\u5f0f\u53d1\u9001 username \u548c password \uff0c\u56e0\u6b64\uff0c\u4e0d\u80fd\u4f7f\u7528 JSON \u5bf9\u8c61\u3002 Scope \uff08\u4f5c\u7528\u57df\uff09 \u00b6 OAuth2 \u8fd8\u652f\u6301\u5ba2\u6237\u7aef\u53d1\u9001 scope \u8868\u5355\u5b57\u6bb5\u3002 \u867d\u7136\u8868\u5355\u5b57\u6bb5\u7684\u540d\u79f0\u662f scope \uff08\u5355\u6570\uff09\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u4ee5\u7a7a\u683c\u5206\u9694\u7684\uff0c\u7531\u591a\u4e2a scope \u7ec4\u6210\u7684\u957f\u5b57\u7b26\u4e32\u3002 \u4f5c\u7528\u57df \u53ea\u662f\u4e0d\u5e26\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002 \u5e38\u7528\u4e8e\u58f0\u660e\u6307\u5b9a\u5b89\u5168\u6743\u9650\uff0c\u4f8b\u5982\uff1a \u5e38\u89c1\u7528\u4f8b\u4e3a\uff0c users:read \u6216 users:write \u3002 \u8138\u4e66\u548c Instagram \u4f7f\u7528 instagram_basic \u3002 \u8c37\u6b4c\u4f7f\u7528 https://www.googleapis.com/auth/drive \u3002 \u8bf4\u660e OAuth2 \u4e2d\uff0c \u4f5c\u7528\u57df \u53ea\u662f\u58f0\u660e\u6307\u5b9a\u6743\u9650\u7684\u5b57\u7b26\u4e32\u3002 \u662f\u5426\u4f7f\u7528\u5192\u53f7 : \u7b49\u7b26\u53f7\uff0c\u6216\u662f\u4e0d\u662f URL \u5e76\u4e0d\u91cd\u8981\u3002 \u8fd9\u4e9b\u7ec6\u8282\u53ea\u662f\u7279\u5b9a\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u5bf9 OAuth2 \u6765\u8bf4\uff0c\u90fd\u53ea\u662f\u5b57\u7b26\u4e32\u800c\u5df2\u3002 \u83b7\u53d6 username \u548c password \u7684\u4ee3\u7801 \u00b6 \u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 FastAPI \u5de5\u5177\u83b7\u53d6\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002 OAuth2PasswordRequestForm \u00b6 \u9996\u5148\uff0c\u5bfc\u5165 OAuth2PasswordRequestForm \uff0c\u7136\u540e\uff0c\u5728 /token \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u7528 Depends \u628a\u8be5\u7c7b\u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user OAuth2PasswordRequestForm \u662f\u7528\u4ee5\u4e0b\u51e0\u9879\u5185\u5bb9\u58f0\u660e\u8868\u5355\u8bf7\u6c42\u4f53\u7684\u7c7b\u4f9d\u8d56\u9879\uff1a username password \u53ef\u9009\u7684 scope \u5b57\u6bb5\uff0c\u7531\u591a\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u957f\u5b57\u7b26\u4e32 \u53ef\u9009\u7684 grant_type \u63d0\u793a \u5b9e\u9645\u4e0a\uff0cOAuth2 \u89c4\u8303 \u8981\u6c42 grant_type \u5b57\u6bb5\u4f7f\u7528\u56fa\u5b9a\u503c password \uff0c\u4f46 OAuth2PasswordRequestForm \u6ca1\u6709\u4f5c\u5f3a\u5236\u7ea6\u675f\u3002 \u5982\u9700\u5f3a\u5236\u4f7f\u7528\u56fa\u5b9a\u503c password \uff0c\u5219\u4e0d\u8981\u7528 OAuth2PasswordRequestForm \uff0c\u800c\u662f\u7528 OAuth2PasswordRequestFormStrict \u3002 \u53ef\u9009\u7684 client_id \uff08\u672c\u4f8b\u672a\u4f7f\u7528\uff09\u3002 \u53ef\u9009\u7684 client_secret \uff08\u672c\u4f8b\u672a\u4f7f\u7528\uff09\u3002 \u8bf4\u660e OAuth2PasswordRequestForm \u4e0e OAuth2PasswordBearer \u4e00\u6837\uff0c\u90fd\u4e0d\u662f FastAPI \u7684\u7279\u6b8a\u7c7b\u3002 FastAPI \u628a OAuth2PasswordBearer \u8bc6\u522b\u4e3a\u5b89\u5168\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u628a\u5b83\u6dfb\u52a0\u81f3 OpenAPI\u3002 \u4f46 OAuth2PasswordRequestForm \u53ea\u662f\u53ef\u4ee5\u81ea\u884c\u7f16\u5199\u7684\u7c7b\u4f9d\u8d56\u9879\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u58f0\u660e Form \u53c2\u6570\u3002 \u4f46\u7531\u4e8e\u8fd9\u79cd\u7528\u4f8b\u5f88\u5e38\u89c1\uff0cFastAPI \u4e3a\u4e86\u7b80\u4fbf\uff0c\u5c31\u76f4\u63a5\u63d0\u4f9b\u4e86\u5bf9\u5b83\u7684\u652f\u6301\u3002 \u4f7f\u7528\u8868\u5355\u6570\u636e \u00b6 \u63d0\u793a OAuth2PasswordRequestForm \u7c7b\u4f9d\u8d56\u9879\u7684\u5b9e\u4f8b\u6ca1\u6709\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u957f\u5b57\u7b26\u4e32\u5c5e\u6027 scope \uff0c\u4f46\u5b83\u652f\u6301 scopes \u5c5e\u6027\uff0c\u7531\u5df2\u53d1\u9001\u7684 scope \u5b57\u7b26\u4e32\u5217\u8868\u7ec4\u6210\u3002 \u672c\u4f8b\u6ca1\u6709\u4f7f\u7528 scopes \uff0c\u4f46\u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528\u8be5\u5c5e\u6027\u3002 \u73b0\u5728\uff0c\u5373\u53ef\u4f7f\u7528\u8868\u5355\u5b57\u6bb5 username \uff0c\u4ece\uff08\u4f2a\uff09\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7528\u6237\u6570\u636e\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6307\u5b9a\u7528\u6237\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u6d88\u606f\uff0c\u63d0\u793a \u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef \u3002 \u672c\u4f8b\u4f7f\u7528 HTTPException \u5f02\u5e38\u663e\u793a\u6b64\u9519\u8bef\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u6821\u9a8c\u5bc6\u7801 \u00b6 \u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u4e86\u7528\u6237\u6570\u636e\uff0c\u4f46\u5c1a\u672a\u6821\u9a8c\u5bc6\u7801\u3002 \u63a5\u4e0b\u6765\uff0c\u9996\u5148\u628a\u6570\u636e\u653e\u5165 Pydantic \u7684 UserInDB \u6a21\u578b\u3002 \u6ce8\u610f\uff1a\u6c38\u8fdc\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\uff0c\u672c\u4f8b\u6682\u65f6\u5148\u4f7f\u7528\uff08\u4f2a\uff09\u54c8\u5e0c\u5bc6\u7801\u7cfb\u7edf\u3002 \u5982\u679c\u5bc6\u7801\u4e0d\u5339\u914d\uff0c\u5219\u8fd4\u56de\u4e0e\u4e0a\u9762\u76f8\u540c\u7684\u9519\u8bef\u3002 \u5bc6\u7801\u54c8\u5e0c \u00b6 \u54c8\u5e0c \u662f\u6307\uff0c\u628a\u6307\u5b9a\u5185\u5bb9\uff08\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u5f62\u4f3c\u4e71\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff08\u5176\u5b9e\u5c31\u662f\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u6bd4\u5982\uff0c\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\u65f6\uff0c\u5f97\u5230\u7684\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u8fd9\u4e2a\u4e71\u7801\u65e0\u6cd5\u8f6c\u6362\u56de\u4f20\u5165\u7684\u5bc6\u7801\u3002 \u4e3a\u4ec0\u4e48\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c \u00b6 \u539f\u56e0\u5f88\u7b80\u5355\u3002\u5982\u679c\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u7a83\u8d3c\u65e0\u6cd5\u83b7\u53d6\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u5f97\u5230\u7684\u53ea\u662f\u54c8\u5e0c\u503c\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u7a83\u8d3c\u5c31\u65e0\u6cd5\u5728\u5176\u4ed6\u5e94\u7528\u4e2d\u4f7f\u7528\u7a83\u53d6\u7684\u5bc6\u7801\uff0c\u8981\u77e5\u9053\uff0c\u5f88\u591a\u7528\u6237\u5728\u6240\u6709\u7cfb\u7edf\u4e2d\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u98ce\u9669\u8d85\u5927\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u5173\u4e8e **user_dict \u00b6 UserInDB(**user_dict) \u662f\u6307\uff1a \u76f4\u63a5\u628a user_dict \u7684\u952e\u4e0e\u503c\u5f53\u4f5c\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u6548\u4e8e \uff1a UserInDB ( username = user_dict [ \"username\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], disabled = user_dict [ \"disabled\" ], hashed_password = user_dict [ \"hashed_password\" ], ) \u8bf4\u660e user_dict \u7684\u8bf4\u660e\uff0c\u8be6\u89c1 \u66f4\u591a\u6a21\u578b \u4e00\u7ae0 \u3002 \u8fd4\u56de Token \u00b6 token \u7aef\u70b9\u7684\u54cd\u5e94\u5fc5\u987b\u662f JSON \u5bf9\u8c61\u3002 \u54cd\u5e94\u8fd4\u56de\u7684\u5185\u5bb9\u5e94\u8be5\u5305\u542b token_type \u3002\u672c\u4f8b\u4e2d\u7528\u7684\u662f Bearer Token\uff0c\u56e0\u6b64\uff0c Token \u7c7b\u578b\u5e94\u4e3a bearer \u3002 \u8fd4\u56de\u5185\u5bb9\u8fd8\u5e94\u5305\u542b access_token \u5b57\u6bb5\uff0c\u5b83\u662f\u5305\u542b\u6743\u9650 Token \u7684\u5b57\u7b26\u4e32\u3002 \u672c\u4f8b\u53ea\u662f\u7b80\u5355\u7684\u6f14\u793a\uff0c\u8fd4\u56de\u7684 Token \u5c31\u662f username \uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u6781\u4e0d\u5b89\u5168\u3002 \u63d0\u793a \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u4f7f\u7528\u54c8\u5e0c\u5bc6\u7801\u548c JWT Token \u7684\u771f\u6b63\u5b89\u5168\u673a\u5236\u3002 \u4f46\u73b0\u5728\uff0c\u4ec5\u5173\u6ce8\u6240\u9700\u7684\u7279\u5b9a\u7ec6\u8282\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u63d0\u793a \u6309\u89c4\u8303\u7684\u8981\u6c42\uff0c\u5e94\u50cf\u672c\u793a\u4f8b\u4e00\u6837\uff0c\u8fd4\u56de\u5e26\u6709 access_token \u548c token_type \u7684 JSON \u5bf9\u8c61\u3002 \u8fd9\u662f\u5f00\u53d1\u8005\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u81ea\u884c\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u8981\u786e\u4fdd\u4f7f\u7528\u8fd9\u4e9b JSON \u7684\u952e\u3002 \u8fd9\u51e0\u4e4e\u662f\u552f\u4e00\u9700\u8981\u5f00\u53d1\u8005\u7262\u8bb0\u5728\u5fc3\uff0c\u5e76\u6309\u89c4\u8303\u8981\u6c42\u6b63\u786e\u6267\u884c\u7684\u4e8b\u3002 FastAPI \u5219\u8d1f\u8d23\u5904\u7406\u5176\u4ed6\u7684\u5de5\u4f5c\u3002 \u66f4\u65b0\u4f9d\u8d56\u9879 \u00b6 \u63a5\u4e0b\u6765\uff0c\u66f4\u65b0\u4f9d\u8d56\u9879\u3002 \u8ba9\u5b83\u4ec5\u5728\u5f53\u524d\u7528\u6237\u4e3a\u6fc0\u6d3b\u72b6\u6001\u65f6\u624d\u80fd\u83b7\u53d6 current_user \u3002 \u4e3a\u6b64\uff0c\u8981\u518d\u521b\u5efa\u4e00\u4e2a\u4f9d\u8d56\u9879 get_current_active_user \uff0c\u6b64\u4f9d\u8d56\u9879\u4ee5 get_current_user \u4f9d\u8d56\u9879\u4e3a\u57fa\u7840\u3002 \u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\uff0c\u6216\u72b6\u6001\u4e3a\u672a\u6fc0\u6d3b\uff0c\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u90fd\u8fd4\u56de HTTP \u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u5728\u7aef\u70b9\u4e2d\uff0c\u53ea\u6709\u5f53\u7528\u6237\u5b58\u5728\u3001\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3001\u4e14\u72b6\u6001\u4e3a\u6fc0\u6d3b\u65f6\uff0c\u624d\u80fd\u63d0\u53d6\u8be5\u7528\u6237\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u8bf4\u660e \u6b64\u5904\u8fd4\u56de\u503c\u4e3a Bearer \u7684\u54cd\u5e94\u5934 WWW-Authenticate \u4e5f\u662f\u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002 \u4efb\u4f55 401 UNAUTHORIZED HTTP\uff08\u9519\u8bef\uff09\u72b6\u6001\u7801\u90fd\u5e94\u8fd4\u56de WWW-Authenticate \u54cd\u5e94\u5934\u3002 \u672c\u4f8b\u4e2d\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f Bearer Token\uff0c\u8be5\u54cd\u5e94\u5934\u7684\u503c\u5e94\u4e3a Bearer \u3002 \u5b9e\u9645\u4e0a\uff0c\u5ffd\u7565\u8fd9\u4e2a\u9644\u52a0\u54cd\u5e94\u5934\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u4e4b\u6240\u4ee5\u5728\u6b64\u63d0\u4f9b\u8fd9\u4e2a\u9644\u52a0\u54cd\u5e94\u5934\uff0c\u662f\u4e3a\u4e86\u7b26\u5408\u89c4\u8303\u7684\u8981\u6c42\u3002 \u8bf4\u4e0d\u5b9a\u4ec0\u4e48\u65f6\u5019\uff0c\u5c31\u6709\u5de5\u5177\u7528\u5f97\u4e0a\u5b83\uff0c\u800c\u4e14\uff0c\u5f00\u53d1\u8005\u6216\u7528\u6237\u4e5f\u53ef\u80fd\u7528\u5f97\u4e0a\u3002 \u8fd9\u5c31\u662f\u9075\u5faa\u6807\u51c6\u7684\u597d\u5904\u2026\u2026 \u5b9e\u9645\u6548\u679c \u00b6 \u6253\u5f00 API \u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002 \u8eab\u4efd\u9a8c\u8bc1 \u00b6 \u70b9\u51fb Authorize \u6309\u94ae\u3002 \u4f7f\u7528\u4ee5\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d\uff1a johndoe \u5bc6\u7801\uff1a secret \u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u540e\uff0c\u663e\u793a\u4e0b\u56fe\u6240\u793a\u7684\u5185\u5bb9\uff1a \u83b7\u53d6\u5f53\u524d\u7528\u6237\u6570\u636e \u00b6 \u4f7f\u7528 /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u63d0\u53d6\u7684\u5f53\u524d\u7528\u6237\u6570\u636e\u5982\u4e0b\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false , \"hashed_password\" : \"fakehashedsecret\" } \u70b9\u51fb\u5c0f\u9501\u56fe\u6807\uff0c\u6ce8\u9500\u540e\uff0c\u518d\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u5219\u4f1a\u5f97\u5230 HTTP 401 \u9519\u8bef\uff1a { \"detail\" : \"Not authenticated\" } \u672a\u6fc0\u6d3b\u7528\u6237 \u00b6 \u6d4b\u8bd5\u672a\u6fc0\u6d3b\u7528\u6237\uff0c\u8f93\u5165\u4ee5\u4e0b\u4fe1\u606f\uff0c\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff1a \u7528\u6237\u540d\uff1a alice \u5bc6\u7801\uff1a secret2 \u7136\u540e\uff0c\u6267\u884c /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u663e\u793a\u4e0b\u5217 \u672a\u6fc0\u6d3b\u7528\u6237 \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : \"Inactive user\" } \u5c0f\u7ed3 \u00b6 \u4f7f\u7528\u672c\u7ae0\u7684\u5de5\u5177\u5b9e\u73b0\u57fa\u4e8e username \u548c password \u7684\u5b8c\u6574 API \u5b89\u5168\u7cfb\u7edf\u3002 \u8fd9\u4e9b\u5de5\u5177\u8ba9\u5b89\u5168\u7cfb\u7edf\u517c\u5bb9\u4efb\u4f55\u6570\u636e\u5e93\u3001\u7528\u6237\u53ca\u6570\u636e\u6a21\u578b\u3002 \u53ea\u4e0d\u8fc7\uff0c\u5b83\u8fd8\u5e76\u4e0d\u662f\u771f\u7684 \u5b89\u5168 \u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c\u652f\u6301\u5e93\u4e0e JWT Token \u5b9e\u73b0\u771f\u6b63\u7684\u5b89\u5168\u673a\u5236\u3002","title":"OAuth2 \u5b9e\u73b0\u7b80\u5355\u7684 Password \u548c Bearer \u9a8c\u8bc1"},{"location":"tutorial/security/simple-oauth2/#oauth2-password-bearer","text":"\u672c\u7ae0\u6dfb\u52a0\u4e0a\u4e00\u7ae0\u793a\u4f8b\u4e2d\u6b20\u7f3a\u7684\u90e8\u5206\uff0c\u5b9e\u73b0\u5b8c\u6574\u7684\u5b89\u5168\u6d41\u3002","title":"OAuth2 \u5b9e\u73b0\u7b80\u5355\u7684 Password \u548c Bearer \u9a8c\u8bc1"},{"location":"tutorial/security/simple-oauth2/#username-password","text":"\u9996\u5148\uff0c\u4f7f\u7528 FastAPI \u5b89\u5168\u5de5\u5177\u83b7\u53d6 username \u548c password \u3002 OAuth2 \u89c4\u8303\u8981\u6c42\u4f7f\u7528 \u5bc6\u7801\u6d41 \u65f6\uff0c\u5ba2\u6237\u7aef\u6216\u7528\u6237\u5fc5\u987b\u4ee5\u8868\u5355\u6570\u636e\u5f62\u5f0f\u53d1\u9001 username \u548c password \u5b57\u6bb5\u3002 \u5e76\u4e14\uff0c\u8fd9\u4e24\u4e2a\u5b57\u6bb5\u5fc5\u987b\u547d\u540d\u4e3a username \u548c password \uff0c\u4e0d\u80fd\u4f7f\u7528 user-name \u6216 email \u7b49\u5176\u4ed6\u540d\u79f0\u3002 \u4e0d\u8fc7\u4e5f\u4e0d\u7528\u62c5\u5fc3\uff0c\u524d\u7aef\u4ecd\u53ef\u4ee5\u663e\u793a\u7ec8\u7aef\u7528\u6237\u6240\u9700\u7684\u540d\u79f0\u3002 \u6570\u636e\u5e93\u6a21\u578b\u4e5f\u53ef\u4ee5\u4f7f\u7528\u6240\u9700\u7684\u540d\u79f0\u3002 \u4f46\u5bf9\u4e8e\u767b\u5f55 \u8def\u5f84\u64cd\u4f5c \uff0c\u5219\u8981\u4f7f\u7528\u517c\u5bb9\u89c4\u8303\u7684 username \u548c password \uff0c\uff08\u4f8b\u5982\uff0c\u5b9e\u73b0\u4e0e API \u6587\u6863\u96c6\u6210\uff09\u3002 \u8be5\u89c4\u8303\u8981\u6c42\u5fc5\u987b\u4ee5\u8868\u5355\u6570\u636e\u5f62\u5f0f\u53d1\u9001 username \u548c password \uff0c\u56e0\u6b64\uff0c\u4e0d\u80fd\u4f7f\u7528 JSON \u5bf9\u8c61\u3002","title":"\u83b7\u53d6 username \u548c password"},{"location":"tutorial/security/simple-oauth2/#scope","text":"OAuth2 \u8fd8\u652f\u6301\u5ba2\u6237\u7aef\u53d1\u9001 scope \u8868\u5355\u5b57\u6bb5\u3002 \u867d\u7136\u8868\u5355\u5b57\u6bb5\u7684\u540d\u79f0\u662f scope \uff08\u5355\u6570\uff09\uff0c\u4f46\u5b9e\u9645\u4e0a\uff0c\u5b83\u662f\u4ee5\u7a7a\u683c\u5206\u9694\u7684\uff0c\u7531\u591a\u4e2a scope \u7ec4\u6210\u7684\u957f\u5b57\u7b26\u4e32\u3002 \u4f5c\u7528\u57df \u53ea\u662f\u4e0d\u5e26\u7a7a\u683c\u7684\u5b57\u7b26\u4e32\u3002 \u5e38\u7528\u4e8e\u58f0\u660e\u6307\u5b9a\u5b89\u5168\u6743\u9650\uff0c\u4f8b\u5982\uff1a \u5e38\u89c1\u7528\u4f8b\u4e3a\uff0c users:read \u6216 users:write \u3002 \u8138\u4e66\u548c Instagram \u4f7f\u7528 instagram_basic \u3002 \u8c37\u6b4c\u4f7f\u7528 https://www.googleapis.com/auth/drive \u3002 \u8bf4\u660e OAuth2 \u4e2d\uff0c \u4f5c\u7528\u57df \u53ea\u662f\u58f0\u660e\u6307\u5b9a\u6743\u9650\u7684\u5b57\u7b26\u4e32\u3002 \u662f\u5426\u4f7f\u7528\u5192\u53f7 : \u7b49\u7b26\u53f7\uff0c\u6216\u662f\u4e0d\u662f URL \u5e76\u4e0d\u91cd\u8981\u3002 \u8fd9\u4e9b\u7ec6\u8282\u53ea\u662f\u7279\u5b9a\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002 \u5bf9 OAuth2 \u6765\u8bf4\uff0c\u90fd\u53ea\u662f\u5b57\u7b26\u4e32\u800c\u5df2\u3002","title":"Scope\uff08\u4f5c\u7528\u57df\uff09"},{"location":"tutorial/security/simple-oauth2/#username-password_1","text":"\u63a5\u4e0b\u6765\uff0c\u4f7f\u7528 FastAPI \u5de5\u5177\u83b7\u53d6\u7528\u6237\u540d\u4e0e\u5bc6\u7801\u3002","title":"\u83b7\u53d6 username \u548c password \u7684\u4ee3\u7801"},{"location":"tutorial/security/simple-oauth2/#oauth2passwordrequestform","text":"\u9996\u5148\uff0c\u5bfc\u5165 OAuth2PasswordRequestForm \uff0c\u7136\u540e\uff0c\u5728 /token \u8def\u5f84\u64cd\u4f5c \u4e2d\uff0c\u7528 Depends \u628a\u8be5\u7c7b\u4f5c\u4e3a\u4f9d\u8d56\u9879\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user OAuth2PasswordRequestForm \u662f\u7528\u4ee5\u4e0b\u51e0\u9879\u5185\u5bb9\u58f0\u660e\u8868\u5355\u8bf7\u6c42\u4f53\u7684\u7c7b\u4f9d\u8d56\u9879\uff1a username password \u53ef\u9009\u7684 scope \u5b57\u6bb5\uff0c\u7531\u591a\u4e2a\u7a7a\u683c\u5206\u9694\u7684\u5b57\u7b26\u4e32\u7ec4\u6210\u7684\u957f\u5b57\u7b26\u4e32 \u53ef\u9009\u7684 grant_type \u63d0\u793a \u5b9e\u9645\u4e0a\uff0cOAuth2 \u89c4\u8303 \u8981\u6c42 grant_type \u5b57\u6bb5\u4f7f\u7528\u56fa\u5b9a\u503c password \uff0c\u4f46 OAuth2PasswordRequestForm \u6ca1\u6709\u4f5c\u5f3a\u5236\u7ea6\u675f\u3002 \u5982\u9700\u5f3a\u5236\u4f7f\u7528\u56fa\u5b9a\u503c password \uff0c\u5219\u4e0d\u8981\u7528 OAuth2PasswordRequestForm \uff0c\u800c\u662f\u7528 OAuth2PasswordRequestFormStrict \u3002 \u53ef\u9009\u7684 client_id \uff08\u672c\u4f8b\u672a\u4f7f\u7528\uff09\u3002 \u53ef\u9009\u7684 client_secret \uff08\u672c\u4f8b\u672a\u4f7f\u7528\uff09\u3002 \u8bf4\u660e OAuth2PasswordRequestForm \u4e0e OAuth2PasswordBearer \u4e00\u6837\uff0c\u90fd\u4e0d\u662f FastAPI \u7684\u7279\u6b8a\u7c7b\u3002 FastAPI \u628a OAuth2PasswordBearer \u8bc6\u522b\u4e3a\u5b89\u5168\u65b9\u6848\u3002\u56e0\u6b64\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\u628a\u5b83\u6dfb\u52a0\u81f3 OpenAPI\u3002 \u4f46 OAuth2PasswordRequestForm \u53ea\u662f\u53ef\u4ee5\u81ea\u884c\u7f16\u5199\u7684\u7c7b\u4f9d\u8d56\u9879\uff0c\u4e5f\u53ef\u4ee5\u76f4\u63a5\u58f0\u660e Form \u53c2\u6570\u3002 \u4f46\u7531\u4e8e\u8fd9\u79cd\u7528\u4f8b\u5f88\u5e38\u89c1\uff0cFastAPI \u4e3a\u4e86\u7b80\u4fbf\uff0c\u5c31\u76f4\u63a5\u63d0\u4f9b\u4e86\u5bf9\u5b83\u7684\u652f\u6301\u3002","title":"OAuth2PasswordRequestForm"},{"location":"tutorial/security/simple-oauth2/#_1","text":"\u63d0\u793a OAuth2PasswordRequestForm \u7c7b\u4f9d\u8d56\u9879\u7684\u5b9e\u4f8b\u6ca1\u6709\u4ee5\u7a7a\u683c\u5206\u9694\u7684\u957f\u5b57\u7b26\u4e32\u5c5e\u6027 scope \uff0c\u4f46\u5b83\u652f\u6301 scopes \u5c5e\u6027\uff0c\u7531\u5df2\u53d1\u9001\u7684 scope \u5b57\u7b26\u4e32\u5217\u8868\u7ec4\u6210\u3002 \u672c\u4f8b\u6ca1\u6709\u4f7f\u7528 scopes \uff0c\u4f46\u5f00\u53d1\u8005\u4e5f\u53ef\u4ee5\u6839\u636e\u9700\u8981\u4f7f\u7528\u8be5\u5c5e\u6027\u3002 \u73b0\u5728\uff0c\u5373\u53ef\u4f7f\u7528\u8868\u5355\u5b57\u6bb5 username \uff0c\u4ece\uff08\u4f2a\uff09\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u7528\u6237\u6570\u636e\u3002 \u5982\u679c\u4e0d\u5b58\u5728\u6307\u5b9a\u7528\u6237\uff0c\u5219\u8fd4\u56de\u9519\u8bef\u6d88\u606f\uff0c\u63d0\u793a \u7528\u6237\u540d\u6216\u5bc6\u7801\u9519\u8bef \u3002 \u672c\u4f8b\u4f7f\u7528 HTTPException \u5f02\u5e38\u663e\u793a\u6b64\u9519\u8bef\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user","title":"\u4f7f\u7528\u8868\u5355\u6570\u636e"},{"location":"tutorial/security/simple-oauth2/#_2","text":"\u81f3\u6b64\uff0c\u6211\u4eec\u5df2\u7ecf\u4ece\u6570\u636e\u5e93\u4e2d\u83b7\u53d6\u4e86\u7528\u6237\u6570\u636e\uff0c\u4f46\u5c1a\u672a\u6821\u9a8c\u5bc6\u7801\u3002 \u63a5\u4e0b\u6765\uff0c\u9996\u5148\u628a\u6570\u636e\u653e\u5165 Pydantic \u7684 UserInDB \u6a21\u578b\u3002 \u6ce8\u610f\uff1a\u6c38\u8fdc\u4e0d\u8981\u4fdd\u5b58\u660e\u6587\u5bc6\u7801\uff0c\u672c\u4f8b\u6682\u65f6\u5148\u4f7f\u7528\uff08\u4f2a\uff09\u54c8\u5e0c\u5bc6\u7801\u7cfb\u7edf\u3002 \u5982\u679c\u5bc6\u7801\u4e0d\u5339\u914d\uff0c\u5219\u8fd4\u56de\u4e0e\u4e0a\u9762\u76f8\u540c\u7684\u9519\u8bef\u3002","title":"\u6821\u9a8c\u5bc6\u7801"},{"location":"tutorial/security/simple-oauth2/#_3","text":"\u54c8\u5e0c \u662f\u6307\uff0c\u628a\u6307\u5b9a\u5185\u5bb9\uff08\u672c\u4f8b\u4e2d\u4e3a\u5bc6\u7801\uff09\u8f6c\u6362\u4e3a\u5f62\u4f3c\u4e71\u7801\u7684\u5b57\u8282\u5e8f\u5217\uff08\u5176\u5b9e\u5c31\u662f\u5b57\u7b26\u4e32\uff09\u3002 \u6bcf\u6b21\u4f20\u5165\u5b8c\u5168\u76f8\u540c\u7684\u5185\u5bb9\uff08\u6bd4\u5982\uff0c\u5b8c\u5168\u76f8\u540c\u7684\u5bc6\u7801\uff09\u65f6\uff0c\u5f97\u5230\u7684\u90fd\u662f\u5b8c\u5168\u76f8\u540c\u7684\u4e71\u7801\u3002 \u4f46\u8fd9\u4e2a\u4e71\u7801\u65e0\u6cd5\u8f6c\u6362\u56de\u4f20\u5165\u7684\u5bc6\u7801\u3002","title":"\u5bc6\u7801\u54c8\u5e0c"},{"location":"tutorial/security/simple-oauth2/#_4","text":"\u539f\u56e0\u5f88\u7b80\u5355\u3002\u5982\u679c\u6570\u636e\u5e93\u88ab\u76d7\uff0c\u7a83\u8d3c\u65e0\u6cd5\u83b7\u53d6\u7528\u6237\u7684\u660e\u6587\u5bc6\u7801\uff0c\u5f97\u5230\u7684\u53ea\u662f\u54c8\u5e0c\u503c\u3002 \u8fd9\u6837\u4e00\u6765\uff0c\u7a83\u8d3c\u5c31\u65e0\u6cd5\u5728\u5176\u4ed6\u5e94\u7528\u4e2d\u4f7f\u7528\u7a83\u53d6\u7684\u5bc6\u7801\uff0c\u8981\u77e5\u9053\uff0c\u5f88\u591a\u7528\u6237\u5728\u6240\u6709\u7cfb\u7edf\u4e2d\u90fd\u4f7f\u7528\u76f8\u540c\u7684\u5bc6\u7801\uff0c\u98ce\u9669\u8d85\u5927\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user","title":"\u4e3a\u4ec0\u4e48\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c"},{"location":"tutorial/security/simple-oauth2/#user_dict","text":"UserInDB(**user_dict) \u662f\u6307\uff1a \u76f4\u63a5\u628a user_dict \u7684\u952e\u4e0e\u503c\u5f53\u4f5c\u5173\u952e\u5b57\u53c2\u6570\u4f20\u9012\uff0c\u7b49\u6548\u4e8e \uff1a UserInDB ( username = user_dict [ \"username\" ], email = user_dict [ \"email\" ], full_name = user_dict [ \"full_name\" ], disabled = user_dict [ \"disabled\" ], hashed_password = user_dict [ \"hashed_password\" ], ) \u8bf4\u660e user_dict \u7684\u8bf4\u660e\uff0c\u8be6\u89c1 \u66f4\u591a\u6a21\u578b \u4e00\u7ae0 \u3002","title":"\u5173\u4e8e **user_dict"},{"location":"tutorial/security/simple-oauth2/#token","text":"token \u7aef\u70b9\u7684\u54cd\u5e94\u5fc5\u987b\u662f JSON \u5bf9\u8c61\u3002 \u54cd\u5e94\u8fd4\u56de\u7684\u5185\u5bb9\u5e94\u8be5\u5305\u542b token_type \u3002\u672c\u4f8b\u4e2d\u7528\u7684\u662f Bearer Token\uff0c\u56e0\u6b64\uff0c Token \u7c7b\u578b\u5e94\u4e3a bearer \u3002 \u8fd4\u56de\u5185\u5bb9\u8fd8\u5e94\u5305\u542b access_token \u5b57\u6bb5\uff0c\u5b83\u662f\u5305\u542b\u6743\u9650 Token \u7684\u5b57\u7b26\u4e32\u3002 \u672c\u4f8b\u53ea\u662f\u7b80\u5355\u7684\u6f14\u793a\uff0c\u8fd4\u56de\u7684 Token \u5c31\u662f username \uff0c\u4f46\u8fd9\u79cd\u65b9\u5f0f\u6781\u4e0d\u5b89\u5168\u3002 \u63d0\u793a \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u4f7f\u7528\u54c8\u5e0c\u5bc6\u7801\u548c JWT Token \u7684\u771f\u6b63\u5b89\u5168\u673a\u5236\u3002 \u4f46\u73b0\u5728\uff0c\u4ec5\u5173\u6ce8\u6240\u9700\u7684\u7279\u5b9a\u7ec6\u8282\u3002 Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u63d0\u793a \u6309\u89c4\u8303\u7684\u8981\u6c42\uff0c\u5e94\u50cf\u672c\u793a\u4f8b\u4e00\u6837\uff0c\u8fd4\u56de\u5e26\u6709 access_token \u548c token_type \u7684 JSON \u5bf9\u8c61\u3002 \u8fd9\u662f\u5f00\u53d1\u8005\u5fc5\u987b\u5728\u4ee3\u7801\u4e2d\u81ea\u884c\u5b8c\u6210\u7684\u5de5\u4f5c\uff0c\u5e76\u4e14\u8981\u786e\u4fdd\u4f7f\u7528\u8fd9\u4e9b JSON \u7684\u952e\u3002 \u8fd9\u51e0\u4e4e\u662f\u552f\u4e00\u9700\u8981\u5f00\u53d1\u8005\u7262\u8bb0\u5728\u5fc3\uff0c\u5e76\u6309\u89c4\u8303\u8981\u6c42\u6b63\u786e\u6267\u884c\u7684\u4e8b\u3002 FastAPI \u5219\u8d1f\u8d23\u5904\u7406\u5176\u4ed6\u7684\u5de5\u4f5c\u3002","title":"\u8fd4\u56de Token"},{"location":"tutorial/security/simple-oauth2/#_5","text":"\u63a5\u4e0b\u6765\uff0c\u66f4\u65b0\u4f9d\u8d56\u9879\u3002 \u8ba9\u5b83\u4ec5\u5728\u5f53\u524d\u7528\u6237\u4e3a\u6fc0\u6d3b\u72b6\u6001\u65f6\u624d\u80fd\u83b7\u53d6 current_user \u3002 \u4e3a\u6b64\uff0c\u8981\u518d\u521b\u5efa\u4e00\u4e2a\u4f9d\u8d56\u9879 get_current_active_user \uff0c\u6b64\u4f9d\u8d56\u9879\u4ee5 get_current_user \u4f9d\u8d56\u9879\u4e3a\u57fa\u7840\u3002 \u5982\u679c\u7528\u6237\u4e0d\u5b58\u5728\uff0c\u6216\u72b6\u6001\u4e3a\u672a\u6fc0\u6d3b\uff0c\u8fd9\u4e24\u4e2a\u4f9d\u8d56\u9879\u90fd\u8fd4\u56de HTTP \u9519\u8bef\u3002 \u56e0\u6b64\uff0c\u5728\u7aef\u70b9\u4e2d\uff0c\u53ea\u6709\u5f53\u7528\u6237\u5b58\u5728\u3001\u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u3001\u4e14\u72b6\u6001\u4e3a\u6fc0\u6d3b\u65f6\uff0c\u624d\u80fd\u63d0\u53d6\u8be5\u7528\u6237\uff1a Python 3.6 and above Python 3.10 and above from typing import Union from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : Union [ str , None ] = None full_name : Union [ str , None ] = None disabled : Union [ bool , None ] = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user from fastapi import Depends , FastAPI , HTTPException , status from fastapi.security import OAuth2PasswordBearer , OAuth2PasswordRequestForm from pydantic import BaseModel fake_users_db = { \"johndoe\" : { \"username\" : \"johndoe\" , \"full_name\" : \"John Doe\" , \"email\" : \"johndoe@example.com\" , \"hashed_password\" : \"fakehashedsecret\" , \"disabled\" : False , }, \"alice\" : { \"username\" : \"alice\" , \"full_name\" : \"Alice Wonderson\" , \"email\" : \"alice@example.com\" , \"hashed_password\" : \"fakehashedsecret2\" , \"disabled\" : True , }, } app = FastAPI () def fake_hash_password ( password : str ): return \"fakehashed\" + password oauth2_scheme = OAuth2PasswordBearer ( tokenUrl = \"token\" ) class User ( BaseModel ): username : str email : str | None = None full_name : str | None = None disabled : bool | None = None class UserInDB ( User ): hashed_password : str def get_user ( db , username : str ): if username in db : user_dict = db [ username ] return UserInDB ( ** user_dict ) def fake_decode_token ( token ): # This doesn't provide any security at all # Check the next version user = get_user ( fake_users_db , token ) return user async def get_current_user ( token : str = Depends ( oauth2_scheme )): user = fake_decode_token ( token ) if not user : raise HTTPException ( status_code = status . HTTP_401_UNAUTHORIZED , detail = \"Invalid authentication credentials\" , headers = { \"WWW-Authenticate\" : \"Bearer\" }, ) return user async def get_current_active_user ( current_user : User = Depends ( get_current_user )): if current_user . disabled : raise HTTPException ( status_code = 400 , detail = \"Inactive user\" ) return current_user @app . post ( \"/token\" ) async def login ( form_data : OAuth2PasswordRequestForm = Depends ()): user_dict = fake_users_db . get ( form_data . username ) if not user_dict : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) user = UserInDB ( ** user_dict ) hashed_password = fake_hash_password ( form_data . password ) if not hashed_password == user . hashed_password : raise HTTPException ( status_code = 400 , detail = \"Incorrect username or password\" ) return { \"access_token\" : user . username , \"token_type\" : \"bearer\" } @app . get ( \"/users/me\" ) async def read_users_me ( current_user : User = Depends ( get_current_active_user )): return current_user \u8bf4\u660e \u6b64\u5904\u8fd4\u56de\u503c\u4e3a Bearer \u7684\u54cd\u5e94\u5934 WWW-Authenticate \u4e5f\u662f\u89c4\u8303\u7684\u4e00\u90e8\u5206\u3002 \u4efb\u4f55 401 UNAUTHORIZED HTTP\uff08\u9519\u8bef\uff09\u72b6\u6001\u7801\u90fd\u5e94\u8fd4\u56de WWW-Authenticate \u54cd\u5e94\u5934\u3002 \u672c\u4f8b\u4e2d\uff0c\u56e0\u4e3a\u4f7f\u7528\u7684\u662f Bearer Token\uff0c\u8be5\u54cd\u5e94\u5934\u7684\u503c\u5e94\u4e3a Bearer \u3002 \u5b9e\u9645\u4e0a\uff0c\u5ffd\u7565\u8fd9\u4e2a\u9644\u52a0\u54cd\u5e94\u5934\uff0c\u4e5f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u95ee\u9898\u3002 \u4e4b\u6240\u4ee5\u5728\u6b64\u63d0\u4f9b\u8fd9\u4e2a\u9644\u52a0\u54cd\u5e94\u5934\uff0c\u662f\u4e3a\u4e86\u7b26\u5408\u89c4\u8303\u7684\u8981\u6c42\u3002 \u8bf4\u4e0d\u5b9a\u4ec0\u4e48\u65f6\u5019\uff0c\u5c31\u6709\u5de5\u5177\u7528\u5f97\u4e0a\u5b83\uff0c\u800c\u4e14\uff0c\u5f00\u53d1\u8005\u6216\u7528\u6237\u4e5f\u53ef\u80fd\u7528\u5f97\u4e0a\u3002 \u8fd9\u5c31\u662f\u9075\u5faa\u6807\u51c6\u7684\u597d\u5904\u2026\u2026","title":"\u66f4\u65b0\u4f9d\u8d56\u9879"},{"location":"tutorial/security/simple-oauth2/#_6","text":"\u6253\u5f00 API \u6587\u6863\uff1a http://127.0.0.1:8000/docs \u3002","title":"\u5b9e\u9645\u6548\u679c"},{"location":"tutorial/security/simple-oauth2/#_7","text":"\u70b9\u51fb Authorize \u6309\u94ae\u3002 \u4f7f\u7528\u4ee5\u4e0b\u51ed\u8bc1\uff1a \u7528\u6237\u540d\uff1a johndoe \u5bc6\u7801\uff1a secret \u901a\u8fc7\u8eab\u4efd\u9a8c\u8bc1\u540e\uff0c\u663e\u793a\u4e0b\u56fe\u6240\u793a\u7684\u5185\u5bb9\uff1a","title":"\u8eab\u4efd\u9a8c\u8bc1"},{"location":"tutorial/security/simple-oauth2/#_8","text":"\u4f7f\u7528 /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u63d0\u53d6\u7684\u5f53\u524d\u7528\u6237\u6570\u636e\u5982\u4e0b\uff1a { \"username\" : \"johndoe\" , \"email\" : \"johndoe@example.com\" , \"full_name\" : \"John Doe\" , \"disabled\" : false , \"hashed_password\" : \"fakehashedsecret\" } \u70b9\u51fb\u5c0f\u9501\u56fe\u6807\uff0c\u6ce8\u9500\u540e\uff0c\u518d\u6267\u884c\u540c\u6837\u7684\u64cd\u4f5c\uff0c\u5219\u4f1a\u5f97\u5230 HTTP 401 \u9519\u8bef\uff1a { \"detail\" : \"Not authenticated\" }","title":"\u83b7\u53d6\u5f53\u524d\u7528\u6237\u6570\u636e"},{"location":"tutorial/security/simple-oauth2/#_9","text":"\u6d4b\u8bd5\u672a\u6fc0\u6d3b\u7528\u6237\uff0c\u8f93\u5165\u4ee5\u4e0b\u4fe1\u606f\uff0c\u8fdb\u884c\u8eab\u4efd\u9a8c\u8bc1\uff1a \u7528\u6237\u540d\uff1a alice \u5bc6\u7801\uff1a secret2 \u7136\u540e\uff0c\u6267\u884c /users/me \u8def\u5f84\u7684 GET \u64cd\u4f5c\u3002 \u663e\u793a\u4e0b\u5217 \u672a\u6fc0\u6d3b\u7528\u6237 \u9519\u8bef\u4fe1\u606f\uff1a { \"detail\" : \"Inactive user\" }","title":"\u672a\u6fc0\u6d3b\u7528\u6237"},{"location":"tutorial/security/simple-oauth2/#_10","text":"\u4f7f\u7528\u672c\u7ae0\u7684\u5de5\u5177\u5b9e\u73b0\u57fa\u4e8e username \u548c password \u7684\u5b8c\u6574 API \u5b89\u5168\u7cfb\u7edf\u3002 \u8fd9\u4e9b\u5de5\u5177\u8ba9\u5b89\u5168\u7cfb\u7edf\u517c\u5bb9\u4efb\u4f55\u6570\u636e\u5e93\u3001\u7528\u6237\u53ca\u6570\u636e\u6a21\u578b\u3002 \u53ea\u4e0d\u8fc7\uff0c\u5b83\u8fd8\u5e76\u4e0d\u662f\u771f\u7684 \u5b89\u5168 \u3002 \u4e0b\u4e00\u7ae0\u4ecb\u7ecd\u4f7f\u7528\u5bc6\u7801\u54c8\u5e0c\u652f\u6301\u5e93\u4e0e JWT Token \u5b9e\u73b0\u771f\u6b63\u7684\u5b89\u5168\u673a\u5236\u3002","title":"\u5c0f\u7ed3"}]}